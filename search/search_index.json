{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Stack Pub \u00b6 Stack Pub(\u5806\u6808\u9152\u9986) \u662f\u8ba1\u7b97\u673a\u8f6f\u4ef6\u5f00\u53d1\u76f8\u5173\u7684NoteBook\uff0c\u4e3b\u8981\u5305\u62ec\u540e\u7aef\u5f00\u53d1\u4e0e\u6e38\u620f\u5f00\u53d1\u65b9\u9762\u76f8\u5173\u77e5\u8bc6\u3002 \u672cBlog\u53d7 OI Wiki \u7684\u542f\u53d1\uff0c\u57fa\u4e8e mkdocs-material \u642d\u5efa\uff0c\u4f7f\u7528 Gitalk \u8bc4\u8bba\u7cfb\u7edf\uff0c\u6258\u7ba1\u4e8e Github \u5e73\u53f0\u3002 Material color palette \u989c\u8272\u4e3b\u9898 \u00b6 \u9ed8\u8ba4\u4e3b\u9898\u4e3a Indigo \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Pink Deep Purple Indigo Blue Light Blue Cyan Green Deep Orange White Blue Grey var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) blogroll radaren \u2122 StackHarbor \u2122 iimt \u2122 bye \u6211\u662f\u6211\u4e4b\u6240\u6709\u56e0\u679c\u4e4b\u6307\u5411\u3002\u00ae\u2122","title":"Hello Wolrd"},{"location":"#stack-pub","text":"Stack Pub(\u5806\u6808\u9152\u9986) \u662f\u8ba1\u7b97\u673a\u8f6f\u4ef6\u5f00\u53d1\u76f8\u5173\u7684NoteBook\uff0c\u4e3b\u8981\u5305\u62ec\u540e\u7aef\u5f00\u53d1\u4e0e\u6e38\u620f\u5f00\u53d1\u65b9\u9762\u76f8\u5173\u77e5\u8bc6\u3002 \u672cBlog\u53d7 OI Wiki \u7684\u542f\u53d1\uff0c\u57fa\u4e8e mkdocs-material \u642d\u5efa\uff0c\u4f7f\u7528 Gitalk \u8bc4\u8bba\u7cfb\u7edf\uff0c\u6258\u7ba1\u4e8e Github \u5e73\u53f0\u3002","title":"Stack Pub"},{"location":"#material-color-palette","text":"\u9ed8\u8ba4\u4e3b\u9898\u4e3a Indigo \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Pink Deep Purple Indigo Blue Light Blue Cyan Green Deep Orange White Blue Grey var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) blogroll radaren \u2122 StackHarbor \u2122 iimt \u2122 bye \u6211\u662f\u6211\u4e4b\u6240\u6709\u56e0\u679c\u4e4b\u6307\u5411\u3002\u00ae\u2122","title":"Material color palette \u989c\u8272\u4e3b\u9898"},{"location":"algorithm/algo_pattern/","text":"\u6734\u7d20\u5339\u914d \u00b6 KMP \u00b6 BM \u00b6 AC\u81ea\u52a8\u673a \u00b6 \u591a\u6b21\u641c\u7d22 \u00b6 \u6a21\u7cca\u5339\u914d \u00b6","title":"\u6a21\u5f0f\u5339\u914d"},{"location":"algorithm/algo_pattern/#_1","text":"","title":"\u6734\u7d20\u5339\u914d"},{"location":"algorithm/algo_pattern/#kmp","text":"","title":"KMP"},{"location":"algorithm/algo_pattern/#bm","text":"","title":"BM"},{"location":"algorithm/algo_pattern/#ac","text":"","title":"AC\u81ea\u52a8\u673a"},{"location":"algorithm/algo_pattern/#_2","text":"","title":"\u591a\u6b21\u641c\u7d22"},{"location":"algorithm/algo_pattern/#_3","text":"","title":"\u6a21\u7cca\u5339\u914d"},{"location":"algorithm/algo_sort/","text":"\u57fa\u672c\u6392\u5e8f \u00b6 \u51b3\u7b56\u6811 \u00b6 \u9ad8\u6548\u6392\u5e8f \u00b6","title":"\u52a8\u6001\u89c4\u5212"},{"location":"algorithm/algo_sort/#_1","text":"","title":"\u57fa\u672c\u6392\u5e8f"},{"location":"algorithm/algo_sort/#_2","text":"","title":"\u51b3\u7b56\u6811"},{"location":"algorithm/algo_sort/#_3","text":"","title":"\u9ad8\u6548\u6392\u5e8f"},{"location":"algorithm/struct_graph/","text":"\u6700\u5c0f\u751f\u6210\u6811 \u00b6 \u6700\u77ed\u8def\u5f84 \u00b6 \u62d3\u6251\u6392\u5e8f \u00b6","title":"\u56fe"},{"location":"algorithm/struct_graph/#_1","text":"","title":"\u6700\u5c0f\u751f\u6210\u6811"},{"location":"algorithm/struct_graph/#_2","text":"","title":"\u6700\u77ed\u8def\u5f84"},{"location":"algorithm/struct_graph/#_3","text":"","title":"\u62d3\u6251\u6392\u5e8f"},{"location":"algorithm/struct_linkedlist/","text":"\u5355\u5411\u94fe\u8868 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u00b6 \u94fe\u5f0f\u5b58\u50a8 \u00b6 \u53cc\u5411\u94fe\u8868 \u00b6 \u5faa\u73af\u94fe\u8868 \u00b6 \u7ea6\u745f\u592b\u73af \u00b6 \u8df3\u8dc3\u8868(Skip list) \u00b6 \u81ea\u7ec4\u7ec7\u94fe\u8868 \u00b6 \u7a00\u758f\u8868 \u00b6 \u6a21\u677f\u5e93\u4e2d\u7684\u94fe\u8868 \u00b6","title":"\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_1","text":"","title":"\u5355\u5411\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_2","text":"","title":"\u987a\u5e8f\u5b58\u50a8"},{"location":"algorithm/struct_linkedlist/#_3","text":"","title":"\u94fe\u5f0f\u5b58\u50a8"},{"location":"algorithm/struct_linkedlist/#_4","text":"","title":"\u53cc\u5411\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_5","text":"","title":"\u5faa\u73af\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_6","text":"","title":"\u7ea6\u745f\u592b\u73af"},{"location":"algorithm/struct_linkedlist/#skip-list","text":"","title":"\u8df3\u8dc3\u8868(Skip list)"},{"location":"algorithm/struct_linkedlist/#_7","text":"","title":"\u81ea\u7ec4\u7ec7\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_8","text":"","title":"\u7a00\u758f\u8868"},{"location":"algorithm/struct_linkedlist/#_9","text":"","title":"\u6a21\u677f\u5e93\u4e2d\u7684\u94fe\u8868"},{"location":"algorithm/struct_stack_queue/","text":"\u6808 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u00b6 \u94fe\u5f0f\u5b58\u50a8 \u00b6 \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f \u00b6 \u961f\u5217 \u00b6 \u987a\u5e8f\u961f\u5217 \u00b6 \u94fe\u5f0f\u961f\u5217 \u00b6 \u5faa\u73af\u961f\u5217 \u00b6 \u4f18\u5148\u961f\u5217 \u00b6","title":"\u6808\u4e0e\u961f\u5217"},{"location":"algorithm/struct_stack_queue/#_1","text":"","title":"\u6808"},{"location":"algorithm/struct_stack_queue/#_2","text":"","title":"\u987a\u5e8f\u5b58\u50a8"},{"location":"algorithm/struct_stack_queue/#_3","text":"","title":"\u94fe\u5f0f\u5b58\u50a8"},{"location":"algorithm/struct_stack_queue/#_4","text":"","title":"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f"},{"location":"algorithm/struct_stack_queue/#_5","text":"","title":"\u961f\u5217"},{"location":"algorithm/struct_stack_queue/#_6","text":"","title":"\u987a\u5e8f\u961f\u5217"},{"location":"algorithm/struct_stack_queue/#_7","text":"","title":"\u94fe\u5f0f\u961f\u5217"},{"location":"algorithm/struct_stack_queue/#_8","text":"","title":"\u5faa\u73af\u961f\u5217"},{"location":"algorithm/struct_stack_queue/#_9","text":"","title":"\u4f18\u5148\u961f\u5217"},{"location":"algorithm/struct_tree/","text":"\u4e8c\u53c9\u6811 \u00b6 \ud83c\udf32\u7684\u904d\u5386 \u00b6 \u6811\u7684\u5e73\u8861 \u00b6 \u5806 \u00b6 treap\u6811 \u00b6 k-d\u6811 \u00b6 \u970d\u592b\u66fc\u6811 \u00b6 b\u6811 \u00b6 trie\u6811 \u00b6 \u54c8\u5e0c\u8868 \u00b6","title":"\u6811\ud83c\udf32"},{"location":"algorithm/struct_tree/#_1","text":"","title":"\u4e8c\u53c9\u6811"},{"location":"algorithm/struct_tree/#_2","text":"","title":"\ud83c\udf32\u7684\u904d\u5386"},{"location":"algorithm/struct_tree/#_3","text":"","title":"\u6811\u7684\u5e73\u8861"},{"location":"algorithm/struct_tree/#_4","text":"","title":"\u5806"},{"location":"algorithm/struct_tree/#treap","text":"","title":"treap\u6811"},{"location":"algorithm/struct_tree/#k-d","text":"","title":"k-d\u6811"},{"location":"algorithm/struct_tree/#_5","text":"","title":"\u970d\u592b\u66fc\u6811"},{"location":"algorithm/struct_tree/#b","text":"","title":"b\u6811"},{"location":"algorithm/struct_tree/#trie","text":"","title":"trie\u6811"},{"location":"algorithm/struct_tree/#_6","text":"","title":"\u54c8\u5e0c\u8868"},{"location":"cplus/cpp_base/","text":"C++\u57fa\u7840 \u00b6 \u7f16\u8bd1\u8fd0\u884c \u00b6 1 2 gcc main.cc -lstdc++ g++ main.cc namesapce \u00b6 1 2 3 4 5 namespace name{ //variables, functions, classes } using name::xxx; const \u00b6 C\u8bed\u8a00\u5bf9 const \u7684\u5904\u7406\u548c\u666e\u901a\u53d8\u91cf\u4e00\u6837\uff0c\u4f1a\u5230\u5185\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\uff1bC++ \u5bf9 const \u7684\u5904\u7406\u66f4\u50cf\u662f\u7f16\u8bd1\u65f6\u671f\u7684#define\uff0c\u662f\u4e00\u4e2a\u503c\u66ff\u6362\u7684\u8fc7\u7a0b\u3002 C\u548cC++\u4e2d\u5168\u5c40 const \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u76f8\u540c\uff0c\u90fd\u662f\u5f53\u524d\u6587\u4ef6\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4eec\u7684\u53ef\u89c1\u8303\u56f4\uff1aC\u8bed\u8a00\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u58f0\u660e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\uff1b\u800cC++\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u4ec5\u9650\u4e8e\u5f53\u524d\u6587\u4ef6\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4e0d\u53ef\u89c1\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u591a\u6b21\u5f15\u5165\u540e\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002 inline\u5185\u8054\u51fd\u6570 \u00b6 \u5728\u51fd\u6570\u5b9a\u4e49\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\uff0c\u5728\u51fd\u6570\u58f0\u660e\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\u867d\u7136\u6ca1\u6709\u9519\uff0c\u4f46\u8fd9\u79cd\u505a\u6cd5\u662f\u65e0\u6548\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u51fd\u6570\u58f0\u660e\u5904\u7684 inline \u5173\u952e\u5b57\u3002 \u5728\u591a\u6587\u4ef6\u7f16\u7a0b\u65f6\uff0c\u5efa\u8bae\u5c06\u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u76f4\u63a5\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u7981\u7528\u5185\u8054\u51fd\u6570\u7684\u58f0\u660e\u3002 \u51fd\u6570\u9ed8\u8ba4\u53c2\u6570 \u00b6 C++\u89c4\u5b9a\uff0c\u9ed8\u8ba4\u53c2\u6570\u53ea\u80fd\u653e\u5728\u5f62\u53c2\u5217\u8868\u7684\u6700\u540e\uff0c\u800c\u4e14\u4e00\u65e6\u4e3a\u67d0\u4e2a\u5f62\u53c2\u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u7684\u6240\u6709\u5f62\u53c2\u90fd\u5fc5\u987b\u6709\u9ed8\u8ba4\u503c\u3002 \u8fd9\u662f\u56e0\u4e3aC++ \u89c4\u5b9a\uff0c\u5728\u7ed9\u5b9a\u7684\u4f5c\u7528\u57df\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u6b21\u9ed8\u8ba4\u53c2\u6570\u3002\uff08\u540c\u4e00\u6e90\u6587\u4ef6\u5185\u5b9a\u4e49+\u58f0\u660e\u5e26\u9ed8\u8ba4\u53c2\u6570\u4f1a\u62a5\u9519\uff09 \u91cd\u8f7d \u00b6 \u51fd\u6570\u91cd\u8f7d\uff1a\u51fd\u6570\u540d\u5b57\u76f8\u540c\uff0c\u6570\u5217\u8868\u4e0d\u540c\uff08\u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\uff09\u3002\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u76f8\u540c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u4ec5\u4ec5\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u4e0d\u8db3\u4ee5\u6210\u4e3a\u51fd\u6570\u7684\u91cd\u8f7d\u3002 \u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\u3002 \u6ce8\u610f\u7c7b\u578b\u8f6c\u6362\u4e0e\u4e8c\u4e49\u6027","title":"C++\u57fa\u7840"},{"location":"cplus/cpp_base/#c","text":"","title":"C++\u57fa\u7840"},{"location":"cplus/cpp_base/#_1","text":"1 2 gcc main.cc -lstdc++ g++ main.cc","title":"\u7f16\u8bd1\u8fd0\u884c"},{"location":"cplus/cpp_base/#namesapce","text":"1 2 3 4 5 namespace name{ //variables, functions, classes } using name::xxx;","title":"namesapce"},{"location":"cplus/cpp_base/#const","text":"C\u8bed\u8a00\u5bf9 const \u7684\u5904\u7406\u548c\u666e\u901a\u53d8\u91cf\u4e00\u6837\uff0c\u4f1a\u5230\u5185\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\uff1bC++ \u5bf9 const \u7684\u5904\u7406\u66f4\u50cf\u662f\u7f16\u8bd1\u65f6\u671f\u7684#define\uff0c\u662f\u4e00\u4e2a\u503c\u66ff\u6362\u7684\u8fc7\u7a0b\u3002 C\u548cC++\u4e2d\u5168\u5c40 const \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u76f8\u540c\uff0c\u90fd\u662f\u5f53\u524d\u6587\u4ef6\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4eec\u7684\u53ef\u89c1\u8303\u56f4\uff1aC\u8bed\u8a00\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u58f0\u660e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\uff1b\u800cC++\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u4ec5\u9650\u4e8e\u5f53\u524d\u6587\u4ef6\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4e0d\u53ef\u89c1\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u591a\u6b21\u5f15\u5165\u540e\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002","title":"const"},{"location":"cplus/cpp_base/#inline","text":"\u5728\u51fd\u6570\u5b9a\u4e49\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\uff0c\u5728\u51fd\u6570\u58f0\u660e\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\u867d\u7136\u6ca1\u6709\u9519\uff0c\u4f46\u8fd9\u79cd\u505a\u6cd5\u662f\u65e0\u6548\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u51fd\u6570\u58f0\u660e\u5904\u7684 inline \u5173\u952e\u5b57\u3002 \u5728\u591a\u6587\u4ef6\u7f16\u7a0b\u65f6\uff0c\u5efa\u8bae\u5c06\u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u76f4\u63a5\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u7981\u7528\u5185\u8054\u51fd\u6570\u7684\u58f0\u660e\u3002","title":"inline\u5185\u8054\u51fd\u6570"},{"location":"cplus/cpp_base/#_2","text":"C++\u89c4\u5b9a\uff0c\u9ed8\u8ba4\u53c2\u6570\u53ea\u80fd\u653e\u5728\u5f62\u53c2\u5217\u8868\u7684\u6700\u540e\uff0c\u800c\u4e14\u4e00\u65e6\u4e3a\u67d0\u4e2a\u5f62\u53c2\u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u7684\u6240\u6709\u5f62\u53c2\u90fd\u5fc5\u987b\u6709\u9ed8\u8ba4\u503c\u3002 \u8fd9\u662f\u56e0\u4e3aC++ \u89c4\u5b9a\uff0c\u5728\u7ed9\u5b9a\u7684\u4f5c\u7528\u57df\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u6b21\u9ed8\u8ba4\u53c2\u6570\u3002\uff08\u540c\u4e00\u6e90\u6587\u4ef6\u5185\u5b9a\u4e49+\u58f0\u660e\u5e26\u9ed8\u8ba4\u53c2\u6570\u4f1a\u62a5\u9519\uff09","title":"\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570"},{"location":"cplus/cpp_base/#_3","text":"\u51fd\u6570\u91cd\u8f7d\uff1a\u51fd\u6570\u540d\u5b57\u76f8\u540c\uff0c\u6570\u5217\u8868\u4e0d\u540c\uff08\u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\uff09\u3002\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u76f8\u540c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u4ec5\u4ec5\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u4e0d\u8db3\u4ee5\u6210\u4e3a\u51fd\u6570\u7684\u91cd\u8f7d\u3002 \u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\u3002 \u6ce8\u610f\u7c7b\u578b\u8f6c\u6362\u4e0e\u4e8c\u4e49\u6027","title":"\u91cd\u8f7d"},{"location":"cplus/cpp_catch/","text":"\u5f02\u5e38\u5904\u7406\uff08try catch\uff09 \u00b6 \u5f02\u5e38\u5fc5\u987b\u663e\u5f0f\u5730\u629b\u51fa\uff0c\u624d\u80fd\u88ab\u68c0\u6d4b\u548c\u6355\u83b7\u5230\uff1b\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684\u629b\u51fa\uff0c\u5373\u4f7f\u6709\u5f02\u5e38\u4e5f\u68c0\u6d4b\u4e0d\u5230\u3002 1 \u629b\u51fa\uff08 Throw \uff09 --> \u68c0\u6d4b\uff08 Try \uff09 --> \u6355\u83b7\uff08 Catch \uff09 \u7a0b\u5e8f\u7684\u9519\u8bef\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\u8bed\u6cd5\u9519\u8bef\u3001\u903b\u8f91\u9519\u8bef\u548c\u8fd0\u884c\u65f6\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 try { //\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_1 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_2 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } //\u5176\u4ed6\u7684catch catch ( exception_type_n e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 }","title":"\u5f02\u5e38"},{"location":"cplus/cpp_catch/#try-catch","text":"\u5f02\u5e38\u5fc5\u987b\u663e\u5f0f\u5730\u629b\u51fa\uff0c\u624d\u80fd\u88ab\u68c0\u6d4b\u548c\u6355\u83b7\u5230\uff1b\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684\u629b\u51fa\uff0c\u5373\u4f7f\u6709\u5f02\u5e38\u4e5f\u68c0\u6d4b\u4e0d\u5230\u3002 1 \u629b\u51fa\uff08 Throw \uff09 --> \u68c0\u6d4b\uff08 Try \uff09 --> \u6355\u83b7\uff08 Catch \uff09 \u7a0b\u5e8f\u7684\u9519\u8bef\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\u8bed\u6cd5\u9519\u8bef\u3001\u903b\u8f91\u9519\u8bef\u548c\u8fd0\u884c\u65f6\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 try { //\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_1 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_2 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } //\u5176\u4ed6\u7684catch catch ( exception_type_n e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 }","title":"\u5f02\u5e38\u5904\u7406\uff08try catch\uff09"},{"location":"cplus/cpp_file/","text":"","title":"\u6587\u4ef6\u64cd\u4f5c"},{"location":"cplus/cpp_high/","text":"\u8fdb\u9636 \u00b6 \u62f7\u8d1d\u6784\u9020\u51fd\u6570(\u590d\u5236\u6784\u9020\u51fd\u6570) \u00b6 const \u5f15\u7528 \u53ea\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <iostream> #include <string> using namespace std ; class Student { public : Student ( string name = \"\" , int age = 0 , float score = 0.0f ); //\u666e\u901a\u6784\u9020\u51fd\u6570 Student ( const Student & stu ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u58f0\u660e\uff09 public : void display (); private : string m_name ; int m_age ; float m_score ; }; Student :: Student ( string name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u5b9a\u4e49\uff09 Student :: Student ( const Student & stu ){ this -> m_name = stu . m_name ; this -> m_age = stu . m_age ; this -> m_score = stu . m_score ; cout << \"Copy constructor was called.\" << endl ; } void Student :: display (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } int main (){ Student stu1 ( \"\u5c0f\u660e\" , 16 , 90.5 ); Student stu2 = stu1 ; //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Student stu3 ( stu1 ); //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 stu1 . display (); stu2 . display (); stu3 . display (); return 0 ; } \u5728\u5b9a\u4e49\u7684\u540c\u65f6\u8fdb\u884c\u8d4b\u503c\u53eb\u505a\u521d\u59cb\u5316\uff08Initialization\uff09\uff0c\u5b9a\u4e49\u5b8c\u6210\u4ee5\u540e\u518d\u8d4b\u503c\uff08\u4e0d\u7ba1\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u6709\u6ca1\u6709\u8d4b\u503c\uff09\u5c31\u53eb\u505a\u8d4b\u503c\uff08Assignment\uff09\u3002\u521d\u59cb\u5316\u53ea\u80fd\u6709\u4e00\u6b21\uff0c\u8d4b\u503c\u53ef\u4ee5\u6709\u591a\u6b21\u3002 \u5f53\u4ee5\u62f7\u8d1d\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1b\u5f53\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u8d4b\u503c\u65f6\uff0c\u4f1a\u8c03\u7528\u91cd\u8f7d\u8fc7\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 1 \u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d \u00b6 \u91cd\u8f7d=(\u8d4b\u503c\u8fd0\u7b97\u7b26) \u00b6 \u62f7\u8d1d\u63a7\u5236\u64cd\u4f5c \u00b6 \u8f6c\u6362\u6784\u9020\u51fd\u6570 \u00b6 \u7c7b\u578b\u8f6c\u6362\u51fd\u6570 \u00b6 \u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26 \u00b6 shared_ptr \u00b6 lambda \u00b6 auto\u548cdecltype \u00b6 \u79fb\u52a8\u6784\u9020\u51fd\u6570 \u00b6 \u53f3\u503c\u5f15\u7528 \u00b6","title":"\u9ad8\u7ea7\u4e3b\u9898"},{"location":"cplus/cpp_high/#_1","text":"","title":"\u8fdb\u9636"},{"location":"cplus/cpp_high/#_2","text":"const \u5f15\u7528 \u53ea\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <iostream> #include <string> using namespace std ; class Student { public : Student ( string name = \"\" , int age = 0 , float score = 0.0f ); //\u666e\u901a\u6784\u9020\u51fd\u6570 Student ( const Student & stu ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u58f0\u660e\uff09 public : void display (); private : string m_name ; int m_age ; float m_score ; }; Student :: Student ( string name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u5b9a\u4e49\uff09 Student :: Student ( const Student & stu ){ this -> m_name = stu . m_name ; this -> m_age = stu . m_age ; this -> m_score = stu . m_score ; cout << \"Copy constructor was called.\" << endl ; } void Student :: display (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } int main (){ Student stu1 ( \"\u5c0f\u660e\" , 16 , 90.5 ); Student stu2 = stu1 ; //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Student stu3 ( stu1 ); //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 stu1 . display (); stu2 . display (); stu3 . display (); return 0 ; } \u5728\u5b9a\u4e49\u7684\u540c\u65f6\u8fdb\u884c\u8d4b\u503c\u53eb\u505a\u521d\u59cb\u5316\uff08Initialization\uff09\uff0c\u5b9a\u4e49\u5b8c\u6210\u4ee5\u540e\u518d\u8d4b\u503c\uff08\u4e0d\u7ba1\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u6709\u6ca1\u6709\u8d4b\u503c\uff09\u5c31\u53eb\u505a\u8d4b\u503c\uff08Assignment\uff09\u3002\u521d\u59cb\u5316\u53ea\u80fd\u6709\u4e00\u6b21\uff0c\u8d4b\u503c\u53ef\u4ee5\u6709\u591a\u6b21\u3002 \u5f53\u4ee5\u62f7\u8d1d\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1b\u5f53\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u8d4b\u503c\u65f6\uff0c\u4f1a\u8c03\u7528\u91cd\u8f7d\u8fc7\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 1","title":"\u62f7\u8d1d\u6784\u9020\u51fd\u6570(\u590d\u5236\u6784\u9020\u51fd\u6570)"},{"location":"cplus/cpp_high/#_3","text":"","title":"\u6df1\u62f7\u8d1d\u548c\u6d45\u62f7\u8d1d"},{"location":"cplus/cpp_high/#_4","text":"","title":"\u91cd\u8f7d=(\u8d4b\u503c\u8fd0\u7b97\u7b26)"},{"location":"cplus/cpp_high/#_5","text":"","title":"\u62f7\u8d1d\u63a7\u5236\u64cd\u4f5c"},{"location":"cplus/cpp_high/#_6","text":"","title":"\u8f6c\u6362\u6784\u9020\u51fd\u6570"},{"location":"cplus/cpp_high/#_7","text":"","title":"\u7c7b\u578b\u8f6c\u6362\u51fd\u6570"},{"location":"cplus/cpp_high/#_8","text":"","title":"\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u8fd0\u7b97\u7b26"},{"location":"cplus/cpp_high/#shared_ptr","text":"","title":"shared_ptr"},{"location":"cplus/cpp_high/#lambda","text":"","title":"lambda"},{"location":"cplus/cpp_high/#autodecltype","text":"","title":"auto\u548cdecltype"},{"location":"cplus/cpp_high/#_9","text":"","title":"\u79fb\u52a8\u6784\u9020\u51fd\u6570"},{"location":"cplus/cpp_high/#_10","text":"","title":"\u53f3\u503c\u5f15\u7528"},{"location":"cplus/cpp_inher/","text":"\u7ee7\u627f\u4e0e\u6d3e\u751f \u00b6 1 2 3 class \u6d3e\u751f\u7c7b\u540d:\uff3b\u7ee7\u627f\u65b9\u5f0f\uff3d \u57fa\u7c7b\u540d{ \u6d3e\u751f\u7c7b\u65b0\u589e\u52a0\u7684\u6210\u5458 }; \u7ee7\u627f\u65b9\u5f0f\u57fa\u7c7b\u6210\u5458 public\u6210\u5458 protected\u6210\u5458 private\u6210\u5458 public\u7ee7\u627f public protected \u4e0d\u53ef\u89c1 protected\u7ee7\u627f protected protected \u4e0d\u53ef\u89c1 private\u7ee7\u627f private private \u4e0d\u53ef\u89c1 \u4e0d\u7ba1\u7ee7\u627f\u65b9\u5f0f\u5982\u4f55\uff0c\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u59cb\u7ec8\u4e0d\u80fd\u4f7f\u7528\u3002\u57fa\u7c7b\u7684 private \u6210\u5458\u662f\u80fd\u591f\u88ab\u7ee7\u627f\u7684\uff0c\u5e76\u4e14\uff08\u6210\u5458\u53d8\u91cf\uff09\u4f1a\u5360\u7528\u6d3e\u751f\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u53ea\u662f\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u53ef\u89c1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528\u3002 \u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\u57fa\u7c7b private \u6210\u5458\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u501f\u52a9\u57fa\u7c7b\u7684\u975e private \u6210\u5458\u51fd\u6570\uff0c\u5982\u679c\u57fa\u7c7b\u6ca1\u6709\u975e private \u6210\u5458\u51fd\u6570\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5c06\u65e0\u6cd5\u8bbf\u95ee\u3002 using \u53ea\u80fd\u6539\u53d8\u57fa\u7c7b\u4e2d public \u548c protected \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0d\u80fd\u6539\u53d8 private \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u56e0\u4e3a\u57fa\u7c7b\u4e2d private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6839\u672c\u4e0d\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u8bbf\u95ee\u3002 \u5982\u679c\u6d3e\u751f\u7c7b\u4e2d\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\uff09\u548c\u57fa\u7c7b\u4e2d\u7684\u6210\u5458\u91cd\u540d\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u4ece\u57fa\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684\u6210\u5458\u3002 \u57fa\u7c7b\u6210\u5458\u51fd\u6570\u548c\u6d3e\u751f\u7c7b\u6210\u5458\u51fd\u6570\u4e0d\u4f1a\u6784\u6210\u91cd\u8f7d\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6709\u540c\u540d\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u540c\u540d\u51fd\u6570\uff0c\u4e0d\u7ba1\u5b83\u4eec\u7684\u53c2\u6570\u662f\u5426\u4e00\u6837\u3002 \u53ea\u6709\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u624d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\uff0c\u4e0d\u540c\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u662f\u4f1a\u9020\u6210\u906e\u853d\uff0c\u4f7f\u5f97\u5916\u5c42\u51fd\u6570\u65e0\u6548\u3002\u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u62e5\u6709\u4e0d\u540c\u7684\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u540c\u540d\u51fd\u6570\u4e0d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\u3002 \u7ee7\u627f\u7684\u4f5c\u7528\u57df\u5d4c\u5957 \u00b6 \u6d3e\u751f\u7c7b\u7684\u4f5c\u7528\u57df\u4f4d\u4e8e\u57fa\u7c7b\u4f5c\u7528\u57df\u4e4b\u5185 \u7ee7\u627f\u4e0b\u7684\u5185\u5b58\u6a21\u578b \u00b6 \u6709\u7ee7\u627f\u5173\u7cfb\u65f6\uff0c\u6d3e\u751f\u7c7b\u7684\u5185\u5b58\u6a21\u578b\u53ef\u4ee5\u770b\u6210\u662f\u57fa\u7c7b\u6210\u5458\u53d8\u91cf\u548c\u65b0\u589e\u6210\u5458\u53d8\u91cf\u7684\u603b\u548c\uff0c\u800c\u6240\u6709\u6210\u5458\u51fd\u6570\u4ecd\u7136\u5b58\u50a8\u5728\u53e6\u5916\u4e00\u4e2a\u533a\u57df\u2014\u2014\u4ee3\u7801\u533a\uff0c\u7531\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u6a21\u578b\u4e2d\uff0c\u4f1a\u5305\u542b\u6240\u6709\u57fa\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u6848\u7684\u4f18\u70b9\u662f\u8bbf\u95ee\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u5728\u6d3e\u751f\u7c7b\u5bf9\u8c61\u4e2d\u76f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u53d8\u91cf\uff0c\u65e0\u9700\u7ecf\u8fc7\u597d\u51e0\u5c42\u95f4\u63a5\u8ba1\u7b97\u3002 \u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570 \u00b6 \u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u603b\u662f\u5148\u8c03\u7528\u57fa\u7c7b\u6784\u9020\u51fd\u6570\u518d\u6267\u884c\u5176\u4ed6\u4ee3\u7801\uff08\u5305\u62ec\u53c2\u6570\u521d\u59cb\u5316\u8868\u4ee5\u53ca\u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\uff09 \u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u521b\u5efa\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u540c\uff0c\u5373\u5148\u6267\u884c\u57fa\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u518d\u6267\u884c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u3002 \u800c\u9500\u6bc1\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6267\u884c\u6d3e\u751f\u7c7b\u6790\u6784\u51fd\u6570\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { public : A (){ cout << \"A constructor\" << endl ;} ~ A (){ cout << \"A destructor\" << endl ;} }; class B : public A { public : B (){ cout << \"B constructor\" << endl ;} ~ B (){ cout << \"B destructor\" << endl ;} }; class C : public B { public : C (){ cout << \"C constructor\" << endl ;} ~ C (){ cout << \"C destructor\" << endl ;} }; int main (){ C test ; return 0 ; } \u591a\u7ee7\u627f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class D : public A , private B , protected C { //\u7c7bD\u65b0\u589e\u52a0\u7684\u6210\u5458 } D ( \u5f62\u53c2\u5217\u8868 ) : A ( \u5b9e\u53c2\u5217\u8868 ), B ( \u5b9e\u53c2\u5217\u8868 ), C ( \u5b9e\u53c2\u5217\u8868 ){ //\u5176\u4ed6\u64cd\u4f5c } #include <iostream> using namespace std ; //\u57fa\u7c7b class BaseA { public : BaseA ( int a , int b ); ~ BaseA (); public : void show (); protected : int m_a ; int m_b ; }; BaseA :: BaseA ( int a , int b ) : m_a ( a ), m_b ( b ){ cout << \"BaseA constructor\" << endl ; } BaseA ::~ BaseA (){ cout << \"BaseA destructor\" << endl ; } void BaseA :: show (){ cout << \"m_a = \" << m_a << endl ; cout << \"m_b = \" << m_b << endl ; } //\u57fa\u7c7b class BaseB { public : BaseB ( int c , int d ); ~ BaseB (); void show (); protected : int m_c ; int m_d ; }; BaseB :: BaseB ( int c , int d ) : m_c ( c ), m_d ( d ){ cout << \"BaseB constructor\" << endl ; } BaseB ::~ BaseB (){ cout << \"BaseB destructor\" << endl ; } void BaseB :: show (){ cout << \"m_c = \" << m_c << endl ; cout << \"m_d = \" << m_d << endl ; } //\u6d3e\u751f\u7c7b class Derived : public BaseA , public BaseB { public : Derived ( int a , int b , int c , int d , int e ); ~ Derived (); public : void display (); private : int m_e ; }; Derived :: Derived ( int a , int b , int c , int d , int e ) : BaseA ( a , b ), BaseB ( c , d ), m_e ( e ){ cout << \"Derived constructor\" << endl ; } Derived ::~ Derived (){ cout << \"Derived destructor\" << endl ; } void Derived :: display (){ BaseA :: show (); //\u8c03\u7528BaseA\u7c7b\u7684show()\u51fd\u6570 BaseB :: show (); //\u8c03\u7528BaseB\u7c7b\u7684show()\u51fd\u6570 cout << \"m_e = \" << m_e << endl ; } int main (){ Derived obj ( 1 , 2 , 3 , 4 , 5 ); obj . display (); return 0 ; } \u547d\u540d\u51b2\u7a81\u65f6\u4f7f\u7528\u57df\u89e3\u6790\u7b26\u3002 \u865a\u7ee7\u627f\u548c\u865a\u57fa\u7c7b\u8be6\u89e3 \u00b6 \u83f1\u5f62\u7ee7\u627f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 //\u95f4\u63a5\u57fa\u7c7bA class A { protected : int m_a ; }; //\u76f4\u63a5\u57fa\u7c7bB class B : public A { protected : int m_b ; }; //\u76f4\u63a5\u57fa\u7c7bC class C : public A { protected : int m_c ; }; //\u6d3e\u751f\u7c7bD class D : public B , public C { public : void seta ( int a ){ m_a = a ; } //\u547d\u540d\u51b2\u7a81 void setb ( int b ){ m_b = b ; } //\u6b63\u786e void setc ( int c ){ m_c = c ; } //\u6b63\u786e void setd ( int d ){ m_d = d ; } //\u6b63\u786e private : int m_d ; }; int main (){ D d ; return 0 ; } \u4e3a\u4e86\u89e3\u51b3\u591a\u7ee7\u627f\u65f6\u7684\u547d\u540d\u51b2\u7a81\u548c\u5197\u4f59\u6570\u636e\u95ee\u9898\uff0cC++ \u63d0\u51fa\u4e86\u865a\u7ee7\u627f\uff0c\u4f7f\u5f97\u5728\u6d3e\u751f\u7c7b\u4e2d\u53ea\u4fdd\u7559\u4e00\u4efd\u95f4\u63a5\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u865a\u7ee7\u627f\u7684\u76ee\u7684\u662f\u8ba9\u67d0\u4e2a\u7c7b\u505a\u51fa\u58f0\u660e\uff0c\u627f\u8bfa\u613f\u610f\u5171\u4eab\u5b83\u7684\u57fa\u7c7b\u3002\u5176\u4e2d\uff0c\u8fd9\u4e2a\u88ab\u5171\u4eab\u7684\u57fa\u7c7b\u5c31\u79f0\u4e3a\u865a\u57fa\u7c7b\uff08Virtual Base Class\uff09\uff0c\u672c\u4f8b\u4e2d\u7684 A \u5c31\u662f\u4e00\u4e2a\u865a\u57fa\u7c7b\u3002\u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c\u4e0d\u8bba\u865a\u57fa\u7c7b\u5728\u7ee7\u627f\u4f53\u7cfb\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u90fd\u53ea\u5305\u542b\u4e00\u4efd\u865a\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u5bf9\u6700\u7ec8\u7684\u6d3e\u751f\u7c7b\u6765\u8bf4\uff0c\u865a\u57fa\u7c7b\u662f\u95f4\u63a5\u57fa\u7c7b\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u57fa\u7c7b\u3002\u8fd9\u8ddf\u666e\u901a\u7ee7\u627f\u4e0d\u540c\uff0c\u5728\u666e\u901a\u7ee7\u627f\u4e2d\uff0c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u7c7b\u5176\u5b9e\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u53d1\u751f\u6570\u636e\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u8f6c\u6362\u53ea\u6709\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u624d\u6709\u610f\u4e49\uff0c\u5e76\u4e14\u53ea\u80fd\u5c06\u6d3e\u751f\u7c7b\u8d4b\u503c\u7ed9\u57fa\u7c7b\uff0c\u5305\u62ec\u5c06\u6d3e\u751f\u7c7b\u5bf9\u8c61\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5bf9\u8c61\u3001\u5c06\u6d3e\u751f\u7c7b\u6307\u9488\u8d4b\u503c\u7ed9\u57fa\u7c7b\u6307\u9488\u3001\u5c06\u6d3e\u751f\u7c7b\u5f15\u7528\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5f15\u7528\uff0c\u8fd9\u5728 C++ \u4e2d\u79f0\u4e3a\u5411\u4e0a\u8f6c\u578b\uff08Upcasting\uff09\u3002\u76f8\u5e94\u5730\uff0c\u5c06\u57fa\u7c7b\u8d4b\u503c\u7ed9\u6d3e\u751f\u7c7b\u79f0\u4e3a\u5411\u4e0b\u8f6c\u578b\uff08Downcasting\uff09\u3002 \u8d4b\u503c\u7684\u672c\u8d28\u662f\u5c06\u73b0\u6709\u7684\u6570\u636e\u5199\u5165\u5df2\u5206\u914d\u597d\u7684\u5185\u5b58\u4e2d\uff0c\u5bf9\u8c61\u7684\u5185\u5b58\u53ea\u5305\u542b\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u6240\u4ee5\u5bf9\u8c61\u4e4b\u95f4\u7684\u8d4b\u503c\u662f\u6210\u5458\u53d8\u91cf\u7684\u8d4b\u503c\uff0c\u6210\u5458\u51fd\u6570\u4e0d\u5b58\u5728\u8d4b\u503c\u95ee\u9898\u3002","title":"\u7ee7\u627f\u4e0e\u6d3e\u751f"},{"location":"cplus/cpp_inher/#_1","text":"1 2 3 class \u6d3e\u751f\u7c7b\u540d:\uff3b\u7ee7\u627f\u65b9\u5f0f\uff3d \u57fa\u7c7b\u540d{ \u6d3e\u751f\u7c7b\u65b0\u589e\u52a0\u7684\u6210\u5458 }; \u7ee7\u627f\u65b9\u5f0f\u57fa\u7c7b\u6210\u5458 public\u6210\u5458 protected\u6210\u5458 private\u6210\u5458 public\u7ee7\u627f public protected \u4e0d\u53ef\u89c1 protected\u7ee7\u627f protected protected \u4e0d\u53ef\u89c1 private\u7ee7\u627f private private \u4e0d\u53ef\u89c1 \u4e0d\u7ba1\u7ee7\u627f\u65b9\u5f0f\u5982\u4f55\uff0c\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u59cb\u7ec8\u4e0d\u80fd\u4f7f\u7528\u3002\u57fa\u7c7b\u7684 private \u6210\u5458\u662f\u80fd\u591f\u88ab\u7ee7\u627f\u7684\uff0c\u5e76\u4e14\uff08\u6210\u5458\u53d8\u91cf\uff09\u4f1a\u5360\u7528\u6d3e\u751f\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u53ea\u662f\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u53ef\u89c1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528\u3002 \u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\u57fa\u7c7b private \u6210\u5458\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u501f\u52a9\u57fa\u7c7b\u7684\u975e private \u6210\u5458\u51fd\u6570\uff0c\u5982\u679c\u57fa\u7c7b\u6ca1\u6709\u975e private \u6210\u5458\u51fd\u6570\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5c06\u65e0\u6cd5\u8bbf\u95ee\u3002 using \u53ea\u80fd\u6539\u53d8\u57fa\u7c7b\u4e2d public \u548c protected \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0d\u80fd\u6539\u53d8 private \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u56e0\u4e3a\u57fa\u7c7b\u4e2d private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6839\u672c\u4e0d\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u8bbf\u95ee\u3002 \u5982\u679c\u6d3e\u751f\u7c7b\u4e2d\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\uff09\u548c\u57fa\u7c7b\u4e2d\u7684\u6210\u5458\u91cd\u540d\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u4ece\u57fa\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684\u6210\u5458\u3002 \u57fa\u7c7b\u6210\u5458\u51fd\u6570\u548c\u6d3e\u751f\u7c7b\u6210\u5458\u51fd\u6570\u4e0d\u4f1a\u6784\u6210\u91cd\u8f7d\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6709\u540c\u540d\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u540c\u540d\u51fd\u6570\uff0c\u4e0d\u7ba1\u5b83\u4eec\u7684\u53c2\u6570\u662f\u5426\u4e00\u6837\u3002 \u53ea\u6709\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u624d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\uff0c\u4e0d\u540c\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u662f\u4f1a\u9020\u6210\u906e\u853d\uff0c\u4f7f\u5f97\u5916\u5c42\u51fd\u6570\u65e0\u6548\u3002\u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u62e5\u6709\u4e0d\u540c\u7684\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u540c\u540d\u51fd\u6570\u4e0d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\u3002","title":"\u7ee7\u627f\u4e0e\u6d3e\u751f"},{"location":"cplus/cpp_inher/#_2","text":"\u6d3e\u751f\u7c7b\u7684\u4f5c\u7528\u57df\u4f4d\u4e8e\u57fa\u7c7b\u4f5c\u7528\u57df\u4e4b\u5185","title":"\u7ee7\u627f\u7684\u4f5c\u7528\u57df\u5d4c\u5957"},{"location":"cplus/cpp_inher/#_3","text":"\u6709\u7ee7\u627f\u5173\u7cfb\u65f6\uff0c\u6d3e\u751f\u7c7b\u7684\u5185\u5b58\u6a21\u578b\u53ef\u4ee5\u770b\u6210\u662f\u57fa\u7c7b\u6210\u5458\u53d8\u91cf\u548c\u65b0\u589e\u6210\u5458\u53d8\u91cf\u7684\u603b\u548c\uff0c\u800c\u6240\u6709\u6210\u5458\u51fd\u6570\u4ecd\u7136\u5b58\u50a8\u5728\u53e6\u5916\u4e00\u4e2a\u533a\u57df\u2014\u2014\u4ee3\u7801\u533a\uff0c\u7531\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u6a21\u578b\u4e2d\uff0c\u4f1a\u5305\u542b\u6240\u6709\u57fa\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u6848\u7684\u4f18\u70b9\u662f\u8bbf\u95ee\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u5728\u6d3e\u751f\u7c7b\u5bf9\u8c61\u4e2d\u76f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u53d8\u91cf\uff0c\u65e0\u9700\u7ecf\u8fc7\u597d\u51e0\u5c42\u95f4\u63a5\u8ba1\u7b97\u3002","title":"\u7ee7\u627f\u4e0b\u7684\u5185\u5b58\u6a21\u578b"},{"location":"cplus/cpp_inher/#_4","text":"\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u603b\u662f\u5148\u8c03\u7528\u57fa\u7c7b\u6784\u9020\u51fd\u6570\u518d\u6267\u884c\u5176\u4ed6\u4ee3\u7801\uff08\u5305\u62ec\u53c2\u6570\u521d\u59cb\u5316\u8868\u4ee5\u53ca\u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\uff09 \u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u521b\u5efa\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u540c\uff0c\u5373\u5148\u6267\u884c\u57fa\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u518d\u6267\u884c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u3002 \u800c\u9500\u6bc1\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6267\u884c\u6d3e\u751f\u7c7b\u6790\u6784\u51fd\u6570\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { public : A (){ cout << \"A constructor\" << endl ;} ~ A (){ cout << \"A destructor\" << endl ;} }; class B : public A { public : B (){ cout << \"B constructor\" << endl ;} ~ B (){ cout << \"B destructor\" << endl ;} }; class C : public B { public : C (){ cout << \"C constructor\" << endl ;} ~ C (){ cout << \"C destructor\" << endl ;} }; int main (){ C test ; return 0 ; }","title":"\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570"},{"location":"cplus/cpp_inher/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class D : public A , private B , protected C { //\u7c7bD\u65b0\u589e\u52a0\u7684\u6210\u5458 } D ( \u5f62\u53c2\u5217\u8868 ) : A ( \u5b9e\u53c2\u5217\u8868 ), B ( \u5b9e\u53c2\u5217\u8868 ), C ( \u5b9e\u53c2\u5217\u8868 ){ //\u5176\u4ed6\u64cd\u4f5c } #include <iostream> using namespace std ; //\u57fa\u7c7b class BaseA { public : BaseA ( int a , int b ); ~ BaseA (); public : void show (); protected : int m_a ; int m_b ; }; BaseA :: BaseA ( int a , int b ) : m_a ( a ), m_b ( b ){ cout << \"BaseA constructor\" << endl ; } BaseA ::~ BaseA (){ cout << \"BaseA destructor\" << endl ; } void BaseA :: show (){ cout << \"m_a = \" << m_a << endl ; cout << \"m_b = \" << m_b << endl ; } //\u57fa\u7c7b class BaseB { public : BaseB ( int c , int d ); ~ BaseB (); void show (); protected : int m_c ; int m_d ; }; BaseB :: BaseB ( int c , int d ) : m_c ( c ), m_d ( d ){ cout << \"BaseB constructor\" << endl ; } BaseB ::~ BaseB (){ cout << \"BaseB destructor\" << endl ; } void BaseB :: show (){ cout << \"m_c = \" << m_c << endl ; cout << \"m_d = \" << m_d << endl ; } //\u6d3e\u751f\u7c7b class Derived : public BaseA , public BaseB { public : Derived ( int a , int b , int c , int d , int e ); ~ Derived (); public : void display (); private : int m_e ; }; Derived :: Derived ( int a , int b , int c , int d , int e ) : BaseA ( a , b ), BaseB ( c , d ), m_e ( e ){ cout << \"Derived constructor\" << endl ; } Derived ::~ Derived (){ cout << \"Derived destructor\" << endl ; } void Derived :: display (){ BaseA :: show (); //\u8c03\u7528BaseA\u7c7b\u7684show()\u51fd\u6570 BaseB :: show (); //\u8c03\u7528BaseB\u7c7b\u7684show()\u51fd\u6570 cout << \"m_e = \" << m_e << endl ; } int main (){ Derived obj ( 1 , 2 , 3 , 4 , 5 ); obj . display (); return 0 ; } \u547d\u540d\u51b2\u7a81\u65f6\u4f7f\u7528\u57df\u89e3\u6790\u7b26\u3002","title":"\u591a\u7ee7\u627f"},{"location":"cplus/cpp_inher/#_6","text":"\u83f1\u5f62\u7ee7\u627f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 //\u95f4\u63a5\u57fa\u7c7bA class A { protected : int m_a ; }; //\u76f4\u63a5\u57fa\u7c7bB class B : public A { protected : int m_b ; }; //\u76f4\u63a5\u57fa\u7c7bC class C : public A { protected : int m_c ; }; //\u6d3e\u751f\u7c7bD class D : public B , public C { public : void seta ( int a ){ m_a = a ; } //\u547d\u540d\u51b2\u7a81 void setb ( int b ){ m_b = b ; } //\u6b63\u786e void setc ( int c ){ m_c = c ; } //\u6b63\u786e void setd ( int d ){ m_d = d ; } //\u6b63\u786e private : int m_d ; }; int main (){ D d ; return 0 ; } \u4e3a\u4e86\u89e3\u51b3\u591a\u7ee7\u627f\u65f6\u7684\u547d\u540d\u51b2\u7a81\u548c\u5197\u4f59\u6570\u636e\u95ee\u9898\uff0cC++ \u63d0\u51fa\u4e86\u865a\u7ee7\u627f\uff0c\u4f7f\u5f97\u5728\u6d3e\u751f\u7c7b\u4e2d\u53ea\u4fdd\u7559\u4e00\u4efd\u95f4\u63a5\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u865a\u7ee7\u627f\u7684\u76ee\u7684\u662f\u8ba9\u67d0\u4e2a\u7c7b\u505a\u51fa\u58f0\u660e\uff0c\u627f\u8bfa\u613f\u610f\u5171\u4eab\u5b83\u7684\u57fa\u7c7b\u3002\u5176\u4e2d\uff0c\u8fd9\u4e2a\u88ab\u5171\u4eab\u7684\u57fa\u7c7b\u5c31\u79f0\u4e3a\u865a\u57fa\u7c7b\uff08Virtual Base Class\uff09\uff0c\u672c\u4f8b\u4e2d\u7684 A \u5c31\u662f\u4e00\u4e2a\u865a\u57fa\u7c7b\u3002\u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c\u4e0d\u8bba\u865a\u57fa\u7c7b\u5728\u7ee7\u627f\u4f53\u7cfb\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u90fd\u53ea\u5305\u542b\u4e00\u4efd\u865a\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u5bf9\u6700\u7ec8\u7684\u6d3e\u751f\u7c7b\u6765\u8bf4\uff0c\u865a\u57fa\u7c7b\u662f\u95f4\u63a5\u57fa\u7c7b\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u57fa\u7c7b\u3002\u8fd9\u8ddf\u666e\u901a\u7ee7\u627f\u4e0d\u540c\uff0c\u5728\u666e\u901a\u7ee7\u627f\u4e2d\uff0c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u7c7b\u5176\u5b9e\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u53d1\u751f\u6570\u636e\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u8f6c\u6362\u53ea\u6709\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u624d\u6709\u610f\u4e49\uff0c\u5e76\u4e14\u53ea\u80fd\u5c06\u6d3e\u751f\u7c7b\u8d4b\u503c\u7ed9\u57fa\u7c7b\uff0c\u5305\u62ec\u5c06\u6d3e\u751f\u7c7b\u5bf9\u8c61\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5bf9\u8c61\u3001\u5c06\u6d3e\u751f\u7c7b\u6307\u9488\u8d4b\u503c\u7ed9\u57fa\u7c7b\u6307\u9488\u3001\u5c06\u6d3e\u751f\u7c7b\u5f15\u7528\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5f15\u7528\uff0c\u8fd9\u5728 C++ \u4e2d\u79f0\u4e3a\u5411\u4e0a\u8f6c\u578b\uff08Upcasting\uff09\u3002\u76f8\u5e94\u5730\uff0c\u5c06\u57fa\u7c7b\u8d4b\u503c\u7ed9\u6d3e\u751f\u7c7b\u79f0\u4e3a\u5411\u4e0b\u8f6c\u578b\uff08Downcasting\uff09\u3002 \u8d4b\u503c\u7684\u672c\u8d28\u662f\u5c06\u73b0\u6709\u7684\u6570\u636e\u5199\u5165\u5df2\u5206\u914d\u597d\u7684\u5185\u5b58\u4e2d\uff0c\u5bf9\u8c61\u7684\u5185\u5b58\u53ea\u5305\u542b\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u6240\u4ee5\u5bf9\u8c61\u4e4b\u95f4\u7684\u8d4b\u503c\u662f\u6210\u5458\u53d8\u91cf\u7684\u8d4b\u503c\uff0c\u6210\u5458\u51fd\u6570\u4e0d\u5b58\u5728\u8d4b\u503c\u95ee\u9898\u3002","title":"\u865a\u7ee7\u627f\u548c\u865a\u57fa\u7c7b\u8be6\u89e3"},{"location":"cplus/cpp_io/","text":"ios \u662f\u62bd\u8c61\u57fa\u7c7b\u3002 istream \u662f\u7528\u4e8e\u8f93\u5165\u7684\u6d41\u7c7b\uff0ccin \u5c31\u662f\u8be5\u7c7b\u7684\u5bf9\u8c61\uff0c\u865a\u7ee7\u627f\u3002 ostream \u662f\u7528\u4e8e\u8f93\u51fa\u7684\u6d41\u7c7b\uff0ccout \u5c31\u662f\u8be5\u7c7b\u7684\u5bf9\u8c61\uff0c\u865a\u7ee7\u627f\u3002 ifstream \u662f\u7528\u4e8e\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u7684\u7c7b\u3002 ofstream \u662f\u7528\u4e8e\u5411\u6587\u4ef6\u5199\u5165\u6570\u636e\u7684\u7c7b\u3002 iostream \u662f\u65e2\u80fd\u7528\u4e8e\u8f93\u5165\uff0c\u53c8\u80fd\u7528\u4e8e\u8f93\u51fa\u7684\u7c7b\u3002 fstream \u662f\u65e2\u80fd\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u53c8\u80fd\u5411\u6587\u4ef6\u5199\u5165\u6570\u636e\u7684\u7c7b\u3002","title":"\u8f93\u5165\u8f93\u51fa\u6d41"},{"location":"cplus/cpp_muban/","text":"\u6a21\u677f\u548c\u6cdb\u578b \u00b6 \u6a21\u677f\u51fd\u6570 \u00b6 1 2 3 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , ... > \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //\u5728\u51fd\u6570\u4f53\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u53c2\u6570 } \u7c7b\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > class \u7c7b\u540d{ //TODO: }; template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > \u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d < \u7c7b\u578b\u53c2\u6570 1 , \u7c7b\u578b\u53c2\u6570 2 , ... >:: \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> using namespace std ; template < class T1 , class T2 > //\u8fd9\u91cc\u4e0d\u80fd\u6709\u5206\u53f7 class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const ; //\u83b7\u53d6x\u5750\u6807 void setX ( T1 x ); //\u8bbe\u7f6ex\u5750\u6807 T2 getY () const ; //\u83b7\u53d6y\u5750\u6807 void setY ( T2 y ); //\u8bbe\u7f6ey\u5750\u6807 private : T1 m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < class T1 , class T2 > //\u6a21\u677f\u5934 T1 Point < T1 , T2 >:: getX () const /*\u51fd\u6570\u5934*/ { return m_x ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setX ( T1 x ){ m_x = x ; } template < class T1 , class T2 > T2 Point < T1 , T2 >:: getY () const { return m_y ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setY ( T2 y ){ m_y = y ; } int main (){ Point < int , int > p1 ( 10 , 20 ); cout << \"x=\" << p1 . getX () << \", y=\" << p1 . getY () << endl ; Point < int , char *> p2 ( 10 , \"\u4e1c\u7ecf180\u5ea6\" ); cout << \"x=\" << p2 . getX () << \", y=\" << p2 . getY () << endl ; Point < char * , char *> * p3 = new Point < char * , char *> ( \"\u4e1c\u7ecf180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ); cout << \"x=\" << p3 -> getX () << \", y=\" << p3 -> getY () << endl ; return 0 ; } \u53ef\u8fb9\u957f\u6570\u7ec4\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> #include <cstring> using namespace std ; template < class T > class CArray { int size ; //\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 T * ptr ; //\u6307\u5411\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4 public : CArray ( int s = 0 ); //s\u4ee3\u8868\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 CArray ( CArray & a ); ~ CArray (); void push_back ( const T & v ); //\u7528\u4e8e\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20v CArray & operator = ( const CArray & a ); //\u7528\u4e8e\u6570\u7ec4\u5bf9\u8c61\u95f4\u7684\u8d4b\u503c T length () { return size ; } T & operator []( int i ) { //\u7528\u4ee5\u652f\u6301\u6839\u636e\u4e0b\u6807\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\uff0c\u5982a[i] = 4;\u548cn = a[i]\u8fd9\u6837\u7684\u8bed\u53e5 return ptr [ i ]; } }; template < class T > CArray < T >:: CArray ( int s ) : size ( s ) { if ( s == 0 ) ptr = NULL ; else ptr = new T [ s ]; } template < class T > CArray < T >:: CArray ( CArray & a ) { if ( ! a . ptr ) { ptr = NULL ; size = 0 ; return ; } ptr = new T [ a . size ]; memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; } template < class T > CArray < T >::~ CArray () { if ( ptr ) delete [] ptr ; } template < class T > CArray < T > & CArray < T >:: operator = ( const CArray & a ) { //\u8d4b\u503c\u53f7\u7684\u4f5c\u7528\u662f\u4f7f\"=\"\u5de6\u8fb9\u5bf9\u8c61\u91cc\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u548c\u5185\u5bb9\u90fd\u548c\u53f3\u8fb9\u7684\u5bf9\u8c61\u4e00\u6837 if ( this == & a ) //\u9632\u6b62a=a\u8fd9\u6837\u7684\u8d4b\u503c\u5bfc\u81f4\u51fa\u9519 return * this ; if ( a . ptr == NULL ) { //\u5982\u679ca\u91cc\u9762\u7684\u6570\u7ec4\u662f\u7a7a\u7684 if ( ptr ) delete [] ptr ; ptr = NULL ; size = 0 ; return * this ; } if ( size < a . size ) { //\u5982\u679c\u539f\u6709\u7a7a\u95f4\u591f\u5927\uff0c\u5c31\u4e0d\u7528\u5206\u914d\u65b0\u7684\u7a7a\u95f4 if ( ptr ) delete [] ptr ; ptr = new T [ a . size ]; } memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; return * this ; } template < class T > void CArray < T >:: push_back ( const T & v ) { //\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 if ( ptr ) { T * tmpPtr = new T [ size + 1 ]; //\u91cd\u65b0\u5206\u914d\u7a7a\u95f4 memcpy ( tmpPtr , ptr , sizeof ( T ) * size ); //\u62f7\u8d1d\u539f\u6570\u7ec4\u5185\u5bb9 delete [] ptr ; ptr = tmpPtr ; } else //\u6570\u7ec4\u672c\u6765\u662f\u7a7a\u7684 ptr = new T [ 1 ]; ptr [ size ++ ] = v ; //\u52a0\u5165\u65b0\u7684\u6570\u7ec4\u5143\u7d20 } int main () { CArray < int > a ; for ( int i = 0 ; i < 5 ; ++ i ) a . push_back ( i ); for ( int i = 0 ; i < a . length (); ++ i ) cout << a [ i ] << \" \" ; return 0 ; } \u91cd\u8f7d\u51fd\u6570\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> using namespace std ; template < class T > void Swap ( T & a , T & b ); //\u6a21\u677f\u2460\uff1a\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c template < typename T > void Swap ( T a [], T b [], int len ); //\u6a21\u677f\u2461\uff1a\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 void printArray ( int arr [], int len ); //\u6253\u5370\u6570\u7ec4\u5143\u7d20 int main (){ //\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c int m = 10 , n = 99 ; Swap ( m , n ); //\u5339\u914d\u6a21\u677f\u2460 cout << m << \", \" << n << endl ; //\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; int b [ 5 ] = { 10 , 20 , 30 , 40 , 50 }; int len = sizeof ( a ) / sizeof ( int ); //\u6570\u7ec4\u957f\u5ea6 Swap ( a , b , len ); //\u5339\u914d\u6a21\u677f\u2461 printArray ( a , len ); printArray ( b , len ); return 0 ; } template < class T > void Swap ( T & a , T & b ){ T temp = a ; a = b ; b = temp ; } template < typename T > void Swap ( T a [], T b [], int len ){ T temp ; for ( int i = 0 ; i < len ; i ++ ){ temp = a [ i ]; a [ i ] = b [ i ]; b [ i ] = temp ; } } void printArray ( int arr [], int len ){ for ( int i = 0 ; i < len ; i ++ ){ if ( i == len - 1 ){ cout << arr [ i ] << endl ; } else { cout << arr [ i ] << \", \" ; } } } \u4e3a\u51fd\u6570\u6a21\u677f\u663e\u5f0f\u5730\u6307\u660e\u5b9e\u53c2 \u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08Explicit Specialization\uff09 \u00b6 \u6a21\u677f\u4e2d\u7684\u8bed\u53e5\uff08\u51fd\u6570\u4f53\u6216\u8005\u7c7b\u4f53\uff09\u4e0d\u4e00\u5b9a\u5c31\u80fd\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u53ef\u80fd\u4f1a\u6709\u4e2a\u522b\u7684\u7c7b\u578b\u6ca1\u6709\u610f\u4e49\uff0c\u6216\u8005\u4f1a\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002(\u4f8b\u5982\uff1a>\u80fd\u591f\u7528\u6765\u6bd4\u8f83 int\u3001float\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u6570\u636e\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u5374\u4e0d\u80fd\u7528\u6765\u6bd4\u8f83\u7ed3\u6784\u4f53\u53d8\u91cf\u3001\u5bf9\u8c61\u4ee5\u53ca\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u9488\u5bf9\u7ed3\u6784\u4f53\u3001\u7c7b\u548c\u6570\u7ec4\u91cd\u8f7d>) \u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> #include <string> using namespace std ; typedef struct { string name ; int age ; float score ; } STU ; //\u51fd\u6570\u6a21\u677f template < class T > const T & Max ( const T & a , const T & b ); //\u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9STU\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> const STU & Max < STU > ( const STU & a , const STU & b ); //\u91cd\u8f7d<< ostream & operator << ( ostream & out , const STU & stu ); int main (){ int a = 10 ; int b = 20 ; cout << Max ( a , b ) << endl ; STU stu1 = { \"\u738b\u660e\" , 16 , 95.5 }; STU stu2 = { \"\u5f90\u4eae\" , 17 , 90.0 }; cout << Max ( stu1 , stu2 ) << endl ; return 0 ; } template < class T > const T & Max ( const T & a , const T & b ){ return a > b ? a : b ; } template <> const STU & Max < STU > ( const STU & a , const STU & b ){ return a . score > b . score ? a : b ; } ostream & operator << ( ostream & out , const STU & stu ){ out << stu . name << \" , \" << stu . age << \" , \" << stu . score ; return out ; } \u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> class Point < char * , char *> { public : Point ( char * x , char * y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } char * getY () const { return m_y ; } void setY ( char * y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 char * m_y ; //y\u5750\u6807 }; //\u8fd9\u91cc\u4e0d\u80fd\u5e26\u6a21\u677f\u5934template<> void Point < char * , char *>:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < int , char *> ( 10 , \"\u4e1c\u4eac180\u5ea6\" ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; } \u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 template < typename T2 > class Point < char * , T2 > { public : Point ( char * x , T2 y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < typename T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < char * , T2 >:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < char * , int > ( \"\u4e1c\u4eac180\u5ea6\" , 10 ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; } \u975e\u7c7b\u578b\u53c2\u6570 \u00b6 C++ \u5bf9\u6a21\u677f\u7684\u652f\u6301\u975e\u5e38\u81ea\u7531\uff0c\u6a21\u677f\u4e2d\u9664\u4e86\u53ef\u4ee5\u5305\u542b\u7c7b\u578b\u53c2\u6570\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u975e\u7c7b\u578b\u53c2\u6570\u3002T \u662f\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u901a\u8fc7class\u6216typename\u5173\u952e\u5b57\u6307\u5b9a\u3002N \u662f\u4e00\u4e2a\u975e\u7c7b\u578b\u53c2\u6570\uff0c\u7528\u6765\u4f20\u9012\u6570\u636e\u7684\u503c\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\uff0c\u5b83\u548c\u666e\u901a\u51fd\u6570\u7684\u5f62\u53c2\u4e00\u6837\uff0c\u90fd\u9700\u8981\u6307\u660e\u5177\u4f53\u7684\u7c7b\u578b\u3002 1 2 template < typename T , int N > class Demo { }; template < class T , int N > void func ( T ( & arr )[ N ]); \u7c7b\u6a21\u677f\u4e2d\u4f7f\u7528\u975e\u7c7b\u578b\u53c2\u6570 \u00b6 \u52a8\u6001\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #include <iostream> #include <cstring> #include <cstdlib> using namespace std ; template < typename T , int N > class Array { public : Array (); ~ Array (); public : T & operator []( int i ); //\u91cd\u8f7d\u4e0b\u6807\u8fd0\u7b97\u7b26[] int length () const { return m_length ; } //\u83b7\u53d6\u6570\u7ec4\u957f\u5ea6 bool capacity ( int n ); //\u6539\u53d8\u6570\u7ec4\u5bb9\u91cf private : int m_length ; //\u6570\u7ec4\u7684\u5f53\u524d\u957f\u5ea6 int m_capacity ; //\u5f53\u524d\u5185\u5b58\u7684\u5bb9\u91cf\uff08\u80fd\u5bb9\u4e43\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff09 T * m_p ; //\u6307\u5411\u6570\u7ec4\u5185\u5b58\u7684\u6307\u9488 }; template < typename T , int N > Array < T , N >:: Array (){ m_p = new T [ N ]; m_capacity = m_length = N ; } template < typename T , int N > Array < T , N >::~ Array (){ delete [] m_p ; } template < typename T , int N > T & Array < T , N >:: operator []( int i ){ if ( i < 0 || i >= m_length ){ cout << \"Exception: Array index out of bounds!\" << endl ; } return m_p [ i ]; } template < typename T , int N > bool Array < T , N >:: capacity ( int n ){ if ( n > 0 ){ //\u589e\u5927\u6570\u7ec4 int len = m_length + n ; //\u589e\u5927\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len <= m_capacity ){ //\u73b0\u6709\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 m_length = len ; return true ; } else { //\u73b0\u6709\u5185\u5b58\u4e0d\u80fd\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 T * pTemp = new T [ m_length + 2 * n * sizeof ( T )]; //\u589e\u52a0\u7684\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3 2*n \u4e2a\u5143\u7d20 if ( pTemp == NULL ){ //\u5185\u5b58\u5206\u914d\u5931\u8d25 cout << \"Exception: Failed to allocate memory!\" << endl ; return false ; } else { //\u5185\u5b58\u5206\u914d\u6210\u529f memcpy ( pTemp , m_p , m_length * sizeof ( T ) ); delete [] m_p ; m_p = pTemp ; m_capacity = m_length = len ; } } } else { //\u6536\u7f29\u6570\u7ec4 int len = m_length - abs ( n ); //\u6536\u7f29\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len < 0 ){ cout << \"Exception: Array length is too small!\" << endl ; return false ; } else { m_length = len ; return true ; } } } int main (){ Array < int , 5 > arr ; //\u4e3a\u6570\u7ec4\u5143\u7d20\u8d4b\u503c for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e00\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6269\u5927\u5bb9\u91cf\u5e76\u4e3a\u589e\u52a0\u7684\u5143\u7d20\u8d4b\u503c arr . capacity ( 8 ); for ( int i = 5 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e8c\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6536\u7f29\u5bb9\u91cf arr . capacity ( - 4 ); //\u7b2c\u4e09\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; return 0 ; } \u975e\u7c7b\u578b\u53c2\u6570\u9650\u5236 \u00b6 \u975e\u7c7b\u578b\u53c2\u6570\u7684\u7c7b\u578b\u4e0d\u80fd\u968f\u610f\u6307\u5b9a\uff0c\u5b83\u53d7\u5230\u4e86\u4e25\u683c\u7684\u9650\u5236\uff0c\u53ea\u80fd\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u6307\u5411\u5bf9\u8c61\u6216\u51fd\u6570\u7684\u6307\u9488\uff08\u4e5f\u53ef\u4ee5\u662f\u5f15\u7528\uff09\u3002 \u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u662f\u7531\u7f16\u8bd1\u5668\u5b8c\u6210\uff08\u9690\u5f0f\u5b9e\u4f8b\u5316\uff09\u7684\uff0c\u800c\u4e0d\u662f\u7531\u94fe\u63a5\u5668\u5b8c\u6210\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u94fe\u63a5\u671f\u95f4\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002\u6240\u4ee5\u4e0d\u80fd\u5c06\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u591a\u4e2a\u6587\u4ef6\u4e2d \u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316 \u00b6 \u663e\u5f0f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u7c7b\u6a21\u677f\u65f6\uff0c\u4f1a\u4e00\u6b21\u6027\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u3002 \u6709\u4e86\u7c7b\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316\uff0c\u5c31\u53ef\u4ee5\u5c06\u7c7b\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 1 2 3 4 5 6 template void Swap ( double & a , double & b ); template class Point < char * , char *> ; extern template declaration ; //\u5b9e\u4f8b\u5316\u58f0\u660e template declaration ; //\u5b9e\u4f8b\u5316\u5b9a\u4e49 \u7c7b\u6a21\u677f\u4e0e\u7ee7\u627f \u00b6 \u7c7b\u6a21\u677f\u548c\u7c7b\u6a21\u677f\u4e4b\u95f4\u3001\u7c7b\u6a21\u677f\u548c\u7c7b\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u7ee7\u627f\u3002 \u7c7b\u6a21\u677f\u4ece\u7c7b\u6a21\u677f\u6d3e\u751f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 template < class T1 , class T2 > class A { Tl v1 ; T2 v2 ; }; template < class T1 , class T2 > class B : public A < T2 , T1 > { T1 v3 ; T2 v4 ; }; template < class T > class C : public B < T , T > { T v5 ; }; int main () { B < int , double > obj1 ; C < int > obj2 ; return 0 ; } \u7c7b\u6a21\u677f\u4ece\u6a21\u677f\u7c7b\u6d3e\u751f \u00b6 1 2 3 4 5 template < class T1 , class T2 > class A { T1 v1 ; T2 v2 ; }; template < class T > class B : public A < int , double > { T v ;}; int main () { B < char > obj1 ; return 0 ; } \u7c7b\u6a21\u677f\u4ece\u666e\u901a\u7c7b\u6d3e\u751f \u00b6 1 2 3 4 class A { int v1 ; }; template < class T > class B : public A { T v ; }; int main (){ B < char > obj1 ; return 0 ; } \u666e\u901a\u7c7b\u4ece\u6a21\u677f\u7c7b\u6d3e\u751f \u00b6 1 2 3 4 template < class T > class A { T v1 ; int n ; }; class B : public A < int > { double v ; }; int main () { B obj1 ; return 0 ; } \u7c7b\u6a21\u677f\u4e0e\u53cb\u5143 \u00b6 \u51fd\u6570\u3001\u7c7b\u3001\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void Func1 () { } class A { }; class B { public : void Func () { } }; template < class T > class Tmpl { friend void Func1 (); friend class A ; friend void B :: Func (); }; int main () { Tmpl < int > i ; Tmpl < double > f ; return 0 ; } \u51fd\u6570\u6a21\u677f\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <iostream> #include <string> using namespace std ; template < class T1 , class T2 > class Pair { private : T1 key ; //\u5173\u952e\u5b57 T2 value ; //\u503c public : Pair ( T1 k , T2 v ) : key ( k ), value ( v ) { }; bool operator < ( const Pair < T1 , T2 > & p ) const ; template < class T3 , class T4 > friend ostream & operator << ( ostream & o , const Pair < T3 , T4 > & p ); }; template < class T1 , class T2 > bool Pair < T1 , T2 >:: operator < ( const Pair < T1 , T2 > & p ) const { //\u201c\u5c0f\u201d\u7684\u610f\u601d\u5c31\u662f\u5173\u952e\u5b57\u5c0f return key < p . key ; } template < class Tl , class T2 > ostream & operator << ( ostream & o , const Pair < T1 , T2 > & p ) { o << \"(\" << p . key << \",\" << p . value << \")\" ; return o ; } int main () { Pair < string , int > student ( \"Tom\" , 29 ); Pair < int , double > obj ( 12 , 3.14 ); cout << student << \" \" << obj ; return 0 ; } \u51fd\u6570\u6a21\u677f\u4f5c\u4e3a\u7c7b\u7684\u53cb\u5143 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { int v ; public : A ( int n ) : v ( n ) { } template < class T > friend void Print ( const T & p ); }; template < class T > void Print ( const T & p ) { cout << p . v ; } int main () { A a ( 4 ); Print ( a ); return 0 ; } \u7c7b\u6a21\u677f\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <iostream> using namespace std ; template < class T > class A { public : void Func ( const T & p ) { cout << p . v ; } }; template < class T > class B { private : T v ; public : B ( T n ) : v ( n ) { } template < class T2 > friend class A ; //\u628a\u7c7b\u6a21\u677fA\u58f0\u660e\u4e3a\u53cb\u5143 }; int main () { B < int > b ( 5 ); A < B < int > > a ; //\u7528B<int>\u66ff\u6362A\u6a21\u677f\u4e2d\u7684 T a . Func ( b ); return 0 ; } \u7c7b\u6a21\u677f\u4e2d\u7684\u9759\u6001\u6210\u5458 \u00b6 \u7c7b\u6a21\u677f\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u9759\u6001\u6210\u5458\uff0c\u4ece\u8be5\u7c7b\u6a21\u677f\u5b9e\u4f8b\u5316\u5f97\u5230\u7684\u6240\u6709\u7c7b\u90fd\u5305\u542b\u540c\u6837\u7684\u9759\u6001\u6210\u5458\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> using namespace std ; template < class T > class A { private : static int count ; public : A () { count ++ ; } ~ A () { count -- ; }; A ( A & ) { count ++ ; } static void PrintCount () { cout << count << endl ; } }; template <> int A < int >:: count = 0 ; template <> int A < double >:: count = 0 ; int main () { A < int > ia ; A < double > da ; ia . PrintCount (); da . PrintCount (); return 0 ; }","title":"\u6a21\u677f"},{"location":"cplus/cpp_muban/#_1","text":"","title":"\u6a21\u677f\u548c\u6cdb\u578b"},{"location":"cplus/cpp_muban/#_2","text":"1 2 3 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , ... > \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //\u5728\u51fd\u6570\u4f53\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u53c2\u6570 }","title":"\u6a21\u677f\u51fd\u6570"},{"location":"cplus/cpp_muban/#_3","text":"1 2 3 4 5 6 7 8 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > class \u7c7b\u540d{ //TODO: }; template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > \u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d < \u7c7b\u578b\u53c2\u6570 1 , \u7c7b\u578b\u53c2\u6570 2 , ... >:: \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> using namespace std ; template < class T1 , class T2 > //\u8fd9\u91cc\u4e0d\u80fd\u6709\u5206\u53f7 class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const ; //\u83b7\u53d6x\u5750\u6807 void setX ( T1 x ); //\u8bbe\u7f6ex\u5750\u6807 T2 getY () const ; //\u83b7\u53d6y\u5750\u6807 void setY ( T2 y ); //\u8bbe\u7f6ey\u5750\u6807 private : T1 m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < class T1 , class T2 > //\u6a21\u677f\u5934 T1 Point < T1 , T2 >:: getX () const /*\u51fd\u6570\u5934*/ { return m_x ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setX ( T1 x ){ m_x = x ; } template < class T1 , class T2 > T2 Point < T1 , T2 >:: getY () const { return m_y ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setY ( T2 y ){ m_y = y ; } int main (){ Point < int , int > p1 ( 10 , 20 ); cout << \"x=\" << p1 . getX () << \", y=\" << p1 . getY () << endl ; Point < int , char *> p2 ( 10 , \"\u4e1c\u7ecf180\u5ea6\" ); cout << \"x=\" << p2 . getX () << \", y=\" << p2 . getY () << endl ; Point < char * , char *> * p3 = new Point < char * , char *> ( \"\u4e1c\u7ecf180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ); cout << \"x=\" << p3 -> getX () << \", y=\" << p3 -> getY () << endl ; return 0 ; } \u53ef\u8fb9\u957f\u6570\u7ec4\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> #include <cstring> using namespace std ; template < class T > class CArray { int size ; //\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 T * ptr ; //\u6307\u5411\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4 public : CArray ( int s = 0 ); //s\u4ee3\u8868\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 CArray ( CArray & a ); ~ CArray (); void push_back ( const T & v ); //\u7528\u4e8e\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20v CArray & operator = ( const CArray & a ); //\u7528\u4e8e\u6570\u7ec4\u5bf9\u8c61\u95f4\u7684\u8d4b\u503c T length () { return size ; } T & operator []( int i ) { //\u7528\u4ee5\u652f\u6301\u6839\u636e\u4e0b\u6807\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\uff0c\u5982a[i] = 4;\u548cn = a[i]\u8fd9\u6837\u7684\u8bed\u53e5 return ptr [ i ]; } }; template < class T > CArray < T >:: CArray ( int s ) : size ( s ) { if ( s == 0 ) ptr = NULL ; else ptr = new T [ s ]; } template < class T > CArray < T >:: CArray ( CArray & a ) { if ( ! a . ptr ) { ptr = NULL ; size = 0 ; return ; } ptr = new T [ a . size ]; memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; } template < class T > CArray < T >::~ CArray () { if ( ptr ) delete [] ptr ; } template < class T > CArray < T > & CArray < T >:: operator = ( const CArray & a ) { //\u8d4b\u503c\u53f7\u7684\u4f5c\u7528\u662f\u4f7f\"=\"\u5de6\u8fb9\u5bf9\u8c61\u91cc\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u548c\u5185\u5bb9\u90fd\u548c\u53f3\u8fb9\u7684\u5bf9\u8c61\u4e00\u6837 if ( this == & a ) //\u9632\u6b62a=a\u8fd9\u6837\u7684\u8d4b\u503c\u5bfc\u81f4\u51fa\u9519 return * this ; if ( a . ptr == NULL ) { //\u5982\u679ca\u91cc\u9762\u7684\u6570\u7ec4\u662f\u7a7a\u7684 if ( ptr ) delete [] ptr ; ptr = NULL ; size = 0 ; return * this ; } if ( size < a . size ) { //\u5982\u679c\u539f\u6709\u7a7a\u95f4\u591f\u5927\uff0c\u5c31\u4e0d\u7528\u5206\u914d\u65b0\u7684\u7a7a\u95f4 if ( ptr ) delete [] ptr ; ptr = new T [ a . size ]; } memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; return * this ; } template < class T > void CArray < T >:: push_back ( const T & v ) { //\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 if ( ptr ) { T * tmpPtr = new T [ size + 1 ]; //\u91cd\u65b0\u5206\u914d\u7a7a\u95f4 memcpy ( tmpPtr , ptr , sizeof ( T ) * size ); //\u62f7\u8d1d\u539f\u6570\u7ec4\u5185\u5bb9 delete [] ptr ; ptr = tmpPtr ; } else //\u6570\u7ec4\u672c\u6765\u662f\u7a7a\u7684 ptr = new T [ 1 ]; ptr [ size ++ ] = v ; //\u52a0\u5165\u65b0\u7684\u6570\u7ec4\u5143\u7d20 } int main () { CArray < int > a ; for ( int i = 0 ; i < 5 ; ++ i ) a . push_back ( i ); for ( int i = 0 ; i < a . length (); ++ i ) cout << a [ i ] << \" \" ; return 0 ; }","title":"\u7c7b\u6a21\u677f"},{"location":"cplus/cpp_muban/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> using namespace std ; template < class T > void Swap ( T & a , T & b ); //\u6a21\u677f\u2460\uff1a\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c template < typename T > void Swap ( T a [], T b [], int len ); //\u6a21\u677f\u2461\uff1a\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 void printArray ( int arr [], int len ); //\u6253\u5370\u6570\u7ec4\u5143\u7d20 int main (){ //\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c int m = 10 , n = 99 ; Swap ( m , n ); //\u5339\u914d\u6a21\u677f\u2460 cout << m << \", \" << n << endl ; //\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; int b [ 5 ] = { 10 , 20 , 30 , 40 , 50 }; int len = sizeof ( a ) / sizeof ( int ); //\u6570\u7ec4\u957f\u5ea6 Swap ( a , b , len ); //\u5339\u914d\u6a21\u677f\u2461 printArray ( a , len ); printArray ( b , len ); return 0 ; } template < class T > void Swap ( T & a , T & b ){ T temp = a ; a = b ; b = temp ; } template < typename T > void Swap ( T a [], T b [], int len ){ T temp ; for ( int i = 0 ; i < len ; i ++ ){ temp = a [ i ]; a [ i ] = b [ i ]; b [ i ] = temp ; } } void printArray ( int arr [], int len ){ for ( int i = 0 ; i < len ; i ++ ){ if ( i == len - 1 ){ cout << arr [ i ] << endl ; } else { cout << arr [ i ] << \", \" ; } } } \u4e3a\u51fd\u6570\u6a21\u677f\u663e\u5f0f\u5730\u6307\u660e\u5b9e\u53c2","title":"\u91cd\u8f7d\u51fd\u6570\u6a21\u677f"},{"location":"cplus/cpp_muban/#explicit-specialization","text":"\u6a21\u677f\u4e2d\u7684\u8bed\u53e5\uff08\u51fd\u6570\u4f53\u6216\u8005\u7c7b\u4f53\uff09\u4e0d\u4e00\u5b9a\u5c31\u80fd\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u53ef\u80fd\u4f1a\u6709\u4e2a\u522b\u7684\u7c7b\u578b\u6ca1\u6709\u610f\u4e49\uff0c\u6216\u8005\u4f1a\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002(\u4f8b\u5982\uff1a>\u80fd\u591f\u7528\u6765\u6bd4\u8f83 int\u3001float\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u6570\u636e\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u5374\u4e0d\u80fd\u7528\u6765\u6bd4\u8f83\u7ed3\u6784\u4f53\u53d8\u91cf\u3001\u5bf9\u8c61\u4ee5\u53ca\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u9488\u5bf9\u7ed3\u6784\u4f53\u3001\u7c7b\u548c\u6570\u7ec4\u91cd\u8f7d>) \u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> #include <string> using namespace std ; typedef struct { string name ; int age ; float score ; } STU ; //\u51fd\u6570\u6a21\u677f template < class T > const T & Max ( const T & a , const T & b ); //\u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9STU\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> const STU & Max < STU > ( const STU & a , const STU & b ); //\u91cd\u8f7d<< ostream & operator << ( ostream & out , const STU & stu ); int main (){ int a = 10 ; int b = 20 ; cout << Max ( a , b ) << endl ; STU stu1 = { \"\u738b\u660e\" , 16 , 95.5 }; STU stu2 = { \"\u5f90\u4eae\" , 17 , 90.0 }; cout << Max ( stu1 , stu2 ) << endl ; return 0 ; } template < class T > const T & Max ( const T & a , const T & b ){ return a > b ? a : b ; } template <> const STU & Max < STU > ( const STU & a , const STU & b ){ return a . score > b . score ? a : b ; } ostream & operator << ( ostream & out , const STU & stu ){ out << stu . name << \" , \" << stu . age << \" , \" << stu . score ; return out ; }","title":"\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08Explicit Specialization\uff09"},{"location":"cplus/cpp_muban/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> class Point < char * , char *> { public : Point ( char * x , char * y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } char * getY () const { return m_y ; } void setY ( char * y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 char * m_y ; //y\u5750\u6807 }; //\u8fd9\u91cc\u4e0d\u80fd\u5e26\u6a21\u677f\u5934template<> void Point < char * , char *>:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < int , char *> ( 10 , \"\u4e1c\u4eac180\u5ea6\" ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; }","title":"\u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316"},{"location":"cplus/cpp_muban/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 template < typename T2 > class Point < char * , T2 > { public : Point ( char * x , T2 y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < typename T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < char * , T2 >:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < char * , int > ( \"\u4e1c\u4eac180\u5ea6\" , 10 ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; }","title":"\u90e8\u5206\u663e\u793a\u5177\u4f53\u5316"},{"location":"cplus/cpp_muban/#_7","text":"C++ \u5bf9\u6a21\u677f\u7684\u652f\u6301\u975e\u5e38\u81ea\u7531\uff0c\u6a21\u677f\u4e2d\u9664\u4e86\u53ef\u4ee5\u5305\u542b\u7c7b\u578b\u53c2\u6570\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u975e\u7c7b\u578b\u53c2\u6570\u3002T \u662f\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u901a\u8fc7class\u6216typename\u5173\u952e\u5b57\u6307\u5b9a\u3002N \u662f\u4e00\u4e2a\u975e\u7c7b\u578b\u53c2\u6570\uff0c\u7528\u6765\u4f20\u9012\u6570\u636e\u7684\u503c\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\uff0c\u5b83\u548c\u666e\u901a\u51fd\u6570\u7684\u5f62\u53c2\u4e00\u6837\uff0c\u90fd\u9700\u8981\u6307\u660e\u5177\u4f53\u7684\u7c7b\u578b\u3002 1 2 template < typename T , int N > class Demo { }; template < class T , int N > void func ( T ( & arr )[ N ]);","title":"\u975e\u7c7b\u578b\u53c2\u6570"},{"location":"cplus/cpp_muban/#_8","text":"\u52a8\u6001\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #include <iostream> #include <cstring> #include <cstdlib> using namespace std ; template < typename T , int N > class Array { public : Array (); ~ Array (); public : T & operator []( int i ); //\u91cd\u8f7d\u4e0b\u6807\u8fd0\u7b97\u7b26[] int length () const { return m_length ; } //\u83b7\u53d6\u6570\u7ec4\u957f\u5ea6 bool capacity ( int n ); //\u6539\u53d8\u6570\u7ec4\u5bb9\u91cf private : int m_length ; //\u6570\u7ec4\u7684\u5f53\u524d\u957f\u5ea6 int m_capacity ; //\u5f53\u524d\u5185\u5b58\u7684\u5bb9\u91cf\uff08\u80fd\u5bb9\u4e43\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff09 T * m_p ; //\u6307\u5411\u6570\u7ec4\u5185\u5b58\u7684\u6307\u9488 }; template < typename T , int N > Array < T , N >:: Array (){ m_p = new T [ N ]; m_capacity = m_length = N ; } template < typename T , int N > Array < T , N >::~ Array (){ delete [] m_p ; } template < typename T , int N > T & Array < T , N >:: operator []( int i ){ if ( i < 0 || i >= m_length ){ cout << \"Exception: Array index out of bounds!\" << endl ; } return m_p [ i ]; } template < typename T , int N > bool Array < T , N >:: capacity ( int n ){ if ( n > 0 ){ //\u589e\u5927\u6570\u7ec4 int len = m_length + n ; //\u589e\u5927\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len <= m_capacity ){ //\u73b0\u6709\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 m_length = len ; return true ; } else { //\u73b0\u6709\u5185\u5b58\u4e0d\u80fd\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 T * pTemp = new T [ m_length + 2 * n * sizeof ( T )]; //\u589e\u52a0\u7684\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3 2*n \u4e2a\u5143\u7d20 if ( pTemp == NULL ){ //\u5185\u5b58\u5206\u914d\u5931\u8d25 cout << \"Exception: Failed to allocate memory!\" << endl ; return false ; } else { //\u5185\u5b58\u5206\u914d\u6210\u529f memcpy ( pTemp , m_p , m_length * sizeof ( T ) ); delete [] m_p ; m_p = pTemp ; m_capacity = m_length = len ; } } } else { //\u6536\u7f29\u6570\u7ec4 int len = m_length - abs ( n ); //\u6536\u7f29\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len < 0 ){ cout << \"Exception: Array length is too small!\" << endl ; return false ; } else { m_length = len ; return true ; } } } int main (){ Array < int , 5 > arr ; //\u4e3a\u6570\u7ec4\u5143\u7d20\u8d4b\u503c for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e00\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6269\u5927\u5bb9\u91cf\u5e76\u4e3a\u589e\u52a0\u7684\u5143\u7d20\u8d4b\u503c arr . capacity ( 8 ); for ( int i = 5 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e8c\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6536\u7f29\u5bb9\u91cf arr . capacity ( - 4 ); //\u7b2c\u4e09\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; return 0 ; }","title":"\u7c7b\u6a21\u677f\u4e2d\u4f7f\u7528\u975e\u7c7b\u578b\u53c2\u6570"},{"location":"cplus/cpp_muban/#_9","text":"\u975e\u7c7b\u578b\u53c2\u6570\u7684\u7c7b\u578b\u4e0d\u80fd\u968f\u610f\u6307\u5b9a\uff0c\u5b83\u53d7\u5230\u4e86\u4e25\u683c\u7684\u9650\u5236\uff0c\u53ea\u80fd\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u6307\u5411\u5bf9\u8c61\u6216\u51fd\u6570\u7684\u6307\u9488\uff08\u4e5f\u53ef\u4ee5\u662f\u5f15\u7528\uff09\u3002 \u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u662f\u7531\u7f16\u8bd1\u5668\u5b8c\u6210\uff08\u9690\u5f0f\u5b9e\u4f8b\u5316\uff09\u7684\uff0c\u800c\u4e0d\u662f\u7531\u94fe\u63a5\u5668\u5b8c\u6210\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u94fe\u63a5\u671f\u95f4\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002\u6240\u4ee5\u4e0d\u80fd\u5c06\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u591a\u4e2a\u6587\u4ef6\u4e2d","title":"\u975e\u7c7b\u578b\u53c2\u6570\u9650\u5236"},{"location":"cplus/cpp_muban/#_10","text":"\u663e\u5f0f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u7c7b\u6a21\u677f\u65f6\uff0c\u4f1a\u4e00\u6b21\u6027\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u3002 \u6709\u4e86\u7c7b\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316\uff0c\u5c31\u53ef\u4ee5\u5c06\u7c7b\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 1 2 3 4 5 6 template void Swap ( double & a , double & b ); template class Point < char * , char *> ; extern template declaration ; //\u5b9e\u4f8b\u5316\u58f0\u660e template declaration ; //\u5b9e\u4f8b\u5316\u5b9a\u4e49","title":"\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316"},{"location":"cplus/cpp_muban/#_11","text":"\u7c7b\u6a21\u677f\u548c\u7c7b\u6a21\u677f\u4e4b\u95f4\u3001\u7c7b\u6a21\u677f\u548c\u7c7b\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u7ee7\u627f\u3002","title":"\u7c7b\u6a21\u677f\u4e0e\u7ee7\u627f"},{"location":"cplus/cpp_muban/#_12","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 template < class T1 , class T2 > class A { Tl v1 ; T2 v2 ; }; template < class T1 , class T2 > class B : public A < T2 , T1 > { T1 v3 ; T2 v4 ; }; template < class T > class C : public B < T , T > { T v5 ; }; int main () { B < int , double > obj1 ; C < int > obj2 ; return 0 ; }","title":"\u7c7b\u6a21\u677f\u4ece\u7c7b\u6a21\u677f\u6d3e\u751f"},{"location":"cplus/cpp_muban/#_13","text":"1 2 3 4 5 template < class T1 , class T2 > class A { T1 v1 ; T2 v2 ; }; template < class T > class B : public A < int , double > { T v ;}; int main () { B < char > obj1 ; return 0 ; }","title":"\u7c7b\u6a21\u677f\u4ece\u6a21\u677f\u7c7b\u6d3e\u751f"},{"location":"cplus/cpp_muban/#_14","text":"1 2 3 4 class A { int v1 ; }; template < class T > class B : public A { T v ; }; int main (){ B < char > obj1 ; return 0 ; }","title":"\u7c7b\u6a21\u677f\u4ece\u666e\u901a\u7c7b\u6d3e\u751f"},{"location":"cplus/cpp_muban/#_15","text":"1 2 3 4 template < class T > class A { T v1 ; int n ; }; class B : public A < int > { double v ; }; int main () { B obj1 ; return 0 ; }","title":"\u666e\u901a\u7c7b\u4ece\u6a21\u677f\u7c7b\u6d3e\u751f"},{"location":"cplus/cpp_muban/#_16","text":"","title":"\u7c7b\u6a21\u677f\u4e0e\u53cb\u5143"},{"location":"cplus/cpp_muban/#_17","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void Func1 () { } class A { }; class B { public : void Func () { } }; template < class T > class Tmpl { friend void Func1 (); friend class A ; friend void B :: Func (); }; int main () { Tmpl < int > i ; Tmpl < double > f ; return 0 ; }","title":"\u51fd\u6570\u3001\u7c7b\u3001\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143"},{"location":"cplus/cpp_muban/#_18","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <iostream> #include <string> using namespace std ; template < class T1 , class T2 > class Pair { private : T1 key ; //\u5173\u952e\u5b57 T2 value ; //\u503c public : Pair ( T1 k , T2 v ) : key ( k ), value ( v ) { }; bool operator < ( const Pair < T1 , T2 > & p ) const ; template < class T3 , class T4 > friend ostream & operator << ( ostream & o , const Pair < T3 , T4 > & p ); }; template < class T1 , class T2 > bool Pair < T1 , T2 >:: operator < ( const Pair < T1 , T2 > & p ) const { //\u201c\u5c0f\u201d\u7684\u610f\u601d\u5c31\u662f\u5173\u952e\u5b57\u5c0f return key < p . key ; } template < class Tl , class T2 > ostream & operator << ( ostream & o , const Pair < T1 , T2 > & p ) { o << \"(\" << p . key << \",\" << p . value << \")\" ; return o ; } int main () { Pair < string , int > student ( \"Tom\" , 29 ); Pair < int , double > obj ( 12 , 3.14 ); cout << student << \" \" << obj ; return 0 ; }","title":"\u51fd\u6570\u6a21\u677f\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143"},{"location":"cplus/cpp_muban/#_19","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { int v ; public : A ( int n ) : v ( n ) { } template < class T > friend void Print ( const T & p ); }; template < class T > void Print ( const T & p ) { cout << p . v ; } int main () { A a ( 4 ); Print ( a ); return 0 ; }","title":"\u51fd\u6570\u6a21\u677f\u4f5c\u4e3a\u7c7b\u7684\u53cb\u5143"},{"location":"cplus/cpp_muban/#_20","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <iostream> using namespace std ; template < class T > class A { public : void Func ( const T & p ) { cout << p . v ; } }; template < class T > class B { private : T v ; public : B ( T n ) : v ( n ) { } template < class T2 > friend class A ; //\u628a\u7c7b\u6a21\u677fA\u58f0\u660e\u4e3a\u53cb\u5143 }; int main () { B < int > b ( 5 ); A < B < int > > a ; //\u7528B<int>\u66ff\u6362A\u6a21\u677f\u4e2d\u7684 T a . Func ( b ); return 0 ; }","title":"\u7c7b\u6a21\u677f\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143"},{"location":"cplus/cpp_muban/#_21","text":"\u7c7b\u6a21\u677f\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u9759\u6001\u6210\u5458\uff0c\u4ece\u8be5\u7c7b\u6a21\u677f\u5b9e\u4f8b\u5316\u5f97\u5230\u7684\u6240\u6709\u7c7b\u90fd\u5305\u542b\u540c\u6837\u7684\u9759\u6001\u6210\u5458\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> using namespace std ; template < class T > class A { private : static int count ; public : A () { count ++ ; } ~ A () { count -- ; }; A ( A & ) { count ++ ; } static void PrintCount () { cout << count << endl ; } }; template <> int A < int >:: count = 0 ; template <> int A < double >:: count = 0 ; int main () { A < int > ia ; A < double > da ; ia . PrintCount (); da . PrintCount (); return 0 ; }","title":"\u7c7b\u6a21\u677f\u4e2d\u7684\u9759\u6001\u6210\u5458"},{"location":"cplus/cpp_object/","text":"\u7c7b\u548c\u5bf9\u8c61 \u00b6 \u7c7b\u662f\u4e00\u4e2a\u6a21\u677f\uff08Template\uff09\uff0c\u7f16\u8bd1\u540e\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\u4e0d\u80fd\u5bf9\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002\u53ea\u6709\u5728\u521b\u5efa\u5bf9\u8c61\u540e\u624d\u7ed9\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u8fd9\u4e2a\u65f6\u5019\u8d4b\u503c\u4e86\u3002 \u4f7f\u7528new\u5728\u5806\u4e0a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u662f\u533f\u540d\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u5fc5\u987b\u8981\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5b83\uff0c\u518d\u501f\u52a9\u6307\u9488\u6765\u8bbf\u95ee\u5b83\u7684\u6210\u5458\u53d8\u91cf\u6216\u6210\u5458\u51fd\u6570\u3002 ::\u88ab\u79f0\u4e3a\u57df\u89e3\u6790\u7b26\uff08\u4e5f\u79f0\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u6216\u4f5c\u7528\u57df\u9650\u5b9a\u7b26\uff09\uff0c\u7528\u6765\u8fde\u63a5\u7c7b\u540d\u548c\u51fd\u6570\u540d\uff0c\u6307\u660e\u5f53\u524d\u51fd\u6570\u5c5e\u4e8e\u54ea\u4e2a\u7c7b \u6210\u5458\u5bf9\u8c61\u4e0e\u6210\u5458\u51fd\u6570 \u00b6 \u5728\u7c7b\u4f53\u4e2d\u548c\u7c7b\u4f53\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u662f\u6709\u533a\u522b\u7684\uff1a\u5728\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u4f1a\u81ea\u52a8\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5728\u7c7b\u4f53\u5916\u5b9a\u4e49\u7684\u4e0d\u4f1a \u6210\u5458\u53d8\u91cf\u5927\u90fd\u4ee5m_\u5f00\u5934\uff0c\u8fd9\u662f\u7ea6\u5b9a\u6210\u4fd7\u7684\u5199\u6cd5\uff0c\u4e0d\u662f\u8bed\u6cd5\u89c4\u5b9a\u7684\u5185\u5bb9\u3002\u4ee5m_\u5f00\u5934\u65e2\u53ef\u4ee5\u4e00\u773c\u770b\u51fa\u8fd9\u662f\u6210\u5458\u53d8\u91cf\uff0c\u53c8\u53ef\u4ee5\u548c\u6210\u5458\u51fd\u6570\u4e2d\u7684\u5f62\u53c2\u540d\u5b57\u533a\u5206\u5f00\u3002 \u7f16\u8bd1\u5668\u4f1a\u5c06\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u5206\u5f00\u5b58\u50a8\uff1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u6240\u6709\u5bf9\u8c61\u90fd\u5171\u4eab\u540c\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801 \u6784\u9020\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570\u5fc5\u987b\u662fpublic\u5c5e\u6027\u7684\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\uff0c\u51fd\u6570\u540d\u524d\u9762\u90fd\u4e0d\u80fd\u51fa\u73b0\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5373\u4f7f\u662f void \u4e5f\u4e0d\u5141\u8bb8\uff1b \u51fd\u6570\u4f53\u4e2d\u4e0d\u80fd\u6709 return \u8bed\u53e5\u3002 \u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868 \u00b6 \u521d\u59cb\u5316const\u6210\u5458\u53d8\u91cf\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u3002 \u6210\u5458\u53d8\u91cf\u7684\u521d\u59cb\u5316\u987a\u5e8f\u4e0e\u521d\u59cb\u5316\u5217\u8868\u4e2d\u5217\u51fa\u7684\u53d8\u91cf\u7684\u987a\u5e8f\u65e0\u5173\uff0c\u5b83\u53ea\u4e0e\u6210\u5458\u53d8\u91cf\u5728\u7c7b\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u6709\u5173\u3002 1 2 3 4 5 6 7 8 9 10 11 class VLA { private : const int m_len ; int * m_arr ; public : VLA ( int len ); }; //\u5fc5\u987b\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316 m_len VLA :: VLA ( int len ) : m_len ( len ){ m_arr = new int [ len ]; } \u5bf9\u8c61\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6784\u9020\u521d\u59cb\u5316 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <iostream> using namespace std ; class CSample { public : CSample (){ //\u6784\u9020\u51fd\u6570 1 cout << \"Constructor 1 Called\" << endl ; } CSample ( int n ){ //\u6784\u9020\u51fd\u6570 2 cout << \"Constructor 2 Called\" << endl ; } }; int main (){ cout << \"stepl\" << endl ; CSample arrayl [ 2 ]; cout << \"step2\" << endl ; CSample array2 [ 2 ] = { 4 , 5 }; cout << \"step3\" << endl ; CSample array3 [ 2 ] = { 3 }; cout << \"step4\" << endl ; CSample * array4 = new CSample [ 2 ]; delete [] array4 ; return 0 ; } //\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6 class CTest { public : CTest ( int n ){ } //\u6784\u9020\u51fd\u6570(1) CTest ( int n , int m ){ } //\u6784\u9020\u51fd\u6570(2) CTest (){ } //\u6784\u9020\u51fd\u6570(3) }; int main (){ //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u3001(3) \u521d\u59cb\u5316 CTest arrayl [ 3 ] = { 1 , CTest ( 1 , 2 ) }; //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(2)\u3001(2)\u3001(1)\u521d\u59cb\u5316 CTest array2 [ 3 ] = { CTest ( 2 , 3 ), CTest ( 1 , 2 ), 1 }; //\u4e24\u4e2a\u5143\u7d20\u6307\u5411\u7684\u5bf9\u8c61\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u521d\u59cb\u5316 CTest * pArray [ 3 ] = { new CTest ( 4 ), new CTest ( 1 , 2 ) }; //pArray[2] \u6ca1\u6709\u521d\u59cb\u5316\uff0c\u5176\u503c\u662f\u968f\u673a\u7684\uff0c\u4e0d\u77e5\u9053\u6307\u5411\u54ea\u91cc\u3002 return 0 ; } \u6790\u6784\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570\u7684\u540d\u5b57\u548c\u7c7b\u540d\u76f8\u540c\uff0c\u800c\u6790\u6784\u51fd\u6570\u7684\u540d\u5b57\u662f\u5728\u7c7b\u540d\u524d\u9762\u52a0\u4e00\u4e2a~\u7b26\u53f7\u3002\u6790\u6784\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u4e0d\u80fd\u88ab\u91cd\u8f7d\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002 \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u5b83\u548c\u5168\u5c40\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u5b83\u548c\u5c40\u90e8\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u6267\u884c\u65f6\u673a \u00b6 \u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u8c03\u7528\uff0c\u5bf9\u8c61\u7684\u9500\u6bc1\u65f6\u673a\u4e0e\u5b83\u6240\u5728\u7684\u5185\u5b58\u533a\u57df\u6709\u5173\uff1a \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 new\u521b\u5efa\u7684\u5bf9\u8c61\u4f4d\u4e8e\u5806\u533a\uff0c\u901a\u8fc7delete\u5220\u9664\u65f6\u624d\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709delete\uff0c\u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u6210\u5458\u5bf9\u8c61\u548c\u5c01\u95ed\u7c7b \u00b6 \u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u5982\u679c\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5c31\u79f0\u4e4b\u4e3a\u201c\u6210\u5458\u5bf9\u8c61\u201d\u3002\u5305\u542b\u6210\u5458\u5bf9\u8c61\u7684\u7c7b\u53eb\u5c01\u95ed\u7c7b\uff08enclosed class\uff09\u3002 \u521b\u5efa\u5c01\u95ed\u7c7b\u7684\u5bf9\u8c61\u65f6\uff0c\u5176\u6210\u5458\u5bf9\u8c61\u4e5f\u9700\u8981\u88ab\u521b\u5efa\uff0c\u6210\u5458\u5bf9\u8c61\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\uff1f\u9700\u8981\u501f\u52a9\u5c01\u95ed\u7c7b\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <iostream> using namespace std ; //\u8f6e\u80ce\u7c7b class Tyre { public : Tyre ( int radius , int width ); void show () const ; private : int m_radius ; //\u534a\u5f84 int m_width ; //\u5bbd\u5ea6 }; Tyre :: Tyre ( int radius , int width ) : m_radius ( radius ), m_width ( width ){ } void Tyre :: show () const { cout << \"\u8f6e\u6bc2\u534a\u5f84\uff1a\" << this -> m_radius << \"\u540b\" << endl ; cout << \"\u8f6e\u80ce\u5bbd\u5ea6\uff1a\" << this -> m_width << \"mm\" << endl ; } //\u5f15\u64ce\u7c7b class Engine { public : Engine ( float displacement = 2.0 ); void show () const ; private : float m_displacement ; }; Engine :: Engine ( float displacement ) : m_displacement ( displacement ) {} void Engine :: show () const { cout << \"\u6392\u91cf\uff1a\" << this -> m_displacement << \"L\" << endl ; } //\u6c7d\u8f66\u7c7b class Car { public : Car ( int price , int radius , int width ); void show () const ; private : int m_price ; //\u4ef7\u683c Tyre m_tyre ; Engine m_engine ; }; Car :: Car ( int price , int radius , int width ) : m_price ( price ), m_tyre ( radius , width ) /*\u6307\u660em_tyre\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65b9\u5f0f*/ { }; //\u8fd9\u91cc\u5e76\u6ca1\u6709\u8bf4\u660e m_engine \u8be5\u5982\u4f55\u5904\u7406,\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\u3002 void Car :: show () const { cout << \"\u4ef7\u683c\uff1a\" << this -> m_price << \"\uffe5\" << endl ; this -> m_tyre . show (); this -> m_engine . show (); } int main () { Car car ( 200000 , 19 , 245 ); car . show (); return 0 ; } \u5c01\u95ed\u7c7b\u5bf9\u8c61\u751f\u6210\u65f6\uff0c\u5148\u6267\u884c\u6240\u6709\u6210\u5458\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u624d\u6267\u884c\u5c01\u95ed\u7c7b\u81ea\u5df1\u7684\u6784\u9020\u51fd\u6570\u3002\u6210\u5458\u5bf9\u8c61\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6210\u5458\u5bf9\u8c61\u5728\u7c7b\u5b9a\u4e49\u4e2d\u7684\u6b21\u5e8f\u4e00\u81f4\uff0c\u4e0e\u5b83\u4eec\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u5e8f\u65e0\u5173\u3002 \u5f53\u5c01\u95ed\u7c7b\u5bf9\u8c61\u6d88\u4ea1\u65f6\uff0c\u5148\u6267\u884c\u5c01\u95ed\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u6267\u884c\u6210\u5458\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u6210\u5458\u5bf9\u8c61\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6784\u9020\u7684\u540e\u6790\u6784\u3002 C++ this\u6307\u9488 \u00b6 this \u5b9e\u9645\u4e0a\u662f\u6210\u5458\u51fd\u6570\u7684\u4e00\u4e2a\u5f62\u53c2\uff0c\u5728\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\u5c06\u5bf9\u8c61\u7684\u5730\u5740\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9 this\u3002\u4e0d\u8fc7 this \u8fd9\u4e2a\u5f62\u53c2\u662f\u9690\u5f0f\u7684\uff0c\u5b83\u5e76\u4e0d\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u7531\u7f16\u8bd1\u5668\u9ed8\u9ed8\u5730\u5c06\u5b83\u6dfb\u52a0\u5230\u53c2\u6570\u5217\u8868\u4e2d\u3002 \u6210\u5458\u51fd\u6570\u6700\u7ec8\u88ab\u7f16\u8bd1\u6210\u4e0e\u5bf9\u8c61\u65e0\u5173\u7684\u666e\u901a\u51fd\u6570\uff0c\u9664\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u4f1a\u4e22\u5931\u6240\u6709\u4fe1\u606f\uff0c\u6240\u4ee5\u7f16\u8bd1\u65f6\u8981\u5728\u6210\u5458\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u628a\u5f53\u524d\u5bf9\u8c61\u7684\u9996\u5730\u5740\u4f20\u5165\uff0c\u4ee5\u6b64\u6765\u5173\u8054\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f this\uff0c\u5b83\u662f\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u5173\u8054\u7684\u6865\u6881\u3002 this \u662f const \u6307\u9488\uff0c\u5b83\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff0c\u4e00\u5207\u4f01\u56fe\u4fee\u6539\u8be5\u6307\u9488\u7684\u64cd\u4f5c\uff0c\u5982\u8d4b\u503c\u3001\u9012\u589e\u3001\u9012\u51cf\u7b49\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\u3002 this \u53ea\u80fd\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u7528\u5728\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u610f\u4e49\uff0c\u4e5f\u662f\u975e\u6cd5\u7684\u3002 \u53ea\u6709\u5f53\u5bf9\u8c61\u88ab\u521b\u5efa\u540e this \u624d\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728 static \u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528\uff08\u540e\u7eed\u4f1a\u8bb2\u5230 static \u6210\u5458\uff09\u3002 static\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570 \u00b6 static\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u5728\u7c7b\u58f0\u660e\u7684\u5916\u90e8\u521d\u59cb\u5316\uff1a 1 2 type class :: name = value ; int Student :: m_total = 0 ; //\u9759\u6001\u6210\u5458\u53d8\u91cf\u5728\u521d\u59cb\u5316\u65f6\u4e0d\u80fd\u518d\u52a0 static static \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\u65e2\u4e0d\u662f\u5728\u58f0\u660e\u7c7b\u65f6\u5206\u914d\uff0c\u4e5f\u4e0d\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5206\u914d\uff0c\u800c\u662f\u5728\uff08\u7c7b\u5916\uff09\u521d\u59cb\u5316\u65f6\u5206\u914d\u3002\u53cd\u8fc7\u6765\u8bf4\uff0c\u6ca1\u6709\u5728\u7c7b\u5916\u521d\u59cb\u5316\u7684 static \u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u3002 static\u6210\u5458\u53d8\u91cf\u548c\u666e\u901astatic\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u5728\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\u65f6\u624d\u91ca\u653e\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0cstatic \u6210\u5458\u53d8\u91cf\u4e0d\u5360\u7528\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u4e0d\u968f\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5206\u914d\u5185\u5b58\uff0c\u4e5f\u4e0d\u968f\u5bf9\u8c61\u7684\u9500\u6bc1\u800c\u91ca\u653e\u5185\u5b58\uff0c\u5373\u4f7f\u4e0d\u521b\u5efa\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u3002\u800c\u666e\u901a\u6210\u5458\u53d8\u91cf\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u91ca\u653e\u5185\u5b58\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u666e\u901a\u6210\u5458\u51fd\u6570\u7684\u6839\u672c\u533a\u522b\u5728\u4e8e\uff1a\u666e\u901a\u6210\u5458\u51fd\u6570\u6709 this \u6307\u9488\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2d\u7684\u4efb\u610f\u6210\u5458\uff1b\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff08\u5305\u62ec\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\uff09\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8bbf\u95ee\u9759\u6001\u6210\u5458\u3002\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u5728\u58f0\u660e\u65f6\u8981\u52a0 static\uff0c\u5728\u5b9a\u4e49\u65f6\u4e0d\u80fd\u52a0 static\u3002 const\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570 \u00b6 \u521d\u59cb\u5316 const \u6210\u5458\u53d8\u91cf\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 const \u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u4fee\u6539\u5b83\u4eec\u7684\u503c\uff0c\u8fd9\u79cd\u63aa\u65bd\u4e3b\u8981\u8fd8\u662f\u4e3a\u4e86\u4fdd\u62a4\u6570\u636e\u800c\u8bbe\u7f6e\u7684\u3002const \u6210\u5458\u51fd\u6570\u4e5f\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002 \u5e38\u6210\u5458\u51fd\u6570\u9700\u8981\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u7684\u65f6\u5019\u5728\u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u5173\u952e\u5b57\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Student { public : Student ( char * name , int age , float score ); void show (); //\u58f0\u660e\u5e38\u6210\u5458\u51fd\u6570 char * getname () const ; int getage () const ; float getscore () const ; private : char * m_name ; int m_age ; float m_score ; }; Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } //\u5b9a\u4e49\u5e38\u6210\u5458\u51fd\u6570 char * Student :: getname () const { return m_name ; } int Student :: getage () const { return m_age ; } float Student :: getscore () const { return m_score ; } \u51fd\u6570\u5f00\u5934\u7684 const \u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8868\u793a\u8fd4\u56de\u503c\u662f const \u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f8b\u5982const char * getname()\u3002 \u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u8868\u793a\u5e38\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u79cd\u51fd\u6570\u53ea\u80fd\u8bfb\u53d6\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u80fd\u4fee\u6539\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u4f8b\u5982char * getname() const\u3002 const\u5bf9\u8c61 \u00b6 const\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u5bf9\u8c61\uff0c\u79f0\u4e3a\u5e38\u5bf9\u8c61\u3002\u53ea\u80fd\u8c03\u7528\u7c7b\u7684 const\u6210\u5458\uff08\u5305\u62ecconst\u6210\u5458\u53d8\u91cf\u548cconst\u6210\u5458\u51fd\u6570\uff09\u4e86\u3002 1 2 3 4 5 const class object ( params ); class const object ( params ); const class * p = new class ( params ); class const * p = new class ( params ); friend\u53cb\u5143\u51fd\u6570\u4e0e\u53cb\u5143\u7c7b \u00b6 \u53cb\u5143\u7684\u5173\u7cfb\u662f\u5355\u5411\u7684\u800c\u4e0d\u662f\u53cc\u5411\u7684\u3002 \u53cb\u5143\u7684\u5173\u7cfb\u4e0d\u80fd\u4f20\u9012\u3002 \u4e00\u822c\u4e0d\u5efa\u8bae\u628a\u6574\u4e2a\u7c7b\u58f0\u660e\u4e3a\u53cb\u5143\u7c7b\uff0c\u800c\u53ea\u5c06\u67d0\u4e9b\u6210\u5458\u51fd\u6570\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\u3002 \u53cb\u5143\u51fd\u6570 \u00b6 \u5f53\u524d\u7c7b\u4ee5\u5916\u5b9a\u4e49\u7684\u3001\u4e0d\u5c5e\u4e8e\u5f53\u524d\u7c7b\u7684\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u7c7b\u4e2d\u58f0\u660e\uff0c\u4f46\u8981\u5728\u524d\u9762\u52a0friend\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u53cb\u5143\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u662f\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u7684\u975e\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec public\u3001protected\u3001private \u5c5e\u6027\u7684\u3002 \u53cb\u5143\u51fd\u6570\u4e0d\u540c\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6210\u5458\u51fd\u6570\u5728\u8c03\u7528\u65f6\u4f1a\u9690\u5f0f\u5730\u589e\u52a0 this\u6307\u9488\uff0c\u6307\u5411\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\uff0c\u5728\u53cb\u5143\u51fd\u6570\u4e2d\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u5fc5\u987b\u8981\u501f\u52a9\u5bf9\u8c61\u3002 \u53cb\u5143\u51fd\u6570\uff1a\u6709\u65f6\u5019\u7c7b\u9700\u8981\u63d0\u524d\u58f0\u660e\uff0c\u7c7b\u7684\u63d0\u524d\u58f0\u660e\u7684\u4f7f\u7528\u8303\u56f4\u662f\u6709\u9650\u7684\uff0c\u53ea\u6709\u5728\u6b63\u5f0f\u58f0\u660e\u4e00\u4e2a\u7c7b\u4ee5\u540e\u624d\u80fd\u7528\u5b83\u53bb\u521b\u5efa\u5bf9\u8c61\u3002 \u53cb\u5143\u7c7b \u00b6 \u53cb\u5143\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u90fd\u662f\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <iostream> using namespace std ; class Address ; //\u63d0\u524d\u58f0\u660eAddress\u7c7b //\u58f0\u660eStudent\u7c7b class Student { public : Student ( char * name , int age , float score ); public : void show ( Address * addr ); private : char * m_name ; int m_age ; float m_score ; }; //\u58f0\u660eAddress\u7c7b class Address { public : Address ( char * province , char * city , char * district ); public : //\u5c06Student\u7c7b\u58f0\u660e\u4e3aAddress\u7c7b\u7684\u53cb\u5143\u7c7b friend class Student ; private : char * m_province ; //\u7701\u4efd char * m_city ; //\u57ce\u5e02 char * m_district ; //\u533a\uff08\u5e02\u533a\uff09 }; //\u5b9e\u73b0Student\u7c7b Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show ( Address * addr ){ cout << m_name << \"\u7684\u5e74\u9f84\u662f \" << m_age << \"\uff0c\u6210\u7ee9\u662f \" << m_score << endl ; cout << \"\u5bb6\u5ead\u4f4f\u5740\uff1a\" << addr -> m_province << \"\u7701\" << addr -> m_city << \"\u5e02\" << addr -> m_district << \"\u533a\" << endl ; } //\u5b9e\u73b0Address\u7c7b Address :: Address ( char * province , char * city , char * district ){ m_province = province ; m_city = city ; m_district = district ; } int main (){ Student stu ( \"\u5c0f\u660e\" , 16 , 95.5f ); Address addr ( \"\u9655\u897f\" , \"\u897f\u5b89\" , \"\u96c1\u5854\" ); stu . show ( & addr ); Student * pstu = new Student ( \"\u674e\u78ca\" , 16 , 80.5 ); Address * paddr = new Address ( \"\u6cb3\u5317\" , \"\u8861\u6c34\" , \"\u6843\u57ce\" ); pstu -> show ( paddr ); return 0 ; } string\u7c7b \u00b6 string\u7c7b\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f6c\u6362\u51fd\u6570c_str()\uff0c\u8be5\u51fd\u6570\u80fd\u591f\u5c06 string\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aC\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002 1 2 string path = \"D: \\\\ demo.txt\" ; FILE * fp = fopen ( path . c_str (), \"rt\" );","title":"\u7c7b\u548c\u5bf9\u8c61"},{"location":"cplus/cpp_object/#_1","text":"\u7c7b\u662f\u4e00\u4e2a\u6a21\u677f\uff08Template\uff09\uff0c\u7f16\u8bd1\u540e\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\u4e0d\u80fd\u5bf9\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002\u53ea\u6709\u5728\u521b\u5efa\u5bf9\u8c61\u540e\u624d\u7ed9\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u8fd9\u4e2a\u65f6\u5019\u8d4b\u503c\u4e86\u3002 \u4f7f\u7528new\u5728\u5806\u4e0a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u662f\u533f\u540d\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u5fc5\u987b\u8981\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5b83\uff0c\u518d\u501f\u52a9\u6307\u9488\u6765\u8bbf\u95ee\u5b83\u7684\u6210\u5458\u53d8\u91cf\u6216\u6210\u5458\u51fd\u6570\u3002 ::\u88ab\u79f0\u4e3a\u57df\u89e3\u6790\u7b26\uff08\u4e5f\u79f0\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u6216\u4f5c\u7528\u57df\u9650\u5b9a\u7b26\uff09\uff0c\u7528\u6765\u8fde\u63a5\u7c7b\u540d\u548c\u51fd\u6570\u540d\uff0c\u6307\u660e\u5f53\u524d\u51fd\u6570\u5c5e\u4e8e\u54ea\u4e2a\u7c7b","title":"\u7c7b\u548c\u5bf9\u8c61"},{"location":"cplus/cpp_object/#_2","text":"\u5728\u7c7b\u4f53\u4e2d\u548c\u7c7b\u4f53\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u662f\u6709\u533a\u522b\u7684\uff1a\u5728\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u4f1a\u81ea\u52a8\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5728\u7c7b\u4f53\u5916\u5b9a\u4e49\u7684\u4e0d\u4f1a \u6210\u5458\u53d8\u91cf\u5927\u90fd\u4ee5m_\u5f00\u5934\uff0c\u8fd9\u662f\u7ea6\u5b9a\u6210\u4fd7\u7684\u5199\u6cd5\uff0c\u4e0d\u662f\u8bed\u6cd5\u89c4\u5b9a\u7684\u5185\u5bb9\u3002\u4ee5m_\u5f00\u5934\u65e2\u53ef\u4ee5\u4e00\u773c\u770b\u51fa\u8fd9\u662f\u6210\u5458\u53d8\u91cf\uff0c\u53c8\u53ef\u4ee5\u548c\u6210\u5458\u51fd\u6570\u4e2d\u7684\u5f62\u53c2\u540d\u5b57\u533a\u5206\u5f00\u3002 \u7f16\u8bd1\u5668\u4f1a\u5c06\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u5206\u5f00\u5b58\u50a8\uff1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u6240\u6709\u5bf9\u8c61\u90fd\u5171\u4eab\u540c\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801","title":"\u6210\u5458\u5bf9\u8c61\u4e0e\u6210\u5458\u51fd\u6570"},{"location":"cplus/cpp_object/#_3","text":"\u6784\u9020\u51fd\u6570\u5fc5\u987b\u662fpublic\u5c5e\u6027\u7684\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\uff0c\u51fd\u6570\u540d\u524d\u9762\u90fd\u4e0d\u80fd\u51fa\u73b0\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5373\u4f7f\u662f void \u4e5f\u4e0d\u5141\u8bb8\uff1b \u51fd\u6570\u4f53\u4e2d\u4e0d\u80fd\u6709 return \u8bed\u53e5\u3002","title":"\u6784\u9020\u51fd\u6570"},{"location":"cplus/cpp_object/#_4","text":"\u521d\u59cb\u5316const\u6210\u5458\u53d8\u91cf\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u3002 \u6210\u5458\u53d8\u91cf\u7684\u521d\u59cb\u5316\u987a\u5e8f\u4e0e\u521d\u59cb\u5316\u5217\u8868\u4e2d\u5217\u51fa\u7684\u53d8\u91cf\u7684\u987a\u5e8f\u65e0\u5173\uff0c\u5b83\u53ea\u4e0e\u6210\u5458\u53d8\u91cf\u5728\u7c7b\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u6709\u5173\u3002 1 2 3 4 5 6 7 8 9 10 11 class VLA { private : const int m_len ; int * m_arr ; public : VLA ( int len ); }; //\u5fc5\u987b\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316 m_len VLA :: VLA ( int len ) : m_len ( len ){ m_arr = new int [ len ]; }","title":"\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868"},{"location":"cplus/cpp_object/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <iostream> using namespace std ; class CSample { public : CSample (){ //\u6784\u9020\u51fd\u6570 1 cout << \"Constructor 1 Called\" << endl ; } CSample ( int n ){ //\u6784\u9020\u51fd\u6570 2 cout << \"Constructor 2 Called\" << endl ; } }; int main (){ cout << \"stepl\" << endl ; CSample arrayl [ 2 ]; cout << \"step2\" << endl ; CSample array2 [ 2 ] = { 4 , 5 }; cout << \"step3\" << endl ; CSample array3 [ 2 ] = { 3 }; cout << \"step4\" << endl ; CSample * array4 = new CSample [ 2 ]; delete [] array4 ; return 0 ; } //\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6 class CTest { public : CTest ( int n ){ } //\u6784\u9020\u51fd\u6570(1) CTest ( int n , int m ){ } //\u6784\u9020\u51fd\u6570(2) CTest (){ } //\u6784\u9020\u51fd\u6570(3) }; int main (){ //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u3001(3) \u521d\u59cb\u5316 CTest arrayl [ 3 ] = { 1 , CTest ( 1 , 2 ) }; //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(2)\u3001(2)\u3001(1)\u521d\u59cb\u5316 CTest array2 [ 3 ] = { CTest ( 2 , 3 ), CTest ( 1 , 2 ), 1 }; //\u4e24\u4e2a\u5143\u7d20\u6307\u5411\u7684\u5bf9\u8c61\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u521d\u59cb\u5316 CTest * pArray [ 3 ] = { new CTest ( 4 ), new CTest ( 1 , 2 ) }; //pArray[2] \u6ca1\u6709\u521d\u59cb\u5316\uff0c\u5176\u503c\u662f\u968f\u673a\u7684\uff0c\u4e0d\u77e5\u9053\u6307\u5411\u54ea\u91cc\u3002 return 0 ; }","title":"\u5bf9\u8c61\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6784\u9020\u521d\u59cb\u5316"},{"location":"cplus/cpp_object/#_6","text":"\u6784\u9020\u51fd\u6570\u7684\u540d\u5b57\u548c\u7c7b\u540d\u76f8\u540c\uff0c\u800c\u6790\u6784\u51fd\u6570\u7684\u540d\u5b57\u662f\u5728\u7c7b\u540d\u524d\u9762\u52a0\u4e00\u4e2a~\u7b26\u53f7\u3002\u6790\u6784\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u4e0d\u80fd\u88ab\u91cd\u8f7d\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002 \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u5b83\u548c\u5168\u5c40\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u5b83\u548c\u5c40\u90e8\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002","title":"\u6790\u6784\u51fd\u6570"},{"location":"cplus/cpp_object/#_7","text":"\u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u8c03\u7528\uff0c\u5bf9\u8c61\u7684\u9500\u6bc1\u65f6\u673a\u4e0e\u5b83\u6240\u5728\u7684\u5185\u5b58\u533a\u57df\u6709\u5173\uff1a \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 new\u521b\u5efa\u7684\u5bf9\u8c61\u4f4d\u4e8e\u5806\u533a\uff0c\u901a\u8fc7delete\u5220\u9664\u65f6\u624d\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709delete\uff0c\u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u3002","title":"\u6790\u6784\u51fd\u6570\u6267\u884c\u65f6\u673a"},{"location":"cplus/cpp_object/#_8","text":"\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u5982\u679c\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5c31\u79f0\u4e4b\u4e3a\u201c\u6210\u5458\u5bf9\u8c61\u201d\u3002\u5305\u542b\u6210\u5458\u5bf9\u8c61\u7684\u7c7b\u53eb\u5c01\u95ed\u7c7b\uff08enclosed class\uff09\u3002 \u521b\u5efa\u5c01\u95ed\u7c7b\u7684\u5bf9\u8c61\u65f6\uff0c\u5176\u6210\u5458\u5bf9\u8c61\u4e5f\u9700\u8981\u88ab\u521b\u5efa\uff0c\u6210\u5458\u5bf9\u8c61\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\uff1f\u9700\u8981\u501f\u52a9\u5c01\u95ed\u7c7b\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <iostream> using namespace std ; //\u8f6e\u80ce\u7c7b class Tyre { public : Tyre ( int radius , int width ); void show () const ; private : int m_radius ; //\u534a\u5f84 int m_width ; //\u5bbd\u5ea6 }; Tyre :: Tyre ( int radius , int width ) : m_radius ( radius ), m_width ( width ){ } void Tyre :: show () const { cout << \"\u8f6e\u6bc2\u534a\u5f84\uff1a\" << this -> m_radius << \"\u540b\" << endl ; cout << \"\u8f6e\u80ce\u5bbd\u5ea6\uff1a\" << this -> m_width << \"mm\" << endl ; } //\u5f15\u64ce\u7c7b class Engine { public : Engine ( float displacement = 2.0 ); void show () const ; private : float m_displacement ; }; Engine :: Engine ( float displacement ) : m_displacement ( displacement ) {} void Engine :: show () const { cout << \"\u6392\u91cf\uff1a\" << this -> m_displacement << \"L\" << endl ; } //\u6c7d\u8f66\u7c7b class Car { public : Car ( int price , int radius , int width ); void show () const ; private : int m_price ; //\u4ef7\u683c Tyre m_tyre ; Engine m_engine ; }; Car :: Car ( int price , int radius , int width ) : m_price ( price ), m_tyre ( radius , width ) /*\u6307\u660em_tyre\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65b9\u5f0f*/ { }; //\u8fd9\u91cc\u5e76\u6ca1\u6709\u8bf4\u660e m_engine \u8be5\u5982\u4f55\u5904\u7406,\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\u3002 void Car :: show () const { cout << \"\u4ef7\u683c\uff1a\" << this -> m_price << \"\uffe5\" << endl ; this -> m_tyre . show (); this -> m_engine . show (); } int main () { Car car ( 200000 , 19 , 245 ); car . show (); return 0 ; } \u5c01\u95ed\u7c7b\u5bf9\u8c61\u751f\u6210\u65f6\uff0c\u5148\u6267\u884c\u6240\u6709\u6210\u5458\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u624d\u6267\u884c\u5c01\u95ed\u7c7b\u81ea\u5df1\u7684\u6784\u9020\u51fd\u6570\u3002\u6210\u5458\u5bf9\u8c61\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6210\u5458\u5bf9\u8c61\u5728\u7c7b\u5b9a\u4e49\u4e2d\u7684\u6b21\u5e8f\u4e00\u81f4\uff0c\u4e0e\u5b83\u4eec\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u5e8f\u65e0\u5173\u3002 \u5f53\u5c01\u95ed\u7c7b\u5bf9\u8c61\u6d88\u4ea1\u65f6\uff0c\u5148\u6267\u884c\u5c01\u95ed\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u6267\u884c\u6210\u5458\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u6210\u5458\u5bf9\u8c61\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6784\u9020\u7684\u540e\u6790\u6784\u3002","title":"\u6210\u5458\u5bf9\u8c61\u548c\u5c01\u95ed\u7c7b"},{"location":"cplus/cpp_object/#c-this","text":"this \u5b9e\u9645\u4e0a\u662f\u6210\u5458\u51fd\u6570\u7684\u4e00\u4e2a\u5f62\u53c2\uff0c\u5728\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\u5c06\u5bf9\u8c61\u7684\u5730\u5740\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9 this\u3002\u4e0d\u8fc7 this \u8fd9\u4e2a\u5f62\u53c2\u662f\u9690\u5f0f\u7684\uff0c\u5b83\u5e76\u4e0d\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u7531\u7f16\u8bd1\u5668\u9ed8\u9ed8\u5730\u5c06\u5b83\u6dfb\u52a0\u5230\u53c2\u6570\u5217\u8868\u4e2d\u3002 \u6210\u5458\u51fd\u6570\u6700\u7ec8\u88ab\u7f16\u8bd1\u6210\u4e0e\u5bf9\u8c61\u65e0\u5173\u7684\u666e\u901a\u51fd\u6570\uff0c\u9664\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u4f1a\u4e22\u5931\u6240\u6709\u4fe1\u606f\uff0c\u6240\u4ee5\u7f16\u8bd1\u65f6\u8981\u5728\u6210\u5458\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u628a\u5f53\u524d\u5bf9\u8c61\u7684\u9996\u5730\u5740\u4f20\u5165\uff0c\u4ee5\u6b64\u6765\u5173\u8054\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f this\uff0c\u5b83\u662f\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u5173\u8054\u7684\u6865\u6881\u3002 this \u662f const \u6307\u9488\uff0c\u5b83\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff0c\u4e00\u5207\u4f01\u56fe\u4fee\u6539\u8be5\u6307\u9488\u7684\u64cd\u4f5c\uff0c\u5982\u8d4b\u503c\u3001\u9012\u589e\u3001\u9012\u51cf\u7b49\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\u3002 this \u53ea\u80fd\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u7528\u5728\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u610f\u4e49\uff0c\u4e5f\u662f\u975e\u6cd5\u7684\u3002 \u53ea\u6709\u5f53\u5bf9\u8c61\u88ab\u521b\u5efa\u540e this \u624d\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728 static \u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528\uff08\u540e\u7eed\u4f1a\u8bb2\u5230 static \u6210\u5458\uff09\u3002","title":"C++ this\u6307\u9488"},{"location":"cplus/cpp_object/#static","text":"static\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u5728\u7c7b\u58f0\u660e\u7684\u5916\u90e8\u521d\u59cb\u5316\uff1a 1 2 type class :: name = value ; int Student :: m_total = 0 ; //\u9759\u6001\u6210\u5458\u53d8\u91cf\u5728\u521d\u59cb\u5316\u65f6\u4e0d\u80fd\u518d\u52a0 static static \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\u65e2\u4e0d\u662f\u5728\u58f0\u660e\u7c7b\u65f6\u5206\u914d\uff0c\u4e5f\u4e0d\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5206\u914d\uff0c\u800c\u662f\u5728\uff08\u7c7b\u5916\uff09\u521d\u59cb\u5316\u65f6\u5206\u914d\u3002\u53cd\u8fc7\u6765\u8bf4\uff0c\u6ca1\u6709\u5728\u7c7b\u5916\u521d\u59cb\u5316\u7684 static \u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u3002 static\u6210\u5458\u53d8\u91cf\u548c\u666e\u901astatic\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u5728\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\u65f6\u624d\u91ca\u653e\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0cstatic \u6210\u5458\u53d8\u91cf\u4e0d\u5360\u7528\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u4e0d\u968f\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5206\u914d\u5185\u5b58\uff0c\u4e5f\u4e0d\u968f\u5bf9\u8c61\u7684\u9500\u6bc1\u800c\u91ca\u653e\u5185\u5b58\uff0c\u5373\u4f7f\u4e0d\u521b\u5efa\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u3002\u800c\u666e\u901a\u6210\u5458\u53d8\u91cf\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u91ca\u653e\u5185\u5b58\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u666e\u901a\u6210\u5458\u51fd\u6570\u7684\u6839\u672c\u533a\u522b\u5728\u4e8e\uff1a\u666e\u901a\u6210\u5458\u51fd\u6570\u6709 this \u6307\u9488\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2d\u7684\u4efb\u610f\u6210\u5458\uff1b\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff08\u5305\u62ec\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\uff09\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8bbf\u95ee\u9759\u6001\u6210\u5458\u3002\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u5728\u58f0\u660e\u65f6\u8981\u52a0 static\uff0c\u5728\u5b9a\u4e49\u65f6\u4e0d\u80fd\u52a0 static\u3002","title":"static\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570"},{"location":"cplus/cpp_object/#const","text":"\u521d\u59cb\u5316 const \u6210\u5458\u53d8\u91cf\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 const \u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u4fee\u6539\u5b83\u4eec\u7684\u503c\uff0c\u8fd9\u79cd\u63aa\u65bd\u4e3b\u8981\u8fd8\u662f\u4e3a\u4e86\u4fdd\u62a4\u6570\u636e\u800c\u8bbe\u7f6e\u7684\u3002const \u6210\u5458\u51fd\u6570\u4e5f\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002 \u5e38\u6210\u5458\u51fd\u6570\u9700\u8981\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u7684\u65f6\u5019\u5728\u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u5173\u952e\u5b57\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Student { public : Student ( char * name , int age , float score ); void show (); //\u58f0\u660e\u5e38\u6210\u5458\u51fd\u6570 char * getname () const ; int getage () const ; float getscore () const ; private : char * m_name ; int m_age ; float m_score ; }; Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } //\u5b9a\u4e49\u5e38\u6210\u5458\u51fd\u6570 char * Student :: getname () const { return m_name ; } int Student :: getage () const { return m_age ; } float Student :: getscore () const { return m_score ; } \u51fd\u6570\u5f00\u5934\u7684 const \u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8868\u793a\u8fd4\u56de\u503c\u662f const \u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f8b\u5982const char * getname()\u3002 \u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u8868\u793a\u5e38\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u79cd\u51fd\u6570\u53ea\u80fd\u8bfb\u53d6\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u80fd\u4fee\u6539\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u4f8b\u5982char * getname() const\u3002","title":"const\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570"},{"location":"cplus/cpp_object/#const_1","text":"const\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u5bf9\u8c61\uff0c\u79f0\u4e3a\u5e38\u5bf9\u8c61\u3002\u53ea\u80fd\u8c03\u7528\u7c7b\u7684 const\u6210\u5458\uff08\u5305\u62ecconst\u6210\u5458\u53d8\u91cf\u548cconst\u6210\u5458\u51fd\u6570\uff09\u4e86\u3002 1 2 3 4 5 const class object ( params ); class const object ( params ); const class * p = new class ( params ); class const * p = new class ( params );","title":"const\u5bf9\u8c61"},{"location":"cplus/cpp_object/#friend","text":"\u53cb\u5143\u7684\u5173\u7cfb\u662f\u5355\u5411\u7684\u800c\u4e0d\u662f\u53cc\u5411\u7684\u3002 \u53cb\u5143\u7684\u5173\u7cfb\u4e0d\u80fd\u4f20\u9012\u3002 \u4e00\u822c\u4e0d\u5efa\u8bae\u628a\u6574\u4e2a\u7c7b\u58f0\u660e\u4e3a\u53cb\u5143\u7c7b\uff0c\u800c\u53ea\u5c06\u67d0\u4e9b\u6210\u5458\u51fd\u6570\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\u3002","title":"friend\u53cb\u5143\u51fd\u6570\u4e0e\u53cb\u5143\u7c7b"},{"location":"cplus/cpp_object/#_9","text":"\u5f53\u524d\u7c7b\u4ee5\u5916\u5b9a\u4e49\u7684\u3001\u4e0d\u5c5e\u4e8e\u5f53\u524d\u7c7b\u7684\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u7c7b\u4e2d\u58f0\u660e\uff0c\u4f46\u8981\u5728\u524d\u9762\u52a0friend\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u53cb\u5143\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u662f\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u7684\u975e\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec public\u3001protected\u3001private \u5c5e\u6027\u7684\u3002 \u53cb\u5143\u51fd\u6570\u4e0d\u540c\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6210\u5458\u51fd\u6570\u5728\u8c03\u7528\u65f6\u4f1a\u9690\u5f0f\u5730\u589e\u52a0 this\u6307\u9488\uff0c\u6307\u5411\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\uff0c\u5728\u53cb\u5143\u51fd\u6570\u4e2d\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u5fc5\u987b\u8981\u501f\u52a9\u5bf9\u8c61\u3002 \u53cb\u5143\u51fd\u6570\uff1a\u6709\u65f6\u5019\u7c7b\u9700\u8981\u63d0\u524d\u58f0\u660e\uff0c\u7c7b\u7684\u63d0\u524d\u58f0\u660e\u7684\u4f7f\u7528\u8303\u56f4\u662f\u6709\u9650\u7684\uff0c\u53ea\u6709\u5728\u6b63\u5f0f\u58f0\u660e\u4e00\u4e2a\u7c7b\u4ee5\u540e\u624d\u80fd\u7528\u5b83\u53bb\u521b\u5efa\u5bf9\u8c61\u3002","title":"\u53cb\u5143\u51fd\u6570"},{"location":"cplus/cpp_object/#_10","text":"\u53cb\u5143\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u90fd\u662f\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <iostream> using namespace std ; class Address ; //\u63d0\u524d\u58f0\u660eAddress\u7c7b //\u58f0\u660eStudent\u7c7b class Student { public : Student ( char * name , int age , float score ); public : void show ( Address * addr ); private : char * m_name ; int m_age ; float m_score ; }; //\u58f0\u660eAddress\u7c7b class Address { public : Address ( char * province , char * city , char * district ); public : //\u5c06Student\u7c7b\u58f0\u660e\u4e3aAddress\u7c7b\u7684\u53cb\u5143\u7c7b friend class Student ; private : char * m_province ; //\u7701\u4efd char * m_city ; //\u57ce\u5e02 char * m_district ; //\u533a\uff08\u5e02\u533a\uff09 }; //\u5b9e\u73b0Student\u7c7b Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show ( Address * addr ){ cout << m_name << \"\u7684\u5e74\u9f84\u662f \" << m_age << \"\uff0c\u6210\u7ee9\u662f \" << m_score << endl ; cout << \"\u5bb6\u5ead\u4f4f\u5740\uff1a\" << addr -> m_province << \"\u7701\" << addr -> m_city << \"\u5e02\" << addr -> m_district << \"\u533a\" << endl ; } //\u5b9e\u73b0Address\u7c7b Address :: Address ( char * province , char * city , char * district ){ m_province = province ; m_city = city ; m_district = district ; } int main (){ Student stu ( \"\u5c0f\u660e\" , 16 , 95.5f ); Address addr ( \"\u9655\u897f\" , \"\u897f\u5b89\" , \"\u96c1\u5854\" ); stu . show ( & addr ); Student * pstu = new Student ( \"\u674e\u78ca\" , 16 , 80.5 ); Address * paddr = new Address ( \"\u6cb3\u5317\" , \"\u8861\u6c34\" , \"\u6843\u57ce\" ); pstu -> show ( paddr ); return 0 ; }","title":"\u53cb\u5143\u7c7b"},{"location":"cplus/cpp_object/#string","text":"string\u7c7b\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f6c\u6362\u51fd\u6570c_str()\uff0c\u8be5\u51fd\u6570\u80fd\u591f\u5c06 string\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aC\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002 1 2 string path = \"D: \\\\ demo.txt\" ; FILE * fp = fopen ( path . c_str (), \"rt\" );","title":"string\u7c7b"},{"location":"cplus/cpp_polym/","text":"\u591a\u6001\u4e0e\u865a\u51fd\u6570 \u00b6 \u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u53ea\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002 \u8ba9\u57fa\u7c7b\u6307\u9488\u80fd\u591f\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0cC++ \u589e\u52a0\u4e86\u865a\u51fd\u6570\uff08Virtual Function\uff09\u3002\u4f7f\u7528\u865a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u58f0\u660e\u524d\u9762\u589e\u52a0 virtual \u5173\u952e\u5b57\u3002 \u6709\u4e86\u865a\u51fd\u6570\uff0c\u57fa\u7c7b\u6307\u9488\u6307\u5411\u57fa\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u57fa\u7c7b\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\uff09\uff0c\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u6309\u7167\u57fa\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u6d3e\u751f\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u5b83\u6709\u591a\u79cd\u5f62\u6001\uff0c\u6216\u8005\u8bf4\u6709\u591a\u79cd\u8868\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u591a\u6001\uff08Polymorphism\uff09\u3002 \u865a\u51fd\u6570\u7684\u6ce8\u610f\u4e8b\u9879 1. \u53ea\u9700\u8981\u5728\u865a\u51fd\u6570\u7684\u58f0\u660e\u5904\u52a0\u4e0a virtual \u5173\u952e\u5b57\uff0c\u51fd\u6570\u5b9a\u4e49\u5904\u53ef\u4ee5\u52a0\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u3002 \u53ef\u4ee5\u53ea\u5c06\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u8fd9\u6837\u6240\u6709\u6d3e\u751f\u7c7b\u4e2d\u5177\u6709\u906e\u853d\u5173\u7cfb\u7684\u540c\u540d\u51fd\u6570\u90fd\u5c06\u81ea\u52a8\u6210\u4e3a\u865a\u51fd\u6570\u3002 \u5f53\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u865a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u5b9a\u4e49\u65b0\u7684\u51fd\u6570\u6765\u906e\u853d\u6b64\u51fd\u6570\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u3002 \u53ea\u6709\u6d3e\u751f\u7c7b\u7684\u865a\u51fd\u6570\u8986\u76d6\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u624d\u80fd\u6784\u6210\u591a\u6001\uff08\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u8bbf\u95ee\u6d3e\u751f\u7c7b\u51fd\u6570\uff09\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u800c\u4e14\u6709\u65f6\u5019\u5fc5\u987b\u8981\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u6784\u6210\u591a\u6001\u7684\u6761\u4ef6 1. \u5fc5\u987b\u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff1b 2. \u7ee7\u627f\u5173\u7cfb\u4e2d\u5fc5\u987b\u6709\u540c\u540d\u7684\u865a\u51fd\u6570\uff0c\u5e76\u4e14\u5b83\u4eec\u662f\u8986\u76d6\u5173\u7cfb\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u3002 3. \u5b58\u5728\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u901a\u8fc7\u8be5\u6307\u9488\u8c03\u7528\u865a\u51fd\u6570\u3002 \u865a\u6790\u6784\u51fd\u6570\u7684\u5fc5\u8981\u6027 \u00b6 \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 1 2 3 4 5 6 7 class Base { public : Base (); virtual ~ Base (); protected : char * str ; }; \u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u8be6\u89e3 \u00b6 1 virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) = 0 ; \u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u53ea\u6709\u51fd\u6570\u58f0\u660e\uff0c\u5728\u865a\u51fd\u6570\u58f0\u660e\u7684\u7ed3\u5c3e\u52a0\u4e0a=0\uff0c\u8868\u660e\u6b64\u51fd\u6570\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08Abstract Class\uff09\u3002\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u65e0\u6cd5\u5b9e\u4f8b\u5316\u3002\u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u624d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u62bd\u8c61\u57fa\u7c7b\u9664\u4e86\u7ea6\u675f\u6d3e\u751f\u7c7b\u7684\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u591a\u6001\u3002 \u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7c7b\u6210\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u4f46\u662f\u62bd\u8c61\u57fa\u7c7b\u4e2d\u9664\u4e86\u5305\u542b\u7eaf\u865a\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u5176\u5b83\u7684\u6210\u5458\u51fd\u6570\uff08\u865a\u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\uff09\u548c\u6210\u5458\u53d8\u91cf\u3002 \u53ea\u6709\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\u624d\u80fd\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u666e\u901a\u6210\u5458\u51fd\u6570\u548c\u9876\u5c42\u51fd\u6570\u5747\u4e0d\u80fd\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u865a\u51fd\u6570\u8868 \u00b6 \u7f16\u8bd1\u5668\u4e4b\u6240\u4ee5\u80fd\u901a\u8fc7\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u627e\u5230\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u989d\u5916\u5730\u589e\u52a0\u4e86\u865a\u51fd\u6570\u8868\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5305\u542b\u4e86\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u5728\u521b\u5efa\u8be5\u7c7b\u7684\u5bf9\u8c61\u65f6\u5c31\u4f1a\u989d\u5916\u5730\u589e\u52a0\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u865a\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\u3002\u4e0d\u8fc7\u6570\u7ec4\u548c\u5bf9\u8c61\u662f\u5206\u5f00\u5b58\u50a8\u7684\uff0c\u4e3a\u4e86\u5c06\u5bf9\u8c61\u548c\u6570\u7ec4\u5173\u8054\u8d77\u6765\uff0c\u7f16\u8bd1\u5668\u8fd8\u8981\u5728\u5bf9\u8c61\u4e2d\u5b89\u63d2\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u6570\u7ec4\u5c31\u662f\u865a\u51fd\u6570\u8868\uff08Virtual function table\uff09\uff0c\u7b80\u5199\u4e3avtable\u3002 typeid\u8fd0\u7b97\u7b26\u4e0eRTTI\u673a\u5236 \u00b6 typeid \u8fd0\u7b97\u7b26\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u7c7b\u578b\u4fe1\u606f\u662f\u521b\u5efa\u6570\u636e\u7684\u6a21\u677f\uff0c\u6570\u636e\u5360\u7528\u591a\u5927\u5185\u5b58\u3001\u80fd\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c\u3001\u8be5\u5982\u4f55\u64cd\u4f5c\u7b49\uff0c\u8fd9\u4e9b\u90fd\u7531\u5b83\u7684\u7c7b\u578b\u4fe1\u606f\u51b3\u5b9a\u3002 \u8fd9\u79cd\u5728\u7a0b\u5e8f\u8fd0\u884c\u540e\u786e\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u4fe1\u606f\u7684\u673a\u5236\u79f0\u4e3a\u8fd0\u884c\u65f6\u7c7b\u578b\u8bc6\u522b\uff08Run-Time Type Identification\uff0cRTTI\uff09\u3002\u5728 C++ \u4e2d\uff0c\u53ea\u6709\u7c7b\u4e2d\u5305\u542b\u4e86\u865a\u51fd\u6570\u65f6\u624d\u4f1a\u542f\u7528 RTTI \u673a\u5236\uff0c\u5176\u4ed6\u6240\u6709\u60c5\u51b5\u90fd\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u786e\u5b9a\u7c7b\u578b\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> using namespace std ; //\u57fa\u7c7b class People { public : virtual void func (){ } }; //\u6d3e\u751f\u7c7b class Student : public People { }; int main (){ People * p ; int n ; cin >> n ; if ( n <= 100 ){ p = new People (); } else { p = new Student (); } //\u6839\u636e\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c if ( typeid ( * p ) == typeid ( People )){ cout << \"I am human.\" << endl ; } else { cout << \"I am a student.\" << endl ; } return 0 ; } \u9664\u4e86 typeid \u8fd0\u7b97\u7b26\uff0cdynamic_cast \u8fd0\u7b97\u7b26\u548c\u5f02\u5e38\u5904\u7406\u4e5f\u4f9d\u8d56\u4e8e RTTI \u673a\u5236\uff0c\u5e76\u4e14\u8981\u80fd\u591f\u901a\u8fc7\u6d3e\u751f\u7c7b\u83b7\u53d6\u57fa\u7c7b\u7684\u4fe1\u606f\uff0c\u6216\u8005\u8bf4\u8981\u80fd\u591f\u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\uff0c\u8981\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u518d\u589e\u52a0\u4e00\u6761\u7ef3\u7d22\u3002\u79f0\u6b64\u4e3a\u7ee7\u627f\u94fe\uff08Inheritance Chain\uff09\u3002","title":"\u591a\u6001\u4e0e\u865a\u51fd\u6570"},{"location":"cplus/cpp_polym/#_1","text":"\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u53ea\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002 \u8ba9\u57fa\u7c7b\u6307\u9488\u80fd\u591f\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0cC++ \u589e\u52a0\u4e86\u865a\u51fd\u6570\uff08Virtual Function\uff09\u3002\u4f7f\u7528\u865a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u58f0\u660e\u524d\u9762\u589e\u52a0 virtual \u5173\u952e\u5b57\u3002 \u6709\u4e86\u865a\u51fd\u6570\uff0c\u57fa\u7c7b\u6307\u9488\u6307\u5411\u57fa\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u57fa\u7c7b\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\uff09\uff0c\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u6309\u7167\u57fa\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u6d3e\u751f\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u5b83\u6709\u591a\u79cd\u5f62\u6001\uff0c\u6216\u8005\u8bf4\u6709\u591a\u79cd\u8868\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u591a\u6001\uff08Polymorphism\uff09\u3002 \u865a\u51fd\u6570\u7684\u6ce8\u610f\u4e8b\u9879 1. \u53ea\u9700\u8981\u5728\u865a\u51fd\u6570\u7684\u58f0\u660e\u5904\u52a0\u4e0a virtual \u5173\u952e\u5b57\uff0c\u51fd\u6570\u5b9a\u4e49\u5904\u53ef\u4ee5\u52a0\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u3002 \u53ef\u4ee5\u53ea\u5c06\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u8fd9\u6837\u6240\u6709\u6d3e\u751f\u7c7b\u4e2d\u5177\u6709\u906e\u853d\u5173\u7cfb\u7684\u540c\u540d\u51fd\u6570\u90fd\u5c06\u81ea\u52a8\u6210\u4e3a\u865a\u51fd\u6570\u3002 \u5f53\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u865a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u5b9a\u4e49\u65b0\u7684\u51fd\u6570\u6765\u906e\u853d\u6b64\u51fd\u6570\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u3002 \u53ea\u6709\u6d3e\u751f\u7c7b\u7684\u865a\u51fd\u6570\u8986\u76d6\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u624d\u80fd\u6784\u6210\u591a\u6001\uff08\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u8bbf\u95ee\u6d3e\u751f\u7c7b\u51fd\u6570\uff09\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u800c\u4e14\u6709\u65f6\u5019\u5fc5\u987b\u8981\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u6784\u6210\u591a\u6001\u7684\u6761\u4ef6 1. \u5fc5\u987b\u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff1b 2. \u7ee7\u627f\u5173\u7cfb\u4e2d\u5fc5\u987b\u6709\u540c\u540d\u7684\u865a\u51fd\u6570\uff0c\u5e76\u4e14\u5b83\u4eec\u662f\u8986\u76d6\u5173\u7cfb\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u3002 3. \u5b58\u5728\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u901a\u8fc7\u8be5\u6307\u9488\u8c03\u7528\u865a\u51fd\u6570\u3002","title":"\u591a\u6001\u4e0e\u865a\u51fd\u6570"},{"location":"cplus/cpp_polym/#_2","text":"\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 1 2 3 4 5 6 7 class Base { public : Base (); virtual ~ Base (); protected : char * str ; };","title":"\u865a\u6790\u6784\u51fd\u6570\u7684\u5fc5\u8981\u6027"},{"location":"cplus/cpp_polym/#_3","text":"1 virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) = 0 ; \u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u53ea\u6709\u51fd\u6570\u58f0\u660e\uff0c\u5728\u865a\u51fd\u6570\u58f0\u660e\u7684\u7ed3\u5c3e\u52a0\u4e0a=0\uff0c\u8868\u660e\u6b64\u51fd\u6570\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08Abstract Class\uff09\u3002\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u65e0\u6cd5\u5b9e\u4f8b\u5316\u3002\u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u624d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u62bd\u8c61\u57fa\u7c7b\u9664\u4e86\u7ea6\u675f\u6d3e\u751f\u7c7b\u7684\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u591a\u6001\u3002 \u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7c7b\u6210\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u4f46\u662f\u62bd\u8c61\u57fa\u7c7b\u4e2d\u9664\u4e86\u5305\u542b\u7eaf\u865a\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u5176\u5b83\u7684\u6210\u5458\u51fd\u6570\uff08\u865a\u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\uff09\u548c\u6210\u5458\u53d8\u91cf\u3002 \u53ea\u6709\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\u624d\u80fd\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u666e\u901a\u6210\u5458\u51fd\u6570\u548c\u9876\u5c42\u51fd\u6570\u5747\u4e0d\u80fd\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\u3002","title":"\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u8be6\u89e3"},{"location":"cplus/cpp_polym/#_4","text":"\u7f16\u8bd1\u5668\u4e4b\u6240\u4ee5\u80fd\u901a\u8fc7\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u627e\u5230\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u989d\u5916\u5730\u589e\u52a0\u4e86\u865a\u51fd\u6570\u8868\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5305\u542b\u4e86\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u5728\u521b\u5efa\u8be5\u7c7b\u7684\u5bf9\u8c61\u65f6\u5c31\u4f1a\u989d\u5916\u5730\u589e\u52a0\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u865a\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\u3002\u4e0d\u8fc7\u6570\u7ec4\u548c\u5bf9\u8c61\u662f\u5206\u5f00\u5b58\u50a8\u7684\uff0c\u4e3a\u4e86\u5c06\u5bf9\u8c61\u548c\u6570\u7ec4\u5173\u8054\u8d77\u6765\uff0c\u7f16\u8bd1\u5668\u8fd8\u8981\u5728\u5bf9\u8c61\u4e2d\u5b89\u63d2\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u6570\u7ec4\u5c31\u662f\u865a\u51fd\u6570\u8868\uff08Virtual function table\uff09\uff0c\u7b80\u5199\u4e3avtable\u3002","title":"\u865a\u51fd\u6570\u8868"},{"location":"cplus/cpp_polym/#typeidrtti","text":"typeid \u8fd0\u7b97\u7b26\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u7c7b\u578b\u4fe1\u606f\u662f\u521b\u5efa\u6570\u636e\u7684\u6a21\u677f\uff0c\u6570\u636e\u5360\u7528\u591a\u5927\u5185\u5b58\u3001\u80fd\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c\u3001\u8be5\u5982\u4f55\u64cd\u4f5c\u7b49\uff0c\u8fd9\u4e9b\u90fd\u7531\u5b83\u7684\u7c7b\u578b\u4fe1\u606f\u51b3\u5b9a\u3002 \u8fd9\u79cd\u5728\u7a0b\u5e8f\u8fd0\u884c\u540e\u786e\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u4fe1\u606f\u7684\u673a\u5236\u79f0\u4e3a\u8fd0\u884c\u65f6\u7c7b\u578b\u8bc6\u522b\uff08Run-Time Type Identification\uff0cRTTI\uff09\u3002\u5728 C++ \u4e2d\uff0c\u53ea\u6709\u7c7b\u4e2d\u5305\u542b\u4e86\u865a\u51fd\u6570\u65f6\u624d\u4f1a\u542f\u7528 RTTI \u673a\u5236\uff0c\u5176\u4ed6\u6240\u6709\u60c5\u51b5\u90fd\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u786e\u5b9a\u7c7b\u578b\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> using namespace std ; //\u57fa\u7c7b class People { public : virtual void func (){ } }; //\u6d3e\u751f\u7c7b class Student : public People { }; int main (){ People * p ; int n ; cin >> n ; if ( n <= 100 ){ p = new People (); } else { p = new Student (); } //\u6839\u636e\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c if ( typeid ( * p ) == typeid ( People )){ cout << \"I am human.\" << endl ; } else { cout << \"I am a student.\" << endl ; } return 0 ; } \u9664\u4e86 typeid \u8fd0\u7b97\u7b26\uff0cdynamic_cast \u8fd0\u7b97\u7b26\u548c\u5f02\u5e38\u5904\u7406\u4e5f\u4f9d\u8d56\u4e8e RTTI \u673a\u5236\uff0c\u5e76\u4e14\u8981\u80fd\u591f\u901a\u8fc7\u6d3e\u751f\u7c7b\u83b7\u53d6\u57fa\u7c7b\u7684\u4fe1\u606f\uff0c\u6216\u8005\u8bf4\u8981\u80fd\u591f\u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\uff0c\u8981\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u518d\u589e\u52a0\u4e00\u6761\u7ef3\u7d22\u3002\u79f0\u6b64\u4e3a\u7ee7\u627f\u94fe\uff08Inheritance Chain\uff09\u3002","title":"typeid\u8fd0\u7b97\u7b26\u4e0eRTTI\u673a\u5236"},{"location":"cplus/cpp_quote/","text":"C++\u5f15\u7528 \u00b6 \u5f15\u7528\u5728\u5b9a\u4e49\u65f6\u9700\u8981\u6dfb\u52a0&\uff0c\u5728\u4f7f\u7528\u65f6\u4e0d\u80fd\u6dfb\u52a0&\uff0c\u4f7f\u7528\u65f6\u6dfb\u52a0&\u8868\u793a\u53d6\u5730\u5740\u3002\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u7684\u540c\u65f6\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u4ee5\u540e\u4e5f\u8981\u4ece\u4e00\u800c\u7ec8\uff0c\u4e0d\u80fd\u518d\u5f15\u7528\u5176\u5b83\u6570\u636e\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5e38\u91cf\uff08const \u53d8\u91cf\uff09\u3002 \u5f15\u7528\u53ea\u662f\u5bf9\u6307\u9488\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u5b83\u7684\u5e95\u5c42\u4f9d\u7136\u662f\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u5f15\u7528\u5360\u7528\u7684\u5185\u5b58\u548c\u6307\u9488\u5360\u7528\u7684\u5185\u5b58\u957f\u5ea6\u4e00\u6837\uff0c\u5728 32 \u4f4d\u73af\u5883\u4e0b\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5728 64 \u4f4d\u73af\u5883\u4e0b\u662f 8 \u4e2a\u5b57\u8282\uff0c\u4e4b\u6240\u4ee5\u4e0d\u80fd\u83b7\u53d6\u5f15\u7528\u7684\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fdb\u884c\u4e86\u5185\u90e8\u8f6c\u6362\u3002 \u6307\u9488\u548c\u5f15\u7528\u7684\u533a\u522b \u00b6 \u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u65f6\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u6570\u636e\uff1b\u6307\u9488\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u6307\u9488\u5728\u5b9a\u4e49\u65f6\u4e0d\u5fc5\u8d4b\u503c\uff0c\u4e5f\u80fd\u6307\u5411\u4efb\u610f\u6570\u636e\u3002 \u6709 const \u6307\u9488\uff0c\u4f46\u662f\u6ca1\u6709 const \u5f15\u7528\u3002 \u6307\u9488\u53ef\u4ee5\u6709\u591a\u7ea7\uff0c\u4f46\u662f\u5f15\u7528\u53ea\u80fd\u6709\u4e00\u7ea7\u3002 \u6307\u9488\u548c\u5f15\u7528\u7684\u81ea\u589e\uff08++\uff09\u81ea\u51cf\uff08--\uff09\u8fd0\u7b97\u610f\u4e49\u4e0d\u4e00\u6837\u3002\u5bf9\u6307\u9488\u4f7f\u7528 ++ \u8868\u793a\u6307\u5411\u4e0b\u4e00\u4efd\u6570\u636e\uff0c\u5bf9\u5f15\u7528\u4f7f\u7528 ++ \u8868\u793a\u5b83\u6240\u6307\u4ee3\u7684\u6570\u636e\u672c\u8eab\u52a0 1\u3002 const\u548c\u5f15\u7528\u7684\u5947\u5999\u53cd\u5e94 \u00b6 \u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e \u00b6 \u6307\u9488\u5c31\u662f\u6570\u636e\u6216\u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u6216\u4ee3\u7801\u3002\u6307\u9488\u53ea\u80fd\u6307\u5411\u5185\u5b58\uff0c\u4e0d\u80fd\u6307\u5411\u5bc4\u5b58\u5668\u6216\u8005\u786c\u76d8\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u548c\u786c\u76d8\u6ca1\u6cd5\u5bfb\u5740\u3002 int\u3001double\u3001bool\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e\u5f80\u5f80\u4e0d\u8d85\u8fc7 8 \u4e2a\u5b57\u8282\uff0c\u7528\u4e00\u4e24\u4e2a\u5bc4\u5b58\u5668\u5c31\u80fd\u5b58\u50a8\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\uff1b\u800c\u5bf9\u8c61\u3001\u7ed3\u6784\u4f53\u53d8\u91cf\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5927\u5c0f\u4e0d\u53ef\u9884\u6d4b\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5185\u5b58\u4e2d\u3002 \u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u867d\u7136\u5728\u5185\u5b58\u4e2d\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u5bfb\u5740\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u4f7f\u7528&\u6765\u83b7\u53d6\u5b83\u7684\u5730\u5740\uff0c\u66f4\u4e0d\u80fd\u7528\u6307\u9488\u6307\u5411\u5b83\u3002 \u5f15\u7528\u4e0d\u80fd\u6307\u4ee3\u4e34\u65f6\u6570\u636e\u5982\u51fd\u6570\u53c2\u6570\u7b49\u3002 \u4e34\u65f6\u6570\u636e\uff0c\u4f8b\u5982\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3001\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u4e5f\u53ef\u80fd\u4f1a\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u4e00\u65e6\u5b83\u4eec\u88ab\u653e\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5c31\u6ca1\u6cd5\u7528&\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\u4e86\uff0c\u4e5f\u5c31\u6ca1\u6cd5\u7528\u6307\u9488\u6307\u5411\u5b83\u4eec\u3002 \u7f16\u8bd1\u5668\u4f1a\u4e3a\u4e34\u65f6\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u65e0\u540d\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u5e76\u5c06\u4e34\u65f6\u6570\u636e\u653e\u5165\u8be5\u4e34\u65f6\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u518d\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u8be5\u4e34\u65f6\u53d8\u91cf\u3002 \u7ed9\u5f15\u7528\u6dfb\u52a0 const \u9650\u5b9a\u540e\uff0c\u4e0d\u4f46\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u7c7b\u578b\u76f8\u8fd1\u7684\u6570\u636e(const\u5f15\u7528\u4e0e\u8f6c\u6362\u7c7b\u578b)\uff0c\u5b83\u4eec\u80cc\u540e\u7684\u673a\u5236\u90fd\u662f\u4e34\u65f6\u53d8\u91cf\u3002 \u5f15\u7528\u7c7b\u578b\u7684\u51fd\u6570\u5f62\u53c2\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528const\u3002","title":"\u5f15\u7528"},{"location":"cplus/cpp_quote/#c","text":"\u5f15\u7528\u5728\u5b9a\u4e49\u65f6\u9700\u8981\u6dfb\u52a0&\uff0c\u5728\u4f7f\u7528\u65f6\u4e0d\u80fd\u6dfb\u52a0&\uff0c\u4f7f\u7528\u65f6\u6dfb\u52a0&\u8868\u793a\u53d6\u5730\u5740\u3002\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u7684\u540c\u65f6\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u4ee5\u540e\u4e5f\u8981\u4ece\u4e00\u800c\u7ec8\uff0c\u4e0d\u80fd\u518d\u5f15\u7528\u5176\u5b83\u6570\u636e\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5e38\u91cf\uff08const \u53d8\u91cf\uff09\u3002 \u5f15\u7528\u53ea\u662f\u5bf9\u6307\u9488\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u5b83\u7684\u5e95\u5c42\u4f9d\u7136\u662f\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u5f15\u7528\u5360\u7528\u7684\u5185\u5b58\u548c\u6307\u9488\u5360\u7528\u7684\u5185\u5b58\u957f\u5ea6\u4e00\u6837\uff0c\u5728 32 \u4f4d\u73af\u5883\u4e0b\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5728 64 \u4f4d\u73af\u5883\u4e0b\u662f 8 \u4e2a\u5b57\u8282\uff0c\u4e4b\u6240\u4ee5\u4e0d\u80fd\u83b7\u53d6\u5f15\u7528\u7684\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fdb\u884c\u4e86\u5185\u90e8\u8f6c\u6362\u3002","title":"C++\u5f15\u7528"},{"location":"cplus/cpp_quote/#_1","text":"\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u65f6\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u6570\u636e\uff1b\u6307\u9488\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u6307\u9488\u5728\u5b9a\u4e49\u65f6\u4e0d\u5fc5\u8d4b\u503c\uff0c\u4e5f\u80fd\u6307\u5411\u4efb\u610f\u6570\u636e\u3002 \u6709 const \u6307\u9488\uff0c\u4f46\u662f\u6ca1\u6709 const \u5f15\u7528\u3002 \u6307\u9488\u53ef\u4ee5\u6709\u591a\u7ea7\uff0c\u4f46\u662f\u5f15\u7528\u53ea\u80fd\u6709\u4e00\u7ea7\u3002 \u6307\u9488\u548c\u5f15\u7528\u7684\u81ea\u589e\uff08++\uff09\u81ea\u51cf\uff08--\uff09\u8fd0\u7b97\u610f\u4e49\u4e0d\u4e00\u6837\u3002\u5bf9\u6307\u9488\u4f7f\u7528 ++ \u8868\u793a\u6307\u5411\u4e0b\u4e00\u4efd\u6570\u636e\uff0c\u5bf9\u5f15\u7528\u4f7f\u7528 ++ \u8868\u793a\u5b83\u6240\u6307\u4ee3\u7684\u6570\u636e\u672c\u8eab\u52a0 1\u3002","title":"\u6307\u9488\u548c\u5f15\u7528\u7684\u533a\u522b"},{"location":"cplus/cpp_quote/#const","text":"","title":"const\u548c\u5f15\u7528\u7684\u5947\u5999\u53cd\u5e94"},{"location":"cplus/cpp_quote/#_2","text":"\u6307\u9488\u5c31\u662f\u6570\u636e\u6216\u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u6216\u4ee3\u7801\u3002\u6307\u9488\u53ea\u80fd\u6307\u5411\u5185\u5b58\uff0c\u4e0d\u80fd\u6307\u5411\u5bc4\u5b58\u5668\u6216\u8005\u786c\u76d8\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u548c\u786c\u76d8\u6ca1\u6cd5\u5bfb\u5740\u3002 int\u3001double\u3001bool\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e\u5f80\u5f80\u4e0d\u8d85\u8fc7 8 \u4e2a\u5b57\u8282\uff0c\u7528\u4e00\u4e24\u4e2a\u5bc4\u5b58\u5668\u5c31\u80fd\u5b58\u50a8\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\uff1b\u800c\u5bf9\u8c61\u3001\u7ed3\u6784\u4f53\u53d8\u91cf\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5927\u5c0f\u4e0d\u53ef\u9884\u6d4b\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5185\u5b58\u4e2d\u3002 \u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u867d\u7136\u5728\u5185\u5b58\u4e2d\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u5bfb\u5740\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u4f7f\u7528&\u6765\u83b7\u53d6\u5b83\u7684\u5730\u5740\uff0c\u66f4\u4e0d\u80fd\u7528\u6307\u9488\u6307\u5411\u5b83\u3002 \u5f15\u7528\u4e0d\u80fd\u6307\u4ee3\u4e34\u65f6\u6570\u636e\u5982\u51fd\u6570\u53c2\u6570\u7b49\u3002 \u4e34\u65f6\u6570\u636e\uff0c\u4f8b\u5982\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3001\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u4e5f\u53ef\u80fd\u4f1a\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u4e00\u65e6\u5b83\u4eec\u88ab\u653e\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5c31\u6ca1\u6cd5\u7528&\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\u4e86\uff0c\u4e5f\u5c31\u6ca1\u6cd5\u7528\u6307\u9488\u6307\u5411\u5b83\u4eec\u3002 \u7f16\u8bd1\u5668\u4f1a\u4e3a\u4e34\u65f6\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u65e0\u540d\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u5e76\u5c06\u4e34\u65f6\u6570\u636e\u653e\u5165\u8be5\u4e34\u65f6\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u518d\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u8be5\u4e34\u65f6\u53d8\u91cf\u3002 \u7ed9\u5f15\u7528\u6dfb\u52a0 const \u9650\u5b9a\u540e\uff0c\u4e0d\u4f46\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u7c7b\u578b\u76f8\u8fd1\u7684\u6570\u636e(const\u5f15\u7528\u4e0e\u8f6c\u6362\u7c7b\u578b)\uff0c\u5b83\u4eec\u80cc\u540e\u7684\u673a\u5236\u90fd\u662f\u4e34\u65f6\u53d8\u91cf\u3002 \u5f15\u7528\u7c7b\u578b\u7684\u51fd\u6570\u5f62\u53c2\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528const\u3002","title":"\u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e"},{"location":"cplus/cpp_ysfcz/","text":"\u8fd0\u7b97\u7b26\u91cd\u8f7d \u00b6 1 2 3 \u8fd4\u56de\u503c\u7c7b\u578b operator \u8fd0\u7b97\u7b26\u540d\u79f0 ( \u5f62\u53c2\u8868\u5217 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> using namespace std ; class complex { public : complex (); complex ( double real , double imag ); public : //\u58f0\u660e\u8fd0\u7b97\u7b26\u91cd\u8f7d complex operator + ( const complex & A ) const ; void display () const ; private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; complex :: complex () : m_real ( 0.0 ), m_imag ( 0.0 ){ } complex :: complex ( double real , double imag ) : m_real ( real ), m_imag ( imag ){ } //\u5b9e\u73b0\u8fd0\u7b97\u7b26\u91cd\u8f7d complex complex :: operator + ( const complex & A ) const { complex B ; B . m_real = this -> m_real + A . m_real ; B . m_imag = this -> m_imag + A . m_imag ; return B ; } void complex :: display () const { cout << m_real << \" + \" << m_imag << \"i\" << endl ; } int main (){ complex c1 ( 4.3 , 5.8 ); complex c2 ( 2.4 , 3.7 ); complex c3 ; c3 = c1 + c2 ; c3 . display (); return 0 ; } 1 2 c3 = c1 + c2 ; c3 = c1 . operator + ( c2 ); \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570--->\u53cb\u5143\u51fd\u6570\u3002 \u5e76\u4e0d\u662f\u6240\u6709\u7684\u8fd0\u7b97\u7b26\u90fd\u53ef\u4ee5\u91cd\u8f7d\u3002\u80fd\u591f\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u5305\u62ec\uff1a + - * / % ^ & | ~ ! = < > += -= = /= %= ^= &= |= << >> <<= >>= == != <= >= && || ++ -- , -> -> () [] new new[] delete delete[] \u4e0a\u8ff0\u8fd0\u7b97\u7b26\u4e2d\uff0c[]\u662f\u4e0b\u6807\u8fd0\u7b97\u7b26\uff0c()\u662f\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u3002\u81ea\u589e\u81ea\u51cf\u8fd0\u7b97\u7b26\u7684\u524d\u7f6e\u548c\u540e\u7f6e\u5f62\u5f0f\u90fd\u53ef\u4ee5\u91cd\u8f7d\u3002\u957f\u5ea6\u8fd0\u7b97\u7b26sizeof\u3001\u6761\u4ef6\u8fd0\u7b97\u7b26: ?\u3001\u6210\u5458\u9009\u62e9\u7b26.\u548c\u57df\u89e3\u6790\u8fd0\u7b97\u7b26::\u4e0d\u80fd\u88ab\u91cd\u8f7d\u3002 \u91cd\u8f7d\u4e0d\u80fd\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u6027\u3002 \u91cd\u8f7d\u4e0d\u4f1a\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u7528\u6cd5\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u80fd\u6709\u9ed8\u8ba4\u7684\u53c2\u6570\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570\u3002 \u7bad\u5934\u8fd0\u7b97\u7b26->\u3001\u4e0b\u6807\u8fd0\u7b97\u7b26[ ]\u3001\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26( )\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26=\u53ea\u80fd\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 #include <iostream> #include <cmath> using namespace std ; //\u590d\u6570\u7c7b class Complex { public : //\u6784\u9020\u51fd\u6570 Complex ( double real = 0.0 , double imag = 0.0 ) : m_real ( real ), m_imag ( imag ){ } public : //\u8fd0\u7b97\u7b26\u91cd\u8f7d //\u4ee5\u5168\u5c40\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d friend Complex operator + ( const Complex & c1 , const Complex & c2 ); friend Complex operator - ( const Complex & c1 , const Complex & c2 ); friend Complex operator * ( const Complex & c1 , const Complex & c2 ); friend Complex operator / ( const Complex & c1 , const Complex & c2 ); friend bool operator == ( const Complex & c1 , const Complex & c2 ); friend bool operator != ( const Complex & c1 , const Complex & c2 ); //\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d Complex & operator += ( const Complex & c ); Complex & operator -= ( const Complex & c ); Complex & operator *= ( const Complex & c ); Complex & operator /= ( const Complex & c ); public : //\u6210\u5458\u51fd\u6570 double real () const { return m_real ; } double imag () const { return m_imag ; } private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; //\u91cd\u8f7d+\u8fd0\u7b97\u7b26 Complex operator + ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real + c2 . m_real ; c . m_imag = c1 . m_imag + c2 . m_imag ; return c ; } //\u91cd\u8f7d-\u8fd0\u7b97\u7b26 Complex operator - ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real - c2 . m_real ; c . m_imag = c1 . m_imag - c2 . m_imag ; return c ; } //\u91cd\u8f7d*\u8fd0\u7b97\u7b26 (a+bi) * (c+di) = (ac-bd) + (bc+ad)i Complex operator * ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real * c2 . m_real - c1 . m_imag * c2 . m_imag ; c . m_imag = c1 . m_imag * c2 . m_real + c1 . m_real * c2 . m_imag ; return c ; } //\u91cd\u8f7d/\u8fd0\u7b97\u7b26 (a+bi) / (c+di) = [(ac+bd) / (c\u00b2+d\u00b2)] + [(bc-ad) / (c\u00b2+d\u00b2)]i Complex operator / ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = ( c1 . m_real * c2 . m_real + c1 . m_imag * c2 . m_imag ) / ( pow ( c2 . m_real , 2 ) + pow ( c2 . m_imag , 2 )); c . m_imag = ( c1 . m_imag * c2 . m_real - c1 . m_real * c2 . m_imag ) / ( pow ( c2 . m_real , 2 ) + pow ( c2 . m_imag , 2 )); return c ; } //\u91cd\u8f7d==\u8fd0\u7b97\u7b26 bool operator == ( const Complex & c1 , const Complex & c2 ){ if ( c1 . m_real == c2 . m_real && c1 . m_imag == c2 . m_imag ){ return true ; } else { return false ; } } //\u91cd\u8f7d!=\u8fd0\u7b97\u7b26 bool operator != ( const Complex & c1 , const Complex & c2 ){ if ( c1 . m_real != c2 . m_real || c1 . m_imag != c2 . m_imag ){ return true ; } else { return false ; } } //\u91cd\u8f7d+=\u8fd0\u7b97\u7b26 Complex & Complex :: operator += ( const Complex & c ){ this -> m_real += c . m_real ; this -> m_imag += c . m_imag ; return * this ; } //\u91cd\u8f7d-=\u8fd0\u7b97\u7b26 Complex & Complex :: operator -= ( const Complex & c ){ this -> m_real -= c . m_real ; this -> m_imag -= c . m_imag ; return * this ; } //\u91cd\u8f7d*=\u8fd0\u7b97\u7b26 Complex & Complex :: operator *= ( const Complex & c ){ this -> m_real = this -> m_real * c . m_real - this -> m_imag * c . m_imag ; this -> m_imag = this -> m_imag * c . m_real + this -> m_real * c . m_imag ; return * this ; } //\u91cd\u8f7d/=\u8fd0\u7b97\u7b26 Complex & Complex :: operator /= ( const Complex & c ){ this -> m_real = ( this -> m_real * c . m_real + this -> m_imag * c . m_imag ) / ( pow ( c . m_real , 2 ) + pow ( c . m_imag , 2 )); this -> m_imag = ( this -> m_imag * c . m_real - this -> m_real * c . m_imag ) / ( pow ( c . m_real , 2 ) + pow ( c . m_imag , 2 )); return * this ; } int main (){ Complex c1 ( 25 , 35 ); Complex c2 ( 10 , 20 ); Complex c3 ( 1 , 2 ); Complex c4 ( 4 , 9 ); Complex c5 ( 34 , 6 ); Complex c6 ( 80 , 90 ); Complex c7 = c1 + c2 ; Complex c8 = c1 - c2 ; Complex c9 = c1 * c2 ; Complex c10 = c1 / c2 ; cout << \"c7 = \" << c7 . real () << \" + \" << c7 . imag () << \"i\" << endl ; cout << \"c8 = \" << c8 . real () << \" + \" << c8 . imag () << \"i\" << endl ; cout << \"c9 = \" << c9 . real () << \" + \" << c9 . imag () << \"i\" << endl ; cout << \"c10 = \" << c10 . real () << \" + \" << c10 . imag () << \"i\" << endl ; c3 += c1 ; c4 -= c2 ; c5 *= c2 ; c6 /= c2 ; cout << \"c3 = \" << c3 . real () << \" + \" << c3 . imag () << \"i\" << endl ; cout << \"c4 = \" << c4 . real () << \" + \" << c4 . imag () << \"i\" << endl ; cout << \"c5 = \" << c5 . real () << \" + \" << c5 . imag () << \"i\" << endl ; cout << \"c6 = \" << c6 . real () << \" + \" << c6 . imag () << \"i\" << endl ; if ( c1 == c2 ){ cout << \"c1 == c2\" << endl ; } if ( c1 != c2 ){ cout << \"c1 != c2\" << endl ; } return 0 ; }","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"cplus/cpp_ysfcz/#_1","text":"1 2 3 \u8fd4\u56de\u503c\u7c7b\u578b operator \u8fd0\u7b97\u7b26\u540d\u79f0 ( \u5f62\u53c2\u8868\u5217 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> using namespace std ; class complex { public : complex (); complex ( double real , double imag ); public : //\u58f0\u660e\u8fd0\u7b97\u7b26\u91cd\u8f7d complex operator + ( const complex & A ) const ; void display () const ; private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; complex :: complex () : m_real ( 0.0 ), m_imag ( 0.0 ){ } complex :: complex ( double real , double imag ) : m_real ( real ), m_imag ( imag ){ } //\u5b9e\u73b0\u8fd0\u7b97\u7b26\u91cd\u8f7d complex complex :: operator + ( const complex & A ) const { complex B ; B . m_real = this -> m_real + A . m_real ; B . m_imag = this -> m_imag + A . m_imag ; return B ; } void complex :: display () const { cout << m_real << \" + \" << m_imag << \"i\" << endl ; } int main (){ complex c1 ( 4.3 , 5.8 ); complex c2 ( 2.4 , 3.7 ); complex c3 ; c3 = c1 + c2 ; c3 . display (); return 0 ; } 1 2 c3 = c1 + c2 ; c3 = c1 . operator + ( c2 ); \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570--->\u53cb\u5143\u51fd\u6570\u3002 \u5e76\u4e0d\u662f\u6240\u6709\u7684\u8fd0\u7b97\u7b26\u90fd\u53ef\u4ee5\u91cd\u8f7d\u3002\u80fd\u591f\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u5305\u62ec\uff1a + - * / % ^ & | ~ ! = < > += -= = /= %= ^= &= |= << >> <<= >>= == != <= >= && || ++ -- , -> -> () [] new new[] delete delete[] \u4e0a\u8ff0\u8fd0\u7b97\u7b26\u4e2d\uff0c[]\u662f\u4e0b\u6807\u8fd0\u7b97\u7b26\uff0c()\u662f\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u3002\u81ea\u589e\u81ea\u51cf\u8fd0\u7b97\u7b26\u7684\u524d\u7f6e\u548c\u540e\u7f6e\u5f62\u5f0f\u90fd\u53ef\u4ee5\u91cd\u8f7d\u3002\u957f\u5ea6\u8fd0\u7b97\u7b26sizeof\u3001\u6761\u4ef6\u8fd0\u7b97\u7b26: ?\u3001\u6210\u5458\u9009\u62e9\u7b26.\u548c\u57df\u89e3\u6790\u8fd0\u7b97\u7b26::\u4e0d\u80fd\u88ab\u91cd\u8f7d\u3002 \u91cd\u8f7d\u4e0d\u80fd\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u6027\u3002 \u91cd\u8f7d\u4e0d\u4f1a\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u7528\u6cd5\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u80fd\u6709\u9ed8\u8ba4\u7684\u53c2\u6570\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570\u3002 \u7bad\u5934\u8fd0\u7b97\u7b26->\u3001\u4e0b\u6807\u8fd0\u7b97\u7b26[ ]\u3001\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26( )\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26=\u53ea\u80fd\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 #include <iostream> #include <cmath> using namespace std ; //\u590d\u6570\u7c7b class Complex { public : //\u6784\u9020\u51fd\u6570 Complex ( double real = 0.0 , double imag = 0.0 ) : m_real ( real ), m_imag ( imag ){ } public : //\u8fd0\u7b97\u7b26\u91cd\u8f7d //\u4ee5\u5168\u5c40\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d friend Complex operator + ( const Complex & c1 , const Complex & c2 ); friend Complex operator - ( const Complex & c1 , const Complex & c2 ); friend Complex operator * ( const Complex & c1 , const Complex & c2 ); friend Complex operator / ( const Complex & c1 , const Complex & c2 ); friend bool operator == ( const Complex & c1 , const Complex & c2 ); friend bool operator != ( const Complex & c1 , const Complex & c2 ); //\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d Complex & operator += ( const Complex & c ); Complex & operator -= ( const Complex & c ); Complex & operator *= ( const Complex & c ); Complex & operator /= ( const Complex & c ); public : //\u6210\u5458\u51fd\u6570 double real () const { return m_real ; } double imag () const { return m_imag ; } private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; //\u91cd\u8f7d+\u8fd0\u7b97\u7b26 Complex operator + ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real + c2 . m_real ; c . m_imag = c1 . m_imag + c2 . m_imag ; return c ; } //\u91cd\u8f7d-\u8fd0\u7b97\u7b26 Complex operator - ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real - c2 . m_real ; c . m_imag = c1 . m_imag - c2 . m_imag ; return c ; } //\u91cd\u8f7d*\u8fd0\u7b97\u7b26 (a+bi) * (c+di) = (ac-bd) + (bc+ad)i Complex operator * ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real * c2 . m_real - c1 . m_imag * c2 . m_imag ; c . m_imag = c1 . m_imag * c2 . m_real + c1 . m_real * c2 . m_imag ; return c ; } //\u91cd\u8f7d/\u8fd0\u7b97\u7b26 (a+bi) / (c+di) = [(ac+bd) / (c\u00b2+d\u00b2)] + [(bc-ad) / (c\u00b2+d\u00b2)]i Complex operator / ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = ( c1 . m_real * c2 . m_real + c1 . m_imag * c2 . m_imag ) / ( pow ( c2 . m_real , 2 ) + pow ( c2 . m_imag , 2 )); c . m_imag = ( c1 . m_imag * c2 . m_real - c1 . m_real * c2 . m_imag ) / ( pow ( c2 . m_real , 2 ) + pow ( c2 . m_imag , 2 )); return c ; } //\u91cd\u8f7d==\u8fd0\u7b97\u7b26 bool operator == ( const Complex & c1 , const Complex & c2 ){ if ( c1 . m_real == c2 . m_real && c1 . m_imag == c2 . m_imag ){ return true ; } else { return false ; } } //\u91cd\u8f7d!=\u8fd0\u7b97\u7b26 bool operator != ( const Complex & c1 , const Complex & c2 ){ if ( c1 . m_real != c2 . m_real || c1 . m_imag != c2 . m_imag ){ return true ; } else { return false ; } } //\u91cd\u8f7d+=\u8fd0\u7b97\u7b26 Complex & Complex :: operator += ( const Complex & c ){ this -> m_real += c . m_real ; this -> m_imag += c . m_imag ; return * this ; } //\u91cd\u8f7d-=\u8fd0\u7b97\u7b26 Complex & Complex :: operator -= ( const Complex & c ){ this -> m_real -= c . m_real ; this -> m_imag -= c . m_imag ; return * this ; } //\u91cd\u8f7d*=\u8fd0\u7b97\u7b26 Complex & Complex :: operator *= ( const Complex & c ){ this -> m_real = this -> m_real * c . m_real - this -> m_imag * c . m_imag ; this -> m_imag = this -> m_imag * c . m_real + this -> m_real * c . m_imag ; return * this ; } //\u91cd\u8f7d/=\u8fd0\u7b97\u7b26 Complex & Complex :: operator /= ( const Complex & c ){ this -> m_real = ( this -> m_real * c . m_real + this -> m_imag * c . m_imag ) / ( pow ( c . m_real , 2 ) + pow ( c . m_imag , 2 )); this -> m_imag = ( this -> m_imag * c . m_real - this -> m_real * c . m_imag ) / ( pow ( c . m_real , 2 ) + pow ( c . m_imag , 2 )); return * this ; } int main (){ Complex c1 ( 25 , 35 ); Complex c2 ( 10 , 20 ); Complex c3 ( 1 , 2 ); Complex c4 ( 4 , 9 ); Complex c5 ( 34 , 6 ); Complex c6 ( 80 , 90 ); Complex c7 = c1 + c2 ; Complex c8 = c1 - c2 ; Complex c9 = c1 * c2 ; Complex c10 = c1 / c2 ; cout << \"c7 = \" << c7 . real () << \" + \" << c7 . imag () << \"i\" << endl ; cout << \"c8 = \" << c8 . real () << \" + \" << c8 . imag () << \"i\" << endl ; cout << \"c9 = \" << c9 . real () << \" + \" << c9 . imag () << \"i\" << endl ; cout << \"c10 = \" << c10 . real () << \" + \" << c10 . imag () << \"i\" << endl ; c3 += c1 ; c4 -= c2 ; c5 *= c2 ; c6 /= c2 ; cout << \"c3 = \" << c3 . real () << \" + \" << c3 . imag () << \"i\" << endl ; cout << \"c4 = \" << c4 . real () << \" + \" << c4 . imag () << \"i\" << endl ; cout << \"c5 = \" << c5 . real () << \" + \" << c5 . imag () << \"i\" << endl ; cout << \"c6 = \" << c6 . real () << \" + \" << c6 . imag () << \"i\" << endl ; if ( c1 == c2 ){ cout << \"c1 == c2\" << endl ; } if ( c1 != c2 ){ cout << \"c1 != c2\" << endl ; } return 0 ; }","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"cplus/stl/cpp_stl/","text":"STL\u5bb9\u5668 \u00b6 \u987a\u5e8f\u5bb9\u5668\uff1a\u5143\u7d20\u5728\u5bb9\u5668\u4e2d\u7684\u4f4d\u7f6e\u540c\u5143\u7d20\u7684\u503c\u65e0\u5173\uff0c\u5373\u4e0d\u662f\u6392\u5e8f\u3002\u53ef\u53d8\u957f\u6570\u7ec4vector\uff0c\u53cc\u7aef\u961f\u5217deque\uff0c\u53cc\u5411\u94fe\u8868list\u3002\u987a\u5e8f\u5bb9\u5668\u6709\u4ee5\u4e0b\u5e38\u7528\u6210\u5458\u51fd\u6570\uff1a front()\uff1a\u8fd4\u56de\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 back()\uff1a\u8fd4\u56de\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 push_back()\uff1a\u5728\u5bb9\u5668\u672b\u5c3e\u589e\u52a0\u65b0\u5143\u7d20\u3002 pop_back()\uff1a\u5220\u9664\u5bb9\u5668\u672b\u5c3e\u7684\u5143\u7d20\u3002 insert(...)\uff1a\u63d2\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002\u8be5\u51fd\u6570\u53c2\u6570\u8f83\u590d\u6742\uff0c\u6b64\u5904\u7701\u7565\u3002 \u5173\u8054\u5bb9\u5668\uff1a\u5143\u7d20\u5728\u5bb9\u5668\u7c7b\u662f\u6392\u5e8f\u7684\u3002set\uff0cmultiset\uff0cmap\uff0cmultimap\u3002 \u5bb9\u5668\u9002\u914d\u5668\uff1a\u6808stack\uff0c\u961f\u5217queue\uff0c\u4f18\u5148\u7ea7\u961f\u5217priority_queue\u3002 \u6240\u6709\u5bb9\u5668\u90fd\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6210\u5458\u51fd\u6570\uff1a int size()\uff1a\u8fd4\u56de\u5bb9\u5668\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 bool empty()\uff1a\u5224\u65ad\u5bb9\u5668\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\u3002 \u987a\u5e8f\u5bb9\u5668\u548c\u5173\u8054\u5bb9\u5668\u8fd8\u6709\u4ee5\u4e0b\u6210\u5458\u51fd\u6570\uff1a begin()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 end()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u9762\u7684\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002 rbegin()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002 rend()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u524d\u9762\u7684\u4f4d\u7f6e\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002 erase(...)\uff1a\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u6216\u51e0\u4e2a\u5143\u7d20\u3002\u8be5\u51fd\u6570\u53c2\u6570\u8f83\u590d\u6742\uff0c\u6b64\u5904\u7701\u7565\u3002 clear()\uff1a\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20\u3002 STL\u8fed\u4ee3\u5668iterator \u00b6 \u8981\u8bbf\u95ee\u987a\u5e8f\u5bb9\u5668\u548c\u5173\u8054\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u9700\u8981\u901a\u8fc7\u201c\u8fed\u4ee3\u5668\uff08iterator\uff09\u201d\u8fdb\u884c\u3002\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u53d8\u91cf\u3002\u8fed\u4ee3\u5668\u53ef\u4ee5\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff0c\u901a\u8fc7\u8fed\u4ee3\u5668\u5c31\u53ef\u4ee5\u8bfb\u5199\u5b83\u6307\u5411\u7684\u5143\u7d20\uff0c\u8fed\u4ee3\u5668\u548c\u6307\u9488\u7c7b\u4f3c\u3002 \u8fed\u4ee3\u5668\u6309\u7167\u5b9a\u4e49\u65b9\u5f0f\u5206\u6210\u4ee5\u4e0b\u56db\u79cd: \u6b63\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: iterator \u8fed\u4ee3\u5668\u540d ; \u5e38\u91cf\u6b63\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: const_iterator \u8fed\u4ee3\u5668\u540d ; \u53cd\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: reverse_iterator \u8fed\u4ee3\u5668\u540d ; \u5e38\u91cf\u53cd\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: const_reverse_iterator \u8fed\u4ee3\u5668\u540d ; \u901a\u8fc7\u8fed\u4ee3\u5668\u53ef\u4ee5\u8bfb\u53d6\u5b83\u6307\u5411\u7684\u5143\u7d20\uff0c*\u8fed\u4ee3\u5668\u540d\u5c31\u8868\u793a\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u3002\u901a\u8fc7\u975e\u5e38\u91cf\u8fed\u4ee3\u5668\u8fd8\u80fd\u4fee\u6539\u5176\u6307\u5411\u7684\u5143\u7d20\u3002 \u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u8fdb\u884c++\u64cd\u4f5c\u3002\u53cd\u5411\u8fed\u4ee3\u5668\u548c\u6b63\u5411\u8fed\u4ee3\u5668\u7684\u533a\u522b\u5728\u4e8e\uff1a 1. \u5bf9\u6b63\u5411\u8fed\u4ee3\u5668\u8fdb\u884c++\u64cd\u4f5c\u65f6\uff0c\u8fed\u4ee3\u5668\u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u540e\u4e00\u4e2a\u5143\u7d20\uff1b \u800c\u5bf9\u53cd\u5411\u8fed\u4ee3\u5668\u8fdb\u884c++\u64cd\u4f5c\u65f6\uff0c\u8fed\u4ee3\u5668\u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> #include <vector> using namespace std ; int main () { vector < int > v ; //v\u662f\u5b58\u653eint\u7c7b\u578b\u53d8\u91cf\u7684\u53ef\u53d8\u957f\u6570\u7ec4\uff0c\u5f00\u59cb\u65f6\u6ca1\u6709\u5143\u7d20 for ( int n = 0 ; n < 5 ; ++ n ) v . push_back ( n ); //push_back\u6210\u5458\u51fd\u6570\u5728vector\u5bb9\u5668\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 vector < int >:: iterator i ; //\u5b9a\u4e49\u6b63\u5411\u8fed\u4ee3\u5668 for ( i = v . begin (); i != v . end (); ++ i ) { //\u7528\u8fed\u4ee3\u5668\u904d\u5386\u5bb9\u5668 cout << * i << \" \" ; //*i \u5c31\u662f\u8fed\u4ee3\u5668i\u6307\u5411\u7684\u5143\u7d20 * i *= 2 ; //\u6bcf\u4e2a\u5143\u7d20\u53d8\u4e3a\u539f\u6765\u76842\u500d } cout << endl ; //\u7528\u53cd\u5411\u8fed\u4ee3\u5668\u904d\u5386\u5bb9\u5668 for ( vector < int >:: reverse_iterator j = v . rbegin (); j != v . rend (); ++ j ) cout << * j << \" \" ; return 0 ; } \u8fed\u4ee3\u5668\u529f\u80fd\u5206\u7c7b \u00b6 \u6b63\u5411\u8fed\u4ee3\u5668\u3002\u5047\u8bbe p \u662f\u4e00\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\uff0c\u5219 p \u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a++p\uff0cp++\uff0c*p\u3002\u6b64\u5916\uff0c\u4e24\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\u53ef\u4ee5\u4e92\u76f8\u8d4b\u503c\uff0c\u8fd8\u53ef\u4ee5\u7528==\u548c!=\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 \u53cc\u5411\u8fed\u4ee3\u5668\u3002\u53cc\u5411\u8fed\u4ee3\u5668\u5177\u6709\u6b63\u5411\u8fed\u4ee3\u5668\u7684\u5168\u90e8\u529f\u80fd\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u82e5 p \u662f\u4e00\u4e2a\u53cc\u5411\u8fed\u4ee3\u5668\uff0c\u5219--p\u548cp--\u90fd\u662f\u6709\u5b9a\u4e49\u7684\u3002--p\u4f7f\u5f97 p \u671d\u548c++p\u76f8\u53cd\u7684\u65b9\u5411\u79fb\u52a8\u3002 \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u3002\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u5177\u6709\u53cc\u5411\u8fed\u4ee3\u5668\u7684\u5168\u90e8\u529f\u80fd\u3002\u82e5 p \u662f\u4e00\u4e2a\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff0ci \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u6216\u5e38\u91cf\uff0c\u5219 p \u8fd8\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a p+=i\uff1a\u4f7f\u5f97 p \u5f80\u540e\u79fb\u52a8 i \u4e2a\u5143\u7d20\u3002 p-=i\uff1a\u4f7f\u5f97 p \u5f80\u524d\u79fb\u52a8 i \u4e2a\u5143\u7d20\u3002 p+i\uff1a\u8fd4\u56de p \u540e\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 p-i\uff1a\u8fd4\u56de p \u524d\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 p[i]\uff1a\u8fd4\u56de p \u540e\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 \u6b64\u5916\uff0c\u4e24\u4e2a\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 p1\u3001p2 \u8fd8\u53ef\u4ee5\u7528 <\u3001>\u3001<=\u3001>= \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002p1<p2\u7684\u542b\u4e49\u662f\uff1ap1 \u7ecf\u8fc7\u82e5\u5e72\u6b21\uff08\u81f3\u5c11\u4e00\u6b21\uff09++\u64cd\u4f5c\u540e\uff0c\u5c31\u4f1a\u7b49\u4e8e p2\u3002\u5176\u4ed6\u6bd4\u8f83\u65b9\u5f0f\u7684\u542b\u4e49\u4e0e\u6b64\u7c7b\u4f3c\u3002 \u5bb9\u5668 \u8fed\u4ee3\u5668\u529f\u80fd vector \u968f\u673a\u8bbf\u95ee deque \u968f\u673a\u8bbf\u95ee list \u53cc\u5411 set/multiset \u53cc\u5411 map/multimap \u53cc\u5411 stack \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 queue \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 priority_queue \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u7684\u8f85\u52a9\u51fd\u6570 \u00b6 STL \u4e2d\u6709\u7528\u4e8e\u64cd\u4f5c\u8fed\u4ee3\u5668\u7684\u4e09\u4e2a\u51fd\u6570\u6a21\u677f\uff0c\u5b83\u4eec\u662f\uff1a advance(p, n)\uff1a\u4f7f\u8fed\u4ee3\u5668 p \u5411\u524d\u6216\u5411\u540e\u79fb\u52a8 n \u4e2a\u5143\u7d20\u3002 distance(p, q)\uff1a\u8ba1\u7b97\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5373\u8fed\u4ee3\u5668 p \u7ecf\u8fc7\u591a\u5c11\u6b21 + + \u64cd\u4f5c\u540e\u548c\u8fed\u4ee3\u5668 q \u76f8\u7b49\u3002\u5982\u679c\u8c03\u7528\u65f6 p \u5df2\u7ecf\u6307\u5411 q \u7684\u540e\u9762\uff0c\u5219\u8fd9\u4e2a\u51fd\u6570\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\u3002 iter_swap(p, q)\uff1a\u7528\u4e8e\u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668 p\u3001q \u6307\u5411\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <list> #include <iostream> #include <algorithm> //\u8981\u4f7f\u7528\u64cd\u4f5c\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u6a21\u677f\uff0c\u9700\u8981\u5305\u542b\u6b64\u6587\u4ef6 using namespace std ; int main () { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; list < int > lst ( a , a + 5 ); list < int >:: iterator p = lst . begin (); advance ( p , 2 ); //p\u5411\u540e\u79fb\u52a8\u4e24\u4e2a\u5143\u7d20\uff0c\u6307\u54113 cout << \"1)\" << * p << endl ; //\u8f93\u51fa 1)3 advance ( p , - 1 ); //p\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u54112 cout << \"2)\" << * p << endl ; //\u8f93\u51fa 2)2 list < int >:: iterator q = lst . end (); q -- ; //q \u6307\u5411 5 cout << \"3)\" << distance ( p , q ) << endl ; //\u8f93\u51fa 3)3 iter_swap ( p , q ); //\u4ea4\u6362 2 \u548c 5 cout << \"4)\" ; for ( p = lst . begin (); p != lst . end (); ++ p ) cout << * p << \" \" ; return 0 ; } STL\u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u5904\u7406\u666e\u901a\u7684\u6570\u7ec4\u3002 \u6709\u7684\u7b97\u6cd5\u4f1a\u6539\u53d8\u5176\u6240\u4f5c\u7528\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a 1. copy\uff1a\u5c06\u4e00\u4e2a\u5bb9\u5668\u7684\u5185\u5bb9\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5bb9\u5668\u3002 2. remove\uff1a\u5728\u5bb9\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 3. random_shuffle\uff1a\u968f\u673a\u6253\u4e71\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 4. fill\uff1a\u7528\u67d0\u4e2a\u503c\u586b\u5145\u5bb9\u5668\u3002 \u6709\u7684\u7b97\u6cd5\u4e0d\u4f1a\u6539\u53d8\u5176\u6240\u4f5c\u7528\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a 1. find\uff1a\u5728\u5bb9\u5668\u4e2d\u67e5\u627e\u5143\u7d20\u3002 2. count_if\uff1a\u7edf\u8ba1\u5bb9\u5668\u4e2d\u7b26\u5408\u67d0\u79cd\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 find \u6a21\u677f\u7684\u539f\u578b\u5982\u4e0b\uff1a 1 2 template < class InIt , class T > InIt find ( InIt first , InIt last , const T & val ); sort\uff0c\u7528\u4e8e\u5bf9\u5bb9\u5668\u6392\u5e8f\uff0c\u5176\u539f\u578b\u4e3a\uff1a 1 2 template < class_RandIt > void sort ( _RandIt first , _RandIt last ); \u5728 STL \u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bd4\u8f83\u5927\u5c0f\u662f\u901a\u8fc7<\u8fd0\u7b97\u7b26\u8fdb\u884c\u7684\uff0c\u548c>\u8fd0\u7b97\u7b26\u65e0\u5173\u3002","title":"STL\u57fa\u7840"},{"location":"cplus/stl/cpp_stl/#stl","text":"\u987a\u5e8f\u5bb9\u5668\uff1a\u5143\u7d20\u5728\u5bb9\u5668\u4e2d\u7684\u4f4d\u7f6e\u540c\u5143\u7d20\u7684\u503c\u65e0\u5173\uff0c\u5373\u4e0d\u662f\u6392\u5e8f\u3002\u53ef\u53d8\u957f\u6570\u7ec4vector\uff0c\u53cc\u7aef\u961f\u5217deque\uff0c\u53cc\u5411\u94fe\u8868list\u3002\u987a\u5e8f\u5bb9\u5668\u6709\u4ee5\u4e0b\u5e38\u7528\u6210\u5458\u51fd\u6570\uff1a front()\uff1a\u8fd4\u56de\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 back()\uff1a\u8fd4\u56de\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 push_back()\uff1a\u5728\u5bb9\u5668\u672b\u5c3e\u589e\u52a0\u65b0\u5143\u7d20\u3002 pop_back()\uff1a\u5220\u9664\u5bb9\u5668\u672b\u5c3e\u7684\u5143\u7d20\u3002 insert(...)\uff1a\u63d2\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002\u8be5\u51fd\u6570\u53c2\u6570\u8f83\u590d\u6742\uff0c\u6b64\u5904\u7701\u7565\u3002 \u5173\u8054\u5bb9\u5668\uff1a\u5143\u7d20\u5728\u5bb9\u5668\u7c7b\u662f\u6392\u5e8f\u7684\u3002set\uff0cmultiset\uff0cmap\uff0cmultimap\u3002 \u5bb9\u5668\u9002\u914d\u5668\uff1a\u6808stack\uff0c\u961f\u5217queue\uff0c\u4f18\u5148\u7ea7\u961f\u5217priority_queue\u3002 \u6240\u6709\u5bb9\u5668\u90fd\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6210\u5458\u51fd\u6570\uff1a int size()\uff1a\u8fd4\u56de\u5bb9\u5668\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 bool empty()\uff1a\u5224\u65ad\u5bb9\u5668\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\u3002 \u987a\u5e8f\u5bb9\u5668\u548c\u5173\u8054\u5bb9\u5668\u8fd8\u6709\u4ee5\u4e0b\u6210\u5458\u51fd\u6570\uff1a begin()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 end()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u9762\u7684\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002 rbegin()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002 rend()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u524d\u9762\u7684\u4f4d\u7f6e\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002 erase(...)\uff1a\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u6216\u51e0\u4e2a\u5143\u7d20\u3002\u8be5\u51fd\u6570\u53c2\u6570\u8f83\u590d\u6742\uff0c\u6b64\u5904\u7701\u7565\u3002 clear()\uff1a\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20\u3002","title":"STL\u5bb9\u5668"},{"location":"cplus/stl/cpp_stl/#stliterator","text":"\u8981\u8bbf\u95ee\u987a\u5e8f\u5bb9\u5668\u548c\u5173\u8054\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u9700\u8981\u901a\u8fc7\u201c\u8fed\u4ee3\u5668\uff08iterator\uff09\u201d\u8fdb\u884c\u3002\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u53d8\u91cf\u3002\u8fed\u4ee3\u5668\u53ef\u4ee5\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff0c\u901a\u8fc7\u8fed\u4ee3\u5668\u5c31\u53ef\u4ee5\u8bfb\u5199\u5b83\u6307\u5411\u7684\u5143\u7d20\uff0c\u8fed\u4ee3\u5668\u548c\u6307\u9488\u7c7b\u4f3c\u3002 \u8fed\u4ee3\u5668\u6309\u7167\u5b9a\u4e49\u65b9\u5f0f\u5206\u6210\u4ee5\u4e0b\u56db\u79cd: \u6b63\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: iterator \u8fed\u4ee3\u5668\u540d ; \u5e38\u91cf\u6b63\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: const_iterator \u8fed\u4ee3\u5668\u540d ; \u53cd\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: reverse_iterator \u8fed\u4ee3\u5668\u540d ; \u5e38\u91cf\u53cd\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: const_reverse_iterator \u8fed\u4ee3\u5668\u540d ; \u901a\u8fc7\u8fed\u4ee3\u5668\u53ef\u4ee5\u8bfb\u53d6\u5b83\u6307\u5411\u7684\u5143\u7d20\uff0c*\u8fed\u4ee3\u5668\u540d\u5c31\u8868\u793a\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u3002\u901a\u8fc7\u975e\u5e38\u91cf\u8fed\u4ee3\u5668\u8fd8\u80fd\u4fee\u6539\u5176\u6307\u5411\u7684\u5143\u7d20\u3002 \u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u8fdb\u884c++\u64cd\u4f5c\u3002\u53cd\u5411\u8fed\u4ee3\u5668\u548c\u6b63\u5411\u8fed\u4ee3\u5668\u7684\u533a\u522b\u5728\u4e8e\uff1a 1. \u5bf9\u6b63\u5411\u8fed\u4ee3\u5668\u8fdb\u884c++\u64cd\u4f5c\u65f6\uff0c\u8fed\u4ee3\u5668\u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u540e\u4e00\u4e2a\u5143\u7d20\uff1b \u800c\u5bf9\u53cd\u5411\u8fed\u4ee3\u5668\u8fdb\u884c++\u64cd\u4f5c\u65f6\uff0c\u8fed\u4ee3\u5668\u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> #include <vector> using namespace std ; int main () { vector < int > v ; //v\u662f\u5b58\u653eint\u7c7b\u578b\u53d8\u91cf\u7684\u53ef\u53d8\u957f\u6570\u7ec4\uff0c\u5f00\u59cb\u65f6\u6ca1\u6709\u5143\u7d20 for ( int n = 0 ; n < 5 ; ++ n ) v . push_back ( n ); //push_back\u6210\u5458\u51fd\u6570\u5728vector\u5bb9\u5668\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 vector < int >:: iterator i ; //\u5b9a\u4e49\u6b63\u5411\u8fed\u4ee3\u5668 for ( i = v . begin (); i != v . end (); ++ i ) { //\u7528\u8fed\u4ee3\u5668\u904d\u5386\u5bb9\u5668 cout << * i << \" \" ; //*i \u5c31\u662f\u8fed\u4ee3\u5668i\u6307\u5411\u7684\u5143\u7d20 * i *= 2 ; //\u6bcf\u4e2a\u5143\u7d20\u53d8\u4e3a\u539f\u6765\u76842\u500d } cout << endl ; //\u7528\u53cd\u5411\u8fed\u4ee3\u5668\u904d\u5386\u5bb9\u5668 for ( vector < int >:: reverse_iterator j = v . rbegin (); j != v . rend (); ++ j ) cout << * j << \" \" ; return 0 ; }","title":"STL\u8fed\u4ee3\u5668iterator"},{"location":"cplus/stl/cpp_stl/#_1","text":"\u6b63\u5411\u8fed\u4ee3\u5668\u3002\u5047\u8bbe p \u662f\u4e00\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\uff0c\u5219 p \u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a++p\uff0cp++\uff0c*p\u3002\u6b64\u5916\uff0c\u4e24\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\u53ef\u4ee5\u4e92\u76f8\u8d4b\u503c\uff0c\u8fd8\u53ef\u4ee5\u7528==\u548c!=\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 \u53cc\u5411\u8fed\u4ee3\u5668\u3002\u53cc\u5411\u8fed\u4ee3\u5668\u5177\u6709\u6b63\u5411\u8fed\u4ee3\u5668\u7684\u5168\u90e8\u529f\u80fd\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u82e5 p \u662f\u4e00\u4e2a\u53cc\u5411\u8fed\u4ee3\u5668\uff0c\u5219--p\u548cp--\u90fd\u662f\u6709\u5b9a\u4e49\u7684\u3002--p\u4f7f\u5f97 p \u671d\u548c++p\u76f8\u53cd\u7684\u65b9\u5411\u79fb\u52a8\u3002 \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u3002\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u5177\u6709\u53cc\u5411\u8fed\u4ee3\u5668\u7684\u5168\u90e8\u529f\u80fd\u3002\u82e5 p \u662f\u4e00\u4e2a\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff0ci \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u6216\u5e38\u91cf\uff0c\u5219 p \u8fd8\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a p+=i\uff1a\u4f7f\u5f97 p \u5f80\u540e\u79fb\u52a8 i \u4e2a\u5143\u7d20\u3002 p-=i\uff1a\u4f7f\u5f97 p \u5f80\u524d\u79fb\u52a8 i \u4e2a\u5143\u7d20\u3002 p+i\uff1a\u8fd4\u56de p \u540e\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 p-i\uff1a\u8fd4\u56de p \u524d\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 p[i]\uff1a\u8fd4\u56de p \u540e\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 \u6b64\u5916\uff0c\u4e24\u4e2a\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 p1\u3001p2 \u8fd8\u53ef\u4ee5\u7528 <\u3001>\u3001<=\u3001>= \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002p1<p2\u7684\u542b\u4e49\u662f\uff1ap1 \u7ecf\u8fc7\u82e5\u5e72\u6b21\uff08\u81f3\u5c11\u4e00\u6b21\uff09++\u64cd\u4f5c\u540e\uff0c\u5c31\u4f1a\u7b49\u4e8e p2\u3002\u5176\u4ed6\u6bd4\u8f83\u65b9\u5f0f\u7684\u542b\u4e49\u4e0e\u6b64\u7c7b\u4f3c\u3002 \u5bb9\u5668 \u8fed\u4ee3\u5668\u529f\u80fd vector \u968f\u673a\u8bbf\u95ee deque \u968f\u673a\u8bbf\u95ee list \u53cc\u5411 set/multiset \u53cc\u5411 map/multimap \u53cc\u5411 stack \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 queue \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 priority_queue \u4e0d\u652f\u6301\u8fed\u4ee3\u5668","title":"\u8fed\u4ee3\u5668\u529f\u80fd\u5206\u7c7b"},{"location":"cplus/stl/cpp_stl/#_2","text":"STL \u4e2d\u6709\u7528\u4e8e\u64cd\u4f5c\u8fed\u4ee3\u5668\u7684\u4e09\u4e2a\u51fd\u6570\u6a21\u677f\uff0c\u5b83\u4eec\u662f\uff1a advance(p, n)\uff1a\u4f7f\u8fed\u4ee3\u5668 p \u5411\u524d\u6216\u5411\u540e\u79fb\u52a8 n \u4e2a\u5143\u7d20\u3002 distance(p, q)\uff1a\u8ba1\u7b97\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5373\u8fed\u4ee3\u5668 p \u7ecf\u8fc7\u591a\u5c11\u6b21 + + \u64cd\u4f5c\u540e\u548c\u8fed\u4ee3\u5668 q \u76f8\u7b49\u3002\u5982\u679c\u8c03\u7528\u65f6 p \u5df2\u7ecf\u6307\u5411 q \u7684\u540e\u9762\uff0c\u5219\u8fd9\u4e2a\u51fd\u6570\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\u3002 iter_swap(p, q)\uff1a\u7528\u4e8e\u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668 p\u3001q \u6307\u5411\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <list> #include <iostream> #include <algorithm> //\u8981\u4f7f\u7528\u64cd\u4f5c\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u6a21\u677f\uff0c\u9700\u8981\u5305\u542b\u6b64\u6587\u4ef6 using namespace std ; int main () { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; list < int > lst ( a , a + 5 ); list < int >:: iterator p = lst . begin (); advance ( p , 2 ); //p\u5411\u540e\u79fb\u52a8\u4e24\u4e2a\u5143\u7d20\uff0c\u6307\u54113 cout << \"1)\" << * p << endl ; //\u8f93\u51fa 1)3 advance ( p , - 1 ); //p\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u54112 cout << \"2)\" << * p << endl ; //\u8f93\u51fa 2)2 list < int >:: iterator q = lst . end (); q -- ; //q \u6307\u5411 5 cout << \"3)\" << distance ( p , q ) << endl ; //\u8f93\u51fa 3)3 iter_swap ( p , q ); //\u4ea4\u6362 2 \u548c 5 cout << \"4)\" ; for ( p = lst . begin (); p != lst . end (); ++ p ) cout << * p << \" \" ; return 0 ; }","title":"\u8fed\u4ee3\u5668\u7684\u8f85\u52a9\u51fd\u6570"},{"location":"cplus/stl/cpp_stl/#stl_1","text":"\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u5904\u7406\u666e\u901a\u7684\u6570\u7ec4\u3002 \u6709\u7684\u7b97\u6cd5\u4f1a\u6539\u53d8\u5176\u6240\u4f5c\u7528\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a 1. copy\uff1a\u5c06\u4e00\u4e2a\u5bb9\u5668\u7684\u5185\u5bb9\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5bb9\u5668\u3002 2. remove\uff1a\u5728\u5bb9\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 3. random_shuffle\uff1a\u968f\u673a\u6253\u4e71\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 4. fill\uff1a\u7528\u67d0\u4e2a\u503c\u586b\u5145\u5bb9\u5668\u3002 \u6709\u7684\u7b97\u6cd5\u4e0d\u4f1a\u6539\u53d8\u5176\u6240\u4f5c\u7528\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a 1. find\uff1a\u5728\u5bb9\u5668\u4e2d\u67e5\u627e\u5143\u7d20\u3002 2. count_if\uff1a\u7edf\u8ba1\u5bb9\u5668\u4e2d\u7b26\u5408\u67d0\u79cd\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 find \u6a21\u677f\u7684\u539f\u578b\u5982\u4e0b\uff1a 1 2 template < class InIt , class T > InIt find ( InIt first , InIt last , const T & val ); sort\uff0c\u7528\u4e8e\u5bf9\u5bb9\u5668\u6392\u5e8f\uff0c\u5176\u539f\u578b\u4e3a\uff1a 1 2 template < class_RandIt > void sort ( _RandIt first , _RandIt last ); \u5728 STL \u4e2d\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bd4\u8f83\u5927\u5c0f\u662f\u901a\u8fc7<\u8fd0\u7b97\u7b26\u8fdb\u884c\u7684\uff0c\u548c>\u8fd0\u7b97\u7b26\u65e0\u5173\u3002","title":"STL\u7b97\u6cd5"},{"location":"cplus/stl/cpp_stl_algo/","text":"","title":"STL\u7b97\u6cd5\u5206\u7c7b"},{"location":"cplus/stl/cpp_stl_bitset/","text":"","title":"bitset\u7c7b"},{"location":"cplus/stl/cpp_stl_deque/","text":"deque \u4e5f\u662f\u987a\u5e8f\u5bb9\u5668\u7684\u4e00\u79cd\uff0c\u540c\u65f6\u4e5f\u662f\u4e00\u4e2a\u53ef\u53d8\u957f\u6570\u7ec4\u3002\u8981\u4f7f\u7528 deque\uff0c\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 deque\u3002\u6240\u6709\u9002\u7528\u4e8e vector \u7684\u64cd\u4f5c\u90fd\u9002\u7528\u4e8e deque\u3002 deque \u548c vector \u6709\u5f88\u591a\u7c7b\u4f3c\u7684\u5730\u65b9\u3002\u5728 deque \u4e2d\uff0c\u968f\u673a\u5b58\u53d6\u4efb\u4f55\u5143\u7d20\u90fd\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u5b8c\u6210\uff08\u4f46\u6162\u4e8evector\uff09\u3002\u5b83\u76f8\u6bd4\u4e8e vector \u7684\u4f18\u70b9\u662f\uff0cvector \u5728\u5934\u90e8\u5220\u9664\u6216\u6dfb\u52a0\u5143\u7d20\u7684\u901f\u5ea6\u5f88\u6162\uff0c\u5728\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20\u7684\u6027\u80fd\u8f83\u597d\uff0c\u800c deque \u5728\u5934\u5c3e\u589e\u5220\u5143\u7d20\u90fd\u5177\u6709\u8f83\u597d\u7684\u6027\u80fd\uff08\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u90fd\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u5b8c\u6210\uff09\u3002\u5b83\u6709\u4e24\u79cd vector \u6ca1\u6709\u7684\u6210\u5458\u51fd\u6570\uff1a 1 2 void push_front ( const T & val ); //\u5c06 val \u63d2\u5165\u5bb9\u5668\u7684\u5934\u90e8 void pop_front (); //\u5220\u9664\u5bb9\u5668\u5934\u90e8\u7684\u5143\u7d20","title":"deque"},{"location":"cplus/stl/cpp_stl_funcobject/","text":"\u4e00\u4e2a\u7c7b\u5c06()\u8fd0\u7b97\u7b26\u91cd\u8f7d\u4e3a\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u79f0\u4e3a\u51fd\u6570\u5bf9\u8c61\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u5c31\u662f\u51fd\u6570\u5bf9\u8c61\u3002\u51fd\u6570\u5bf9\u8c61\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u4f46\u662f\u4f7f\u7528\u7684\u5f62\u5f0f\u770b\u8d77\u6765\u50cf\u51fd\u6570\u8c03\u7528\uff0c\u5b9e\u9645\u4e0a\u4e5f\u6267\u884c\u4e86\u51fd\u6570\u8c03\u7528. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; class CAverage { public : double operator ()( int a1 , int a2 , int a3 ) { //\u91cd\u8f7d()\u8fd0\u7b97\u7b26 return ( double )( a1 + a2 + a3 ) / 3 ; } }; int main () { CAverage average ; //\u80fd\u591f\u6c42\u4e09\u4e2a\u6574\u6570\u5e73\u5747\u6570\u7684\u51fd\u6570\u5bf9\u8c61 cout << average ( 3 , 2 , 3 ); //\u7b49\u4ef7\u4e8e cout << average.operator(3, 2, 3); return 0 ; } STL\u4e2d\u7684\u51fd\u6570\u5bf9\u8c61\u7c7b\u6a21\u677f less \u662f STL \u4e2d\u6700\u5e38\u7528\u7684\u51fd\u6570\u5bf9\u8c61\u7c7b\u6a21\u677f\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 5 6 template < class_Tp > struct less { bool operator () ( const_Tp & __x , const_Tp & __y ) const { return __x < __y ; } }; \u8981\u5224\u65ad\u4e24\u4e2a int \u53d8\u91cf x\u3001y \u4e2d x \u662f\u5426\u6bd4 y \u5c0f\uff0c\u53ef\u4ee5\u5199\uff1a 1 if ( less < int > ()( x , y ) ) { ... }","title":"\u51fd\u6570\u5bf9\u8c61"},{"location":"cplus/stl/cpp_stl_list/","text":"list \u662f\u987a\u5e8f\u5bb9\u5668\u7684\u4e00\u79cd\u3002list \u662f\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u3002 list \u5bb9\u5668\u4e0d\u652f\u6301\u6839\u636e\u4e0b\u6807\u968f\u673a\u5b58\u53d6\u5143\u7d20\u3002 list \u7684\u6784\u9020\u51fd\u6570\u548c\u8bb8\u591a\u6210\u5458\u51fd\u6570\u7684\u7528\u6cd5\u90fd\u4e0e vector \u7c7b\u4f3c\uff0c\u9664\u4e86\u987a\u5e8f\u5bb9\u5668\u90fd\u6709\u7684\u6210\u5458\u51fd\u6570\u5916\uff0clist \u5bb9\u5668\u8fd8\u72ec\u6709\u5982\u4e0b\u6240\u793a\u7684\u6210\u5458\u51fd\u6570\uff1a \u6210\u5458\u51fd\u6570 \u4f5c\u7528 void push_front(const T & val) \u5c06 val \u63d2\u5165\u94fe\u8868\u6700\u524d\u9762 void pop_front() \u5220\u9664\u94fe\u8868\u6700\u524d\u9762\u7684\u5143\u7d20 void sort() \u5c06\u94fe\u8868\u4ece\u5c0f\u5230\u5927\u6392\u5e8f void remove (const T & val) \u5220\u9664\u548c val \u76f8\u7b49\u7684\u5143\u7d20 remove_if \u5220\u9664\u7b26\u5408\u67d0\u79cd\u6761\u4ef6\u7684\u5143\u7d20 void unique() \u5220\u9664\u6240\u6709\u548c\u524d\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49\u7684\u5143\u7d20 void merge(list & x) \u5c06\u94fe\u8868 x \u5408\u5e76\u8fdb\u6765\u5e76\u6e05\u7a7a x\u3002\u8981\u6c42\u94fe\u8868\u81ea\u8eab\u548c x \u90fd\u662f\u6709\u5e8f\u7684 void splice(iterator i, list & x, iterator first, iterator last) \u5728\u4f4d\u7f6e i \u524d\u9762\u63d2\u5165\u94fe\u8868 x \u4e2d\u7684\u533a\u95f4 [first, last)\uff0c\u5e76\u5728\u94fe\u8868 x \u4e2d\u5220\u9664\u8be5\u533a\u95f4\u3002\u94fe\u8868\u81ea\u8eab\u548c\u94fe\u8868 x \u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u94fe\u8868\uff0c\u53ea\u8981 i \u4e0d\u5728 [first, last) \u4e2d\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 #include <list> //\u4f7f\u7528 list \u9700\u8981\u5305\u542b\u6b64\u5934\u6587\u4ef6 #include <iostream> #include <algorithm> //\u4f7f\u7528STL\u4e2d\u7684\u7b97\u6cd5\u9700\u8981\u5305\u542b\u6b64\u5934\u6587\u4ef6 using namespace std ; class A { private : int n ; public : A ( int n_ ) { n = n_ ; } friend bool operator < ( const A & a1 , const A & a2 ); friend bool operator == ( const A & a1 , const A & a2 ); friend ostream & operator << ( ostream & o , const A & a ); }; bool operator < ( const A & a1 , const A & a2 ) { return a1 . n < a2 . n ; } bool operator == ( const A & a1 , const A & a2 ) { return a1 . n == a2 . n ; } ostream & operator << ( ostream & o , const A & a ) { o << a . n ; return o ; } template < class T > void Print ( T first , T last ) { for (; first != last ; ++ first ) cout << * first << \" \" ; cout << endl ; } int main () { A a [ 5 ] = { 1 , 3 , 2 , 4 , 2 }; A b [ 7 ] = { 10 , 30 , 20 , 30 , 30 , 40 , 40 }; list < A > lst1 ( a , a + 5 ), lst2 ( b , b + 7 ); lst1 . sort (); cout << \"1)\" ; Print ( lst1 . begin (), lst1 . end ()); //\u8f93\u51fa\uff1a1)1 2 2 3 4 lst1 . remove ( 2 ); //\u5220\u9664\u6240\u6709\u548cA(2)\u76f8\u7b49\u7684\u5143\u7d20 cout << \"2)\" ; Print ( lst1 . begin (), lst1 . end ()); //\u8f93\u51fa\uff1a2)1 3 4 lst2 . pop_front (); //\u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 cout << \"3)\" ; Print ( lst2 . begin (), lst2 . end ()); //\u8f93\u51fa\uff1a3)30 20 30 30 40 40 lst2 . unique (); //\u5220\u9664\u6240\u6709\u548c\u524d\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49\u7684\u5143\u7d20 cout << \"4)\" ; Print ( lst2 . begin (), lst2 . end ()); //\u8f93\u51fa\uff1a4)30 20 30 40 lst2 . sort (); lst1 . merge ( lst2 ); //\u5408\u5e76 lst2 \u5230 lst1 \u5e76\u6e05\u7a7a lst2 cout << \"5)\" ; Print ( lst1 . begin (), lst1 . end ()); //\u8f93\u51fa\uff1a5)1 3 4 20 30 30 40 cout << \"6)\" ; Print ( lst2 . begin (), lst2 . end ()); //lst2\u662f\u7a7a\u7684\uff0c\u8f93\u51fa\uff1a6) lst1 . reverse (); //\u5c06 lst1 \u524d\u540e\u98a0\u5012 cout << \"7)\" ; Print ( lst1 . begin (), lst1 . end ()); //\u8f93\u51fa 7)40 30 30 20 4 3 1 lst2 . insert ( lst2 . begin (), a + 1 , a + 4 ); //\u5728 lst2 \u4e2d\u63d2\u5165 3,2,4 \u4e09\u4e2a\u5143\u7d20 list < A >:: iterator p1 , p2 , p3 ; p1 = find ( lst1 . begin (), lst1 . end (), 30 ); p2 = find ( lst2 . begin (), lst2 . end (), 2 ); p3 = find ( lst2 . begin (), lst2 . end (), 4 ); lst1 . splice ( p1 , lst2 , p2 , p3 ); //\u5c06[p2, p3)\u63d2\u5165p1\u4e4b\u524d\uff0c\u5e76\u4ece lst2 \u4e2d\u5220\u9664[p2,p3) cout << \"8)\" ; Print ( lst1 . begin (), lst1 . end ()); //\u8f93\u51fa\uff1a8)40 2 30 30 20 4 3 1 cout << \"9)\" ; Print ( lst2 . begin (), lst2 . end ()); //\u8f93\u51fa\uff1a9)3 4 return 0 ; } \u7ea6\u745f\u592b\u95ee\u9898\uff1a\u6709 n \u53ea\u7334\u5b50\uff0c\u6309\u987a\u65f6\u9488\u65b9\u5411\u56f4\u6210\u4e00\u5708\u9009\u5927\u738b\uff08\u7f16\u53f7\u4e3a 1~n\uff09\uff0c\u4ece\u7b2c 1 \u53f7\u5f00\u59cb\u62a5\u6570\uff0c\u4e00\u76f4\u6570\u5230 m\uff0c\u6570\u5230 m \u7684\u7334\u5b50\u9000\u5230\u5708\u5916\uff0c\u5269\u4e0b\u7684\u7334\u5b50\u518d\u63a5\u7740\u4ece 1 \u5f00\u59cb\u62a5\u6570\u3002\u5c31\u8fd9\u6837\uff0c\u76f4\u5230\u5708\u5185\u53ea\u5269\u4e0b\u4e00\u53ea\u7334\u5b50\u65f6\uff0c\u8fd9\u4e2a\u7334\u5b50\u5c31\u662f\u7334\u738b\u3002\u7f16\u7a0b\u6c42\u8f93\u5165 n\u3001m \u540e,\u8f93\u51fa\u6700\u540e\u7334\u738b\u7684\u7f16\u53f7\u3002 \u8f93\u5165\u6570\u636e\uff1a\u6bcf\u884c\u662f\u7528\u7a7a\u683c\u5206\u5f00\u7684\u4e24\u4e2a\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f n\uff0c\u7b2c\u4e8c\u4e2a\u662f m\uff080<m, n<=1 000 000\uff09\u3002\u6700\u540e\u4e00\u884c\u662f\uff1a 0 0 \u8f93\u51fa\u8981\u6c42\uff1a\u5bf9\u4e8e\u6bcf\u884c\u8f93\u5165\u6570\u636e\uff08\u6700\u540e\u4e00\u884c\u9664\u5916\uff09\uff0c\u8f93\u51fa\u6570\u636e\u4e5f\u662f\u4e00\u884c\uff0c\u5373\u6700\u540e\u7334\u738b\u7684\u7f16\u53f7\u3002 \u8f93\u5165\u6837\u4f8b\uff1a 6 2 12 4 8 3 0 0 \u8f93\u51fa\u6837\u4f8b\uff1a 5 1 7 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include <list> #include <iostream> using namespace std ; int main () { list < int > monkeys ; int n , m ; while ( true ) { cin >> n >> m ; if ( n == 0 && m == 0 ) break ; monkeys . clear (); //\u6e05\u7a7alist\u5bb9\u5668 for ( int i = 1 ; i <= n ; ++ i ) //\u5c06\u7334\u5b50\u7684\u7f16\u53f7\u653e\u5165list monkeys . push_back ( i ); list < int >:: iterator it = monkeys . begin (); while ( monkeys . size () > 1 ) { //\u53ea\u8981\u8fd8\u6709\u4e0d\u6b62\u4e00\u53ea\u7334\u5b50\uff0c\u5c31\u8981\u627e\u4e00\u53ea\u7334\u5b50\u8ba9\u5176\u51fa\u5217 for ( int i = 1 ; i < m ; ++ i ) { //\u62a5\u6570 ++ it ; if ( it == monkeys . end ()) it = monkeys . begin (); } it = monkeys . erase ( it ); //\u5220\u9664\u5143\u7d20\u540e\uff0c\u8fed\u4ee3\u5668\u5931\u6548\uff0c //\u8981\u91cd\u65b0\u8ba9\u8fed\u4ee3\u5668\u6307\u5411\u88ab\u5220\u5143\u7d20\u7684\u540e\u9762 if ( it == monkeys . end ()) it = monkeys . begin (); } cout << monkeys . front () << endl ; //front\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528 } return 0 ; }","title":"list"},{"location":"cplus/stl/cpp_stl_map/","text":"map \u548c multimap \u5341\u5206\u7c7b\u4f3c\uff0c\u533a\u522b\u5728\u4e8e map \u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u5173\u952e\u5b57\u4e0d\u80fd\u91cd\u590d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <iostream> #include <map> //\u4f7f\u7528map\u9700\u8981\u5305\u542b\u6b64\u5934\u6587\u4ef6 using namespace std ; template < class T1 , class T2 > ostream & operator << ( ostream & o , const pair < T1 , T2 > & p ) { //\u5c06pair\u5bf9\u8c61\u8f93\u51fa\u4e3a (first,second)\u5f62\u5f0f o << \"(\" << p . first << \",\" << p . second << \")\" ; return o ; } template < class T > void Print ( T first , T last ) { //\u6253\u5370\u533a\u95f4[first,last) for ( ; first != last ; ++ first ) cout << * first << \" \" ; cout << endl ; } typedef map < int , double , greater < int > > MYMAP ; //\u6b64\u5bb9\u5668\u5173\u952e\u5b57\u662f\u6574\u578b\uff0c\u5143\u7d20\u6309\u5173\u952e\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5e8f int main () { MYMAP mp ; mp . insert ( MYMAP :: value_type ( 15 , 2.7 )); pair < MYMAP :: iterator , bool > p = mp . insert ( make_pair ( 15 , 99.3 )); if ( ! p . second ) cout << * ( p . first ) << \" already exists\" << endl ; //\u4f1a\u8f93\u51fa cout << \"1) \" << mp . count ( 15 ) << endl ; //\u8f93\u51fa 1) 1 mp . insert ( make_pair ( 20 , 9.3 )); cout << \"2) \" << mp [ 40 ] << endl ; //\u5982\u679c\u6ca1\u6709\u5173\u952e\u5b57\u4e3a40\u7684\u5143\u7d20\uff0c\u5219\u63d2\u5165\u4e00\u4e2a cout << \"3) \" ; Print ( mp . begin (), mp . end ()); //\u8f93\u51fa\uff1a3) (40,0)(20,9.3)(15,2.7) mp [ 15 ] = 6.28 ; //\u628a\u5173\u952e\u5b57\u4e3a15\u7684\u5143\u7d20\u503c\u6539\u62106.28 mp [ 17 ] = 3.14 ; //\u63d2\u5165\u5173\u952e\u5b57\u4e3a17\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u5176\u503c\u8bbe\u4e3a3.14 cout << \"4) \" ; Print ( mp . begin (), mp . end ()); return 0 ; }","title":"map"},{"location":"cplus/stl/cpp_stl_multimap/","text":"multimap \u662f\u5173\u8054\u5bb9\u5668\u7684\u4e00\u79cd\uff0cmultimap \u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u5206\u4e3a\u5173\u952e\u5b57\u548c\u503c\u4e24\u90e8\u5206\uff0c\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u662f\u6309\u5173\u952e\u5b57\u6392\u5e8f\u7684\uff0c\u5e76\u4e14\u5141\u8bb8\u6709\u591a\u4e2a\u5143\u7d20\u7684\u5173\u952e\u5b57\u76f8\u540c\u3002","title":"multimap"},{"location":"cplus/stl/cpp_stl_multiset/","text":"multiset \u662f\u5173\u8054\u5bb9\u5668\u7684\u4e00\u79cd\uff0c\u662f\u6392\u5e8f\u597d\u7684\u96c6\u5408\uff08\u5143\u7d20\u5df2\u7ecf\u8fdb\u884c\u4e86\u6392\u5e8f\uff09\uff0c\u5e76\u4e14\u5141\u8bb8\u6709\u76f8\u540c\u7684\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <iostream> #include <set> //\u4f7f\u7528multiset\u987b\u5305\u542b\u6b64\u5934\u6587\u4ef6 using namespace std ; template < class T > void Print ( T first , T last ) { for (; first != last ; ++ first ) cout << * first << \" \" ; cout << endl ; } class A { private : int n ; public : A ( int n_ ) { n = n_ ; } friend bool operator < ( const A & a1 , const A & a2 ) { return a1 . n < a2 . n ; } friend ostream & operator << ( ostream & o , const A & a2 ) { o << a2 . n ; return o ; } friend class MyLess ; }; class MyLess { public : bool operator () ( const A & a1 , const A & a2 ) //\u6309\u4e2a\u4f4d\u6570\u6bd4\u8f83\u5927\u5c0f { return ( a1 . n % 10 ) < ( a2 . n % 10 ); } }; typedef multiset < A > MSET1 ; //MSET1 \u7528\u201c<\u201d\u8fd0\u7b97\u7b26\u6bd4\u8f83\u5927\u5c0f typedef multiset < A , MyLess > MSET2 ; //MSET2 \u7528 MyLess::operator() \u6bd4\u8f83\u5927\u5c0f int main () { const int SIZE = 6 ; A a [ SIZE ] = { 4 , 22 , 19 , 8 , 33 , 40 }; MSET1 m1 ; m1 . insert ( a , a + SIZE ); m1 . insert ( 22 ); cout << \"1)\" << m1 . count ( 22 ) << endl ; //\u8f93\u51fa 1)2 cout << \"2)\" ; Print ( m1 . begin (), m1 . end ()); //\u8f93\u51fa 2)4 8 19 22 22 33 40 MSET1 :: iterator pp = m1 . find ( 19 ); if ( pp != m1 . end ()) //\u6761\u4ef6\u4e3a\u771f\u8bf4\u660e\u627e\u5230 cout << \"found\" << endl ; //\u672c\u884c\u4f1a\u88ab\u6267\u884c\uff0c\u8f93\u51fa found cout << \"3)\" ; cout << * m1 . lower_bound ( 22 ) << \",\" << * m1 . upper_bound ( 22 ) << endl ; //\u8f93\u51fa 3)22,33 pp = m1 . erase ( m1 . lower_bound ( 22 ), m1 . upper_bound ( 22 )); //pp\u6307\u5411\u88ab\u5220\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20 cout << \"4)\" ; Print ( m1 . begin (), m1 . end ()); //\u8f93\u51fa 4)4 8 19 33 40 cout << \"5)\" ; cout << * pp << endl ; //\u8f93\u51fa 5)33 MSET2 m2 ; //m2\u4e2d\u7684\u5143\u7d20\u6309n\u7684\u4e2a\u4f4d\u6570\u4ece\u5c0f\u5230\u5927\u6392\u5e8f m2 . insert ( a , a + SIZE ); cout << \"6)\" ; Print ( m2 . begin (), m2 . end ()); //\u8f93\u51fa 6)40 22 33 4 8 19 return 0 ; }","title":"multiset"},{"location":"cplus/stl/cpp_stl_pair/","text":"\u5173\u8054\u5bb9\u5668 \u00b6 \u5173\u8054\u5bb9\u5668\u5185\u90e8\u7684\u5143\u7d20\u90fd\u662f\u6392\u597d\u5e8f\u7684\uff0c\u6709\u4ee5\u4e0b\u56db\u79cd\u3002 set\uff1a\u6392\u597d\u5e8f\u7684\u96c6\u5408\uff0c\u4e0d\u5141\u8bb8\u6709\u76f8\u540c\u5143\u7d20\u3002 multiset\uff1a\u6392\u597d\u5e8f\u7684\u96c6\u5408\uff0c\u5141\u8bb8\u6709\u76f8\u540c\u5143\u7d20\u3002 map\uff1a\u6bcf\u4e2a\u5143\u7d20\u90fd\u5206\u4e3a\u5173\u952e\u5b57\u548c\u503c\u4e24\u90e8\u5206\uff0c\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u662f\u6309\u5173\u952e\u5b57\u6392\u5e8f\u7684\u3002\u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u5143\u7d20\u7684\u5173\u952e\u5b57\u76f8\u540c\u3002 multimap\uff1a\u548c map \u7c7b\u4f3c\uff0c\u5dee\u522b\u5728\u4e8e\u5143\u7d20\u7684\u5173\u952e\u5b57\u53ef\u4ee5\u76f8\u540c\u3002 \u4e0d\u80fd\u4fee\u6539 set \u6216 multiset \u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u503c\u3002\u5982\u679c\u8981\u4fee\u6539 set \u6216 multiset \u5bb9\u5668\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u662f\u5148\u5220\u9664\u8be5\u5143\u7d20\uff0c\u518d\u63d2\u5165\u65b0\u5143\u7d20\u3002 pair\u7c7b\u6a21\u677f \u00b6 \u5173\u8054\u5bb9\u5668\u7684\u4e00\u4e9b\u6210\u5458\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f pair \u5bf9\u8c61\uff0c\u800c\u4e14 map \u548c multimap \u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u90fd\u662f pair \u5bf9\u8c61\u3002 pair \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 template < class_Tl , class_T2 > struct pair { _T1 first ; _T2 second ; pair () : first (), second () {} //\u7528\u65e0\u53c2\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316 first \u548c second pair ( const _T1 & __a , const _T2 & __b ) : first ( __a ), second ( __b ) {} template < class_U1 , class_U2 > pair ( const pair < _U1 , _U2 > & __p ) : first ( __p . first ), second ( __p . second ) {} }; STL \u4e2d\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u6a21\u677f make_pair\uff0c\u5176\u529f\u80fd\u662f\u751f\u6210\u4e00\u4e2a pair \u6a21\u677f\u7c7b\u5bf9\u8c61\u3002make_pair \u7684\u6e90\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 template < class T1 , class T2 > pair < T1 , T2 > make_pair ( T1 x , T2 y ) { return ( pair < T1 , T2 > ( x , y ) ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> using namespace std ; int main () { pair < int , double > p1 ; cout << p1 . first << \",\" << p1 . second << endl ; //\u8f93\u51fa 0,0 pair < string , int > p2 ( \"this\" , 20 ); cout << p2 . first << \",\" << p2 . second << endl ; //\u8f93\u51fa this,20 pair < int , int > p3 ( pair < char , char > ( 'a' , 'b' )); cout << p3 . first << \",\" << p3 . second << endl ; //\u8f93\u51fa 97,98 pair < int , string > p4 = make_pair ( 200 , \"hello\" ); cout << p4 . first << \",\" << p4 . second << endl ; //\u8f93\u51fa 200,hello return 0 ; }","title":"\u5173\u8054\u5bb9\u5668\u4e0epair\u7c7b\u6a21\u677f"},{"location":"cplus/stl/cpp_stl_pair/#_1","text":"\u5173\u8054\u5bb9\u5668\u5185\u90e8\u7684\u5143\u7d20\u90fd\u662f\u6392\u597d\u5e8f\u7684\uff0c\u6709\u4ee5\u4e0b\u56db\u79cd\u3002 set\uff1a\u6392\u597d\u5e8f\u7684\u96c6\u5408\uff0c\u4e0d\u5141\u8bb8\u6709\u76f8\u540c\u5143\u7d20\u3002 multiset\uff1a\u6392\u597d\u5e8f\u7684\u96c6\u5408\uff0c\u5141\u8bb8\u6709\u76f8\u540c\u5143\u7d20\u3002 map\uff1a\u6bcf\u4e2a\u5143\u7d20\u90fd\u5206\u4e3a\u5173\u952e\u5b57\u548c\u503c\u4e24\u90e8\u5206\uff0c\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u662f\u6309\u5173\u952e\u5b57\u6392\u5e8f\u7684\u3002\u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u5143\u7d20\u7684\u5173\u952e\u5b57\u76f8\u540c\u3002 multimap\uff1a\u548c map \u7c7b\u4f3c\uff0c\u5dee\u522b\u5728\u4e8e\u5143\u7d20\u7684\u5173\u952e\u5b57\u53ef\u4ee5\u76f8\u540c\u3002 \u4e0d\u80fd\u4fee\u6539 set \u6216 multiset \u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u503c\u3002\u5982\u679c\u8981\u4fee\u6539 set \u6216 multiset \u5bb9\u5668\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c\uff0c\u6b63\u786e\u7684\u505a\u6cd5\u662f\u5148\u5220\u9664\u8be5\u5143\u7d20\uff0c\u518d\u63d2\u5165\u65b0\u5143\u7d20\u3002","title":"\u5173\u8054\u5bb9\u5668"},{"location":"cplus/stl/cpp_stl_pair/#pair","text":"\u5173\u8054\u5bb9\u5668\u7684\u4e00\u4e9b\u6210\u5458\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f pair \u5bf9\u8c61\uff0c\u800c\u4e14 map \u548c multimap \u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u90fd\u662f pair \u5bf9\u8c61\u3002 pair \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 template < class_Tl , class_T2 > struct pair { _T1 first ; _T2 second ; pair () : first (), second () {} //\u7528\u65e0\u53c2\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316 first \u548c second pair ( const _T1 & __a , const _T2 & __b ) : first ( __a ), second ( __b ) {} template < class_U1 , class_U2 > pair ( const pair < _U1 , _U2 > & __p ) : first ( __p . first ), second ( __p . second ) {} }; STL \u4e2d\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u6a21\u677f make_pair\uff0c\u5176\u529f\u80fd\u662f\u751f\u6210\u4e00\u4e2a pair \u6a21\u677f\u7c7b\u5bf9\u8c61\u3002make_pair \u7684\u6e90\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 template < class T1 , class T2 > pair < T1 , T2 > make_pair ( T1 x , T2 y ) { return ( pair < T1 , T2 > ( x , y ) ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <iostream> using namespace std ; int main () { pair < int , double > p1 ; cout << p1 . first << \",\" << p1 . second << endl ; //\u8f93\u51fa 0,0 pair < string , int > p2 ( \"this\" , 20 ); cout << p2 . first << \",\" << p2 . second << endl ; //\u8f93\u51fa this,20 pair < int , int > p3 ( pair < char , char > ( 'a' , 'b' )); cout << p3 . first << \",\" << p3 . second << endl ; //\u8f93\u51fa 97,98 pair < int , string > p4 = make_pair ( 200 , \"hello\" ); cout << p4 . first << \",\" << p4 . second << endl ; //\u8f93\u51fa 200,hello return 0 ; }","title":"pair\u7c7b\u6a21\u677f"},{"location":"cplus/stl/cpp_stl_queue/","text":"queue \u00b6 queue \u53ef\u4ee5\u7528 list \u548c deque \u5b9e\u73b0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7528 deque \u5b9e\u73b0\u3002 1 2 3 4 template < class T , class Cont = deque < T > > class queue { ... }; priority_queue \u00b6 priority_queue \u662f\u201c\u4f18\u5148\u961f\u5217\u201d\u3002\u5b83\u548c\u666e\u901a\u961f\u5217\u7684\u533a\u522b\u5728\u4e8e\uff0c\u4f18\u5148\u961f\u5217\u7684\u961f\u5934\u5143\u7d20\u603b\u662f\u6700\u5927\u7684\u2014\u2014\u5373\u6267\u884c pop \u64cd\u4f5c\u65f6\uff0c\u5220\u9664\u7684\u603b\u662f\u6700\u5927\u7684\u5143\u7d20\uff1b\u6267\u884c top \u64cd\u4f5c\u65f6\uff0c\u8fd4\u56de\u7684\u662f\u6700\u5927\u5143\u7d20\u7684\u5f15\u7528\u3002 1 2 3 4 template < class T , class Container = vector < T > , class Compare = less < T > > class priority_queue { ... };","title":"queue\u548cpriority_queue"},{"location":"cplus/stl/cpp_stl_queue/#queue","text":"queue \u53ef\u4ee5\u7528 list \u548c deque \u5b9e\u73b0\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7528 deque \u5b9e\u73b0\u3002 1 2 3 4 template < class T , class Cont = deque < T > > class queue { ... };","title":"queue"},{"location":"cplus/stl/cpp_stl_queue/#priority_queue","text":"priority_queue \u662f\u201c\u4f18\u5148\u961f\u5217\u201d\u3002\u5b83\u548c\u666e\u901a\u961f\u5217\u7684\u533a\u522b\u5728\u4e8e\uff0c\u4f18\u5148\u961f\u5217\u7684\u961f\u5934\u5143\u7d20\u603b\u662f\u6700\u5927\u7684\u2014\u2014\u5373\u6267\u884c pop \u64cd\u4f5c\u65f6\uff0c\u5220\u9664\u7684\u603b\u662f\u6700\u5927\u7684\u5143\u7d20\uff1b\u6267\u884c top \u64cd\u4f5c\u65f6\uff0c\u8fd4\u56de\u7684\u662f\u6700\u5927\u5143\u7d20\u7684\u5f15\u7528\u3002 1 2 3 4 template < class T , class Container = vector < T > , class Compare = less < T > > class priority_queue { ... };","title":"priority_queue"},{"location":"cplus/stl/cpp_stl_set/","text":"set \u662f\u5173\u8054\u5bb9\u5668\u7684\u4e00\u79cd\uff0c\u662f\u6392\u5e8f\u597d\u7684\u96c6\u5408\uff08\u5143\u7d20\u5df2\u7ecf\u8fdb\u884c\u4e86\u6392\u5e8f\uff09\u3002set \u548c multiset \u7c7b\u4f3c\uff0c\u5b83\u548c multiset \u7684\u5dee\u522b\u5728\u4e8e set \u4e2d\u4e0d\u80fd\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002multiset \u7684\u6210\u5458\u51fd\u6570 set \u4e2d\u4e5f\u90fd\u6709\u3002 1 template < class Key , class Pred = less < Key > , class A = allocator < Key > > class set {...} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> #include <set> //\u4f7f\u7528set\u987b\u5305\u542b\u6b64\u6587\u4ef6 using namespace std ; int main () { typedef set < int >:: iterator IT ; int a [ 5 ] = { 3 , 4 , 6 , 1 , 2 }; set < int > st ( a , a + 5 ); // st\u91cc\u662f 1 2 3 4 6 pair < IT , bool > result ; result = st . insert ( 5 ); // st\u53d8\u6210 1 2 3 4 5 6 if ( result . second ) //\u63d2\u5165\u6210\u529f\u5219\u8f93\u51fa\u88ab\u63d2\u5165\u5143\u7d20 cout << * result . first << \" inserted\" << endl ; //\u8f93\u51fa: 5 inserted if ( st . insert ( 5 ). second ) cout << * result . first << endl ; else cout << * result . first << \" already exists\" << endl ; //\u8f93\u51fa 5 already exists pair < IT , IT > bounds = st . equal_range ( 4 ); cout << * bounds . first << \",\" << * bounds . second ; //\u8f93\u51fa\uff1a4,5 return 0 ; }","title":"set"},{"location":"cplus/stl/cpp_stl_stack/","text":"stack \u662f\u5bb9\u5668\u9002\u914d\u5668\u7684\u4e00\u79cd\u3002\u8981\u4f7f\u7528 stack\uff0c\u5fc5\u987b\u5305\u542b\u5934\u6587\u4ef6 \u3002 ```c++ include \u00b6 include //\u4f7f\u7528stack\u9700\u8981\u5305\u542b\u6b64\u5934\u6587\u4ef6 \u00b6 using namespace std; int main() { int n, k; stack stk; cin >> n >> k; //\u5c06n\u8f6c\u6362\u4e3ak\u8fdb\u5236\u6570 if (n == 0) { cout << 0; return 0; } while (n) { stk.push(n%k); n /= k; } while (!stk.empty()) { cout << stk.top(); stk.pop(); } return 0; } ``","title":"stack"},{"location":"cplus/stl/cpp_stl_stack/#include","text":"","title":"include "},{"location":"cplus/stl/cpp_stl_stack/#include-stack","text":"using namespace std; int main() { int n, k; stack stk; cin >> n >> k; //\u5c06n\u8f6c\u6362\u4e3ak\u8fdb\u5236\u6570 if (n == 0) { cout << 0; return 0; } while (n) { stk.push(n%k); n /= k; } while (!stk.empty()) { cout << stk.top(); stk.pop(); } return 0; } ``","title":"include   //\u4f7f\u7528stack\u9700\u8981\u5305\u542b\u6b64\u5934\u6587\u4ef6"},{"location":"cplus/stl/cpp_stl_string/","text":"","title":"string\u7c7b"},{"location":"cplus/stl/cpp_stl_vector/","text":"vector \u00b6 vector \u662f\u987a\u5e8f\u5bb9\u5668\u7684\u4e00\u79cd\u3002vector \u662f\u53ef\u53d8\u957f\u7684\u52a8\u6001\u6570\u7ec4\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff0c\u6240\u6709 STL \u7b97\u6cd5\u90fd\u80fd\u5bf9 vector \u8fdb\u884c\u64cd\u4f5c\u3002\u8981\u4f7f\u7528 vector\uff0c\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 vector\u3002 \u6210\u5458\u51fd\u6570 \u4f5c\u7528 vector() \u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u5c06\u5bb9\u5668\u521d\u59cb\u5316\u4e3a\u7a7a vector(int n) \u5c06\u5bb9\u5668\u521d\u59cb\u5316\u4e3a\u6709 n \u4e2a\u5143\u7d20 vector(int n, const T & val) \u5047\u5b9a\u5143\u7d20\u7684\u7c7b\u578b\u662f T\uff0c\u6b64\u6784\u9020\u51fd\u6570\u5c06\u5bb9\u5668\u521d\u59cb\u5316\u4e3a\u6709 n \u4e2a\u5143\u7d20\uff0c\u6bcf \u4e2a\u5143\u7d20\u7684\u503c\u90fd\u662f val vector(iterator first, iterator last) first \u548c last \u53ef\u4ee5\u662f\u5176\u4ed6\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u672c\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u7684\u7ed3\u679c\u5c31\u662f\u5c06 vector \u5bb9\u5668\u7684\u5185\u5bb9\u53d8\u6210\u4e0e\u5176\u4ed6\u5bb9\u5668\u4e0a\u7684\u533a\u95f4 [first, last) \u2014\u81f4 void clear() \u5220\u9664\u6240\u6709\u5143\u7d20 bool empty() \u5224\u65ad\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a void pop_back() \u5220\u9664\u5bb9\u5668\u672b\u5c3e\u7684\u5143\u7d20 void push_back( const T & val) \u5c06 val \u6dfb\u52a0\u5230\u5bb9\u5668\u672b\u5c3e int size() \u8fd4\u56de\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 T & front() \u8fd4\u56de\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528 T & back() \u8fd4\u56de\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528 iterator insert(iterator i, const T & val) \u5c06 val \u63d2\u5165\u8fed\u4ee3\u5668 i \u6307\u5411\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de i iterator insert( iterator i, iterator first, iterator last) \u5c06\u5176\u4ed6\u5bb9\u5668\u4e0a\u7684\u533a\u95f4 [first, last) \u4e2d\u7684\u5143\u7d20\u63d2\u5165\u8fed\u4ee3\u5668 i \u6307\u5411\u7684\u4f4d\u7f6e iterator erase(iterator i) \u5220\u9664\u8fed\u4ee3\u5668 i \u6307\u5411\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u503c\u662f\u88ab\u5220\u5143\u7d20\u540e\u9762\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668 iterator erase(iterator first, iterator last) \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u533a\u95f4 [first, last) void swap( vector & v) \u5c06\u5bb9\u5668\u81ea\u8eab\u7684\u5185\u5bb9\u548c\u53e6\u4e00\u4e2a\u540c\u7c7b\u578b\u7684\u5bb9\u5668 v \u4e92\u6362 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> #include <vector> //\u4f7f\u7528vector\u9700\u8981\u5305\u542b\u6b64\u5934\u6587\u4ef6 using namespace std ; template < class T > void PrintVector ( const vector < T > & v ) { //\u7528\u4e8e\u8f93\u51favector\u5bb9\u5668\u7684\u5168\u90e8\u5143\u7d20\u7684\u51fd\u6570\u6a21\u677f typename vector < T >:: const_iterator i ; //typename \u7528\u6765\u8bf4\u660e vector <T>::const_iterator \u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u5728 Visual Studio \u4e2d\u4e0d\u5199\u4e5f\u53ef\u4ee5 for ( i = v . begin (); i != v . end (); ++ i ) cout << * i << \" \" ; cout << endl ; } int main () { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; vector < int > v ( a , a + 5 ); //\u5c06\u6570\u7ec4a\u7684\u5185\u5bb9\u653e\u5165v cout << \"1) \" << v . end () - v . begin () << endl ; //\u4e24\u4e2a\u968f\u673a\u8fed\u4ee3\u5668\u53ef\u4ee5\u76f8\u51cf\uff0c\u8f93\u51fa\uff1a1)5 cout << \"2)\" ; PrintVector ( v ); //\u8f93\u51fa\uff1a2)1 2 3 4 5 v . insert ( v . begin () + 2 , 13 ); //\u5728 begin()+2 \u4f4d\u7f6e\u63d2\u4eba 13 cout << \"3)\" ; PrintVector ( v ); //\u8f93\u51fa\uff1a3)1 2 13 3 4 5 v . erase ( v . begin () + 2 ); //\u5220\u9664\u4f4d\u4e8e begin()+2 \u4f4d\u7f6e\u7684\u5143\u7d20 cout << \"4)\" ; PrintVector ( v ); //\u8f93\u51fa\uff1a4)1 2 3 4 5 vector < int > v2 ( 4 , 100 ); //v2 \u6709 4 \u4e2a\u5143\u7d20\uff0c\u90fd\u662f 100 v2 . insert ( v2 . begin (), v . begin () + 1 , v . begin () + 3 ); //\u5c06v\u7684\u4e00\u6bb5\u63d2\u5165v2\u5f00\u5934 cout << \"5)v2:\" ; PrintVector ( v2 ); //\u8f93\u51fa\uff1a5)v2:2 3 100 100 100 100 v . erase ( v . begin () + 1 , v . begin () + 3 ); //\u5220\u9664 v \u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u5373 [2,3) cout << \"6)\" ; PrintVector ( v ); //\u8f93\u51fa\uff1a6)1 4 5 return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> #include <vector> using namespace std ; int main () { vector < vector < int > > v ( 3 ); //v\u67093\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fvector<int> \u5bb9\u5668 for ( int i = 0 ; i < v . size (); ++ i ) for ( int j = 0 ; j < 4 ; ++ j ) v [ i ]. push_back ( j ); for ( int i = 0 ; i < v . size (); ++ i ) { for ( int j = 0 ; j < v [ i ]. size (); ++ j ) cout << v [ i ][ j ] << \" \" ; cout << endl ; } return 0 ; }","title":"vector"},{"location":"cplus/stl/cpp_stl_vector/#vector","text":"vector \u662f\u987a\u5e8f\u5bb9\u5668\u7684\u4e00\u79cd\u3002vector \u662f\u53ef\u53d8\u957f\u7684\u52a8\u6001\u6570\u7ec4\uff0c\u652f\u6301\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff0c\u6240\u6709 STL \u7b97\u6cd5\u90fd\u80fd\u5bf9 vector \u8fdb\u884c\u64cd\u4f5c\u3002\u8981\u4f7f\u7528 vector\uff0c\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 vector\u3002 \u6210\u5458\u51fd\u6570 \u4f5c\u7528 vector() \u65e0\u53c2\u6784\u9020\u51fd\u6570\uff0c\u5c06\u5bb9\u5668\u521d\u59cb\u5316\u4e3a\u7a7a vector(int n) \u5c06\u5bb9\u5668\u521d\u59cb\u5316\u4e3a\u6709 n \u4e2a\u5143\u7d20 vector(int n, const T & val) \u5047\u5b9a\u5143\u7d20\u7684\u7c7b\u578b\u662f T\uff0c\u6b64\u6784\u9020\u51fd\u6570\u5c06\u5bb9\u5668\u521d\u59cb\u5316\u4e3a\u6709 n \u4e2a\u5143\u7d20\uff0c\u6bcf \u4e2a\u5143\u7d20\u7684\u503c\u90fd\u662f val vector(iterator first, iterator last) first \u548c last \u53ef\u4ee5\u662f\u5176\u4ed6\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u672c\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u7684\u7ed3\u679c\u5c31\u662f\u5c06 vector \u5bb9\u5668\u7684\u5185\u5bb9\u53d8\u6210\u4e0e\u5176\u4ed6\u5bb9\u5668\u4e0a\u7684\u533a\u95f4 [first, last) \u2014\u81f4 void clear() \u5220\u9664\u6240\u6709\u5143\u7d20 bool empty() \u5224\u65ad\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a void pop_back() \u5220\u9664\u5bb9\u5668\u672b\u5c3e\u7684\u5143\u7d20 void push_back( const T & val) \u5c06 val \u6dfb\u52a0\u5230\u5bb9\u5668\u672b\u5c3e int size() \u8fd4\u56de\u5bb9\u5668\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 T & front() \u8fd4\u56de\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528 T & back() \u8fd4\u56de\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528 iterator insert(iterator i, const T & val) \u5c06 val \u63d2\u5165\u8fed\u4ee3\u5668 i \u6307\u5411\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de i iterator insert( iterator i, iterator first, iterator last) \u5c06\u5176\u4ed6\u5bb9\u5668\u4e0a\u7684\u533a\u95f4 [first, last) \u4e2d\u7684\u5143\u7d20\u63d2\u5165\u8fed\u4ee3\u5668 i \u6307\u5411\u7684\u4f4d\u7f6e iterator erase(iterator i) \u5220\u9664\u8fed\u4ee3\u5668 i \u6307\u5411\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u503c\u662f\u88ab\u5220\u5143\u7d20\u540e\u9762\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668 iterator erase(iterator first, iterator last) \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u533a\u95f4 [first, last) void swap( vector & v) \u5c06\u5bb9\u5668\u81ea\u8eab\u7684\u5185\u5bb9\u548c\u53e6\u4e00\u4e2a\u540c\u7c7b\u578b\u7684\u5bb9\u5668 v \u4e92\u6362 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> #include <vector> //\u4f7f\u7528vector\u9700\u8981\u5305\u542b\u6b64\u5934\u6587\u4ef6 using namespace std ; template < class T > void PrintVector ( const vector < T > & v ) { //\u7528\u4e8e\u8f93\u51favector\u5bb9\u5668\u7684\u5168\u90e8\u5143\u7d20\u7684\u51fd\u6570\u6a21\u677f typename vector < T >:: const_iterator i ; //typename \u7528\u6765\u8bf4\u660e vector <T>::const_iterator \u662f\u4e00\u4e2a\u7c7b\u578b\uff0c\u5728 Visual Studio \u4e2d\u4e0d\u5199\u4e5f\u53ef\u4ee5 for ( i = v . begin (); i != v . end (); ++ i ) cout << * i << \" \" ; cout << endl ; } int main () { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; vector < int > v ( a , a + 5 ); //\u5c06\u6570\u7ec4a\u7684\u5185\u5bb9\u653e\u5165v cout << \"1) \" << v . end () - v . begin () << endl ; //\u4e24\u4e2a\u968f\u673a\u8fed\u4ee3\u5668\u53ef\u4ee5\u76f8\u51cf\uff0c\u8f93\u51fa\uff1a1)5 cout << \"2)\" ; PrintVector ( v ); //\u8f93\u51fa\uff1a2)1 2 3 4 5 v . insert ( v . begin () + 2 , 13 ); //\u5728 begin()+2 \u4f4d\u7f6e\u63d2\u4eba 13 cout << \"3)\" ; PrintVector ( v ); //\u8f93\u51fa\uff1a3)1 2 13 3 4 5 v . erase ( v . begin () + 2 ); //\u5220\u9664\u4f4d\u4e8e begin()+2 \u4f4d\u7f6e\u7684\u5143\u7d20 cout << \"4)\" ; PrintVector ( v ); //\u8f93\u51fa\uff1a4)1 2 3 4 5 vector < int > v2 ( 4 , 100 ); //v2 \u6709 4 \u4e2a\u5143\u7d20\uff0c\u90fd\u662f 100 v2 . insert ( v2 . begin (), v . begin () + 1 , v . begin () + 3 ); //\u5c06v\u7684\u4e00\u6bb5\u63d2\u5165v2\u5f00\u5934 cout << \"5)v2:\" ; PrintVector ( v2 ); //\u8f93\u51fa\uff1a5)v2:2 3 100 100 100 100 v . erase ( v . begin () + 1 , v . begin () + 3 ); //\u5220\u9664 v \u4e0a\u7684\u4e00\u4e2a\u533a\u95f4\uff0c\u5373 [2,3) cout << \"6)\" ; PrintVector ( v ); //\u8f93\u51fa\uff1a6)1 4 5 return 0 ; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> #include <vector> using namespace std ; int main () { vector < vector < int > > v ( 3 ); //v\u67093\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fvector<int> \u5bb9\u5668 for ( int i = 0 ; i < v . size (); ++ i ) for ( int j = 0 ; j < 4 ; ++ j ) v [ i ]. push_back ( j ); for ( int i = 0 ; i < v . size (); ++ i ) { for ( int j = 0 ; j < v [ i ]. size (); ++ j ) cout << v [ i ][ j ] << \" \" ; cout << endl ; } return 0 ; }","title":"vector"},{"location":"cprogram/c_base/","text":"\u57fa\u672c\u6982\u5ff5 \u00b6 \u4f4d\u4e0e\u5b57\u8282 \u00b6 \u4f4d(bit,b)\uff0c\u5b57\u8282(byte,Byte,B) 1 2 3 4 5 1byte = 8 bit \u200b\u200b1KB = 1024B 1MB = 1024KB 1GB = 1024MB 1TB = 1024MB \u4f4d\u8fd0\u7b97 \u00b6 \u5f02\u6216(^) \u5f02\u8005\u6216 \u5de6\u79fb\u8fd0\u7b97\uff1am<<n\u8868\u793a\u628am\u5de6\u79fbn\u4f4d\uff0c\u6700\u5de6\u8fb9\u7684n\u4f4d\u88ab\u4e22\u5f03\uff0c\u53f3\u8fb9\u8865\u4e0an\u4e2a0\u300200001010<<2=00101000 \u53f3\u79fb\u8fd0\u7b97\uff1am>>n\u8868\u793a\u628am\u53f3\u79fbn\u4f4d\uff0c\u6700\u53f3\u8fb9\u7684n\u4f4d\u88ab\u4e22\u5f03\uff0c\u5de6\u8fb9\u7684\u60c5\u51b5\u5206\u4e24\u79cd\uff1a \u5982\u679c\u6570\u5b57\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6570\u503c\uff0c\u5219\u75280\u586b\u8865\u6700\u5de6\u8fb9\u7684n\u4f4d\u300200001010>>2=00000010 \u5982\u679c\u6570\u5b57\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u6570\u503c\uff0c\u5219\u7528\u6570\u5b57\u7684\u7b26\u53f7\u4f4d\u586b\u8865 \u6700\u5de6\u8fb9\u7684n\u4f4d\u3002(\u5982\u679c\u6570\u5b57\u662f\u6b63\u6570\uff0c\u53f3\u79fb\u4e4b\u540e\u5de6\u8fb9\u88650\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u5de6\u8fb9\u88651)\u300210001010>>3=11110001 typedef & #define \u00b6 typedef\u5141\u8bb8\u4e3a\u5404\u79cd\u6570\u636e\u8d77\u65b0\u7684\u540d\u5b57\u3002 1 2 typedef char * ptr_to_char ptr_to_char a ; //\u58f0\u660ea\u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488 \u5e94\u8be5\u7528typedef\u800c\u4e0d\u662f#define\u6765\u521b\u5efa\u65b0\u7684\u7c7b\u578b\u540d\uff0c\u56e0\u4e3a#define\u4e0d\u80fd\u6b63\u786e\u5904\u7406\u6307\u9488\u7c7b\u578b\u3002 1 2 #define d_ptr_to_char char * d_ptr_to_char a , b ; //b\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a\u5b57\u7b26\u800c\u4e0d\u662f\u6307\u9488 define\u6307\u4ee4\u662f\u53e6\u4e00\u79cd\u521b\u5efa\u540d\u5b57\u5e38\u91cf\u7684\u673a\u5236\u3002 1 2 3 4 #define MAX_ELEMENTS 50 int const max_elements = 50 char hello [ MAX_ELEMENTS ]; //const\u53d8\u91cf\u53ea\u80fd\u4f7f\u7528\u4e8e\u5141\u8bb8\u4f7f\u7528\u53d8\u91cf\u7684\u5730\u65b9 const\u5173\u952e\u5b57 \u00b6 \u4ee5\u4e0b2\u6761\u8bed\u53e5\u90fd\u628aa\u58f0\u660e\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u5b83\u7684\u503c\u4e0d\u80fd\u88ab\u4fee\u6539\u3002(\u9009\u62e9\u4e00\u79cd\u597d\u7406\u89e3\u7684\u5e76\u4e00\u76f4\u575a\u6301\u4e0b\u53bb) 1 2 int const a = 15 ; const int a = 15 ; \u7531\u4e8ea\u7684\u503c\u65e0\u6cd5\u88ab\u4fee\u6539\uff0c\u4e5f\u65e0\u6cd5\u88ab\u4efb\u4f55\u4e1c\u897f\u8d4b\u503c\uff0c\u67092\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5b83\u83b7\u5f97\u503c\uff1a \u5728\u58f0\u660e\u7684\u65f6\u5019\u5bf9\u5b83\u521d\u59cb\u5316 \u5728\u51fd\u6570\u4e2d\u58f0\u660econst\u7684\u5f62\u53c2\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u4f1a\u5f97\u5230\u5b9e\u53c2\u7684\u503c const\u4e0e\u6307\u9488\u7684\u7ed3\u5408\u4f1a\u5f71\u54cd \u6307\u9488\u53d8\u91cf \u6216\u8005 \u5b83\u6240\u6307\u5411\u7684\u5b9e\u4f53 \u3002 1 2 3 4 int * pi ; //\u666e\u901a\u6307\u9488 int const * pci ; //\u6307\u5411\u6574\u578b\u5e38\u91cf\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u4fee\u6539\u6307\u9488\u7684\u503c\uff0c\u4f46\u4e0d\u53ef\u4ee5\u4fee\u6539\u5b83\u6240\u6307\u5411\u7684\u503c int * const cpi ; //\u6307\u5411\u6574\u578b\u7684\u5e38\u91cf\u6307\u9488\uff0c\u6307\u9488\u662f\u5e38\u91cf\u4e0d\u53ef\u4fee\u6539\uff0c\u5b83\u6240\u6307\u5411\u7684\u6574\u578b\u503c\u53ef\u4fee\u6539 int const * const cpci ; //\u6307\u9488\u672c\u8eab\u4e0e\u5b83\u6240\u6307\u5411\u7684\u503c\u90fd\u4e0d\u53ef\u88ab\u4fee\u6539 \u4f5c\u7528\u57df \u00b6 \u7f16\u8bd1\u5668\u53ef\u4ee5\u786e\u8ba44\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u2013\u6587\u4ef6\u4f5c\u7528\u57df\u3001\u51fd\u6570\u4f5c\u7528\u57df\u3001\u4ee3\u7801\u5757\u4f5c\u7528\u57df\u548c\u51fd\u6570\u539f\u578b\u4f5c\u7528\u57df\u3002 \u94fe\u63a5\u5c5e\u6027 \u00b6 \u94fe\u63a5\u5c5e\u6027\uff1aexternal(\u5916\u90e8)\u3001internal(\u5185\u90e8)\u3001node(\u65e0)\u3002 \u5173\u952e\u5b57extern\u548cstatic\u7528\u4e8e\u5728\u58f0\u660e\u4e2d\u4fee\u6539\u6807\u8bc6\u7b26\u7684\u94fe\u63a5\u5c5e\u6027\u3002 \u5f53extern\u5173\u952e\u5b57\u7528\u4e8e\u6e90\u6587\u4ef6\u4e2d\u4e00\u4e2a\u6807\u8bc6\u7b26\u7684\u7b2c\u4e00\u6b21\u58f0\u660e\u65f6\uff0c\u5b83\u6307\u5b9a\u8be5\u6807\u8bc6\u7b26\u5177\u6709external\u94fe\u63a5\u5c5e\u6027\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u7528\u4e8e\u8be5\u6807\u8bc6\u7b26\u7684\u7b2c2\u6b21\u6216\u4ee5\u540e\u7684\u58f0\u660e\u65f6\uff0c\u5b83\u5e76\u4e0d\u4f1a\u66f4\u6539\u7531\u7b2c\u4e00\u6b21\u58f0\u660e\u6240\u6307\u5b9a\u7684\u94fe\u63a5\u5c5e\u6027\u3002 1 2 3 4 5 6 7 8 static int i ; //----1 int func () { int j ; extern int k ; extern int i ; //----2 } //\u58f0\u660e2\u5e76\u4e0d\u4fee\u6539\u58f0\u660e1\u6240\u6307\u5b9a\u7684\u53d8\u91cfi\u7684\u94fe\u63a5\u5c5e\u6027 \u5b58\u50a8\u7c7b\u578b \u00b6 \u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b(storage class)\u662f\u6307\u5b58\u50a8\u53d8\u91cf\u503c\u5f97\u5185\u5b58\u7c7b\u578b\u3002\u51b3\u5b9a\u53d8\u91cf\u4f55\u65f6\u521b\u5efa\u3001\u4f55\u65f6\u9500\u6bc1\u4ee5\u53ca\u5b83\u7684\u503c\u5c06\u4fdd\u6301\u591a\u4e45\u3002 \u5b58\u50a8\u53d8\u91cf\u7684\u4e09\u4e2a\u5730\u65b9\uff1a\u666e\u901a\u5185\u5b58\u3001\u8fd0\u884c\u65f6\u5806\u6808\u3001\u786c\u4ef6\u5bc4\u5b58\u5668\u3002 \u53d8\u91cf\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u578b\u53d6\u51b3\u4e8e\u5b83\u7684\u58f0\u660e\u4f4d\u7f6e\u3002 \u51e1\u662f\u5728\u4efb\u4f55\u4ee3\u7801\u5757\u4e4b\u5916\u58f0\u660e\u7684\u53d8\u91cf\u603b\u662f\u5b58\u50a8\u4e8e\u9759\u6001\u5185\u5b58\u4e2d\uff0c\u8fd9\u7c7b\u53d8\u91cf\u79f0\u4e3a\u9759\u6001(static)\u53d8\u91cf(main\u51fd\u6570\u91cc\u58f0\u660e\u7684\u53d8\u91cf\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf)\u3002 \u5728\u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u578b\u662f\u81ea\u52a8\u7684(automatic)\uff0c\u5b58\u50a8\u5728\u5806\u6808\u4e2d\uff0c\u79f0\u4e3a\u81ea\u52a8(auto)\u53d8\u91cf\u3002 \u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\u52a0\u4e0astatic\u5173\u952e\u5b57\uff0c\u5219\u4f7f\u5b83\u7684\u5b58\u50a8\u7c7b\u578b\u4ece\u81ea\u52a8\u53d8\u4e3a\u9759\u6001\u3002\u6ce8\u610f\uff1a\u4fee\u6539\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\u5e76\u4e0d\u8868\u793a\u4fee\u6539\u8be5\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u3002 \u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u4e0d\u80fd\u58f0\u660e\u4e3a\u9759\u6001\uff0c\u56e0\u4e3a\u5b9e\u53c2\u603b\u662f\u5728\u5806\u6808\u4e2d\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u7528\u4e8e\u652f\u6301\u9012\u5f52\u3002 static\u5173\u952e\u5b57 \u00b6 \u5f53static\u5173\u952e\u5b57\u7528\u4e8e\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u6216\u7528\u4e8e\u4ee3\u7801\u5757\u4e4b\u5916\u7684\u53d8\u91cf\u58f0\u660e\u65f6\uff0cstatic\u5173\u952e\u5b57\u7528\u4e8e\u4fee\u6539\u6807\u8bc6\u7b26\u7684\u94fe\u63a5\u5c5e\u6027\uff0c\u4eceexternal\u6539\u4e3ainternal,\u4f46\u6807\u8bc6\u7b26\u7684\u5b58\u50a8\u7c7b\u578b\u548c\u4f5c\u7528\u57df\u4e0d\u53d7\u5f71\u54cd\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u51fd\u6570\u6216\u53d8\u91cf\u53ea\u80fd\u5728\u58f0\u660e\u5b83\u4eec\u7684\u6e90\u6587\u4ef6\u4e2d\u8bbf\u95ee\u3002 \u5f53static\u5173\u952e\u5b57\u7528\u4e8e\u4ee3\u7801\u5757\u5185\u90e8\u7684\u53d8\u91cf\u58f0\u660e\u65f6\uff0cstatic\u5173\u952e\u5b57\u7528\u4e8e\u4fee\u6539\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\uff0c\u4ece\u81ea\u52a8\u53d8\u91cf\u4fee\u6539\u4e3a\u9759\u6001\u53d8\u91cf\uff0c\u4f46\u53d8\u91cf\u7684\u94fe\u63a5\u5c5e\u6027\u548c\u4f5c\u7528\u57df\u4e0d\u53d7\u5f71\u54cd\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u53d8\u91cf\u5728\u7a0b\u5e8f\u6267\u884c\u4e4b\u524d\u521b\u5efa\uff0c\u5e76\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u6267\u884c\u671f\u95f4\u4e00\u76f4\u5b58\u5728\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u5728\u4ee3\u7801\u5757\u5f00\u59cb\u6267\u884c\u65f6\u521b\u5efa\uff0c\u5728\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\u540e\u9500\u6bc1 \u64cd\u4f5c\u7b26\u4e0e\u8868\u8fbe\u5f0f \u00b6 ++&\u2013\u64cd\u4f5c\u7b26 \u00b6 ++&\u2013\u64cd\u4f5c\u7b26\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u800c\u4e0d\u662f\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5b83\u7684\u64cd\u4f5c\u6570\u3002\u64cd\u4f5c\u7b26\u5b9e\u9645\u53ea\u8981\u6c42\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u2018\u5de6\u503c\u2019\uff0c\u53ea\u80fd\u4f5c\u7528\u4e8e\u53ef\u4ee5\u4f4d\u4e8e\u8d4b\u503c\u7b26\u53f7\u5de6\u8fb9\u7684\u8868\u8fbe\u5f0f\u3002 \u524d\u7f00\u548c\u540e\u7f00\u7684\u589e\u503c\u64cd\u4f5c\u7b26\u90fd\u590d\u5236\u4e00\u4efd\u53d8\u91cf\u503c\u5f97\u62f7\u8d1d\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u7ed3\u679c\u4e0d\u662f\u88ab\u5b83\u4eec\u6240\u4fee\u6539\u7684\u53d8\u91cf\uff0c\u800c\u662f\u53d8\u91cf\u503c\u7684\u62f7\u8d1d\u3002 1 ++ a = 10 ; ++a\u7684\u7ed3\u679c\u662fa\u503c\u5f97\u62f7\u8d1d\uff0c\u5e76\u4e0d\u662f\u53d8\u91cf\u672c\u8eab\uff0c\u65e0\u6cd5\u5411\u4e00\u4e2a\u503c\u8fdb\u884c\u8d4b\u503c\u3002 \u903b\u8f91\u64cd\u4f5c\u7b26\u4e3a\u201c\u77ed\u8def\u6c42\u503c\u201d\u3002 \u5de6\u503c&\u53f3\u503c \u00b6 \u5de6\u503c\uff1a\u53ef\u4ee5\u5b58\u50a8\u7ed3\u679c\u503c\u7684\u5730\u70b9 \u53f3\u503c\uff1a\u6307\u5b9a\u4e00\u4e2a\u503c 1 2 3 int a , * pi ; pi =& a ; * pi = 20 ; \u7b2c\u4e8c\u6761\u8bed\u53e5\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5de6\u503c\uff0c\u6307\u9488pi\u7684\u503c\u662f*\u5185\u5b58\u4e2d\u67d0\u4e2a\u7279\u5b9a\u4f4d\u7f6e\u7684\u5730\u5740\uff0c\u64cd\u4f5c\u7b26\u4f7f\u673a\u5668\u6307\u5411\u90a3\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5b83\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\u65f6\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6307\u5b9a\u9700\u8981\u8fdb\u884c\u4fee\u6539\u7684\u4f4d\u7f6e\u3002\u5f53\u5b83\u4f5c\u4e3a\u53f3\u503c\u4f7f\u7528\u65f6\uff0c\u5b83\u5c31\u63d0\u53d6\u5f53\u524d\u5b58\u50a8\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002 \u8bed\u53e5 \u00b6 C\u6700\u7b80\u5355\u7684\u8bed\u53e5\u662f\u7a7a\u8bed\u53e5\uff0c\u4ed6\u672c\u8eab\u53ea\u542b\u6709\u4e00\u4e2a\u5206\u53f7\u3002 1 for (;;) \u5f53\u4f60\u9700\u8981\u5faa\u73af\u4f53\u81f3\u5c11\u6267\u884c\u4e00\u6b21\u65f6\uff0c\u9009\u62e9do\u3002 1 2 3 4 5 6 do { func (); break ; ... } while ( 0 ); \u6307\u9488 \u00b6 \u540d\u5b57\u4e0e\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5173\u8054\u5e76\u4e0d\u662f\u786c\u4ef6\u63d0\u4f9b\u7684\uff0c\u5b83\u662f\u7531\u7f16\u8bd1\u5668\u4e3a\u6211\u4eec\u5b9e\u73b0\u7684\u3002 \u53d8\u91cf\u7684\u503c\u5c31\u662f\u5206\u914d\u7ed9\u8be5\u53d8\u91cf\u7684\u5185\u5b58\u4f4d\u7f6e\u6240\u5b58\u50a8\u7684\u6570\u503c\uff0c\u5373\u4f7f\u662f\u6307\u9488\u53d8\u91cf\u4e5f\u4e0d\u4f8b\u5916\u3002 1 2 int * a ; * a = 12 ; //\u6307\u9488\u672a\u521d\u59cb\u5316 \u5982\u679c\u4e0d\u77e5\u9053\u6307\u9488\u5c06\u88ab\u521d\u59cb\u5316\u4e3a\u4ec0\u4e48\u5730\u5740\uff0c\u5c31\u628a\u5b83\u521d\u59cb\u5316\u4e3aNULL; 1 2 3 4 int a ; int * d =& a ; * d = 10 -* d ; //-----------1\u5408\u6cd5 d = 10 -* d ; //-----------2\u975e\u6cd5 \u53f3\u8fb9\u7684\u95f4\u63a5\u8bbf\u95ee\u4f5c\u4e3a\u53f3\u503c\u4f7f\u7528\uff0c\u5b83\u7684\u503c\u662fd\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u6240\u5b58\u50a8\u7684\u503c\u3002 \u5de6\u8fb9\u7684\u95f4\u63a5\u8bbf\u95ee\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\uff0c\u6240\u6709d\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u628a\u8d4b\u503c\u7b26\u53f3\u4fa7\u7684\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u5b83\u7684\u65b0\u503c\u3002 \u548c\u4efb\u4f55\u53d8\u91cf\u4e00\u6837\uff0c\u6307\u9488\u53d8\u91cf\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\u3002\u5bf9\u6307\u9488\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u6240\u4ea7\u751f\u7684\u503c\u4e5f\u662f\u4e2a\u5de6\u503c\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8868\u8fbe\u5f0f\u6807\u8bc6\u4e00\u4e2a\u7279\u5b9a\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 char ch = 'a' ; char * p =& a ; /*--------------*/ ch //\u53f3\u503c\uff1a\u8868\u8fbe\u5f0f\u7684\u503c'a' //\u5de6\u503c\uff1a\u6240\u4ee3\u8868\u7684\u5185\u5b58\u7684\u5730\u5740\u800c\u4e0d\u662f\u8be5\u5730\u5740\u7684\u503c /*--------------*/ & ch //\u53f3\u503c\uff1a\u662f\u53d8\u91cfch\u7684\u5730\u5740 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ cp //\u53f3\u503c\uff1acp\u7684\u503c(cp\u7684\u5185\u5b58\u4e2d\u7684\u5730\u5740) //\u5de6\u503c\uff1acp\u6240\u5728\u7684\u5185\u5b58\u4f4d\u7f6e /*--------------*/ & cp //\u53f3\u503c\uff1a\u6307\u9488\u53d8\u91cf\u7684\u5730\u5740 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ * cp //\u53f3\u503c\uff1a\u503c //\u5de6\u503c\uff1a\u5730\u5740 /*--------------*/ * cp + 1 //\u53f3\u503c\uff1a\u503c\u7684\u62f7\u8d1d\u5e76\u628a\u5b83+1 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ * ( cp + 1 ) //\u53f3\u503c\uff1ach\u4e4b\u540e\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c //\u5de6\u503c\uff1a\u4f4d\u7f6e\u672c\u8eab /*--------------*/ ++ cp //\u53f3\u503c\uff1a\u589e\u503c\u540e\u7684\u6307\u9488\u7684\u4e00\u4efd\u62f7\u8d1d\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ cp ++ //\u53f3\u503c\uff1a\u5148\u8fd4\u56decp\u503c\u7684\u4e00\u4efd\u62f7\u8d1d\u7136\u540e\u5728\u589e\u52a0cp\u7684\u503c //\u5de6\u503c\uff1a\u975e\u6cd5\u5730\u5740 /*--------------*/ *++ cp //\u53f3\u503c\uff1a\u589e\u503c\u540e\u7684\u6307\u9488\u7684\u62f7\u8d1d\u4e0a\uff0c\u53f3\u503c\u662fch\u540e\u9762\u90a3\u4e2a\u5185\u5b58\u5730\u5740\u7684\u503c //\u5de6\u503c\uff1a\u90a3\u4e2a\u4f4d\u7f6e\u672c\u8eab /*--------------*/ * cp ++ //\u540e\u7f00++\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e*\u64cd\u4f5c\u7b26 //1) ++\u64cd\u4f5c\u7b26\u4ea7\u751fcp\u7684\u4e00\u4efd\u62f7\u8d1d //2) ++\u64cd\u4f5c\u7b26\u589e\u52a0cp\u7684\u503c //3) \u5728cp\u7684\u62f7\u8d1d\u4e0a\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c //\u53f3\u503c\uff1ach\u7684\u503c //\u5de6\u503c\uff1ach\u7684\u5185\u5b58\u4f4d\u7f6e /*--------------*/ ++* cp //\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u662f\u4ece\u53f3\u5411\u5de6 //1) \u5148\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c //2) cp\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u7684\u503c\u589e\u52a01 //3) \u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u662f\u8fd9\u4e2a\u589e\u503c\u540e\u7684\u503c\u7684\u4e00\u4efd\u62f7\u8d1d //\u53f3\u503c\uff1a\u589e\u503c\u540e\u503c\u7684\u62f7\u8d1d //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ( * cp ) ++ //\u53f3\u503c\uff1a\u4e0e\u4e0a\u9762\u76f8\u540c //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ++*++ cp /* 1. \u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u4ece\u53f3\u5411\u5de6 2. \u9996\u5148\u6267\u884c++cp\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e 3. \u5bf9\u62f7\u8d1d\u7684\u503c\u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee\uff0c\u8bbf\u95eech\u540e\u9762\u7684\u4f4d\u7f6e(\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u64cd\u4f5c\u6570\u628a\u5b83\u5f53\u5de6\u503c\u4f7f\u7528) 4. \u5728\u8fd9\u4e2a\u4f4d\u7f6e\u8fdb\u884c++\u64cd\u4f5c\uff0c\u589e\u52a0\u4ed6\u7684\u503c */ //\u53f3\u503c\uff1a\u5982\u4e0a\u6240\u8ff0 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ++* cp ++ //\u53f3\u503c\uff1a\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26\u8bbf\u95ee\u7684\u662fcp\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u800c\u4e0d\u662fcp\u6240\u6307\u5411\u4f4d\u7f6e\u7684\u540e\u9762\u7684\u90a3\u4e2a\u4f4d\u7f6e //\u5de6\u503c\uff1a\u975e\u6cd5 \u51fd\u6570 \u00b6 C\u51fd\u6570\u7684\u6240\u6709\u53c2\u6570\u5747\u4ee5\u201c\u4f20\u503c\u8c03\u7528\u201d\u65b9\u5f0f\u8fdb\u884c\u4f20\u9012\uff0c\u8fd9\u610f\u5473\u7740\u51fd\u6570\u5c06\u83b7\u5f97\u53c2\u6570\u503c\u7684\u4e00\u4efd\u62f7\u8d1d\u3002 \u201c\u4f20\u5740\u8c03\u7528\u201d\u6570\u7ec4\u540d\u7684\u503c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u662f\u8fd9\u4e2a\u6307\u9488\u7684\u4e00\u4efd\u62f7\u8d1d\u3002 \u5c3e\u90e8\u9012\u5f52\uff1a\u9012\u5f52\u51fd\u6570\u5185\u90e8\u6240\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\u5c31\u662f\u8c03\u7528\u81ea\u8eab\u3002 \u6570\u7ec4 \u00b6 \u5728C\u4e2d\uff0c\u5728\u51e0\u4e4e\u6240\u6709\u4f7f\u7528\u6570\u7ec4\u540d\u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6570\u7ec4\u540d\u7684\u503c\u662f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7b2c1\u4e2a\u5143\u7d20\u7684\u5730\u5740\u3002 \u5b83\u7684\u7c7b\u578b\u53d6\u51b3\u4e8e\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u3002 \u53ea\u6709\u5f53\u6570\u7ec4\u540d\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u5668 \u624d\u4f1a\u4e3a\u5b83\u4ea7\u751f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf(\u4e0d\u662f\u6307\u9488\u53d8\u91cf)\u3002 \u53ea\u67092\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4\u540d\u5e76\u4e0d\u7528\u6307\u9488\u5e38\u91cf\u6765\u8868\u793a\uff1a \u6570\u7ec4\u540d\u4f5c\u4e3asizeof\u64cd\u4f5c\u7b26 \u5355\u76ee\u64cd\u4f5c\u7b26&\u7684\u64cd\u4f5c\u6570 \u4e0b\u6807\u7edd\u4e0d\u4f1a\u6bd4\u6307\u9488\u66f4\u6709\u6548\u7387\uff0c\u4f46\u6307\u9488\u6709\u65f6\u4f1a\u6bd4\u4e0b\u6807\u66f4\u6709\u6548\u3002 \u6307\u9488\u548c\u6570\u7ec4\u5e76\u4e0d\u662f\u76f8\u7b49\u7684 \u00b6 1 2 3 4 5 6 7 8 int a [ 5 ]; /*\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u6839\u636e\u58f0\u660e\u6240\u6307\u5b9a\u7684\u5143\u7d20\u6570\u91cf\u4e3a\u6570\u7ec4\u4fdd\u7559\u5185\u5b58\u7a7a\u95f4\uff0c\u7136\u540e\u518d\u521b\u5efa\u6570\u7ec4\u540d\uff0c\u5b83\u7684\u503c\u65f6\u4e00\u4e2a\u5e38\u91cf\uff0c\u6307\u5411\u8fd9\u6bb5\u7a7a\u95f4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002*/ //*a \u5408\u6cd5 //a++ a\u7684\u503c\u662f\u4e00\u4e2a\u5e38\u91cf int * b /*\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u53ea\u4e3a\u6307\u9488\u672c\u8eab\u4fdd\u7559\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u4e0d\u4e3a\u4efb\u4f55\u6574\u578b\u503c\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002*/ //*b \u4e0d\u5408\u6cd5\uff0c\u6ca1\u6709\u521d\u59cb\u5316 //b++ \u53ef\u7f16\u8bd1\u901a\u8fc7 \u5b57\u7b26\u4e32 \u00b6 1 2 3 4 5 char * strncpy ( char * dst , char const * src , size_t len ); //\u5982\u679cstrlen(src)\u7684\u503c\u5927\u4e8e\u7b49\u4e8elen\uff0c\u90a3\u4e48\u53ea\u6709len\u4e2a\u5b57\u7b26\u88ab\u590d\u5236\u5230dst\u4e2d\u3002\u6ce8\u610f\uff01\uff01\u5b83\u7684\u7ed3\u679c\u4e0d\u4f1a\u4ee5NUL\u5b57\u8282\u7ed3\u5c3e\uff0c\u5b83\u7684\u7ed3\u679c\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 char buffer [ BSIZE ]; strncpy ( buffer , name , BSIZE ); buffer [ BSIZE - 1 ] = '' ; strncat\u603b\u662f\u5728\u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u6dfb\u52a0\u4e00\u4e2aNUL\u5b57\u8282\uff0c\u800c\u4e14\u5b83\u4e0d\u4f1a\u50cfstrncpy\u90a3\u6837\u5bf9\u76ee\u6807\u6570\u7ec4\u7528NUL\u5b57\u8282\u8fdb\u884c\u586b\u5145\u3002 \u7ed3\u6784\u548c\u8054\u5408 \u00b6 \u58f0\u660e\u7ed3\u6784\u65f6\u7684\u4e00\u79cd\u826f\u597d\u6280\u5de7\uff1a 1 2 3 4 5 6 typedef struct { xx xx } Simple ; Simple x ; Simple y [ 20 ], * z ; \u70b9\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u65f6\u4ece\u5de6\u5411\u53f3\u3002 \u6ce8\u610f\u5982\u4e0b\u9677\u9631\uff1a 1 2 3 4 5 6 7 8 9 10 11 typedef struct { int a ; SELF_REF3 * b ; int c ; } SELF_REF3 ; //\u7c7b\u578b\u540d\u76f4\u5230\u58f0\u660e\u7684\u672b\u5c3e\u624d\u5b9a\u4e49\uff0c\u6240\u4ee5\u5728\u7ed3\u6784\u58f0\u660e\u7684\u5185\u90e8\u5b83\u5c1a\u672a\u5b9a\u4e49\u3002 typedef struct SELF_REF3_TAG { int a ; struct SELF_REF3_TAG * b ; int c ; } SELF_REF3 ; \u6240\u6709\u7ed3\u6784\u7684\u8d77\u59cb\u5b58\u50a8\u4f4d\u7f6e\u5fc5\u987b\u662f\u7ed3\u6784\u4e2d\u8fb9\u754c\u8981\u6c42\u6700\u4e25\u683c\u7684\u6570\u636e\u7c7b\u578b\u6240\u8981\u6c42\u7684\u4f4d\u7f6e\u3002 \u5411\u51fd\u6570\u4f20\u9012\u7ed3\u6784\u53c2\u6570\u662f\u4f4e\u6548\u7684\uff0c\u5c3d\u91cf\u4f20\u9012\u7ed3\u6784\u6307\u9488\uff0c\u63d0\u5347\u6548\u7387\u3002 \u5206\u914d\u7ed9\u8054\u5408\u7684\u5185\u5b58\u6570\u91cf\u53d6\u51b3\u4e0e\u5b83\u7684\u6700\u957f\u6210\u5458\u7684\u957f\u5ea6\u3002 \u9ad8\u7ea7\u6307\u9488\u8bdd\u9898 \u00b6 1 2 int f ; /*\u4e00\u4e2a\u6574\u5f62\u53d8\u91cf*/ int * f ; /*\u4e00\u4e2a\u6307\u5411\u6574\u5f62\u7684\u6307\u9488*/ 1 int f (); \u5b83\u628af\u58f0\u660e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u6570\u3002 1 int * f (); \u9996\u5148\u6267\u884c\u7684\u662f\u51fd\u6570\u8c03\u7528\u64cd\u4f5c\u7b26()\uff0c\u5e94\u4e3a\u5b83\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26\u3002\u56e0\u6b64\uff0cf\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u4e00\u4e2a\u6307\u5411\u6574\u578b\u7684\u6307\u9488\u3002 1 int ( * f )(); \u7b2c\u4e00\u5bf9\u62ec\u53f7\u53ea\u8d77\u805a\u5408\u4f5c\u7528\uff0c\u5b83\u8feb\u4f7f\u95f4\u63a5\u8bbf\u95ee\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8fdb\u884c\uff0c\u7b2c\u4e8c\u5bf9\u62ec\u53f7\u662f\u51fd\u6570\u8c03\u7528\u64cd\u4f5c\u7b26\u3002\u6240\u4ee5\uff0cf\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u5b83\u6240\u6307\u5411\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\u3002 1 int * ( * f )(); f\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u53ea\u662f\u6240\u6307\u5411\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u578b\u6307\u9488\u3002 1 2 3 int f []; /*f\u662f\u4e00\u4e2a\u6574\u578b\u6570\u7ec4*/ int * f []; /*\u4e0b\u6807\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0cf\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f\u6307\u5411\u6574\u578b\u7684\u6307\u9488*/ int ( * f )[]; /*\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6574\u578b*/ 1 int f ()[]; \u975e\u6cd5\u58f0\u660e\u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u6807\u91cf\u503c\uff0c\u8fd9\u4e2af\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u3002 1 int f [](); \u975e\u6cd5\u58f0\u660ef\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f\u8fd4\u56de\u503c\u4e3a\u6574\u578b\u7684\u51fd\u6570\u3002\u4f46\u662f\u6570\u7ec4\u5143\u7d20\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4f46\u4e0d\u540c\u7684\u51fd\u6570\u663e\u7136\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u957f\u5ea6\u3002 1 int ( * f [])(); f\u662f\u4e00\u4e2a\u5143\u7d20\u4e3a\u67d0\u79cd\u7c7b\u578b\u7684\u6307\u9488\u7684\u6570\u7ec4\u3002\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u662f\u51fd\u6570\u6307\u9488\uff0c\u5b83\u6240\u6307\u5411\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a \u6574\u578b\u503c\u3002 1 int * ( * f [])(); \u8fd9\u662f\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u6307\u9488\u6240\u6307\u5411\u7684\u7c7b\u578b\u662f\u8fd4\u56de\u503c\u4e3a\u6574\u578b\u6307\u9488\u7684\u51fd\u6570\u3002 \u56de\u8c03\u51fd\u6570\u4e0e\u8f6c\u6362\u8868 \u00b6 \u56de\u8c03\u51fd\u6570\u5b9e\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <stdio.h> #include \"node.h\" Node * search_list ( Node * node , void const * value , int ( * compare )( void const * , void const * )) { while ( node != NULL ) { if ( compare ( & node -> value , value ) == 0 ) { break ; } node = node -> link ; } return node ; } int compare_ints ( void const * a , void const * b ) { if ( * ( int * ) a ==* ( int * ) b ) { return 0 ; } else { return 1 ; } } desired_node = search_list ( root , & desired_value , compare_ints ); \u8f6c\u79fb\u8868jump table \u00b6 1 2 3 4 5 6 7 8 9 10 double add ( double , double ); double sub ( double , double ); double mul ( double , double ); double div ( double , double ); \u00b7\u00b7\u00b7 double ( * oper_func [])( double , double ) = { add , sub , mul , div ,... }; result = oper_func [ oper ]( op1 , op2 ); \u9884\u5904\u7406\u5668 \u00b6 \u9884\u5904\u7406(preprocessing)\u9636\u6bb5\uff1a\u5220\u9664\u6ce8\u91ca\u3001\u63d2\u5165\u88ab#include\u6307\u4ee4\u5305\u542b\u7684\u6587\u4ef6\u5185\u5bb9\u3001\u5b9a\u4e49\u548c\u66ff\u6362\u7531#define\u6307\u4ee4\u5b9a\u4e49\u7684\u7b26\u53f7\u4ee5\u53ca\u786e\u5b9a\u4ee3\u7801\u7684\u90e8\u5206\u5185\u5bb9\u662f\u5426\u5e94\u8be5\u6839\u636e\u4e00\u4e9b\u6761\u4ef6\u7f16\u8bd1\u6307\u4ee4\u8fdb\u884c\u7f16\u8bd1\u3002 \u9884\u5b9a\u4e49\u7b26\u53f7 \u00b6 1 2 3 4 5 __FILE__ \u8fdb\u884c\u7f16\u8bd1\u7684\u6e90\u6587\u4ef6\u540d __LINE__ \u6587\u4ef6\u5f53\u524d\u7684\u884c\u53f7 __DATE__ \u6587\u4ef6\u88ab\u7f16\u8bd1\u7684\u65e5\u671f __TIME__ \u6587\u4ef6\u88ab\u7f16\u8bd1\u7684\u65f6\u95f4 __STDC__ \u9075\u5faa ANSI C , \u5176\u503c\u4e3a 1 \u547d\u4ee4\u884c\u5b9a\u4e49 \u00b6 1 2 3 4 int array [ ARRAY_SIZE ] //-Dname \u503c\u4e3a1 //-Dname=stuff \u503c\u4e3astuff cc - DARRAY_SIZE = 100 prog . c \u6587\u4ef6\u5305\u542b \u00b6 1 2 3 4 5 6 #ifndef _HELLO_ #define _HELLO_ /* **All the stuff that you want in the header file */ #endif \u8f93\u5165&\u8f93\u51fa\u51fd\u6570 \u00b6 \u6587\u672c\u6d41&\u4e8c\u8fdb\u5236\u6d41 \u00b6 \u6587\u672c\u6d41\uff1a\u6807\u51c6\u89c4\u5b9a\u6587\u672c\u884c\u81f3\u5c11\u8fd0\u884c254\u4e2a\u5b57\u7b26\u3002\u5728MS-DOS\u7cfb\u7edf\u4e2d\uff0c\u6587\u672c\u884c\u7684\u7ed3\u675f\u65b9\u5f0f\u4ee5\u4e00\u4e2a\u56de\u8f66\u7b26\u548c\u4e00\u4e2a\u6362\u884c\u7b26\u7ed3\u5c3e\u3002UNIX\u7cfb\u7edf\u4e2d\u53ea\u4f7f\u7528\u4e00\u4e2a\u6362\u884c\u7b26\u7ed3\u5c3e\u3002 \u4e8c\u8fdb\u5236\u6d41\uff1a\u4e8c\u8fdb\u5236\u6d41\u4e2d\u7684\u5b57\u8282\u5c06\u5b8c\u5168\u6839\u636e\u7a0b\u5e8f\u7f16\u5199\u5b83\u4eec\u7684\u5f62\u5f0f\u5199\u5165\u5230\u6587\u4ef6\u6216\u8bbe\u5907\u4e2d\uff0c\u800c\u4e14\u5b8c\u5168\u6839\u636e\u5b83\u4eec\u4ece\u6587\u4ef6\u6216\u8bbe\u5907\u8bfb\u53d6\u7684\u5f62\u5f0f\u8bfb\u5165\u5230\u7a0b\u5e8f\u4e2d\u3002\u5e76\u672a\u505a\u4efb\u4f55\u6539\u53d8\u3002 FILE\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8bbf\u95ee\u4e00\u4e2a\u6d41\u3002stdin,stdout,stderr\u90fd\u662f\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u3002 I/O\u51fd\u6570\u4ee5\u4e09\u79cd\u57fa\u672c\u7684\u5f62\u5f0f\u5904\u7406\u6570\u636e\uff1a\u5355\u4e2a\u5b57\u7b26\u3001\u6587\u672c\u884c\u548c\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u6570\u636e\u7c7b\u578b \u8f93\u5165 \u8f93\u51fa \u63cf\u8ff0 \u5b57\u7b26 getchar putchar \u8bfb\u53d6(\u5199\u5165)\u5355\u4e2a\u5b57\u7b26 \u6587\u672c\u884c gets/scanf puts/printf \u6587\u672c\u884c\u7684\u8f93\u5165\u8f93\u51fa(\u672a\u683c\u5f0f\u5316/\u683c\u5f0f\u5316) \u4e8c\u8fdb\u5236 fread fwrite \u8bfb\u53d6(\u5199\u5165)\u4e8c\u8fdb\u5236\u6570\u636e \u6807\u51c6\u51fd\u6570\u5e93 \u00b6 \u968f\u673a\u6570 \u00b6 1 2 3 int rand ( void ); void srand ( unsigned int seed ); srand (( unsigned int ) time ( 0 )); \u65e5\u671f\u4e0e\u65f6\u95f4 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u5904\u7406\u5668\u65f6\u95f4 clock_t clock ( void ); //\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u8d77\u5904\u7406\u5668\u6240\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u4e24\u4e2a\u65f6\u95f4\u76f8\u51cf\u83b7\u53d6\u7cbe\u786e\u65f6\u95f4\u3002 //\u8fd4\u56de\u65f6\u949f\u6ef4\u7b54\u6b21\u6570\uff0c\u8f6c\u6362\u79d2\uff0c\u9664\u4ee5CLOCKS_PER_SEC //\u5f53\u5929\u65f6\u95f4 time_t time ( time_t * returned_value ); //time\u51fd\u6570\u8fd4\u56de\u5f53\u524d\u7684\u65e5\u671f\u548c\u65f6\u95f4 //\u65e5\u671f\u4e0e\u65f6\u95f4\u8f6c\u6362 char * ctime ( time_t const * time_value ); //\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32,asctime(localtime(time_value)); double difftime ( time_t time1 , time_t time2 ); //\u8ba1\u7b97time1-time2\u7684\u5dee\uff0c\u7ed3\u679c\u8f6c\u6362\u4e3a\u79d2 struct tm * gmtime ( time_t const * time_value ); //UTC\u65f6\u95f4 struct tm * localtime ( time_t const * time_value ); //\u5f53\u5730\u65f6\u95f4 char * asctime ( struct tm const * tm_ptr ); //tm\u7ed3\u6784\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 size_t strftime ( char * string , size_t maxsize , char const * format , struct tm const * tm_ptr ); //tm\u7ed3\u6784\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6839\u636e\u67d0\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u800c\u5b9a\u7684\u5b57\u7b26\u4e32 time_t mktime ( struct tm * tm_ptr ); //\u628a\u4e00\u4e2atm\u7ed3\u6784\u8f6c\u6362\u4e3a\u4e00\u4e2atime_t\u503c","title":"C\u8bed\u8a00\u57fa\u7840"},{"location":"cprogram/c_base/#_1","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"cprogram/c_base/#_2","text":"\u4f4d(bit,b)\uff0c\u5b57\u8282(byte,Byte,B) 1 2 3 4 5 1byte = 8 bit \u200b\u200b1KB = 1024B 1MB = 1024KB 1GB = 1024MB 1TB = 1024MB","title":"\u4f4d\u4e0e\u5b57\u8282"},{"location":"cprogram/c_base/#_3","text":"\u5f02\u6216(^) \u5f02\u8005\u6216 \u5de6\u79fb\u8fd0\u7b97\uff1am<<n\u8868\u793a\u628am\u5de6\u79fbn\u4f4d\uff0c\u6700\u5de6\u8fb9\u7684n\u4f4d\u88ab\u4e22\u5f03\uff0c\u53f3\u8fb9\u8865\u4e0an\u4e2a0\u300200001010<<2=00101000 \u53f3\u79fb\u8fd0\u7b97\uff1am>>n\u8868\u793a\u628am\u53f3\u79fbn\u4f4d\uff0c\u6700\u53f3\u8fb9\u7684n\u4f4d\u88ab\u4e22\u5f03\uff0c\u5de6\u8fb9\u7684\u60c5\u51b5\u5206\u4e24\u79cd\uff1a \u5982\u679c\u6570\u5b57\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6570\u503c\uff0c\u5219\u75280\u586b\u8865\u6700\u5de6\u8fb9\u7684n\u4f4d\u300200001010>>2=00000010 \u5982\u679c\u6570\u5b57\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u6570\u503c\uff0c\u5219\u7528\u6570\u5b57\u7684\u7b26\u53f7\u4f4d\u586b\u8865 \u6700\u5de6\u8fb9\u7684n\u4f4d\u3002(\u5982\u679c\u6570\u5b57\u662f\u6b63\u6570\uff0c\u53f3\u79fb\u4e4b\u540e\u5de6\u8fb9\u88650\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u5de6\u8fb9\u88651)\u300210001010>>3=11110001","title":"\u4f4d\u8fd0\u7b97"},{"location":"cprogram/c_base/#typedef-define","text":"typedef\u5141\u8bb8\u4e3a\u5404\u79cd\u6570\u636e\u8d77\u65b0\u7684\u540d\u5b57\u3002 1 2 typedef char * ptr_to_char ptr_to_char a ; //\u58f0\u660ea\u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488 \u5e94\u8be5\u7528typedef\u800c\u4e0d\u662f#define\u6765\u521b\u5efa\u65b0\u7684\u7c7b\u578b\u540d\uff0c\u56e0\u4e3a#define\u4e0d\u80fd\u6b63\u786e\u5904\u7406\u6307\u9488\u7c7b\u578b\u3002 1 2 #define d_ptr_to_char char * d_ptr_to_char a , b ; //b\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a\u5b57\u7b26\u800c\u4e0d\u662f\u6307\u9488 define\u6307\u4ee4\u662f\u53e6\u4e00\u79cd\u521b\u5efa\u540d\u5b57\u5e38\u91cf\u7684\u673a\u5236\u3002 1 2 3 4 #define MAX_ELEMENTS 50 int const max_elements = 50 char hello [ MAX_ELEMENTS ]; //const\u53d8\u91cf\u53ea\u80fd\u4f7f\u7528\u4e8e\u5141\u8bb8\u4f7f\u7528\u53d8\u91cf\u7684\u5730\u65b9","title":"typedef &amp; #define"},{"location":"cprogram/c_base/#const","text":"\u4ee5\u4e0b2\u6761\u8bed\u53e5\u90fd\u628aa\u58f0\u660e\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u5b83\u7684\u503c\u4e0d\u80fd\u88ab\u4fee\u6539\u3002(\u9009\u62e9\u4e00\u79cd\u597d\u7406\u89e3\u7684\u5e76\u4e00\u76f4\u575a\u6301\u4e0b\u53bb) 1 2 int const a = 15 ; const int a = 15 ; \u7531\u4e8ea\u7684\u503c\u65e0\u6cd5\u88ab\u4fee\u6539\uff0c\u4e5f\u65e0\u6cd5\u88ab\u4efb\u4f55\u4e1c\u897f\u8d4b\u503c\uff0c\u67092\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5b83\u83b7\u5f97\u503c\uff1a \u5728\u58f0\u660e\u7684\u65f6\u5019\u5bf9\u5b83\u521d\u59cb\u5316 \u5728\u51fd\u6570\u4e2d\u58f0\u660econst\u7684\u5f62\u53c2\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u4f1a\u5f97\u5230\u5b9e\u53c2\u7684\u503c const\u4e0e\u6307\u9488\u7684\u7ed3\u5408\u4f1a\u5f71\u54cd \u6307\u9488\u53d8\u91cf \u6216\u8005 \u5b83\u6240\u6307\u5411\u7684\u5b9e\u4f53 \u3002 1 2 3 4 int * pi ; //\u666e\u901a\u6307\u9488 int const * pci ; //\u6307\u5411\u6574\u578b\u5e38\u91cf\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u4fee\u6539\u6307\u9488\u7684\u503c\uff0c\u4f46\u4e0d\u53ef\u4ee5\u4fee\u6539\u5b83\u6240\u6307\u5411\u7684\u503c int * const cpi ; //\u6307\u5411\u6574\u578b\u7684\u5e38\u91cf\u6307\u9488\uff0c\u6307\u9488\u662f\u5e38\u91cf\u4e0d\u53ef\u4fee\u6539\uff0c\u5b83\u6240\u6307\u5411\u7684\u6574\u578b\u503c\u53ef\u4fee\u6539 int const * const cpci ; //\u6307\u9488\u672c\u8eab\u4e0e\u5b83\u6240\u6307\u5411\u7684\u503c\u90fd\u4e0d\u53ef\u88ab\u4fee\u6539","title":"const\u5173\u952e\u5b57"},{"location":"cprogram/c_base/#_4","text":"\u7f16\u8bd1\u5668\u53ef\u4ee5\u786e\u8ba44\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u2013\u6587\u4ef6\u4f5c\u7528\u57df\u3001\u51fd\u6570\u4f5c\u7528\u57df\u3001\u4ee3\u7801\u5757\u4f5c\u7528\u57df\u548c\u51fd\u6570\u539f\u578b\u4f5c\u7528\u57df\u3002","title":"\u4f5c\u7528\u57df"},{"location":"cprogram/c_base/#_5","text":"\u94fe\u63a5\u5c5e\u6027\uff1aexternal(\u5916\u90e8)\u3001internal(\u5185\u90e8)\u3001node(\u65e0)\u3002 \u5173\u952e\u5b57extern\u548cstatic\u7528\u4e8e\u5728\u58f0\u660e\u4e2d\u4fee\u6539\u6807\u8bc6\u7b26\u7684\u94fe\u63a5\u5c5e\u6027\u3002 \u5f53extern\u5173\u952e\u5b57\u7528\u4e8e\u6e90\u6587\u4ef6\u4e2d\u4e00\u4e2a\u6807\u8bc6\u7b26\u7684\u7b2c\u4e00\u6b21\u58f0\u660e\u65f6\uff0c\u5b83\u6307\u5b9a\u8be5\u6807\u8bc6\u7b26\u5177\u6709external\u94fe\u63a5\u5c5e\u6027\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u7528\u4e8e\u8be5\u6807\u8bc6\u7b26\u7684\u7b2c2\u6b21\u6216\u4ee5\u540e\u7684\u58f0\u660e\u65f6\uff0c\u5b83\u5e76\u4e0d\u4f1a\u66f4\u6539\u7531\u7b2c\u4e00\u6b21\u58f0\u660e\u6240\u6307\u5b9a\u7684\u94fe\u63a5\u5c5e\u6027\u3002 1 2 3 4 5 6 7 8 static int i ; //----1 int func () { int j ; extern int k ; extern int i ; //----2 } //\u58f0\u660e2\u5e76\u4e0d\u4fee\u6539\u58f0\u660e1\u6240\u6307\u5b9a\u7684\u53d8\u91cfi\u7684\u94fe\u63a5\u5c5e\u6027","title":"\u94fe\u63a5\u5c5e\u6027"},{"location":"cprogram/c_base/#_6","text":"\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b(storage class)\u662f\u6307\u5b58\u50a8\u53d8\u91cf\u503c\u5f97\u5185\u5b58\u7c7b\u578b\u3002\u51b3\u5b9a\u53d8\u91cf\u4f55\u65f6\u521b\u5efa\u3001\u4f55\u65f6\u9500\u6bc1\u4ee5\u53ca\u5b83\u7684\u503c\u5c06\u4fdd\u6301\u591a\u4e45\u3002 \u5b58\u50a8\u53d8\u91cf\u7684\u4e09\u4e2a\u5730\u65b9\uff1a\u666e\u901a\u5185\u5b58\u3001\u8fd0\u884c\u65f6\u5806\u6808\u3001\u786c\u4ef6\u5bc4\u5b58\u5668\u3002 \u53d8\u91cf\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u578b\u53d6\u51b3\u4e8e\u5b83\u7684\u58f0\u660e\u4f4d\u7f6e\u3002 \u51e1\u662f\u5728\u4efb\u4f55\u4ee3\u7801\u5757\u4e4b\u5916\u58f0\u660e\u7684\u53d8\u91cf\u603b\u662f\u5b58\u50a8\u4e8e\u9759\u6001\u5185\u5b58\u4e2d\uff0c\u8fd9\u7c7b\u53d8\u91cf\u79f0\u4e3a\u9759\u6001(static)\u53d8\u91cf(main\u51fd\u6570\u91cc\u58f0\u660e\u7684\u53d8\u91cf\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf)\u3002 \u5728\u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u578b\u662f\u81ea\u52a8\u7684(automatic)\uff0c\u5b58\u50a8\u5728\u5806\u6808\u4e2d\uff0c\u79f0\u4e3a\u81ea\u52a8(auto)\u53d8\u91cf\u3002 \u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\u52a0\u4e0astatic\u5173\u952e\u5b57\uff0c\u5219\u4f7f\u5b83\u7684\u5b58\u50a8\u7c7b\u578b\u4ece\u81ea\u52a8\u53d8\u4e3a\u9759\u6001\u3002\u6ce8\u610f\uff1a\u4fee\u6539\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\u5e76\u4e0d\u8868\u793a\u4fee\u6539\u8be5\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u3002 \u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u4e0d\u80fd\u58f0\u660e\u4e3a\u9759\u6001\uff0c\u56e0\u4e3a\u5b9e\u53c2\u603b\u662f\u5728\u5806\u6808\u4e2d\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u7528\u4e8e\u652f\u6301\u9012\u5f52\u3002","title":"\u5b58\u50a8\u7c7b\u578b"},{"location":"cprogram/c_base/#static","text":"\u5f53static\u5173\u952e\u5b57\u7528\u4e8e\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u6216\u7528\u4e8e\u4ee3\u7801\u5757\u4e4b\u5916\u7684\u53d8\u91cf\u58f0\u660e\u65f6\uff0cstatic\u5173\u952e\u5b57\u7528\u4e8e\u4fee\u6539\u6807\u8bc6\u7b26\u7684\u94fe\u63a5\u5c5e\u6027\uff0c\u4eceexternal\u6539\u4e3ainternal,\u4f46\u6807\u8bc6\u7b26\u7684\u5b58\u50a8\u7c7b\u578b\u548c\u4f5c\u7528\u57df\u4e0d\u53d7\u5f71\u54cd\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u51fd\u6570\u6216\u53d8\u91cf\u53ea\u80fd\u5728\u58f0\u660e\u5b83\u4eec\u7684\u6e90\u6587\u4ef6\u4e2d\u8bbf\u95ee\u3002 \u5f53static\u5173\u952e\u5b57\u7528\u4e8e\u4ee3\u7801\u5757\u5185\u90e8\u7684\u53d8\u91cf\u58f0\u660e\u65f6\uff0cstatic\u5173\u952e\u5b57\u7528\u4e8e\u4fee\u6539\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\uff0c\u4ece\u81ea\u52a8\u53d8\u91cf\u4fee\u6539\u4e3a\u9759\u6001\u53d8\u91cf\uff0c\u4f46\u53d8\u91cf\u7684\u94fe\u63a5\u5c5e\u6027\u548c\u4f5c\u7528\u57df\u4e0d\u53d7\u5f71\u54cd\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u53d8\u91cf\u5728\u7a0b\u5e8f\u6267\u884c\u4e4b\u524d\u521b\u5efa\uff0c\u5e76\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u6267\u884c\u671f\u95f4\u4e00\u76f4\u5b58\u5728\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u5728\u4ee3\u7801\u5757\u5f00\u59cb\u6267\u884c\u65f6\u521b\u5efa\uff0c\u5728\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\u540e\u9500\u6bc1","title":"static\u5173\u952e\u5b57"},{"location":"cprogram/c_base/#_7","text":"","title":"\u64cd\u4f5c\u7b26\u4e0e\u8868\u8fbe\u5f0f"},{"location":"cprogram/c_base/#_8","text":"++&\u2013\u64cd\u4f5c\u7b26\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u800c\u4e0d\u662f\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5b83\u7684\u64cd\u4f5c\u6570\u3002\u64cd\u4f5c\u7b26\u5b9e\u9645\u53ea\u8981\u6c42\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u2018\u5de6\u503c\u2019\uff0c\u53ea\u80fd\u4f5c\u7528\u4e8e\u53ef\u4ee5\u4f4d\u4e8e\u8d4b\u503c\u7b26\u53f7\u5de6\u8fb9\u7684\u8868\u8fbe\u5f0f\u3002 \u524d\u7f00\u548c\u540e\u7f00\u7684\u589e\u503c\u64cd\u4f5c\u7b26\u90fd\u590d\u5236\u4e00\u4efd\u53d8\u91cf\u503c\u5f97\u62f7\u8d1d\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u7ed3\u679c\u4e0d\u662f\u88ab\u5b83\u4eec\u6240\u4fee\u6539\u7684\u53d8\u91cf\uff0c\u800c\u662f\u53d8\u91cf\u503c\u7684\u62f7\u8d1d\u3002 1 ++ a = 10 ; ++a\u7684\u7ed3\u679c\u662fa\u503c\u5f97\u62f7\u8d1d\uff0c\u5e76\u4e0d\u662f\u53d8\u91cf\u672c\u8eab\uff0c\u65e0\u6cd5\u5411\u4e00\u4e2a\u503c\u8fdb\u884c\u8d4b\u503c\u3002 \u903b\u8f91\u64cd\u4f5c\u7b26\u4e3a\u201c\u77ed\u8def\u6c42\u503c\u201d\u3002","title":"++&amp;\u2013\u64cd\u4f5c\u7b26"},{"location":"cprogram/c_base/#_9","text":"\u5de6\u503c\uff1a\u53ef\u4ee5\u5b58\u50a8\u7ed3\u679c\u503c\u7684\u5730\u70b9 \u53f3\u503c\uff1a\u6307\u5b9a\u4e00\u4e2a\u503c 1 2 3 int a , * pi ; pi =& a ; * pi = 20 ; \u7b2c\u4e8c\u6761\u8bed\u53e5\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5de6\u503c\uff0c\u6307\u9488pi\u7684\u503c\u662f*\u5185\u5b58\u4e2d\u67d0\u4e2a\u7279\u5b9a\u4f4d\u7f6e\u7684\u5730\u5740\uff0c\u64cd\u4f5c\u7b26\u4f7f\u673a\u5668\u6307\u5411\u90a3\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5b83\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\u65f6\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6307\u5b9a\u9700\u8981\u8fdb\u884c\u4fee\u6539\u7684\u4f4d\u7f6e\u3002\u5f53\u5b83\u4f5c\u4e3a\u53f3\u503c\u4f7f\u7528\u65f6\uff0c\u5b83\u5c31\u63d0\u53d6\u5f53\u524d\u5b58\u50a8\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002","title":"\u5de6\u503c&amp;\u53f3\u503c"},{"location":"cprogram/c_base/#_10","text":"C\u6700\u7b80\u5355\u7684\u8bed\u53e5\u662f\u7a7a\u8bed\u53e5\uff0c\u4ed6\u672c\u8eab\u53ea\u542b\u6709\u4e00\u4e2a\u5206\u53f7\u3002 1 for (;;) \u5f53\u4f60\u9700\u8981\u5faa\u73af\u4f53\u81f3\u5c11\u6267\u884c\u4e00\u6b21\u65f6\uff0c\u9009\u62e9do\u3002 1 2 3 4 5 6 do { func (); break ; ... } while ( 0 );","title":"\u8bed\u53e5"},{"location":"cprogram/c_base/#_11","text":"\u540d\u5b57\u4e0e\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5173\u8054\u5e76\u4e0d\u662f\u786c\u4ef6\u63d0\u4f9b\u7684\uff0c\u5b83\u662f\u7531\u7f16\u8bd1\u5668\u4e3a\u6211\u4eec\u5b9e\u73b0\u7684\u3002 \u53d8\u91cf\u7684\u503c\u5c31\u662f\u5206\u914d\u7ed9\u8be5\u53d8\u91cf\u7684\u5185\u5b58\u4f4d\u7f6e\u6240\u5b58\u50a8\u7684\u6570\u503c\uff0c\u5373\u4f7f\u662f\u6307\u9488\u53d8\u91cf\u4e5f\u4e0d\u4f8b\u5916\u3002 1 2 int * a ; * a = 12 ; //\u6307\u9488\u672a\u521d\u59cb\u5316 \u5982\u679c\u4e0d\u77e5\u9053\u6307\u9488\u5c06\u88ab\u521d\u59cb\u5316\u4e3a\u4ec0\u4e48\u5730\u5740\uff0c\u5c31\u628a\u5b83\u521d\u59cb\u5316\u4e3aNULL; 1 2 3 4 int a ; int * d =& a ; * d = 10 -* d ; //-----------1\u5408\u6cd5 d = 10 -* d ; //-----------2\u975e\u6cd5 \u53f3\u8fb9\u7684\u95f4\u63a5\u8bbf\u95ee\u4f5c\u4e3a\u53f3\u503c\u4f7f\u7528\uff0c\u5b83\u7684\u503c\u662fd\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u6240\u5b58\u50a8\u7684\u503c\u3002 \u5de6\u8fb9\u7684\u95f4\u63a5\u8bbf\u95ee\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\uff0c\u6240\u6709d\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u628a\u8d4b\u503c\u7b26\u53f3\u4fa7\u7684\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u5b83\u7684\u65b0\u503c\u3002 \u548c\u4efb\u4f55\u53d8\u91cf\u4e00\u6837\uff0c\u6307\u9488\u53d8\u91cf\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\u3002\u5bf9\u6307\u9488\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u6240\u4ea7\u751f\u7684\u503c\u4e5f\u662f\u4e2a\u5de6\u503c\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8868\u8fbe\u5f0f\u6807\u8bc6\u4e00\u4e2a\u7279\u5b9a\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 char ch = 'a' ; char * p =& a ; /*--------------*/ ch //\u53f3\u503c\uff1a\u8868\u8fbe\u5f0f\u7684\u503c'a' //\u5de6\u503c\uff1a\u6240\u4ee3\u8868\u7684\u5185\u5b58\u7684\u5730\u5740\u800c\u4e0d\u662f\u8be5\u5730\u5740\u7684\u503c /*--------------*/ & ch //\u53f3\u503c\uff1a\u662f\u53d8\u91cfch\u7684\u5730\u5740 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ cp //\u53f3\u503c\uff1acp\u7684\u503c(cp\u7684\u5185\u5b58\u4e2d\u7684\u5730\u5740) //\u5de6\u503c\uff1acp\u6240\u5728\u7684\u5185\u5b58\u4f4d\u7f6e /*--------------*/ & cp //\u53f3\u503c\uff1a\u6307\u9488\u53d8\u91cf\u7684\u5730\u5740 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ * cp //\u53f3\u503c\uff1a\u503c //\u5de6\u503c\uff1a\u5730\u5740 /*--------------*/ * cp + 1 //\u53f3\u503c\uff1a\u503c\u7684\u62f7\u8d1d\u5e76\u628a\u5b83+1 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ * ( cp + 1 ) //\u53f3\u503c\uff1ach\u4e4b\u540e\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c //\u5de6\u503c\uff1a\u4f4d\u7f6e\u672c\u8eab /*--------------*/ ++ cp //\u53f3\u503c\uff1a\u589e\u503c\u540e\u7684\u6307\u9488\u7684\u4e00\u4efd\u62f7\u8d1d\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ cp ++ //\u53f3\u503c\uff1a\u5148\u8fd4\u56decp\u503c\u7684\u4e00\u4efd\u62f7\u8d1d\u7136\u540e\u5728\u589e\u52a0cp\u7684\u503c //\u5de6\u503c\uff1a\u975e\u6cd5\u5730\u5740 /*--------------*/ *++ cp //\u53f3\u503c\uff1a\u589e\u503c\u540e\u7684\u6307\u9488\u7684\u62f7\u8d1d\u4e0a\uff0c\u53f3\u503c\u662fch\u540e\u9762\u90a3\u4e2a\u5185\u5b58\u5730\u5740\u7684\u503c //\u5de6\u503c\uff1a\u90a3\u4e2a\u4f4d\u7f6e\u672c\u8eab /*--------------*/ * cp ++ //\u540e\u7f00++\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e*\u64cd\u4f5c\u7b26 //1) ++\u64cd\u4f5c\u7b26\u4ea7\u751fcp\u7684\u4e00\u4efd\u62f7\u8d1d //2) ++\u64cd\u4f5c\u7b26\u589e\u52a0cp\u7684\u503c //3) \u5728cp\u7684\u62f7\u8d1d\u4e0a\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c //\u53f3\u503c\uff1ach\u7684\u503c //\u5de6\u503c\uff1ach\u7684\u5185\u5b58\u4f4d\u7f6e /*--------------*/ ++* cp //\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u662f\u4ece\u53f3\u5411\u5de6 //1) \u5148\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c //2) cp\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u7684\u503c\u589e\u52a01 //3) \u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u662f\u8fd9\u4e2a\u589e\u503c\u540e\u7684\u503c\u7684\u4e00\u4efd\u62f7\u8d1d //\u53f3\u503c\uff1a\u589e\u503c\u540e\u503c\u7684\u62f7\u8d1d //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ( * cp ) ++ //\u53f3\u503c\uff1a\u4e0e\u4e0a\u9762\u76f8\u540c //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ++*++ cp /* 1. \u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u4ece\u53f3\u5411\u5de6 2. \u9996\u5148\u6267\u884c++cp\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e 3. \u5bf9\u62f7\u8d1d\u7684\u503c\u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee\uff0c\u8bbf\u95eech\u540e\u9762\u7684\u4f4d\u7f6e(\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u64cd\u4f5c\u6570\u628a\u5b83\u5f53\u5de6\u503c\u4f7f\u7528) 4. \u5728\u8fd9\u4e2a\u4f4d\u7f6e\u8fdb\u884c++\u64cd\u4f5c\uff0c\u589e\u52a0\u4ed6\u7684\u503c */ //\u53f3\u503c\uff1a\u5982\u4e0a\u6240\u8ff0 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ++* cp ++ //\u53f3\u503c\uff1a\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26\u8bbf\u95ee\u7684\u662fcp\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u800c\u4e0d\u662fcp\u6240\u6307\u5411\u4f4d\u7f6e\u7684\u540e\u9762\u7684\u90a3\u4e2a\u4f4d\u7f6e //\u5de6\u503c\uff1a\u975e\u6cd5","title":"\u6307\u9488"},{"location":"cprogram/c_base/#_12","text":"C\u51fd\u6570\u7684\u6240\u6709\u53c2\u6570\u5747\u4ee5\u201c\u4f20\u503c\u8c03\u7528\u201d\u65b9\u5f0f\u8fdb\u884c\u4f20\u9012\uff0c\u8fd9\u610f\u5473\u7740\u51fd\u6570\u5c06\u83b7\u5f97\u53c2\u6570\u503c\u7684\u4e00\u4efd\u62f7\u8d1d\u3002 \u201c\u4f20\u5740\u8c03\u7528\u201d\u6570\u7ec4\u540d\u7684\u503c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u662f\u8fd9\u4e2a\u6307\u9488\u7684\u4e00\u4efd\u62f7\u8d1d\u3002 \u5c3e\u90e8\u9012\u5f52\uff1a\u9012\u5f52\u51fd\u6570\u5185\u90e8\u6240\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\u5c31\u662f\u8c03\u7528\u81ea\u8eab\u3002","title":"\u51fd\u6570"},{"location":"cprogram/c_base/#_13","text":"\u5728C\u4e2d\uff0c\u5728\u51e0\u4e4e\u6240\u6709\u4f7f\u7528\u6570\u7ec4\u540d\u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6570\u7ec4\u540d\u7684\u503c\u662f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7b2c1\u4e2a\u5143\u7d20\u7684\u5730\u5740\u3002 \u5b83\u7684\u7c7b\u578b\u53d6\u51b3\u4e8e\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u3002 \u53ea\u6709\u5f53\u6570\u7ec4\u540d\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u5668 \u624d\u4f1a\u4e3a\u5b83\u4ea7\u751f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf(\u4e0d\u662f\u6307\u9488\u53d8\u91cf)\u3002 \u53ea\u67092\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4\u540d\u5e76\u4e0d\u7528\u6307\u9488\u5e38\u91cf\u6765\u8868\u793a\uff1a \u6570\u7ec4\u540d\u4f5c\u4e3asizeof\u64cd\u4f5c\u7b26 \u5355\u76ee\u64cd\u4f5c\u7b26&\u7684\u64cd\u4f5c\u6570 \u4e0b\u6807\u7edd\u4e0d\u4f1a\u6bd4\u6307\u9488\u66f4\u6709\u6548\u7387\uff0c\u4f46\u6307\u9488\u6709\u65f6\u4f1a\u6bd4\u4e0b\u6807\u66f4\u6709\u6548\u3002","title":"\u6570\u7ec4"},{"location":"cprogram/c_base/#_14","text":"1 2 3 4 5 6 7 8 int a [ 5 ]; /*\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u6839\u636e\u58f0\u660e\u6240\u6307\u5b9a\u7684\u5143\u7d20\u6570\u91cf\u4e3a\u6570\u7ec4\u4fdd\u7559\u5185\u5b58\u7a7a\u95f4\uff0c\u7136\u540e\u518d\u521b\u5efa\u6570\u7ec4\u540d\uff0c\u5b83\u7684\u503c\u65f6\u4e00\u4e2a\u5e38\u91cf\uff0c\u6307\u5411\u8fd9\u6bb5\u7a7a\u95f4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002*/ //*a \u5408\u6cd5 //a++ a\u7684\u503c\u662f\u4e00\u4e2a\u5e38\u91cf int * b /*\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u53ea\u4e3a\u6307\u9488\u672c\u8eab\u4fdd\u7559\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u4e0d\u4e3a\u4efb\u4f55\u6574\u578b\u503c\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002*/ //*b \u4e0d\u5408\u6cd5\uff0c\u6ca1\u6709\u521d\u59cb\u5316 //b++ \u53ef\u7f16\u8bd1\u901a\u8fc7","title":"\u6307\u9488\u548c\u6570\u7ec4\u5e76\u4e0d\u662f\u76f8\u7b49\u7684"},{"location":"cprogram/c_base/#_15","text":"1 2 3 4 5 char * strncpy ( char * dst , char const * src , size_t len ); //\u5982\u679cstrlen(src)\u7684\u503c\u5927\u4e8e\u7b49\u4e8elen\uff0c\u90a3\u4e48\u53ea\u6709len\u4e2a\u5b57\u7b26\u88ab\u590d\u5236\u5230dst\u4e2d\u3002\u6ce8\u610f\uff01\uff01\u5b83\u7684\u7ed3\u679c\u4e0d\u4f1a\u4ee5NUL\u5b57\u8282\u7ed3\u5c3e\uff0c\u5b83\u7684\u7ed3\u679c\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 char buffer [ BSIZE ]; strncpy ( buffer , name , BSIZE ); buffer [ BSIZE - 1 ] = '' ; strncat\u603b\u662f\u5728\u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u6dfb\u52a0\u4e00\u4e2aNUL\u5b57\u8282\uff0c\u800c\u4e14\u5b83\u4e0d\u4f1a\u50cfstrncpy\u90a3\u6837\u5bf9\u76ee\u6807\u6570\u7ec4\u7528NUL\u5b57\u8282\u8fdb\u884c\u586b\u5145\u3002","title":"\u5b57\u7b26\u4e32"},{"location":"cprogram/c_base/#_16","text":"\u58f0\u660e\u7ed3\u6784\u65f6\u7684\u4e00\u79cd\u826f\u597d\u6280\u5de7\uff1a 1 2 3 4 5 6 typedef struct { xx xx } Simple ; Simple x ; Simple y [ 20 ], * z ; \u70b9\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u65f6\u4ece\u5de6\u5411\u53f3\u3002 \u6ce8\u610f\u5982\u4e0b\u9677\u9631\uff1a 1 2 3 4 5 6 7 8 9 10 11 typedef struct { int a ; SELF_REF3 * b ; int c ; } SELF_REF3 ; //\u7c7b\u578b\u540d\u76f4\u5230\u58f0\u660e\u7684\u672b\u5c3e\u624d\u5b9a\u4e49\uff0c\u6240\u4ee5\u5728\u7ed3\u6784\u58f0\u660e\u7684\u5185\u90e8\u5b83\u5c1a\u672a\u5b9a\u4e49\u3002 typedef struct SELF_REF3_TAG { int a ; struct SELF_REF3_TAG * b ; int c ; } SELF_REF3 ; \u6240\u6709\u7ed3\u6784\u7684\u8d77\u59cb\u5b58\u50a8\u4f4d\u7f6e\u5fc5\u987b\u662f\u7ed3\u6784\u4e2d\u8fb9\u754c\u8981\u6c42\u6700\u4e25\u683c\u7684\u6570\u636e\u7c7b\u578b\u6240\u8981\u6c42\u7684\u4f4d\u7f6e\u3002 \u5411\u51fd\u6570\u4f20\u9012\u7ed3\u6784\u53c2\u6570\u662f\u4f4e\u6548\u7684\uff0c\u5c3d\u91cf\u4f20\u9012\u7ed3\u6784\u6307\u9488\uff0c\u63d0\u5347\u6548\u7387\u3002 \u5206\u914d\u7ed9\u8054\u5408\u7684\u5185\u5b58\u6570\u91cf\u53d6\u51b3\u4e0e\u5b83\u7684\u6700\u957f\u6210\u5458\u7684\u957f\u5ea6\u3002","title":"\u7ed3\u6784\u548c\u8054\u5408"},{"location":"cprogram/c_base/#_17","text":"1 2 int f ; /*\u4e00\u4e2a\u6574\u5f62\u53d8\u91cf*/ int * f ; /*\u4e00\u4e2a\u6307\u5411\u6574\u5f62\u7684\u6307\u9488*/ 1 int f (); \u5b83\u628af\u58f0\u660e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u6570\u3002 1 int * f (); \u9996\u5148\u6267\u884c\u7684\u662f\u51fd\u6570\u8c03\u7528\u64cd\u4f5c\u7b26()\uff0c\u5e94\u4e3a\u5b83\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26\u3002\u56e0\u6b64\uff0cf\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u4e00\u4e2a\u6307\u5411\u6574\u578b\u7684\u6307\u9488\u3002 1 int ( * f )(); \u7b2c\u4e00\u5bf9\u62ec\u53f7\u53ea\u8d77\u805a\u5408\u4f5c\u7528\uff0c\u5b83\u8feb\u4f7f\u95f4\u63a5\u8bbf\u95ee\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8fdb\u884c\uff0c\u7b2c\u4e8c\u5bf9\u62ec\u53f7\u662f\u51fd\u6570\u8c03\u7528\u64cd\u4f5c\u7b26\u3002\u6240\u4ee5\uff0cf\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u5b83\u6240\u6307\u5411\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\u3002 1 int * ( * f )(); f\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u53ea\u662f\u6240\u6307\u5411\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u578b\u6307\u9488\u3002 1 2 3 int f []; /*f\u662f\u4e00\u4e2a\u6574\u578b\u6570\u7ec4*/ int * f []; /*\u4e0b\u6807\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0cf\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f\u6307\u5411\u6574\u578b\u7684\u6307\u9488*/ int ( * f )[]; /*\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6574\u578b*/ 1 int f ()[]; \u975e\u6cd5\u58f0\u660e\u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u6807\u91cf\u503c\uff0c\u8fd9\u4e2af\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u3002 1 int f [](); \u975e\u6cd5\u58f0\u660ef\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f\u8fd4\u56de\u503c\u4e3a\u6574\u578b\u7684\u51fd\u6570\u3002\u4f46\u662f\u6570\u7ec4\u5143\u7d20\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4f46\u4e0d\u540c\u7684\u51fd\u6570\u663e\u7136\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u957f\u5ea6\u3002 1 int ( * f [])(); f\u662f\u4e00\u4e2a\u5143\u7d20\u4e3a\u67d0\u79cd\u7c7b\u578b\u7684\u6307\u9488\u7684\u6570\u7ec4\u3002\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u662f\u51fd\u6570\u6307\u9488\uff0c\u5b83\u6240\u6307\u5411\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a \u6574\u578b\u503c\u3002 1 int * ( * f [])(); \u8fd9\u662f\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u6307\u9488\u6240\u6307\u5411\u7684\u7c7b\u578b\u662f\u8fd4\u56de\u503c\u4e3a\u6574\u578b\u6307\u9488\u7684\u51fd\u6570\u3002","title":"\u9ad8\u7ea7\u6307\u9488\u8bdd\u9898"},{"location":"cprogram/c_base/#_18","text":"","title":"\u56de\u8c03\u51fd\u6570\u4e0e\u8f6c\u6362\u8868"},{"location":"cprogram/c_base/#_19","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <stdio.h> #include \"node.h\" Node * search_list ( Node * node , void const * value , int ( * compare )( void const * , void const * )) { while ( node != NULL ) { if ( compare ( & node -> value , value ) == 0 ) { break ; } node = node -> link ; } return node ; } int compare_ints ( void const * a , void const * b ) { if ( * ( int * ) a ==* ( int * ) b ) { return 0 ; } else { return 1 ; } } desired_node = search_list ( root , & desired_value , compare_ints );","title":"\u56de\u8c03\u51fd\u6570\u5b9e\u4f8b"},{"location":"cprogram/c_base/#jump-table","text":"1 2 3 4 5 6 7 8 9 10 double add ( double , double ); double sub ( double , double ); double mul ( double , double ); double div ( double , double ); \u00b7\u00b7\u00b7 double ( * oper_func [])( double , double ) = { add , sub , mul , div ,... }; result = oper_func [ oper ]( op1 , op2 );","title":"\u8f6c\u79fb\u8868jump table"},{"location":"cprogram/c_base/#_20","text":"\u9884\u5904\u7406(preprocessing)\u9636\u6bb5\uff1a\u5220\u9664\u6ce8\u91ca\u3001\u63d2\u5165\u88ab#include\u6307\u4ee4\u5305\u542b\u7684\u6587\u4ef6\u5185\u5bb9\u3001\u5b9a\u4e49\u548c\u66ff\u6362\u7531#define\u6307\u4ee4\u5b9a\u4e49\u7684\u7b26\u53f7\u4ee5\u53ca\u786e\u5b9a\u4ee3\u7801\u7684\u90e8\u5206\u5185\u5bb9\u662f\u5426\u5e94\u8be5\u6839\u636e\u4e00\u4e9b\u6761\u4ef6\u7f16\u8bd1\u6307\u4ee4\u8fdb\u884c\u7f16\u8bd1\u3002","title":"\u9884\u5904\u7406\u5668"},{"location":"cprogram/c_base/#_21","text":"1 2 3 4 5 __FILE__ \u8fdb\u884c\u7f16\u8bd1\u7684\u6e90\u6587\u4ef6\u540d __LINE__ \u6587\u4ef6\u5f53\u524d\u7684\u884c\u53f7 __DATE__ \u6587\u4ef6\u88ab\u7f16\u8bd1\u7684\u65e5\u671f __TIME__ \u6587\u4ef6\u88ab\u7f16\u8bd1\u7684\u65f6\u95f4 __STDC__ \u9075\u5faa ANSI C , \u5176\u503c\u4e3a 1","title":"\u9884\u5b9a\u4e49\u7b26\u53f7"},{"location":"cprogram/c_base/#_22","text":"1 2 3 4 int array [ ARRAY_SIZE ] //-Dname \u503c\u4e3a1 //-Dname=stuff \u503c\u4e3astuff cc - DARRAY_SIZE = 100 prog . c","title":"\u547d\u4ee4\u884c\u5b9a\u4e49"},{"location":"cprogram/c_base/#_23","text":"1 2 3 4 5 6 #ifndef _HELLO_ #define _HELLO_ /* **All the stuff that you want in the header file */ #endif","title":"\u6587\u4ef6\u5305\u542b"},{"location":"cprogram/c_base/#_24","text":"","title":"\u8f93\u5165&amp;\u8f93\u51fa\u51fd\u6570"},{"location":"cprogram/c_base/#_25","text":"\u6587\u672c\u6d41\uff1a\u6807\u51c6\u89c4\u5b9a\u6587\u672c\u884c\u81f3\u5c11\u8fd0\u884c254\u4e2a\u5b57\u7b26\u3002\u5728MS-DOS\u7cfb\u7edf\u4e2d\uff0c\u6587\u672c\u884c\u7684\u7ed3\u675f\u65b9\u5f0f\u4ee5\u4e00\u4e2a\u56de\u8f66\u7b26\u548c\u4e00\u4e2a\u6362\u884c\u7b26\u7ed3\u5c3e\u3002UNIX\u7cfb\u7edf\u4e2d\u53ea\u4f7f\u7528\u4e00\u4e2a\u6362\u884c\u7b26\u7ed3\u5c3e\u3002 \u4e8c\u8fdb\u5236\u6d41\uff1a\u4e8c\u8fdb\u5236\u6d41\u4e2d\u7684\u5b57\u8282\u5c06\u5b8c\u5168\u6839\u636e\u7a0b\u5e8f\u7f16\u5199\u5b83\u4eec\u7684\u5f62\u5f0f\u5199\u5165\u5230\u6587\u4ef6\u6216\u8bbe\u5907\u4e2d\uff0c\u800c\u4e14\u5b8c\u5168\u6839\u636e\u5b83\u4eec\u4ece\u6587\u4ef6\u6216\u8bbe\u5907\u8bfb\u53d6\u7684\u5f62\u5f0f\u8bfb\u5165\u5230\u7a0b\u5e8f\u4e2d\u3002\u5e76\u672a\u505a\u4efb\u4f55\u6539\u53d8\u3002 FILE\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8bbf\u95ee\u4e00\u4e2a\u6d41\u3002stdin,stdout,stderr\u90fd\u662f\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u3002 I/O\u51fd\u6570\u4ee5\u4e09\u79cd\u57fa\u672c\u7684\u5f62\u5f0f\u5904\u7406\u6570\u636e\uff1a\u5355\u4e2a\u5b57\u7b26\u3001\u6587\u672c\u884c\u548c\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u6570\u636e\u7c7b\u578b \u8f93\u5165 \u8f93\u51fa \u63cf\u8ff0 \u5b57\u7b26 getchar putchar \u8bfb\u53d6(\u5199\u5165)\u5355\u4e2a\u5b57\u7b26 \u6587\u672c\u884c gets/scanf puts/printf \u6587\u672c\u884c\u7684\u8f93\u5165\u8f93\u51fa(\u672a\u683c\u5f0f\u5316/\u683c\u5f0f\u5316) \u4e8c\u8fdb\u5236 fread fwrite \u8bfb\u53d6(\u5199\u5165)\u4e8c\u8fdb\u5236\u6570\u636e","title":"\u6587\u672c\u6d41&amp;\u4e8c\u8fdb\u5236\u6d41"},{"location":"cprogram/c_base/#_26","text":"","title":"\u6807\u51c6\u51fd\u6570\u5e93"},{"location":"cprogram/c_base/#_27","text":"1 2 3 int rand ( void ); void srand ( unsigned int seed ); srand (( unsigned int ) time ( 0 ));","title":"\u968f\u673a\u6570"},{"location":"cprogram/c_base/#_28","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u5904\u7406\u5668\u65f6\u95f4 clock_t clock ( void ); //\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u8d77\u5904\u7406\u5668\u6240\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u4e24\u4e2a\u65f6\u95f4\u76f8\u51cf\u83b7\u53d6\u7cbe\u786e\u65f6\u95f4\u3002 //\u8fd4\u56de\u65f6\u949f\u6ef4\u7b54\u6b21\u6570\uff0c\u8f6c\u6362\u79d2\uff0c\u9664\u4ee5CLOCKS_PER_SEC //\u5f53\u5929\u65f6\u95f4 time_t time ( time_t * returned_value ); //time\u51fd\u6570\u8fd4\u56de\u5f53\u524d\u7684\u65e5\u671f\u548c\u65f6\u95f4 //\u65e5\u671f\u4e0e\u65f6\u95f4\u8f6c\u6362 char * ctime ( time_t const * time_value ); //\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32,asctime(localtime(time_value)); double difftime ( time_t time1 , time_t time2 ); //\u8ba1\u7b97time1-time2\u7684\u5dee\uff0c\u7ed3\u679c\u8f6c\u6362\u4e3a\u79d2 struct tm * gmtime ( time_t const * time_value ); //UTC\u65f6\u95f4 struct tm * localtime ( time_t const * time_value ); //\u5f53\u5730\u65f6\u95f4 char * asctime ( struct tm const * tm_ptr ); //tm\u7ed3\u6784\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 size_t strftime ( char * string , size_t maxsize , char const * format , struct tm const * tm_ptr ); //tm\u7ed3\u6784\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6839\u636e\u67d0\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u800c\u5b9a\u7684\u5b57\u7b26\u4e32 time_t mktime ( struct tm * tm_ptr ); //\u628a\u4e00\u4e2atm\u7ed3\u6784\u8f6c\u6362\u4e3a\u4e00\u4e2atime_t\u503c","title":"\u65e5\u671f\u4e0e\u65f6\u95f4"},{"location":"cprogram/c_design/","text":"\u72b6\u6001\u6a21\u5f0f \u00b6 \u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f \u00b6 \u89c2\u5bdf\u8005\u6a21\u5f0f \u00b6 \u804c\u8d23\u94fe\u6a21\u5f0f \u00b6 \u8bbf\u95ee\u8005\u6a21\u5f0f \u00b6","title":"C\u8bed\u8a00\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"cprogram/c_design/#_1","text":"","title":"\u72b6\u6001\u6a21\u5f0f"},{"location":"cprogram/c_design/#_2","text":"","title":"\u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f"},{"location":"cprogram/c_design/#_3","text":"","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"cprogram/c_design/#_4","text":"","title":"\u804c\u8d23\u94fe\u6a21\u5f0f"},{"location":"cprogram/c_design/#_5","text":"","title":"\u8bbf\u95ee\u8005\u6a21\u5f0f"},{"location":"cprogram/c_object/","text":"\u6a21\u5757\u5316 \u00b6 \u4f7f\u7528\u7ed3\u6784\u4f53\u5c06\u6570\u636e\u7ed3\u6784\u4e0e\u4ee3\u7801\u5757\u5206\u79bb \u00b6 C\u4e0e\u9762\u5411\u5bf9\u8c61 \u00b6 \u9762\u5411\u5bf9\u8c61\u4e0e\u591a\u6001\u6027 \u00b6 \u7ee7\u627f \u00b6 \u5c01\u88c5 \u00b6 \u865a\u51fd\u6570\u8868 \u00b6 \u975e\u865a\u51fd\u6570 \u00b6","title":"C\u8bed\u8a00\u4e0e\u9762\u5411\u5bf9\u8c61"},{"location":"cprogram/c_object/#_1","text":"","title":"\u6a21\u5757\u5316"},{"location":"cprogram/c_object/#_2","text":"","title":"\u4f7f\u7528\u7ed3\u6784\u4f53\u5c06\u6570\u636e\u7ed3\u6784\u4e0e\u4ee3\u7801\u5757\u5206\u79bb"},{"location":"cprogram/c_object/#c","text":"","title":"C\u4e0e\u9762\u5411\u5bf9\u8c61"},{"location":"cprogram/c_object/#_3","text":"","title":"\u9762\u5411\u5bf9\u8c61\u4e0e\u591a\u6001\u6027"},{"location":"cprogram/c_object/#_4","text":"","title":"\u7ee7\u627f"},{"location":"cprogram/c_object/#_5","text":"","title":"\u5c01\u88c5"},{"location":"cprogram/c_object/#_6","text":"","title":"\u865a\u51fd\u6570\u8868"},{"location":"cprogram/c_object/#_7","text":"","title":"\u975e\u865a\u51fd\u6570"},{"location":"database/plan/","text":"\u672c\u6a21\u5757\u89c4\u5212 \u00b6 Sql\u8bed\u53e5 \u00b6 Mysql\u76f8\u5173 \u00b6","title":"\u89c4\u5212"},{"location":"database/plan/#_1","text":"","title":"\u672c\u6a21\u5757\u89c4\u5212"},{"location":"database/plan/#sql","text":"","title":"Sql\u8bed\u53e5"},{"location":"database/plan/#mysql","text":"","title":"Mysql\u76f8\u5173"},{"location":"goprogram/plan/","text":"\u7b80\u4ecb \u00b6 \u57fa\u672c\u8bed\u6cd5 \u00b6 \u58f0\u660e\u4e0e\u521d\u59cb\u5316 \u00b6 \u533f\u540d\u53d8\u91cf \u00b6 \u4f5c\u7528\u57df \u00b6 \u6570\u636e\u7c7b\u578b \u00b6 \u7c7b\u578b\u8f6c\u6362 \u00b6 \u6307\u9488 \u00b6 \u5bb9\u5668 \u00b6 \u6570\u7ec4 \u00b6 \u5207\u7247 \u00b6 map \u00b6 list \u00b6 \u6d41\u7a0b\u63a7\u5236 \u00b6 \u51fd\u6570 \u00b6 \u51fd\u6570\u53d8\u91cf \u00b6 \u533f\u540d\u51fd\u6570 \u00b6 \u51fd\u6570\u7c7b\u578b\u63a5\u53e3 \u00b6 \u95ed\u5305 \u00b6 \u53ef\u53d8\u53c2\u6570 \u00b6 Panic\u5b95\u673a \u00b6 \u7ed3\u6784\u4f53 \u00b6 \u5b9e\u4f8b\u5316\u7ed3\u6784\u4f53 \u00b6 \u6784\u9020\u51fd\u6570 \u00b6 \u65b9\u6cd5\u548c\u63a5\u6536\u5668 \u00b6 \u7c7b\u578b/\u7ed3\u6784\u4f53\u5185\u5d4c \u00b6 \u5783\u573e\u56de\u6536\u548cSetFinalizer \u00b6 \u6570\u636ei/o\u5bf9\u8c61\u53ca\u64cd\u4f5c \u00b6 \u63a5\u53e3 \u00b6 \u7c7b\u578b\u65ad\u8a00 \u00b6 \u63a5\u53e3\u5d4c\u5957 \u00b6 \u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b \u00b6 \u5305(package) \u00b6 \u5e76\u53d1 \u00b6 \u53cd\u5c04 \u00b6 \u7f51\u7edc\u7f16\u7a0b \u00b6 \u6587\u4ef6\u5904\u7406 \u00b6 \u722c\u866b \u00b6 \u7f16\u8bd1\ud83d\udd27 \u00b6 Other \u00b6","title":"\u89c4\u5212"},{"location":"goprogram/plan/#_1","text":"","title":"\u7b80\u4ecb"},{"location":"goprogram/plan/#_2","text":"","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"goprogram/plan/#_3","text":"","title":"\u58f0\u660e\u4e0e\u521d\u59cb\u5316"},{"location":"goprogram/plan/#_4","text":"","title":"\u533f\u540d\u53d8\u91cf"},{"location":"goprogram/plan/#_5","text":"","title":"\u4f5c\u7528\u57df"},{"location":"goprogram/plan/#_6","text":"","title":"\u6570\u636e\u7c7b\u578b"},{"location":"goprogram/plan/#_7","text":"","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"goprogram/plan/#_8","text":"","title":"\u6307\u9488"},{"location":"goprogram/plan/#_9","text":"","title":"\u5bb9\u5668"},{"location":"goprogram/plan/#_10","text":"","title":"\u6570\u7ec4"},{"location":"goprogram/plan/#_11","text":"","title":"\u5207\u7247"},{"location":"goprogram/plan/#map","text":"","title":"map"},{"location":"goprogram/plan/#list","text":"","title":"list"},{"location":"goprogram/plan/#_12","text":"","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"goprogram/plan/#_13","text":"","title":"\u51fd\u6570"},{"location":"goprogram/plan/#_14","text":"","title":"\u51fd\u6570\u53d8\u91cf"},{"location":"goprogram/plan/#_15","text":"","title":"\u533f\u540d\u51fd\u6570"},{"location":"goprogram/plan/#_16","text":"","title":"\u51fd\u6570\u7c7b\u578b\u63a5\u53e3"},{"location":"goprogram/plan/#_17","text":"","title":"\u95ed\u5305"},{"location":"goprogram/plan/#_18","text":"","title":"\u53ef\u53d8\u53c2\u6570"},{"location":"goprogram/plan/#panic","text":"","title":"Panic\u5b95\u673a"},{"location":"goprogram/plan/#_19","text":"","title":"\u7ed3\u6784\u4f53"},{"location":"goprogram/plan/#_20","text":"","title":"\u5b9e\u4f8b\u5316\u7ed3\u6784\u4f53"},{"location":"goprogram/plan/#_21","text":"","title":"\u6784\u9020\u51fd\u6570"},{"location":"goprogram/plan/#_22","text":"","title":"\u65b9\u6cd5\u548c\u63a5\u6536\u5668"},{"location":"goprogram/plan/#_23","text":"","title":"\u7c7b\u578b/\u7ed3\u6784\u4f53\u5185\u5d4c"},{"location":"goprogram/plan/#setfinalizer","text":"","title":"\u5783\u573e\u56de\u6536\u548cSetFinalizer"},{"location":"goprogram/plan/#io","text":"","title":"\u6570\u636ei/o\u5bf9\u8c61\u53ca\u64cd\u4f5c"},{"location":"goprogram/plan/#_24","text":"","title":"\u63a5\u53e3"},{"location":"goprogram/plan/#_25","text":"","title":"\u7c7b\u578b\u65ad\u8a00"},{"location":"goprogram/plan/#_26","text":"","title":"\u63a5\u53e3\u5d4c\u5957"},{"location":"goprogram/plan/#_27","text":"","title":"\u63a5\u53e3\u4e0e\u52a8\u6001\u7c7b\u578b"},{"location":"goprogram/plan/#package","text":"","title":"\u5305(package)"},{"location":"goprogram/plan/#_28","text":"","title":"\u5e76\u53d1"},{"location":"goprogram/plan/#_29","text":"","title":"\u53cd\u5c04"},{"location":"goprogram/plan/#_30","text":"","title":"\u7f51\u7edc\u7f16\u7a0b"},{"location":"goprogram/plan/#_31","text":"","title":"\u6587\u4ef6\u5904\u7406"},{"location":"goprogram/plan/#_32","text":"","title":"\u722c\u866b"},{"location":"goprogram/plan/#_33","text":"","title":"\u7f16\u8bd1\ud83d\udd27"},{"location":"goprogram/plan/#other","text":"","title":"Other"},{"location":"kit/Note/","text":"\u8ba1\u5212\ud83d\udcd6(\u5468) \u00b6 1 \u5b8c\u5584StackPub\u535a\u5ba2 \u00b6 \u7f16\u7a0b\u8bed\u8a00 \u00b6 1 2 3 4 \u8865\u5145c/c++ GO PHP Lua \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 \u00b6 1 \u64cd\u4f5c\u7cfb\u7edf \u00b6 1 2 3 CSAPP linux\u7cfb\u7edf\u7f16\u7a0b \u5f00\u6e90\u9879\u76ee \u00b6 1 2 3 nginx redis \u6570\u5b66 \u00b6 1 \u56fe\u5f62\u5b66\u6570\u5b66 \u56fe\u5f62\u5b66 \u00b6 1 2 3 unity\u57fa\u7840 \u6e32\u67d3\u6d41\u7a0b shader kit \u00b6 1 2 3 markdown\u8bed\u6cd5 LaTex\u7b26\u53f7\u516c\u5f0f mkdcos\u5d4c\u5165gitalk \u5907\u5fd8\u5f55\ud83d\udcd5 \u00b6 1 2 3 4 5 6 \u6709\u7a7a\u641e\u641eCDN \u6570\u5b57\u8349\u7a3f\u5c0f\u9ed1\u677f CVim google vim\u63d2\u4ef6 chrome-extension://ihlenndgcmojhcghmfjfneahoeklbjjh/pages/mappings.html ps\u677f\u7ed8\u4eff\u624b\u7ed8\u6559\u7a0b Switch\u60f3\u4e70\u7684\u6e38\u620f(\u7b49\u6253\u6298) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u4ee5\u6492 \u516b\u8352\u65c5\u4eba \u57ce\u5821\u6bc1\u706d\u8005 \u52c7\u6562\u7684\u5fc3 \u5144\u5f1f\uff1a\u53cc\u5b50\u4f20\u8bf4 \u9965\u8352 \u795e\u754c.\u539f\u7f6a2 \u55b5\u54aa\u6597\u6076\u9f99 \u84b8\u6c7d\u4e16\u754c.\u6316\u6398 \u4e8c\u4e4b\u56fd \u9a6c\u91cc\u5965\u5236\u4f5c \u9a6c\u91cc\u5965u \u5143\u6c14\u9a91\u58eb \u6697\u9ed1\u6218\u795e2","title":"\u8ba1\u5212"},{"location":"kit/Note/#_1","text":"1","title":"\u8ba1\u5212\ud83d\udcd6(\u5468)"},{"location":"kit/Note/#stackpub","text":"","title":"\u5b8c\u5584StackPub\u535a\u5ba2"},{"location":"kit/Note/#_2","text":"1 2 3 4 \u8865\u5145c/c++ GO PHP Lua","title":"\u7f16\u7a0b\u8bed\u8a00"},{"location":"kit/Note/#_3","text":"1","title":"\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5"},{"location":"kit/Note/#_4","text":"1 2 3 CSAPP linux\u7cfb\u7edf\u7f16\u7a0b","title":"\u64cd\u4f5c\u7cfb\u7edf"},{"location":"kit/Note/#_5","text":"1 2 3 nginx redis","title":"\u5f00\u6e90\u9879\u76ee"},{"location":"kit/Note/#_6","text":"1 \u56fe\u5f62\u5b66\u6570\u5b66","title":"\u6570\u5b66"},{"location":"kit/Note/#_7","text":"1 2 3 unity\u57fa\u7840 \u6e32\u67d3\u6d41\u7a0b shader","title":"\u56fe\u5f62\u5b66"},{"location":"kit/Note/#kit","text":"1 2 3 markdown\u8bed\u6cd5 LaTex\u7b26\u53f7\u516c\u5f0f mkdcos\u5d4c\u5165gitalk","title":"kit"},{"location":"kit/Note/#_8","text":"1 2 3 4 5 6 \u6709\u7a7a\u641e\u641eCDN \u6570\u5b57\u8349\u7a3f\u5c0f\u9ed1\u677f CVim google vim\u63d2\u4ef6 chrome-extension://ihlenndgcmojhcghmfjfneahoeklbjjh/pages/mappings.html ps\u677f\u7ed8\u4eff\u624b\u7ed8\u6559\u7a0b","title":"\u5907\u5fd8\u5f55\ud83d\udcd5"},{"location":"kit/Note/#switch","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u4ee5\u6492 \u516b\u8352\u65c5\u4eba \u57ce\u5821\u6bc1\u706d\u8005 \u52c7\u6562\u7684\u5fc3 \u5144\u5f1f\uff1a\u53cc\u5b50\u4f20\u8bf4 \u9965\u8352 \u795e\u754c.\u539f\u7f6a2 \u55b5\u54aa\u6597\u6076\u9f99 \u84b8\u6c7d\u4e16\u754c.\u6316\u6398 \u4e8c\u4e4b\u56fd \u9a6c\u91cc\u5965\u5236\u4f5c \u9a6c\u91cc\u5965u \u5143\u6c14\u9a91\u58eb \u6697\u9ed1\u6218\u795e2","title":"Switch\u60f3\u4e70\u7684\u6e38\u620f(\u7b49\u6253\u6298)"},{"location":"kit/book/","text":"C\u8bed\u8a00 \u00b6 \u300aC\u548c\u6307\u9488\u300b \u300aC\u73b0\u4ee3\u7f16\u7a0b\u300b C++ \u00b6 \u300aLinux\u591a\u7ebf\u7a0b\u670d\u52a1\u7aef\u7f16\u7a0b-\u4f7f\u7528muduo C++\u7f51\u7edc\u5e93\u300b \u300aC++\u5e76\u53d1\u7f16\u7a0b\u300b \u7b97\u6cd5 \u00b6 \u300a\u7f16\u7a0b\u73e0\u7391\u300b \u300a\u5251\u6307Offer\u300b \u300aC++\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u300b \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5-C\u8bed\u8a00\u7248\u300b Linux \u00b6 \u300aUnix\u73af\u5883\u9ad8\u7ea7\u7f16\u7a0b\u300b \u300aUnix\u7f51\u7edc\u7f16\u7a0b\u5377\u4e00\u300b \u300aUnix\u7f51\u7edc\u7f16\u7a0b\u5377\u4e8c\u300b \u300a\u540e\u53f0\u5f00\u53d1\u6838\u5fc3\u6280\u672f\u4e0e\u5e94\u7528\u5b9e\u8df5\u300b \u300aLinux\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u7f16\u7a0b\u300b \u300aRedis\u6df1\u5ea6\u5386\u9669\u300b \u300a\u6df1\u5165\u7406\u89e3Nginx\u300b unity \u00b6 \u300aUnity Shader\u5165\u95e8\u7cbe\u8981\u300b","title":"\u4e66\u7c4d\ud83d\udcda\u63a8\u8350"},{"location":"kit/book/#c","text":"\u300aC\u548c\u6307\u9488\u300b \u300aC\u73b0\u4ee3\u7f16\u7a0b\u300b","title":"C\u8bed\u8a00"},{"location":"kit/book/#c_1","text":"\u300aLinux\u591a\u7ebf\u7a0b\u670d\u52a1\u7aef\u7f16\u7a0b-\u4f7f\u7528muduo C++\u7f51\u7edc\u5e93\u300b \u300aC++\u5e76\u53d1\u7f16\u7a0b\u300b","title":"C++"},{"location":"kit/book/#_1","text":"\u300a\u7f16\u7a0b\u73e0\u7391\u300b \u300a\u5251\u6307Offer\u300b \u300aC++\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u300b \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5-C\u8bed\u8a00\u7248\u300b","title":"\u7b97\u6cd5"},{"location":"kit/book/#linux","text":"\u300aUnix\u73af\u5883\u9ad8\u7ea7\u7f16\u7a0b\u300b \u300aUnix\u7f51\u7edc\u7f16\u7a0b\u5377\u4e00\u300b \u300aUnix\u7f51\u7edc\u7f16\u7a0b\u5377\u4e8c\u300b \u300a\u540e\u53f0\u5f00\u53d1\u6838\u5fc3\u6280\u672f\u4e0e\u5e94\u7528\u5b9e\u8df5\u300b \u300aLinux\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u7f16\u7a0b\u300b \u300aRedis\u6df1\u5ea6\u5386\u9669\u300b \u300a\u6df1\u5165\u7406\u89e3Nginx\u300b","title":"Linux"},{"location":"kit/book/#unity","text":"\u300aUnity Shader\u5165\u95e8\u7cbe\u8981\u300b","title":"unity"},{"location":"kit/gdb/","text":"GDB\u662f\u4e00\u4e2a\u7531GNU\u5f00\u6e90\u7ec4\u7ec7\u53d1\u5e03\u7684\u3001UNIX/LINUX\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u3001\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u3001\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\u8c03\u8bd5\u5de5\u5177\u3002 \u5bf9\u4e8e\u4e00\u540dLinux\u4e0b\u5de5\u4f5c\u7684c/c++\u7a0b\u5e8f\u5458\uff0cgdb\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5de5\u5177\u3002 \u751f\u6210\u8c03\u5f0f\u4fe1\u606f \u00b6 1 2 3 4 5 gcc -g hello.c -o hello \u542f\u52a8gdb\u7684\u65b9\u6cd5 $gdb <program> $gdb <program> <core dump file> $gdb <program> <PID> \u7a0b\u5e8f\u8fd0\u884c\u4e0a\u4e0b\u6587 \u00b6 \u7a0b\u5e8f\u8fd0\u884c\u53c2\u6570 \u00b6 1 2 3 4 set args \u53ef\u6307\u5b9a\u8fd0\u884c\u65f6\u53c2\u6570\u3002\uff08\u5982\uff1aset args 10 20 30 40 50 \uff09 show args \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8bbe\u7f6e\u597d\u7684\u8fd0\u884c\u53c2\u6570\u3002 \u4e0d\u6307\u5b9a\u8fd0\u884c\u53c2\u6570 run (r) \u6307\u5b9a\u8fd0\u884c\u53c2\u6570r 10 20 30 40 50 \u663e\u793a\u6e90\u4ee3\u7801 \u00b6 1 2 3 4 5 6 list list \"\u6587\u4ef6\u540d.\u540e\u7f00\u540d\":\u884c\u53f7(\u663e\u793a\u522b\u7684\u6587\u4ef6) show listsize set listsize count search text:\u8be5\u547d\u4ee4\u53ef\u663e\u793a\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u5305\u542btext\u4e32\u7684\u4e0b\u4e00\u884c\u3002 Reverse-search text:\u8be5\u547d\u4ee4\u53ef\u4ee5\u663e\u793a\u5305\u542btext \u7684\u524d\u4e00\u884c\u3002 \u8bbe\u7f6e\u65ad\u70b9 \u00b6 \u7b80\u5355\u65ad\u70b9 \u00b6 1 2 3 break \u8bbe\u7f6e\u65ad\u70b9\uff0c\u53ef\u4ee5\u7b80\u5199\u4e3ab b 10\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5728\u6e90\u7a0b\u5e8f\u7b2c10\u884c b func\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5728func\u51fd\u6570\u5165\u53e3\u5904 \u6761\u4ef6\u65ad\u70b9 \u00b6 1 2 3 4 5 6 7 8 9 10 \u8bbe\u7f6e\u4e00\u4e2a\u6761\u4ef6\u65ad\u70b9 b test.c:8 if intValue == 5 condition \u4e0ebreak if\u7c7b\u4f3c\uff0c\u53ea\u662fcondition\u53ea\u80fd\u7528\u5728\u5df2\u5b58\u5728\u7684\u65ad\u70b9\u4e0a \u4fee\u6539\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6\u4e3aexpression condition bnum expression \u6e05\u695a\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6 condition bnum ignore \u5ffd\u7565\u505c\u6b62\u6761\u4ef6\u51e0\u6b21 \u8868\u793a\u5ffd\u7565\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6count\u6b21 Ignore bnum count \u591a\u6587\u4ef6\u8bbe\u7f6e\u65ad\u70b9 \u00b6 1 2 3 4 \u5728\u6e90\u6587\u4ef6filename\u7684linenum\u884c\u5904\u505c\u4f4f break filename:linenum \u5728\u6e90\u6587\u4ef6filename\u7684function\u51fd\u6570\u7684\u5165\u53e3\u5904\u505c\u4f4f break filename:function \u6216function(type,type) \u67e5\u8be2\u65ad\u70b9 \u00b6 1 info b \u89c2\u5bdf\u70b9 \u00b6 1 2 3 4 watch \u4e3a\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09expr\u8bbe\u7f6e\u4e00\u4e2a\u89c2\u5bdf\u70b9\u3002\u5f53\u8868\u8fbe\u5f0f\u503c\u6709\u53d8\u5316\u65f6\uff0c\u9a6c\u4e0a\u505c\u4f4f\u7a0b\u5e8f\u3002 rwatch\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09expr\u88ab\u8bfb\u65f6\uff0c\u505c\u4f4f\u7a0b\u5e8f\u3002 awatch \u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09\u7684\u503c\u88ab\u8bfb\u6216\u88ab\u5199\u65f6\uff0c\u505c\u4f4f\u7a0b\u5e8f\u3002 info watchpoints\u5217\u51fa\u5f53\u524d\u6240\u8bbe\u7f6e\u4e86\u7684\u6240\u6709\u89c2\u5bdf\u70b9\u3002 \u7ef4\u62a4\u65ad\u70b9 \u00b6 1 2 3 4 5 delete \u65ad\u70b9\u53f7n\uff1a\u5220\u9664\u7b2cn\u4e2a\u65ad\u70b9 disable \u65ad\u70b9\u53f7n\uff1a\u6682\u505c\u7b2cn\u4e2a\u65ad\u70b9 enable \u65ad\u70b9\u53f7n\uff1a\u5f00\u542f\u7b2cn\u4e2a\u65ad\u70b9 clear \u884c\u53f7n\uff1a\u6e05\u9664\u7b2cn\u884c\u7684\u65ad\u70b9 delete breakpoints\uff1a\u6e05\u9664\u6240\u6709\u65ad\u70b9 \u8c03\u8bd5\u4ee3\u7801 \u00b6 \u8fd0\u884c\u7a0b\u5e8f \u00b6 1 2 3 4 5 6 7 8 run \u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u7b80\u5199\u4e3ar next \u5355\u6b65\u8ddf\u8e2a\uff0c\u51fd\u6570\u8c03\u7528\u5f53\u4f5c\u4e00\u6761\u7b80\u5355\u8bed\u53e5\u6267\u884c\uff0c\u53ef\u7b80\u5199\u4e3an step \u5355\u6b65\u8ddf\u8e2a\uff0c\u51fd\u6570\u8c03\u8fdb\u5165\u88ab\u8c03\u7528\u51fd\u6570\u4f53\u5185\uff0c\u53ef\u7b80\u5199\u4e3as finish \u9000\u51fa\u51fd\u6570 until \u5728\u4e00\u4e2a\u5faa\u73af\u4f53\u5185\u5355\u6b65\u8ddf\u8e2a\u65f6\uff0c\u8fd9\u4e2a\u547d\u4ee4\u53ef\u4ee5\u8fd0\u884c\u7a0b\u5e8f\u76f4\u5230\u9000\u51fa\u5faa\u73af\u4f53,\u53ef\u7b80\u5199\u4e3au\u3002 continue \u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u7b80\u5199\u4e3ac info program \u6765\u67e5\u770b\u7a0b\u5e8f\u7684\u662f\u5426\u5728\u8fd0\u884c\uff0c\u8fdb\u7a0b\u53f7\uff0c\u88ab\u6682\u505c\u7684\u539f\u56e0\u3002 quit\uff1a\u7b80\u8bb0\u4e3a q \uff0c\u9000\u51fagdb \u6253\u5370\u8868\u8fbe\u5f0f \u00b6 1 2 3 print \u6253\u5370\u53d8\u91cf\u3001\u5b57\u7b26\u4e32\u3001\u8868\u8fbe\u5f0f\u7b49\u7684\u503c\uff0c\u53ef\u7b80\u5199\u4e3ap p count \u6253\u5370count\u7684\u503c print h@10 \u6570\u7ec4\u9996\u5730\u5740@\u6570\u7ec4\u957f\u5ea6 \u67e5\u770b\u8fd0\u884c\u4fe1\u606f \u00b6 1 2 3 4 whatis \u547d\u4ee4\u53ef\u4ee5\u663e\u793a\u67d0\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b where/bt \uff1a\u5f53\u524d\u8fd0\u884c\u7684\u5806\u6808\u5217\u8868\uff1b frame info program\uff1a \u6765\u67e5\u770b\u7a0b\u5e8f\u7684\u662f\u5426\u5728\u8fd0\u884c\uff0c\u8fdb\u7a0b\u53f7\uff0c\u88ab\u6682\u505c\u7684\u539f\u56e0\u3002 \u4fe1\u53f7 \u00b6 1 signal signal \u7a97\u53e3 \u00b6 1 2 3 4 5 6 7 8 Ctrl+x+a (focus)fs next\u5728src\u548ccmd\u4e4b\u95f4\u5207\u6362\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528fs src\u5207\u6362\u5230src\uff0c\u548cfs cmd\u5207\u6362\u5230cmd layout\uff1a\u7528\u4e8e\u5206\u5272\u7a97\u53e3\uff0c\u53ef\u4ee5\u4e00\u8fb9\u67e5\u770b\u4ee3\u7801\uff0c\u4e00\u8fb9\u6d4b\u8bd5\uff1a layout src\uff1a\u663e\u793a\u6e90\u4ee3\u7801\u7a97\u53e3 layout asm\uff1a\u663e\u793a\u53cd\u6c47\u7f16\u7a97\u53e3 layout regs\uff1a\u663e\u793a\u6e90\u4ee3\u7801/\u53cd\u6c47\u7f16\u548cCPU\u5bc4\u5b58\u5668\u7a97\u53e3 layout split\uff1a\u663e\u793a\u6e90\u4ee3\u7801\u548c\u53cd\u6c47\u7f16\u7a97\u53e3 Ctrl + L\uff1a\u5237\u65b0\u7a97\u53e3","title":"GDB\u8c03\u8bd5\u7684\u57fa\u672c\u4f7f\u7528"},{"location":"kit/gdb/#_1","text":"1 2 3 4 5 gcc -g hello.c -o hello \u542f\u52a8gdb\u7684\u65b9\u6cd5 $gdb <program> $gdb <program> <core dump file> $gdb <program> <PID>","title":"\u751f\u6210\u8c03\u5f0f\u4fe1\u606f"},{"location":"kit/gdb/#_2","text":"","title":"\u7a0b\u5e8f\u8fd0\u884c\u4e0a\u4e0b\u6587"},{"location":"kit/gdb/#_3","text":"1 2 3 4 set args \u53ef\u6307\u5b9a\u8fd0\u884c\u65f6\u53c2\u6570\u3002\uff08\u5982\uff1aset args 10 20 30 40 50 \uff09 show args \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8bbe\u7f6e\u597d\u7684\u8fd0\u884c\u53c2\u6570\u3002 \u4e0d\u6307\u5b9a\u8fd0\u884c\u53c2\u6570 run (r) \u6307\u5b9a\u8fd0\u884c\u53c2\u6570r 10 20 30 40 50","title":"\u7a0b\u5e8f\u8fd0\u884c\u53c2\u6570"},{"location":"kit/gdb/#_4","text":"1 2 3 4 5 6 list list \"\u6587\u4ef6\u540d.\u540e\u7f00\u540d\":\u884c\u53f7(\u663e\u793a\u522b\u7684\u6587\u4ef6) show listsize set listsize count search text:\u8be5\u547d\u4ee4\u53ef\u663e\u793a\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u5305\u542btext\u4e32\u7684\u4e0b\u4e00\u884c\u3002 Reverse-search text:\u8be5\u547d\u4ee4\u53ef\u4ee5\u663e\u793a\u5305\u542btext \u7684\u524d\u4e00\u884c\u3002","title":"\u663e\u793a\u6e90\u4ee3\u7801"},{"location":"kit/gdb/#_5","text":"","title":"\u8bbe\u7f6e\u65ad\u70b9"},{"location":"kit/gdb/#_6","text":"1 2 3 break \u8bbe\u7f6e\u65ad\u70b9\uff0c\u53ef\u4ee5\u7b80\u5199\u4e3ab b 10\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5728\u6e90\u7a0b\u5e8f\u7b2c10\u884c b func\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5728func\u51fd\u6570\u5165\u53e3\u5904","title":"\u7b80\u5355\u65ad\u70b9"},{"location":"kit/gdb/#_7","text":"1 2 3 4 5 6 7 8 9 10 \u8bbe\u7f6e\u4e00\u4e2a\u6761\u4ef6\u65ad\u70b9 b test.c:8 if intValue == 5 condition \u4e0ebreak if\u7c7b\u4f3c\uff0c\u53ea\u662fcondition\u53ea\u80fd\u7528\u5728\u5df2\u5b58\u5728\u7684\u65ad\u70b9\u4e0a \u4fee\u6539\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6\u4e3aexpression condition bnum expression \u6e05\u695a\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6 condition bnum ignore \u5ffd\u7565\u505c\u6b62\u6761\u4ef6\u51e0\u6b21 \u8868\u793a\u5ffd\u7565\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6count\u6b21 Ignore bnum count","title":"\u6761\u4ef6\u65ad\u70b9"},{"location":"kit/gdb/#_8","text":"1 2 3 4 \u5728\u6e90\u6587\u4ef6filename\u7684linenum\u884c\u5904\u505c\u4f4f break filename:linenum \u5728\u6e90\u6587\u4ef6filename\u7684function\u51fd\u6570\u7684\u5165\u53e3\u5904\u505c\u4f4f break filename:function \u6216function(type,type)","title":"\u591a\u6587\u4ef6\u8bbe\u7f6e\u65ad\u70b9"},{"location":"kit/gdb/#_9","text":"1 info b","title":"\u67e5\u8be2\u65ad\u70b9"},{"location":"kit/gdb/#_10","text":"1 2 3 4 watch \u4e3a\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09expr\u8bbe\u7f6e\u4e00\u4e2a\u89c2\u5bdf\u70b9\u3002\u5f53\u8868\u8fbe\u5f0f\u503c\u6709\u53d8\u5316\u65f6\uff0c\u9a6c\u4e0a\u505c\u4f4f\u7a0b\u5e8f\u3002 rwatch\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09expr\u88ab\u8bfb\u65f6\uff0c\u505c\u4f4f\u7a0b\u5e8f\u3002 awatch \u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09\u7684\u503c\u88ab\u8bfb\u6216\u88ab\u5199\u65f6\uff0c\u505c\u4f4f\u7a0b\u5e8f\u3002 info watchpoints\u5217\u51fa\u5f53\u524d\u6240\u8bbe\u7f6e\u4e86\u7684\u6240\u6709\u89c2\u5bdf\u70b9\u3002","title":"\u89c2\u5bdf\u70b9"},{"location":"kit/gdb/#_11","text":"1 2 3 4 5 delete \u65ad\u70b9\u53f7n\uff1a\u5220\u9664\u7b2cn\u4e2a\u65ad\u70b9 disable \u65ad\u70b9\u53f7n\uff1a\u6682\u505c\u7b2cn\u4e2a\u65ad\u70b9 enable \u65ad\u70b9\u53f7n\uff1a\u5f00\u542f\u7b2cn\u4e2a\u65ad\u70b9 clear \u884c\u53f7n\uff1a\u6e05\u9664\u7b2cn\u884c\u7684\u65ad\u70b9 delete breakpoints\uff1a\u6e05\u9664\u6240\u6709\u65ad\u70b9","title":"\u7ef4\u62a4\u65ad\u70b9"},{"location":"kit/gdb/#_12","text":"","title":"\u8c03\u8bd5\u4ee3\u7801"},{"location":"kit/gdb/#_13","text":"1 2 3 4 5 6 7 8 run \u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u7b80\u5199\u4e3ar next \u5355\u6b65\u8ddf\u8e2a\uff0c\u51fd\u6570\u8c03\u7528\u5f53\u4f5c\u4e00\u6761\u7b80\u5355\u8bed\u53e5\u6267\u884c\uff0c\u53ef\u7b80\u5199\u4e3an step \u5355\u6b65\u8ddf\u8e2a\uff0c\u51fd\u6570\u8c03\u8fdb\u5165\u88ab\u8c03\u7528\u51fd\u6570\u4f53\u5185\uff0c\u53ef\u7b80\u5199\u4e3as finish \u9000\u51fa\u51fd\u6570 until \u5728\u4e00\u4e2a\u5faa\u73af\u4f53\u5185\u5355\u6b65\u8ddf\u8e2a\u65f6\uff0c\u8fd9\u4e2a\u547d\u4ee4\u53ef\u4ee5\u8fd0\u884c\u7a0b\u5e8f\u76f4\u5230\u9000\u51fa\u5faa\u73af\u4f53,\u53ef\u7b80\u5199\u4e3au\u3002 continue \u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u7b80\u5199\u4e3ac info program \u6765\u67e5\u770b\u7a0b\u5e8f\u7684\u662f\u5426\u5728\u8fd0\u884c\uff0c\u8fdb\u7a0b\u53f7\uff0c\u88ab\u6682\u505c\u7684\u539f\u56e0\u3002 quit\uff1a\u7b80\u8bb0\u4e3a q \uff0c\u9000\u51fagdb","title":"\u8fd0\u884c\u7a0b\u5e8f"},{"location":"kit/gdb/#_14","text":"1 2 3 print \u6253\u5370\u53d8\u91cf\u3001\u5b57\u7b26\u4e32\u3001\u8868\u8fbe\u5f0f\u7b49\u7684\u503c\uff0c\u53ef\u7b80\u5199\u4e3ap p count \u6253\u5370count\u7684\u503c print h@10 \u6570\u7ec4\u9996\u5730\u5740@\u6570\u7ec4\u957f\u5ea6","title":"\u6253\u5370\u8868\u8fbe\u5f0f"},{"location":"kit/gdb/#_15","text":"1 2 3 4 whatis \u547d\u4ee4\u53ef\u4ee5\u663e\u793a\u67d0\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b where/bt \uff1a\u5f53\u524d\u8fd0\u884c\u7684\u5806\u6808\u5217\u8868\uff1b frame info program\uff1a \u6765\u67e5\u770b\u7a0b\u5e8f\u7684\u662f\u5426\u5728\u8fd0\u884c\uff0c\u8fdb\u7a0b\u53f7\uff0c\u88ab\u6682\u505c\u7684\u539f\u56e0\u3002","title":"\u67e5\u770b\u8fd0\u884c\u4fe1\u606f"},{"location":"kit/gdb/#_16","text":"1 signal signal","title":"\u4fe1\u53f7"},{"location":"kit/gdb/#_17","text":"1 2 3 4 5 6 7 8 Ctrl+x+a (focus)fs next\u5728src\u548ccmd\u4e4b\u95f4\u5207\u6362\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528fs src\u5207\u6362\u5230src\uff0c\u548cfs cmd\u5207\u6362\u5230cmd layout\uff1a\u7528\u4e8e\u5206\u5272\u7a97\u53e3\uff0c\u53ef\u4ee5\u4e00\u8fb9\u67e5\u770b\u4ee3\u7801\uff0c\u4e00\u8fb9\u6d4b\u8bd5\uff1a layout src\uff1a\u663e\u793a\u6e90\u4ee3\u7801\u7a97\u53e3 layout asm\uff1a\u663e\u793a\u53cd\u6c47\u7f16\u7a97\u53e3 layout regs\uff1a\u663e\u793a\u6e90\u4ee3\u7801/\u53cd\u6c47\u7f16\u548cCPU\u5bc4\u5b58\u5668\u7a97\u53e3 layout split\uff1a\u663e\u793a\u6e90\u4ee3\u7801\u548c\u53cd\u6c47\u7f16\u7a97\u53e3 Ctrl + L\uff1a\u5237\u65b0\u7a97\u53e3","title":"\u7a97\u53e3"},{"location":"kit/mkdocs/","text":"Note \u66f4\u591a\u8be6\u7ec6\u77e5\u8bc6\u6765\u81ea: cyent(markdown) \u5b89\u88c5 \u00b6 1 pip install mkdocs mkdocs - material \u521d\u59cb\u5316 \u00b6 1 mkdocs new project \u672c\u5730\u670d\u52a1\u542f\u52a8 \u00b6 1 2 #\u5728project\u76ee\u5f55\u4e0b\u6267\u884c mkdocs server \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/ \u67e5\u770b\u6548\u679c\u3002 \u53d1\u5e03\u81f3GitHub Pages \u00b6 github\u4e0a\u65b0\u5efa\u9879\u76ee\uff0cclone\u81f3\u672c\u5730\uff0c\u5c06mkdocs\u66f4\u76ee\u5f55(project)\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u79fb\u52a8\u5230git clone\u7684\u672c\u5730\u76ee\u5f55\u91cc 1 mkdocs gh-deploy \u53d1\u5e03\u81f3HTTP Server \u00b6 1 mkdocs build \u5c06site\u76ee\u5f55\u4e0b\u6240\u6709\u4e1c\u897f\u540c\u6b65\u81f3http server\u91cc\u3002","title":"\u57fa\u4e8emkdocs\u7684blog\u642d\u5efa"},{"location":"kit/mkdocs/#_1","text":"1 pip install mkdocs mkdocs - material","title":"\u5b89\u88c5"},{"location":"kit/mkdocs/#_2","text":"1 mkdocs new project","title":"\u521d\u59cb\u5316"},{"location":"kit/mkdocs/#_3","text":"1 2 #\u5728project\u76ee\u5f55\u4e0b\u6267\u884c mkdocs server \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/ \u67e5\u770b\u6548\u679c\u3002","title":"\u672c\u5730\u670d\u52a1\u542f\u52a8"},{"location":"kit/mkdocs/#github-pages","text":"github\u4e0a\u65b0\u5efa\u9879\u76ee\uff0cclone\u81f3\u672c\u5730\uff0c\u5c06mkdocs\u66f4\u76ee\u5f55(project)\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u79fb\u52a8\u5230git clone\u7684\u672c\u5730\u76ee\u5f55\u91cc 1 mkdocs gh-deploy","title":"\u53d1\u5e03\u81f3GitHub Pages"},{"location":"kit/mkdocs/#http-server","text":"1 mkdocs build \u5c06site\u76ee\u5f55\u4e0b\u6240\u6709\u4e1c\u897f\u540c\u6b65\u81f3http server\u91cc\u3002","title":"\u53d1\u5e03\u81f3HTTP Server"},{"location":"kit/tmux/","text":"tmux\u57fa\u672c\u6280\u5de7 \u00b6 \u4f1a\u8bddsession \u00b6 \u521b\u5efa\u4e00\u4e2atmux\u7684\u4f1a\u8bdd \u00b6 1 2 tmux tmux new -s name \u9000\u51fatmux\u4f1a\u8bdd \u00b6 1 2 3 4 5 #\u540e\u53f0\u8fd0\u884c tmux attach ctrl+b d #\u9000\u51fa\u4e0d\u540e\u53f0\u8fd0\u884c exit \u5217\u51fa\u6240\u6709\u7684tmux\u4f1a\u8bdd \u00b6 1 2 tmux ls tmux list-sessions \u88c5\u8f7d\u4e00\u4e2a\u4f1a\u8bdd \u00b6 1 2 tmux attach tmux attach -t name \u9500\u6bc1\u4e00\u4e2a\u4f1a\u8bdd \u00b6 1 tmux kill-session -t name \u7a97\u53e3windows \u00b6 \u521b\u5efa\u4e00\u4e2a\u65b0\u7a97\u53e3 \u00b6 1 crtl+b c \u7a97\u53e3\u95f4\u5207\u6362 \u00b6 1 2 3 ctrl+b n(next\u7684\u610f\u601d) ctrl+b p(previous) ctrl+b 0/1/2... \u5173\u95ed\u7a97\u53e3 \u00b6 1 2 exit ctrl+b & \u9762\u677fpane \u00b6 \uff08\u5747\u5728\u6309\u4e0bctrl+b\u4e4b\u540e\u677e\u5f00\uff0c\u7136\u540e\u6309\u4e0b\u76f8\u5e94\u7684\u6309\u952e\uff09 \u00b6 1 2 3 4 5 6 7 8 ? \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 \" \u7eb5\u5411\u5206\u5272\u7a97\u53e3\uff08\u4e0a\u4e0b\u4e8c\u5206\uff09 % \u6a2a\u5411\u5206\u5272\u7a97\u53e3(\u5de6\u53f3\u4e8c\u5206) o \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 \u4e0a\u4e0b\u65b9\u5411\u952e \u4e0a\u4e00\u4e2a\u53ca\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 crtl+b X(\u5927\u5199) exit crtl+b :\u547d\u4ee4\u6a21\u5f0f","title":"tmux\u57fa\u672c\u6280\u5de7"},{"location":"kit/tmux/#tmux","text":"","title":"tmux\u57fa\u672c\u6280\u5de7"},{"location":"kit/tmux/#session","text":"","title":"\u4f1a\u8bddsession"},{"location":"kit/tmux/#tmux_1","text":"1 2 tmux tmux new -s name","title":"\u521b\u5efa\u4e00\u4e2atmux\u7684\u4f1a\u8bdd"},{"location":"kit/tmux/#tmux_2","text":"1 2 3 4 5 #\u540e\u53f0\u8fd0\u884c tmux attach ctrl+b d #\u9000\u51fa\u4e0d\u540e\u53f0\u8fd0\u884c exit","title":"\u9000\u51fatmux\u4f1a\u8bdd"},{"location":"kit/tmux/#tmux_3","text":"1 2 tmux ls tmux list-sessions","title":"\u5217\u51fa\u6240\u6709\u7684tmux\u4f1a\u8bdd"},{"location":"kit/tmux/#_1","text":"1 2 tmux attach tmux attach -t name","title":"\u88c5\u8f7d\u4e00\u4e2a\u4f1a\u8bdd"},{"location":"kit/tmux/#_2","text":"1 tmux kill-session -t name","title":"\u9500\u6bc1\u4e00\u4e2a\u4f1a\u8bdd"},{"location":"kit/tmux/#windows","text":"","title":"\u7a97\u53e3windows"},{"location":"kit/tmux/#_3","text":"1 crtl+b c","title":"\u521b\u5efa\u4e00\u4e2a\u65b0\u7a97\u53e3"},{"location":"kit/tmux/#_4","text":"1 2 3 ctrl+b n(next\u7684\u610f\u601d) ctrl+b p(previous) ctrl+b 0/1/2...","title":"\u7a97\u53e3\u95f4\u5207\u6362"},{"location":"kit/tmux/#_5","text":"1 2 exit ctrl+b &","title":"\u5173\u95ed\u7a97\u53e3"},{"location":"kit/tmux/#pane","text":"","title":"\u9762\u677fpane"},{"location":"kit/tmux/#ctrlb","text":"1 2 3 4 5 6 7 8 ? \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 \" \u7eb5\u5411\u5206\u5272\u7a97\u53e3\uff08\u4e0a\u4e0b\u4e8c\u5206\uff09 % \u6a2a\u5411\u5206\u5272\u7a97\u53e3(\u5de6\u53f3\u4e8c\u5206) o \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 \u4e0a\u4e0b\u65b9\u5411\u952e \u4e0a\u4e00\u4e2a\u53ca\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 crtl+b X(\u5927\u5199) exit crtl+b :\u547d\u4ee4\u6a21\u5f0f","title":"\uff08\u5747\u5728\u6309\u4e0bctrl+b\u4e4b\u540e\u677e\u5f00\uff0c\u7136\u540e\u6309\u4e0b\u76f8\u5e94\u7684\u6309\u952e\uff09"},{"location":"kit/vim/","text":"\u6211\u7684VIM\u914d\u7f6e \u00b6 \u914d\u7f6e\u6587\u4ef6\u94fe\u63a5\uff1a https://github.com/opfanswyx/Atticus_Vim \u4f7f\u7528\u65b9\u6cd5\u6b65\u9aa4\uff1a \u5c06\u4e0b\u8f7d\u6587\u4ef6\u5939\u91cc\u7684.vimrc\u66ff\u4ee3~/.vimrc(\u5982\u679c\u5b58\u5728\u66ff\u6362\uff0c\u4e0d\u5b58\u5728\u76f4\u63a5\u653e\u8fdb\u53bb) \u5206\u522b\u89e3\u538btaglist\u548cwinmanager\u90fd\u4f1a\u5f97\u5230doc\u548cplugin\u4e24\u4e2a\u6587\u4ef6\u5939 \u5207\u6362\u5230~\u76ee\u5f55\u4e0b\u67e5\u770b\u662f\u5426\u5b58\u5728.vim\u6587\u4ef6\u5939\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fdb\u5165\u76ee\u5f55\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa.vim(mkdir .vim and cd .vim) \u8fdb\u5165.vim\u76ee\u5f55\u521b\u5efadoc\u4e0eplugin\u76ee\u5f55 \u62f7\u8d1d\u89e3\u538b\u7684doc\u4e0epiugin\u91cc\u7684\u6587\u4ef6\u5230\u5bf9\u5e94\u7684~/.vim/\u4e0b\u7684doc\u4e0eplugin\u76ee\u5f55\u91cc \u5e38\u7528\u6280\u5de7 \u00b6 i\u63d2\u5165\uff0c\u5728\u5149\u6807\u524d\u63d2\u5165 x\u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u5b57\u7b26 dd\u5220\u9664\u5e76\u4fdd\u6301\u526a\u8d34\u677f\uff0c2dd\u5220\u96642\u884c p\u9ecf\u8d34 3p hjkl\u5de6\u4e0b\u53f3\u4e0a \u6570\u5b570\u5230\u884c\u5934 ^\u5230\u672c\u884c\u7b2c\u4e00\u4e2a\u4e0d\u662fblank(\u7a7a\u683c\uff0ctab\uff0c\u6362\u884c\uff0c\u56de\u8f66)\u5b57\u7b26 $\u5230\u672c\u884c\u884c\u5c3e g_\u672c\u884c\u6700\u540e\u4e00\u4e2a\u4e0d\u662fblank\u5b57\u7b26\u4f4d\u7f6e /pattern \u641c\u7d22\u51fa\u5b57\u7b26\u591a\u4e2a\u5339\u914d\uff0c\u6309n\u5230\u4e0b\u4e00\u4e2a yy\u62f7\u8d1d\u5f53\u524d\u884c\uff0c\u76f8\u5f53\u4e8eddp u\u64a4\u9500 \u53cd\u64a4\u9500 .\u91cd\u590d\u4e0a\u4e00\u6b21\u547d\u4ee4 3.\u91cd\u590d\u4e09\u6b21 NG\u5230\u7b2cN\u884c \uff1aN\u5982\uff1a137 gg\u5230\u7b2c\u4e00\u884c G\u5230\u6700\u540e\u4e00\u884c \u5757\u64cd\u4f5c hjkl =\u81ea\u52a8\u7f29\u8fdb<>\u5de6\u53f3\u7f29\u8fdb \u81ea\u52a8\u8865\u5168 VIM\u5927\u5192\u9669 \u00b6 \u4e0b\u9762\u8fd9\u4e2a\u6e38\u620f\u662f\u4e00\u4e2a\u4f7f\u7528VIM\u70ed\u952e\u73a9\u7684\u6e38\u620f\u3002\u53ef\u4ee5\u5728\u73a9\u6e38\u620f\u7684\u8fc7\u7a0b\u4e2d\u719f\u6089Vim\u7684\u70ed\u952e\u3002 \u70b9\u51fb\u94fe\u63a5\u5f00\u59cb\u6e38\u620f\uff1a https://vim-adventures.com/","title":"VIM\u5e38\u7528\u6280\u5de7"},{"location":"kit/vim/#vim","text":"\u914d\u7f6e\u6587\u4ef6\u94fe\u63a5\uff1a https://github.com/opfanswyx/Atticus_Vim \u4f7f\u7528\u65b9\u6cd5\u6b65\u9aa4\uff1a \u5c06\u4e0b\u8f7d\u6587\u4ef6\u5939\u91cc\u7684.vimrc\u66ff\u4ee3~/.vimrc(\u5982\u679c\u5b58\u5728\u66ff\u6362\uff0c\u4e0d\u5b58\u5728\u76f4\u63a5\u653e\u8fdb\u53bb) \u5206\u522b\u89e3\u538btaglist\u548cwinmanager\u90fd\u4f1a\u5f97\u5230doc\u548cplugin\u4e24\u4e2a\u6587\u4ef6\u5939 \u5207\u6362\u5230~\u76ee\u5f55\u4e0b\u67e5\u770b\u662f\u5426\u5b58\u5728.vim\u6587\u4ef6\u5939\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fdb\u5165\u76ee\u5f55\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa.vim(mkdir .vim and cd .vim) \u8fdb\u5165.vim\u76ee\u5f55\u521b\u5efadoc\u4e0eplugin\u76ee\u5f55 \u62f7\u8d1d\u89e3\u538b\u7684doc\u4e0epiugin\u91cc\u7684\u6587\u4ef6\u5230\u5bf9\u5e94\u7684~/.vim/\u4e0b\u7684doc\u4e0eplugin\u76ee\u5f55\u91cc","title":"\u6211\u7684VIM\u914d\u7f6e"},{"location":"kit/vim/#_1","text":"i\u63d2\u5165\uff0c\u5728\u5149\u6807\u524d\u63d2\u5165 x\u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u5b57\u7b26 dd\u5220\u9664\u5e76\u4fdd\u6301\u526a\u8d34\u677f\uff0c2dd\u5220\u96642\u884c p\u9ecf\u8d34 3p hjkl\u5de6\u4e0b\u53f3\u4e0a \u6570\u5b570\u5230\u884c\u5934 ^\u5230\u672c\u884c\u7b2c\u4e00\u4e2a\u4e0d\u662fblank(\u7a7a\u683c\uff0ctab\uff0c\u6362\u884c\uff0c\u56de\u8f66)\u5b57\u7b26 $\u5230\u672c\u884c\u884c\u5c3e g_\u672c\u884c\u6700\u540e\u4e00\u4e2a\u4e0d\u662fblank\u5b57\u7b26\u4f4d\u7f6e /pattern \u641c\u7d22\u51fa\u5b57\u7b26\u591a\u4e2a\u5339\u914d\uff0c\u6309n\u5230\u4e0b\u4e00\u4e2a yy\u62f7\u8d1d\u5f53\u524d\u884c\uff0c\u76f8\u5f53\u4e8eddp u\u64a4\u9500 \u53cd\u64a4\u9500 .\u91cd\u590d\u4e0a\u4e00\u6b21\u547d\u4ee4 3.\u91cd\u590d\u4e09\u6b21 NG\u5230\u7b2cN\u884c \uff1aN\u5982\uff1a137 gg\u5230\u7b2c\u4e00\u884c G\u5230\u6700\u540e\u4e00\u884c \u5757\u64cd\u4f5c hjkl =\u81ea\u52a8\u7f29\u8fdb<>\u5de6\u53f3\u7f29\u8fdb \u81ea\u52a8\u8865\u5168","title":"\u5e38\u7528\u6280\u5de7"},{"location":"kit/vim/#vim_1","text":"\u4e0b\u9762\u8fd9\u4e2a\u6e38\u620f\u662f\u4e00\u4e2a\u4f7f\u7528VIM\u70ed\u952e\u73a9\u7684\u6e38\u620f\u3002\u53ef\u4ee5\u5728\u73a9\u6e38\u620f\u7684\u8fc7\u7a0b\u4e2d\u719f\u6089Vim\u7684\u70ed\u952e\u3002 \u70b9\u51fb\u94fe\u63a5\u5f00\u59cb\u6e38\u620f\uff1a https://vim-adventures.com/","title":"VIM\u5927\u5192\u9669"},{"location":"math/plan/","text":"LaTeX \u7b26\u53f7 \\sum_{i=0}^N\\int_{a}^{b}g(t,i)\\text{d}t$$ \uff0c $$p(x|y) = \\frac{p(y|x)p(x)}{p(y)} \\sum_{i=0}^N\\int_{a}^{b}g(t,i)\\text{d}t$$ \uff0c $$p(x|y) = \\frac{p(y|x)p(x)}{p(y)} \u7b1b\u5361\u5c14\u5750\u6807\u7cfb \u00b6 \u4e8c\u7ef4\u7b1b\u5361\u5c14\u5750\u6807\u7cfb \u00b6 \u4e09\u7ef4\u7b1b\u5361\u5c14\u5750\u6807\u7cfb \u00b6 3\u4e2a\u8f74\u4e5f\u88ab\u79f0\u4e3a\u8be5\u5750\u6807\u7cfb\u7684\u57fa\u77e2\u91cf(basis vector)\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c3\u4e2a\u8f74\u4e4b\u95f4\u662f\u4e92\u76f8\u5782\u76f4\uff0c\u4e14\u957f\u5ea6\u4e3a1\uff0c\u8fd9\u6837\u7684\u77e2\u91cf\u88ab\u79f0\u4e3a\u6807\u51c6\u57fa\u77e2\u91cf\u3002\u4e92\u76f8\u5782\u76f4\uff0c\u4f46\u957f\u5ea6\u4e0d\u4e3a1\u7684\u88ab\u79f0\u4e3a\u6b63\u4ea4\u57fa\u3002 \u5de6\u624b\u5750\u6807\u7cfb \u53f3\u624b\u5750\u6807\u7cfb \u70b9\u548c\u77e2\u91cf \u00b6 \u70b9(point)\u662fn\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5927\u5c0f\uff0c\u5bbd\u5ea6\u8fd9\u7c7b\u6982\u5ff5\u3002\u5728\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u75282\u4e2a\u62163\u4e2a\u5b9e\u6570\u6765\u8868\u793a\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5982P=(P x , P y )\u8868\u793a\u4e8c\u7ef4\u7a7a\u95f4\u7684\u70b9\uff0cp=(p x , p y , p z )\u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u70b9\u3002 \u77e2\u91cf(vector\uff0c\u4e5f\u88ab\u79f0\u4e3a\u5411\u91cf)\u662f\u6307n\u7ef4\u7a7a\u95f4\u4e2d\u4e00\u79cd\u5305\u542b\u4e86\u6a21(magnitude)\u548c\u65b9\u5411(direction)\u7684\u6709\u5411\u7ebf\u6bb5\u3002\u901a\u5e38\u8bb2\u7684\u901f\u5ea6\u5c31\u662f\u4e00\u79cd\u5178\u578b\u7684\u77e2\u91cf\u3002\u533a\u522b\u4e8e\u6807\u91cf(scalar)\u3002\u4e00\u4e2a\u77e2\u91cf\u901a\u5e38\u7531\u4e00\u4e2a\u7bad\u5934\u6765\u8868\u793a\u3002\u77e2\u91cf\u7684\u5934\u6307\u7684\u662f\u5b83\u7684\u7bad\u5934\u6240\u5728\u7684\u7aef\u70b9\u5904\u3002\u77e2\u91cf\u7528\u6765\u8868\u793a\u5bf9\u4e8e\u67d0\u4e2a\u70b9\u7684\u4fbf\u5b9c(displacement)\u3002 \u77e2\u91cf\u8fd0\u7b97 \u00b6 \u6211\u4eec\u4e0d\u80fd\u628a\u6807\u91cf\u548c\u77e2\u91cf\u76f8\u52a0\u51cf\u3002\u4f46\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\u3002\u7ed3\u679c\u4f1a\u5f97\u5230\u4e00\u4e2a\u4e0d\u540c\u957f\u5ea6\u4e14\u53ef\u80fd\u65b9\u5411\u76f8\u53cd\u7684\u65b0\u77e2\u91cf\u3002 KV = (KV x , KV y , KV z ) \u77e2\u91cf\u4e5f\u53ef\u4ee5\u88ab\u4e00\u4e2a\u975e\u96f6\u7684\u6807\u91cf\u9664\uff0c\u7b49\u540c\u4e8e\u548c\u8fd9\u4e2a\u6807\u91cf\u7684\u5012\u6570\u76f8\u4e58\u3002 \\frac{v}{k} = \\frac{x,y,z}{k} = \\frac{1}{k}(x,y,z) = (\\frac{x}{k},\\frac{y}{k},\\frac{z}{k}),k\\neq0 \\frac{v}{k} = \\frac{x,y,z}{k} = \\frac{1}{k}(x,y,z) = (\\frac{x}{k},\\frac{y}{k},\\frac{z}{k}),k\\neq0 \u4f8b\u5982: 2(1,2,3)=(2,4,6)\\qquad 2(1,2,3)=(2,4,6)\\qquad -3.5(2.0)=(-7.0)\\qquad -3.5(2.0)=(-7.0)\\qquad \\frac{1,2,3}{2}=(0.5,1,1.5) \\frac{1,2,3}{2}=(0.5,1,1.5) \u77e9\u9635 \u00b6 \u77e9\u9635\u7684\u51e0\u4f55\u53d8\u6362 \u00b6 \u5750\u6807\u7a7a\u95f4 \u00b6 \u6cd5\u7ebf\u7a7a\u95f4 \u00b6","title":"\u89c4\u5212"},{"location":"math/plan/#_1","text":"","title":"\u7b1b\u5361\u5c14\u5750\u6807\u7cfb"},{"location":"math/plan/#_2","text":"","title":"\u4e8c\u7ef4\u7b1b\u5361\u5c14\u5750\u6807\u7cfb"},{"location":"math/plan/#_3","text":"3\u4e2a\u8f74\u4e5f\u88ab\u79f0\u4e3a\u8be5\u5750\u6807\u7cfb\u7684\u57fa\u77e2\u91cf(basis vector)\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c3\u4e2a\u8f74\u4e4b\u95f4\u662f\u4e92\u76f8\u5782\u76f4\uff0c\u4e14\u957f\u5ea6\u4e3a1\uff0c\u8fd9\u6837\u7684\u77e2\u91cf\u88ab\u79f0\u4e3a\u6807\u51c6\u57fa\u77e2\u91cf\u3002\u4e92\u76f8\u5782\u76f4\uff0c\u4f46\u957f\u5ea6\u4e0d\u4e3a1\u7684\u88ab\u79f0\u4e3a\u6b63\u4ea4\u57fa\u3002 \u5de6\u624b\u5750\u6807\u7cfb \u53f3\u624b\u5750\u6807\u7cfb","title":"\u4e09\u7ef4\u7b1b\u5361\u5c14\u5750\u6807\u7cfb"},{"location":"math/plan/#_4","text":"\u70b9(point)\u662fn\u7ef4\u7a7a\u95f4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5927\u5c0f\uff0c\u5bbd\u5ea6\u8fd9\u7c7b\u6982\u5ff5\u3002\u5728\u7b1b\u5361\u5c14\u5750\u6807\u7cfb\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u75282\u4e2a\u62163\u4e2a\u5b9e\u6570\u6765\u8868\u793a\u4e00\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5982P=(P x , P y )\u8868\u793a\u4e8c\u7ef4\u7a7a\u95f4\u7684\u70b9\uff0cp=(p x , p y , p z )\u8868\u793a\u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u70b9\u3002 \u77e2\u91cf(vector\uff0c\u4e5f\u88ab\u79f0\u4e3a\u5411\u91cf)\u662f\u6307n\u7ef4\u7a7a\u95f4\u4e2d\u4e00\u79cd\u5305\u542b\u4e86\u6a21(magnitude)\u548c\u65b9\u5411(direction)\u7684\u6709\u5411\u7ebf\u6bb5\u3002\u901a\u5e38\u8bb2\u7684\u901f\u5ea6\u5c31\u662f\u4e00\u79cd\u5178\u578b\u7684\u77e2\u91cf\u3002\u533a\u522b\u4e8e\u6807\u91cf(scalar)\u3002\u4e00\u4e2a\u77e2\u91cf\u901a\u5e38\u7531\u4e00\u4e2a\u7bad\u5934\u6765\u8868\u793a\u3002\u77e2\u91cf\u7684\u5934\u6307\u7684\u662f\u5b83\u7684\u7bad\u5934\u6240\u5728\u7684\u7aef\u70b9\u5904\u3002\u77e2\u91cf\u7528\u6765\u8868\u793a\u5bf9\u4e8e\u67d0\u4e2a\u70b9\u7684\u4fbf\u5b9c(displacement)\u3002","title":"\u70b9\u548c\u77e2\u91cf"},{"location":"math/plan/#_5","text":"\u6211\u4eec\u4e0d\u80fd\u628a\u6807\u91cf\u548c\u77e2\u91cf\u76f8\u52a0\u51cf\u3002\u4f46\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u4e58\u6cd5\u8fd0\u7b97\u3002\u7ed3\u679c\u4f1a\u5f97\u5230\u4e00\u4e2a\u4e0d\u540c\u957f\u5ea6\u4e14\u53ef\u80fd\u65b9\u5411\u76f8\u53cd\u7684\u65b0\u77e2\u91cf\u3002 KV = (KV x , KV y , KV z ) \u77e2\u91cf\u4e5f\u53ef\u4ee5\u88ab\u4e00\u4e2a\u975e\u96f6\u7684\u6807\u91cf\u9664\uff0c\u7b49\u540c\u4e8e\u548c\u8fd9\u4e2a\u6807\u91cf\u7684\u5012\u6570\u76f8\u4e58\u3002 \\frac{v}{k} = \\frac{x,y,z}{k} = \\frac{1}{k}(x,y,z) = (\\frac{x}{k},\\frac{y}{k},\\frac{z}{k}),k\\neq0 \\frac{v}{k} = \\frac{x,y,z}{k} = \\frac{1}{k}(x,y,z) = (\\frac{x}{k},\\frac{y}{k},\\frac{z}{k}),k\\neq0 \u4f8b\u5982: 2(1,2,3)=(2,4,6)\\qquad 2(1,2,3)=(2,4,6)\\qquad -3.5(2.0)=(-7.0)\\qquad -3.5(2.0)=(-7.0)\\qquad \\frac{1,2,3}{2}=(0.5,1,1.5) \\frac{1,2,3}{2}=(0.5,1,1.5)","title":"\u77e2\u91cf\u8fd0\u7b97"},{"location":"math/plan/#_6","text":"","title":"\u77e9\u9635"},{"location":"math/plan/#_7","text":"","title":"\u77e9\u9635\u7684\u51e0\u4f55\u53d8\u6362"},{"location":"math/plan/#_8","text":"","title":"\u5750\u6807\u7a7a\u95f4"},{"location":"math/plan/#_9","text":"","title":"\u6cd5\u7ebf\u7a7a\u95f4"},{"location":"network/plan/","text":"\u7f51\u7edc\u591a\u5c42\u6a21\u578b \u00b6 socket \u00b6 http \u00b6","title":"\u89c4\u5212"},{"location":"network/plan/#_1","text":"","title":"\u7f51\u7edc\u591a\u5c42\u6a21\u578b"},{"location":"network/plan/#socket","text":"","title":"socket"},{"location":"network/plan/#http","text":"","title":"http"},{"location":"os/csapp/chapter1/","text":"\u4fe1\u606f\u5c31\u662f\u4f4d+\u4e0a\u4e0b\u6587 \u9884\u5904\u7406\uff0c\u7f16\u8bd1\u5668\uff0c\u6c47\u7f16\u5668\uff0c\u94fe\u63a5\u5668 \u603b\u7ebf\uff0cI/O\u8bbe\u5907\uff0c\u4e3b\u5b58\uff0c\u5904\u7406\u5668 \u64cd\u4f5c\u7cfb\u7edf\u7ba1\u7406\u786c\u4ef6\uff1a\u9632\u6b62\u786c\u4ef6\u88ab\u5931\u63a7\u7684\u5e94\u7528\u7a0b\u5e8f\u6ee5\u7528\u3002\u5411\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u7b80\u5355\u4e00\u81f4\u7684\u673a\u5236\u6765\u63a7\u5236\u590d\u6742\u800c\u53c8\u901a\u5e38\u5927\u4e0d\u76f8\u540c\u7684\u4f4e\u7ea7\u786c\u4ef6\u8bbe\u5907\u3002 \u6587\u4ef6\u662fI/O\u8bbe\u5907\u7684\u62bd\u8c61\u8868\u793a\u3002 \u865a\u62df\u5185\u5b58\u662f\u5bf9\u4e3b\u5b58\u548c\u78c1\u76d8I/O\u8bbe\u5907\u7684\u62bd\u8c61\u8868\u793a\u3002 \u8fdb\u7a0b\u662f\u5bf9\u5904\u7406\u5668\uff0c\u4e3b\u5b58\u548cI/O\u8bbe\u5907\u7684\u62bd\u8c61\u8868\u793a\u3002 \u7a0b\u5e8f\u7ed3\u6784\u548c\u6267\u884c \u00b6 \u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406 \u00b6 \u4fe1\u606f\u5b58\u50a8 \u00b6 \u5927\u591a\u6570\u8ba1\u7b97\u673a\u4f7f\u75288\u4f4d\u7684\u5757\uff0c\u6216\u8005\u5b57\u8282(byte)\uff0c\u4f5c\u4e3a\u6700\u5c0f\u7684\u53ef\u5bfb\u5740\u7684\u5185\u5b58\u5355\u4f4d\uff0c\u800c\u4e0d\u662f\u8bbf\u95ee\u5185\u5b58\u4e2d\u5355\u7684\u4f4d\u3002 \u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u6709\u4e00\u4e2a\u5b57\u957f(word size)\uff0c\u6307\u660e\u6307\u9488\u6570\u636e\u7684\u6807\u79f0\u5927\u5c0f\u3002\u5b57\u957f\u51b3\u5b9a\u7684\u6700\u91cd\u8981\u7684\u7cfb\u7edf\u53c2\u6570\u5c31\u662f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u6700\u5927\u5927\u5c0f\u3002\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u957fw\u4f4d\u7684\u673a\u5668\u800c\u8a00\uff0c\u865a\u62df\u5730\u5740\u7684\u8303\u56f4\u5c31\u662f0~2W-1\uff0c\u7a0b\u5e8f\u6700\u591a\u8bbf\u95ee2w\u4e2a\u5b57\u8282\u3002 ISO c99\u5f15\u5165\u4e86\u4e00\u7c7b\u6570\u636e\u7c7b\u578b\uff0c\u5176\u6570\u636e\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u968f\u7f16\u8bd1\u5668\u548c\u673a\u5668\u8bbe\u7f6e\u800c\u53d8\u5316\u3002int32_t\u548cint64_t\u5206\u522b\u4e3a4\u5b57\u8282\u548c8\u5b57\u8282\u3002","title":"\u8ba1\u7b97\u673a\u7cfb\u7edf\u6f2b\u6e38"},{"location":"os/csapp/chapter1/#_1","text":"","title":"\u7a0b\u5e8f\u7ed3\u6784\u548c\u6267\u884c"},{"location":"os/csapp/chapter1/#_2","text":"","title":"\u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406"},{"location":"os/csapp/chapter1/#_3","text":"\u5927\u591a\u6570\u8ba1\u7b97\u673a\u4f7f\u75288\u4f4d\u7684\u5757\uff0c\u6216\u8005\u5b57\u8282(byte)\uff0c\u4f5c\u4e3a\u6700\u5c0f\u7684\u53ef\u5bfb\u5740\u7684\u5185\u5b58\u5355\u4f4d\uff0c\u800c\u4e0d\u662f\u8bbf\u95ee\u5185\u5b58\u4e2d\u5355\u7684\u4f4d\u3002 \u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u6709\u4e00\u4e2a\u5b57\u957f(word size)\uff0c\u6307\u660e\u6307\u9488\u6570\u636e\u7684\u6807\u79f0\u5927\u5c0f\u3002\u5b57\u957f\u51b3\u5b9a\u7684\u6700\u91cd\u8981\u7684\u7cfb\u7edf\u53c2\u6570\u5c31\u662f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u6700\u5927\u5927\u5c0f\u3002\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u957fw\u4f4d\u7684\u673a\u5668\u800c\u8a00\uff0c\u865a\u62df\u5730\u5740\u7684\u8303\u56f4\u5c31\u662f0~2W-1\uff0c\u7a0b\u5e8f\u6700\u591a\u8bbf\u95ee2w\u4e2a\u5b57\u8282\u3002 ISO c99\u5f15\u5165\u4e86\u4e00\u7c7b\u6570\u636e\u7c7b\u578b\uff0c\u5176\u6570\u636e\u5927\u5c0f\u662f\u56fa\u5b9a\u7684\uff0c\u4e0d\u968f\u7f16\u8bd1\u5668\u548c\u673a\u5668\u8bbe\u7f6e\u800c\u53d8\u5316\u3002int32_t\u548cint64_t\u5206\u522b\u4e3a4\u5b57\u8282\u548c8\u5b57\u8282\u3002","title":"\u4fe1\u606f\u5b58\u50a8"},{"location":"os/csapp/plan/","text":"\u300a\u6df1\u5165\u7406\u89e3\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u300b\u603b\u7ed3 \u8be5\u6a21\u5757\u6253\u7b97\u6682\u65f6\u4ee5\u672c\u4e66\u7ae0\u8282\u4f5c\u4e3a\u8be5\u6a21\u5757\u76ee\u5f55\u7ed3\u6784\u3002","title":"\u89c4\u5212"},{"location":"os/linux/linux_base/","text":"","title":"Linux base"},{"location":"os/linux/linux_command/","text":"\u6587\u4ef6\u64cd\u4f5c\u547d\u4ee4 \u00b6 1 2 3 cp -R \u9012\u5f52\u5904\u7406\uff0c\u5c06\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u53ca\u5b50\u76ee\u5f55\u4e00\u5e76\u5904\u7406 cp -p \u590d\u5236\u7684\u540c\u65f6\u4e0d\u4fee\u6539\u6587\u4ef6\u5c5e\u6027\uff0c\u5305\u62ec\u6240\u6709\u8005\uff0c\u6240\u5c5e\u7ec4\uff0c\u6743\u9650\u548c\u65f6\u95f4 cp -f \u5f3a\u5236\u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55\uff0c\u65e0\u8bba\u76ee\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u662f\u5426\u5df2\u7ecf\u5b58\u5728 more \u5feb\u6377\u952e \u8bf4\u660e f/Space \u663e\u793a\u4e0b\u4e00\u9875 Enter \u663e\u793a\u4e0b\u4e00\u884c q/Q \u9000\u51fa 1 2 3 head -n filename \u67e5\u770b\u6587\u4ef6\u7684\u524dn\u884c tail -n filename \u67e5\u770b\u6587\u4ef6\u7684\u540en\u884c \u6587\u4ef6\ud83d\udd0d\u641c\u7d22\u547d\u4ee4 \u00b6 1 2 3 4 5 6 7 8 9 10 which/whereis \u53ef\u4ee5\u67e5\u770blinux\u547d\u4ee4\u6240\u5728\u7684\u76ee\u5f55\uff0cwhich\u80fd\u627e\u5230\u547d\u4ee4\u7684\u522b\u540d\uff0c whereis\u540c\u65f6\u5c55\u793a\u547d\u4ee4\u5e2e\u52a9\u6587\u6863\u6240\u5728\u7684\u8def\u5f84\u3002 find (-name|-size|-user) \u66f4\u5177\u6587\u4ef6\u540d/\u6587\u4ef6\u5927\u5c0f/\u6587\u4ef6\u6240\u6709\u8005\u67e5\u627e find /etc -name passwd locate locate\u4e0efind -name\u76f8\u540c\uff0c\u901f\u5ea6\u66f4\u5feb\uff0clocate\u5728/var/lib/locatedb \u4e2d\u67e5\u627e\uff0cupdatedb\u66f4\u65b0\u3002 grep \u7528\u4e8e\u5728\u6587\u4ef6\u4e2d\u641c\u7d22\u4e0e\u5b57\u7b26\u4e32\u5339\u914d\u7684\u884c\u5e76\u8f93\u51fa\u3002 grep root /etc/services 1 2 3 netstat -a \u6240\u6709\u7aef\u53e3 netstat -at \u6240\u6709tcp\u7aef\u53e3 netstat -au \u6240\u6709udp\u7aef\u53e3","title":"Linux\u5e38\u7528\u547d\u4ee4"},{"location":"os/linux/linux_command/#_1","text":"1 2 3 cp -R \u9012\u5f52\u5904\u7406\uff0c\u5c06\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u53ca\u5b50\u76ee\u5f55\u4e00\u5e76\u5904\u7406 cp -p \u590d\u5236\u7684\u540c\u65f6\u4e0d\u4fee\u6539\u6587\u4ef6\u5c5e\u6027\uff0c\u5305\u62ec\u6240\u6709\u8005\uff0c\u6240\u5c5e\u7ec4\uff0c\u6743\u9650\u548c\u65f6\u95f4 cp -f \u5f3a\u5236\u590d\u5236\u6587\u4ef6\u6216\u76ee\u5f55\uff0c\u65e0\u8bba\u76ee\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u662f\u5426\u5df2\u7ecf\u5b58\u5728 more \u5feb\u6377\u952e \u8bf4\u660e f/Space \u663e\u793a\u4e0b\u4e00\u9875 Enter \u663e\u793a\u4e0b\u4e00\u884c q/Q \u9000\u51fa 1 2 3 head -n filename \u67e5\u770b\u6587\u4ef6\u7684\u524dn\u884c tail -n filename \u67e5\u770b\u6587\u4ef6\u7684\u540en\u884c","title":"\u6587\u4ef6\u64cd\u4f5c\u547d\u4ee4"},{"location":"os/linux/linux_command/#_2","text":"1 2 3 4 5 6 7 8 9 10 which/whereis \u53ef\u4ee5\u67e5\u770blinux\u547d\u4ee4\u6240\u5728\u7684\u76ee\u5f55\uff0cwhich\u80fd\u627e\u5230\u547d\u4ee4\u7684\u522b\u540d\uff0c whereis\u540c\u65f6\u5c55\u793a\u547d\u4ee4\u5e2e\u52a9\u6587\u6863\u6240\u5728\u7684\u8def\u5f84\u3002 find (-name|-size|-user) \u66f4\u5177\u6587\u4ef6\u540d/\u6587\u4ef6\u5927\u5c0f/\u6587\u4ef6\u6240\u6709\u8005\u67e5\u627e find /etc -name passwd locate locate\u4e0efind -name\u76f8\u540c\uff0c\u901f\u5ea6\u66f4\u5feb\uff0clocate\u5728/var/lib/locatedb \u4e2d\u67e5\u627e\uff0cupdatedb\u66f4\u65b0\u3002 grep \u7528\u4e8e\u5728\u6587\u4ef6\u4e2d\u641c\u7d22\u4e0e\u5b57\u7b26\u4e32\u5339\u914d\u7684\u884c\u5e76\u8f93\u51fa\u3002 grep root /etc/services 1 2 3 netstat -a \u6240\u6709\u7aef\u53e3 netstat -at \u6240\u6709tcp\u7aef\u53e3 netstat -au \u6240\u6709udp\u7aef\u53e3","title":"\u6587\u4ef6\ud83d\udd0d\u641c\u7d22\u547d\u4ee4"},{"location":"os/linux/linux_program/","text":"1 2 3 / bin //\u4e8c\u8fdb\u5236\u6587\u4ef6\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u542f\u52a8\u7cfb\u7edf\u7a0b\u5e8f\u7684\u6807\u51c6\u8def\u5f84 / usr / bin //\u7528\u6237\u4e8c\u8fdb\u5236\u6587\u4ef6\u8def\u5f84\uff0c\u7528\u4e8e\u5b58\u653e\u7528\u6237\u4f7f\u7528\u7684\u6807\u51c6\u7a0b\u5e8f / usr / local //\u672c\u5730\u4e8c\u8fdb\u5236\u6587\u4ef6\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u8f6f\u4ef6\u5b89\u88c5\u7a0b\u5e8f \u5bf9\u4e8ec\u8bed\u8a00\u6765\u8bf4\uff0c\u5934\u6587\u4ef6\u51e0\u4e4e\u603b\u662f\u4f4d\u4e8e/usr/include\u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55\u4e2d\u3002 \u6807\u51c6\u7cfb\u7edf\u5e93\u6587\u4ef6\u4e00\u822c\u5b58\u50a8\u5728/lib\u548c/usr/lib\u76ee\u5f55\u4e2d\u3002 \u7ec8\u6781\u547d\u4ee4 1 2 $ man $ info \u6587\u4ef6\u64cd\u4f5c \u00b6 1 2 3 / dev / console //\u7cfb\u7edf\u63a7\u5236\u53f0 / dev / tty //\u63a7\u5236\u7ec8\u7aef / dev / null \u5e95\u5c42\u6587\u4ef6\u8bbf\u95ee \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <unistd.h> size_t write ( int fildes , const void * buf , size_t nbytes ); //\u628a\u7f13\u51b2\u533abuf\u524dnbytes\u4e2a\u5b57\u8282\u5199\u5165\u4e0e\u6587\u4ef6\u63cf\u8ff0\u7b26fildes\u5173\u8054\u7684\u6587\u4ef6\u4e2d\u3002 size_t read ( int fildes , void * buf , size_t nbytes ); //\u4ece\u6587\u4ef6\u63cf\u8ff0\u7b26fildes\u76f8\u5173\u7684\u6587\u4ef6\u91cc\u8bfb\u5165nbytes\u4e2a\u5b57\u8282\u6570\u636e\uff0c\u5b58\u653e\u5230buf\u4e2d\u3002 int close ( int fildes ); #include <fcntl.h> #include <sys/types.h> #include <sys/stat.h> int open ( const char * path , int oflags ); int open ( const char * path , int oflags , mode_t mode ); off_t lseek ( int fildes , off_t offset , int whence ); //\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26fildes\u7684\u8bfb\u5199\u6307\u9488\u8fdb\u884c\u8bbe\u7f6e\u3002 int fstat ( int fildes , struct stat * buf ); //\u8fd4\u56de\u4e0e\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5173\u7684\u6587\u4ef6\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u5199\u5165buf\u7ed3\u6784 int stat ( const char * path , struct stat * buf ); //\u5f53\u6587\u4ef6\u662f\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5\u65f6\uff0c\u8fd4\u56de\u8be5\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u7684\u6587\u4ef6\u7684\u4fe1\u606f\u3002 int lstat ( const char * path , struct stat * buf ); //\u5f53\u6587\u4ef6\u662f\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5\u65f6\uff0c\u8fd4\u56de\u8be5\u7b26\u53f7\u94fe\u63a5\u672c\u8eab\u7684\u4fe1\u606f\u3002 int dup ( int fildes ); //\u8d4b\u503c\u6587\u4ef6\u63cf\u8ff0\u7b26fildes\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u6587\u4ef6\u63cf\u8ff0\u7b26 int dup2 ( int fildes , int fildes2 ); //\u901a\u8fc7\u660e\u786e\u6307\u5b9a\u6728\u529e\u6cd5\u63cf\u8ff0\u7b26\u6765\u628a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u590d\u5236\u4e3a\u53e6\u5916\u4e00\u4e2a \u6807\u51c6I/O \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //stdin,stdout,stderr #include <stdio.h> FILE * fopen ( const char * filename , const char * mode ); size_t fread ( void * ptr , size_t size , size_t nitems , FILE * stream ); //\u6570\u636e\u4ece\u6587\u4ef6\u6d41stream\u8bfb\u5230\u7531ptr\u6307\u5411\u7684\u6570\u636e\u7f13\u51b2\u533a\u91cc\u3002size\u53c2\u6570\u6307\u5b9a\u6bcf\u4e2a\u6570\u636e\u8bb0\u5f55\u7684\u957f\u5ea6\uff0c\u8ba1\u6570\u5668nitems\u7ed9\u51fa\u8981\u4f20\u8f93\u7684\u8bb0\u5f55\u4e2a\u6570 size_t fwrite ( const void * ptr , size_t size , size_t nitems , FILE * stream ); int fclose ( FILE * stream ); int fflush ( FILE * stream ); //\u628a\u6587\u4ef6\u6d41\u91cc\u7684\u6240\u6709\u672a\u5199\u51fa\u6570\u636e\u7acb\u523b\u5199\u51fa\u3002fclose\u51fd\u6570\u9690\u542b\u6267\u884c\u4e86\u4e00\u6b21flush\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u5fc5\u518d\u8c03\u7528fclose\u4e4b\u524d\u8c03\u7528fflush int fseek ( FILE * stream , long int offset , int whence ); //\u6587\u4ef6\u6d41\u91cc\u4e3a\u4e0b\u4e00\u6b21\u8bfb\u5199\u64cd\u4f5c\u6307\u5b9a\u4f4d\u7f6e int fgetc ( FILE * stream ); int getc ( FILE * stream ); int getchar (); //\u4ece\u6807\u51c6\u8f93\u5165\u91cc\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26 int fputc ( int c , FILE * stream ); int putc ( int c , FILE * stream ); //\u4f46\u5b83\u53ef\u80fd\u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u5b8f int putchar ( int c ); /****** fgets\u628a\u8bfb\u5230\u7684\u5b57\u7b26\u5199\u5230s\u6307\u5411\u7684\u5b57\u7b26\u4e32\u91cc\uff0c\u76f4\u5230\u51fa\u73b0\u4e0b\u9762\u67d0\u79cd\u60c5\u51b5\uff1a\u9047\u5230\u6362\u884c\u7b26\uff0c\u5df2\u7ecf\u4f20\u8f93\u4e86n-1\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u5230\u8fbe\u6587\u4ef6\u5c3e\u3002 \u4f1a\u628a\u9047\u5230\u7684\u6362\u884c\u7b26\u4e5f\u4f20\u9012\u5230\u63a5\u6536\u5b57\u7b26\u4e32\u91cc\uff0c\u5728\u52a0\u4e0a\u4e00\u4e2a\u8868\u793a\u7ed3\u5c3e\u7684\u7a7a\u5b57\u8282\\0\u3002\u4e00\u6b21\u8c03\u7528\u6700\u591a\u53ea\u80fd\u4f20\u8f93n-1\u4e2a\u5b57\u7b26\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u8981\u628a\u7a7a\u5b57\u8282\u52a0\u4e0a\u4ee5\u7ed3\u675f\u5b57\u7b26\u4e32\u3002 ******/ char * fgets ( char * s , int n , FILE * stream ); char * gets ( char * s ); //\u5b83\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6570\u636e\u5e76\u4e22\u53bb\u9047\u5230\u7684\u6362\u884c\u7b26\u3002\u5b83\u5728\u63a5\u6536\u5b57\u7b26\u4e32\u7684\u5c3e\u90e8\u52a0\u4e0a\u4e00\u4e2anull\u5b57\u8282\u3002 \u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int printf ( const char * format , ...); //\u8f93\u51fa\u9001\u5230\u6807\u51c6\u8f93\u51fa int sprintf ( char * s , const char * format , ...); //\u628a\u8f93\u51fa\u548c\u4e00\u4e2a\u7ed3\u5c3e\u7a7a\u5b57\u7b26\u5199\u5230\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u8fc7\u6765\u7684\u5b57\u7b26\u4e322\u91cc int fprintf ( FILE * stream , const char * format , ...); //\u628a\u8f93\u51fa\u9001\u5230\u4e00\u4e2a\u6307\u5b9a\u7684\u6587\u4ef6\u6d41\u3002 int scanf ( const char * format , ...); int fscanf ( FILE * stream , const char * format , ...); int sscanf ( const char * s , const char * format , ...); /**** fgetpos: \u83b7\u53d6\u6587\u4ef6\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e\u3002 fsetpos: \u8bbe\u7f6e\u6587\u4ef6\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e ftell: \u8fd4\u56de\u6587\u4ef6\u6d41\u5f53\u524d\u4f4d\u7f6e\u7684\u504f\u79fb rewind: \u91cd\u7f6e\u6587\u4ef6\u6d41\u91cc\u7684\u8bfb\u5199\u4f4d\u7f6e freopen: \u91cd\u65b0\u4f7f\u7528\u4e00\u4e2a\u6587\u4ef6\u6d41 setvbuf: \u8bbe\u7f6e\u6587\u4ef6\u6d41\u7684\u7f13\u51b2\u673a\u5236 remove: \u76f8\u5f53\u4e8eunlink\u51fd\u6570\uff0c\u5982\u679c\u53c2\u6570path\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u76f8\u5f53\u4e8ermdir\u51fd\u6570 ****/ #include <errno.h> extern int errno ; int ferror ( FILE * stream ); int feof ( FILE * stream ); void clearerr ( FILE * stream ); int fileno ( FILE * stream ); FILE * fdopen ( int fildes , const char * mode ); \u6587\u4ef6\u548c\u76ee\u5f55\u7ef4\u62a4 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <sys/stat.h> #include <unistd.h> int chmod ( const char * path , mode_t mode ); //\u6539\u53d8\u6587\u4ef6\u76ee\u5f55\u7684\u8bbf\u95ee\u6743\u9650 int chown ( const char * path , uid_t owner , gid_t group ); int unlink ( const char * path ); int link ( const char * path1 , const char * path2 ); int symlink ( const char * path1 , const char * path2 ); int mkdir ( const char * path , mode_t mode ); int rmidr ( const char * path ); //\u5220\u9664\u7a7a\u76ee\u5f55 char * getcwd ( char * buf , size_t size ); //\u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u7684\u540d\u5b57 int chdir ( const char * path ); \u626b\u63cf\u76ee\u5f55 \u00b6 1 2 3 4 5 6 7 8 #include <sys/types.h> #include <dirent.h> DIR * opendir ( const char * name ); struct dirent * readdir ( DIR * dirp ); long int telldir ( DIR * dirp ); void seekdir ( DIR * dirp , long int loc ); int closedir ( DIR * dirp ); \u9519\u8bef\u5904\u7406 \u00b6 1 2 3 4 #include <string.h> #include <stdio.h> char * strerror ( int errnum ); void perror ( const char * s ); /proc\u6587\u4ef6\u7cfb\u7edf \u00b6 1 2 3 4 cat / proc / cpuinfo //\u67e5\u770bcpu\u7684\u8be6\u7ec6\u4fe1\u606f cat / proc / meminfo //\u5185\u5b58\u4f7f\u7528\u60c5\u51b5 cat / proc / version //\u5185\u6838\u7248\u672c\u4fe1\u606f cat / proc / sys / fs / file - max //\u540c\u65f6\u6253\u5f00\u7684\u6587\u4ef6\u603b\u6570 fcntl\u548cmmap \u00b6 1 2 int fcntl ( int fildes , int cmd ); //\u5bf9\u5e95\u5c42\u6587\u4ef6\u63cf\u8ff0\u7b26\u63d0\u4f9b\u66f4\u591a\u7684\u64cd\u4f5c\u65b9\u6cd5 int fcntl ( int fildes , int cmd , long arg ); mmap (\u5185\u5b58\u6620\u5c04)\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5efa\u7acb\u4e00\u6bb5\u53ef\u4ee5\u88ab\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u7a0b\u5e8f\u8bfb\u5199\u7684\u5185\u5b58\u3002\u4e00\u4e2a\u7a0b\u5e8f\u5bf9\u5b83\u6240\u505a\u51fa\u7684\u4fee\u6539\u53ef\u4ee5\u88ab\u5176\u4ed6\u7a0b\u5e8f\u770b\u89c1\u3002\u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u4e00\u6bb5\u5185\u5b58\u533a\u57df\u7684\u6307\u9488\uff0c\u8be5\u5185\u5b58\u533a\u57df\u4e0e\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8bbf\u95ee\u7684\u6587\u4ef6\u7684\u5185\u5bb9\u76f8\u5173\u8054\u3002 1 2 3 4 5 6 #include <sys/mman.h> void * mmap ( void * addr , size_t len , int prot , int flags , int fildes , off_t off ); int msync ( void * addr , size_t len , int flags ); //\u628a\u5728\u8be5\u5185\u5b58\u6bb5\u7684\u67d0\u4e2a\u90e8\u5206\u6216\u6574\u6bb5\u4e2d\u7684\u4fee\u6539\u5199\u56de\u5230\u88ab\u6620\u5c04\u7684\u6587\u4ef6\u4e2d int munmap ( void * addr , size_t len ); //\u91ca\u653e\u5185\u5b58\u6bb5 Linux\u73af\u5883 \u00b6 1 2 int main ( int argc , char * argv []) //argc\u662f\u7a0b\u5e8f\u53c2\u6570\u7684\u4e2a\u6570(\u5305\u62ec\u7a0b\u5e8f\u540d\u672c\u8eab)\uff0cargv\u662f\u4e00\u4e2a\u4ee3\u8868\u53c2\u6570\u81ea\u8eab\u7684\u5b57\u7b26\u4e32\u6570\u7ec4(\u7a0b\u5e8f\u540d\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20argv[0])\u3002 1 2 3 4 5 #include <stdio.h> int getopt ( int argc , char * const argv [], const char * optstring ); extern char * optarg ; extern int optind , opterr , optopt ; //getopt_long \u65e5\u5fd7 \u00b6 1 2 3 4 5 / usr / adm & / var / log / var / log / messages / var / log / mail / etc / syslog . conf / etc / syslog - ng / syslog - ng . conf //\u68c0\u67e5\u7cfb\u7edf\u914d\u7f6e 1 2 3 4 5 6 #include <syslog.h> void syslog ( int priority , const char * message , arguments ...); //\u8f6c\u6362\u63a7\u5236\u7b26%m\u7528\u4e8e\u63d2\u5165\u4e0e\u9519\u8bef\u53d8\u91cferrno\u5f53\u524d\u503c\u5bf9\u5e94\u7684\u51fa\u9519\u6d88\u606f\u5b57\u7b26\u4e32 void closelog ( void ); void openlog ( const char * ident , int logopt , int facility ); int setlogmask ( int maskpri ); \u6570\u636e\u7ba1\u7406 \u00b6 \u4ea4\u6362\u7a7a\u95f4(swap space) \u6309\u9700\u6362\u9875\u7684\u865a\u62df\u5185\u5b58\u7cfb\u7edf \u6587\u4ef6\u9501\u5b9a \u00b6 \u6587\u4ef6\u6bb5\u9501\u5b9a(\u6587\u4ef6\u533a\u57df\u9501\u5b9a) 1 2 3 #include <fcntl.h> int fcntl ( int fildes , int command , ...); int fcntl ( int fildes , int command , struct flock * flock_structure ); fcntl\u5bf9\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fdb\u884c\u64cd\u4f5c\uff0c\u5e76\u6839\u636ecommand\u53c2\u6570\u7684\u8bbe\u7f6e\u5b8c\u6210\u4e0d\u540c\u7684\u4efb\u52a1\u3002\u63d0\u4f9b\u4e863\u4e2a\u7528\u4e8e\u6587\u4ef6\u9501\u5b9a\u7684\u547d\u4ee4\u9009\u9879\u3002 1 2 3 F_GETLK F_SETLK F_SETLKW flock(\u6587\u4ef6\u9501)\u7ed3\u6784\u4f9d\u8d56\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u81f3\u5c11\u5305\u542b\u4ee5\u4e0b\u6210\u5458\uff1a 1 2 3 4 5 short l_type short l_whence //\u53d6\u503c\u5fc5\u987b\u662fSEEK_SET(\u6587\u4ef6\u5934),SEEK_CUR(\u5f53\u524d\u4f4d\u7f6e),SEEK_END(\u6587\u4ef6\u5c3e)\u4e2d\u7684\u4e00\u4e2a\u3002l_whence\u901a\u5e38\u8bbe\u7f6e\u4e3aSEEK_SET,\u8fd9\u65f6l_start\u5c31\u4ece\u6587\u4ef6\u7684\u5f00\u59cb\u8ba1\u7b97 off_t l_start //l_whence\u662fl_start\u7684\u76f8\u5bf9\u504f\u79fb\u4f4d\u7f6e\uff0cl_start\u662f\u8be5\u533a\u57df\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282 off_t l_len pid_t l_pid l_type\u6210\u5458\u7684\u53d6\u503c\u5b9a\u4e49\u5728\u5934\u6587\u4ef6fcntl.h\u4e2d 1 2 3 F_RDLCK //\u5171\u4eab(\u6216\u8bfb)\u9501\u3002\u8bb8\u591a\u4e0d\u540c\u7684\u8fdb\u7a0b\u53ef\u4ee5\u62e5\u6709\u6587\u4ef6\u540c\u4e00(\u6216\u8005\u91cd\u53e0)\u533a\u57df\u4e0a\u7684\u5171\u4eab\u9501\u3002\u53ea\u8981\u4efb\u4e00\u8fdb\u7a0b\u62e5\u6709\u4e00\u628a\u5171\u4eab\u9501\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u8fdb\u7a0b\u53ef\u4ee5\u518d\u83b7\u5f97\u8be5\u533a\u57df\u4e0a\u7684\u72ec\u5360\u9501\u3002\u4e3a\u4e86\u83b7\u5f97\u4e00\u628a\u5171\u4eab\u9501\uff0c\u6587\u4ef6\u5fc5\u987b\u4ee5\u201c\u8bfb\u201d\u6216\u201c\u8bfb\u5199\u201d\u65b9\u5f0f\u6253\u5f00 F_UNLCK //\u89e3\u9501\uff0c\u7528\u6765\u6e05\u9664\u9501 F_WRLCK //\u72ec\u5360(\u6216\u5199)\u9501\u3002\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5728\u6587\u4ef6\u7684\u4efb\u4e00\u7279\u5b9a\u533a\u57df\u62e5\u6709\u4e00\u628a\u72ec\u5360\u9501\u3002\u4e00\u65e6\u4e00\u4e2a\u8fdb\u7a0b\u62e5\u6709\u4e86\u8fd9\u6837\u4e00\u628a\u9501\uff0c\u4efb\u4f55\u5176\u4ed6\u8fdb\u7a0b\u90fd\u65e0\u6cd5\u5728\u8be5\u533a\u57df\u4e0a\u83b7\u5f97\u4efb\u4f55\u7c7b\u578b\u7684\u9501\u3002\u4e3a\u4e86\u83b7\u5f97\u4e00\u628a\u72ec\u5360\u9501\uff0c\u6587\u4ef6\u5fc5\u987b\u4ee5\u201c\u5199\u201d\u6216\u201c\u8bfb/\u5199\u201d\u65b9\u5f0f\u6253\u5f00 F_GETLK\u547d\u4ee4 \u7528\u4e8e\u83b7\u53d6fildes\u6253\u5f00\u7684\u6587\u4ef6\u7684\u9501\u4fe1\u606f\u3002\u5b83\u4e0d\u4f1a\u5c1d\u8bd5\u53bb\u9501\u5b9a\u6587\u4ef6\u3002 \u8c03\u7528\u8fdb\u7a0b\u628a\u81ea\u5df1\u60f3\u521b\u5efa\u7684\u9501\u7c7b\u578b\u4fe1\u606f\u4f20\u9012\u7ed9fcntl\uff0c\u4f7f\u7528F_GETLK\u547d\u4ee4\u7684fcntl\u5c31\u4f1a\u8fd4\u56de\u5c06\u4f1a\u963b\u6b62\u83b7\u53d6\u9501\u7684\u4efb\u4f55\u4fe1\u606f\u3002 \u8fdb\u7a0b\u53ef\u80fd\u4f7f\u7528F_GETLK\u8c03\u7528\u6765\u67e5\u770b\u6587\u4ef6\u4e2d\u67d0\u4e2a\u533a\u57df\u7684\u5f53\u524d\u9501\u72b6\u6001\u3002\u5982\u679c\u6587\u4ef6\u5df2\u88ab\u9501\u5b9a\u4ece\u800c\u963b\u6b62\u9501\u8bf7\u6c42\u6210\u529f\u6267\u884c\uff0cfcntl\u4f1a\u7528\u76f8\u5173\u4fe1\u606f\u8986\u76d6flock\u7ed3\u6784\u3002\u5982\u679c\u6240\u8bf7\u6c42\u53ef\u4ee5\u6210\u529f\u6267\u884c\uff0cflock\u7ed3\u6784\u5c06\u4fdd\u6301\u4e0d\u53d8\uff0c\u5982\u679cF_GETLK\u8c03\u7528\u65e0\u6cd5\u83b7\u5f97\u4fe1\u606f\uff0c\u5b83\u5c06\u8fd4\u56de-1\u8868\u660e\u5931\u8d25\u3002\u6210\u529f\u5c31\u8fd4\u56de\u975e-1\u503c\u3002 F_SETLK\u547d\u4ee4 \u5bf9fildes\u6307\u5411\u7684\u6587\u4ef6\u7684\u67d0\u4e2a\u533a\u57df\u52a0\u9501\u6216\u89e3\u9501\u3002flock\u7ed3\u6784\u4e2d\u4f7f\u7528\u7684\u503c:l_type,l_pid\u3002\u4e0eF_GETLK\u4e00\u6837\uff0c\u8981\u52a0\u9501\u7684\u533a\u57df\u7531flock\u7ed3\u6784\u4e2d\u7684l_start,l_whence\u548cl_len\u7684\u503c\u5b9a\u4e49\u3002 \u5982\u679c\u9501\u6210\u529f\uff0c\u8fd4\u56de\u975e-1\u503c\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002 F_SETLKW\u547d\u4ee4 \u4e0eF_SETLK\u76f8\u540c\uff0c\u4f46\u5728\u65e0\u6cd5\u83b7\u53d6\u9501\u65f6\uff0c\u8fd9\u4e2a\u8c03\u7528\u5c06\u7b49\u5f85\u76f4\u5230\u53ef\u4ee5\u4e3a\u6b62\u3002\u4e00\u65e6\u5f00\u59cb\u7b49\u5f85\uff0c\u53ea\u6709\u5728\u53ef\u4ee5\u83b7\u53d6\u9501\u6216\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\u65f6\u624d\u4f1a\u8fd4\u56de\u3002 MySQL \u00b6 \u8fde\u63a5 \u00b6 \u521d\u59cb\u5316\u4e00\u4e2a\u8fde\u63a5\u53e5\u67c4\u7ed3\u6784 \u5b9e\u9645\u8fdb\u884c\u8fde\u63a5 1 2 3 4 5 6 7 8 9 10 11 #include <mysql.h> MYSQL * mysql_init ( MYSQL * ); MYSQL * mysql_real_connect ( MYSQL * connection , //\u88abmysql_init\u521d\u59cb\u5316\u7684\u7ed3\u6784 const char * server_host , //\u53ef\u4ee5\u662f\u4e3b\u673a\u540d\u4e5f\u53ef\u4ee5\u662fip\u5730\u5740 const char * sql_user_name , const char * sql_password , const char * db_name , unsigned int port_number , //0 const char * unix_socket_name , //NULL unsigned int flags ); void mysql_close ( MYSQL * connection ); 1 2 3 4 5 6 7 8 int mysql_options ( MYSQL * connection , enum option_to_set , const char * argument ); /****** 1. \u5728mysql_init\u548cmysql_real_connect\u4e4b\u95f4\u5373\u53ef\u3002 2. MYSQL_OPT_CONNECT_TIMEOUT const unsigned int * \u8fde\u63a5\u8d85\u65f6\u4e4b\u524d\u7684\u7b49\u5f85\u79d2\u901f 3. MYSQL_OPT_COMPRESS None,\u4f7f\u7528NULL \u7f51\u7edc\u8fde\u63a5\u4e2d\u4f7f\u7528\u538b\u7f29\u673a\u5236 4. MYSQL_INIT_COMMAND const char * \u6bcf\u6b21\u5efa\u7acb\u540e\u53d1\u9001\u7684\u547d\u4ee4 5. \u6210\u529f\u7684\u8c03\u7528\u5c06\u8fd4\u56de0\u3002 ******/ \u9519\u8bef\u5904\u7406 \u00b6 1 2 unsigned int mysql_errno ( MYSQL * connection ); char * mysql_error ( MYSQL * connection ); \u6267\u884c \u00b6 \u4e0d\u8fd4\u56de\u6570\u636e\u7684\u8bed\u53e5UPDATE,DELETE,INSERT \u00b6 1 my_ulonglong mysql_affected_rows ( MYSQL * connection ); //\u7528\u4e8e\u68c0\u67e5\u53d7\u5f71\u54cd\u7684\u884c\u6570 \u8fd4\u56de\u6570\u636e\u7684\u8bed\u53e5 \u00b6 1 2 3 4 5 6 7 8 9 10 MYSQL_RES * mysql_store_result ( MYSQL * connection ); //\u63d0\u53d6\u6240\u6709\u7684\u6570\u636e my_ulonglong mysql_num_rows ( MYSQL_RES * result ); //\u8fd4\u56de\u7ed3\u679c\u96c6\u4e2d\u7684\u884c\u6570 MYSQL_ROW mysql_fetch_row ( MYSQL_RES * result ); //\u4ecemysql_store_result\u7684\u7ed3\u679c\u4e2d\u63d0\u53d6\u4e00\u884c\uff0c\u653e\u5165\u4e00\u4e2a\u884c\u7ed3\u6784\u4e2d void mysql_data_seek ( MYSQL_RES * result , myulonglong offset ); //\u5728\u7ed3\u679c\u96c6\u4e2d\u8df3\u8f6c\uff0c\u8bbe\u7f6e\u88ab\u4e0b\u4e00\u4e2amysql_fetch_row\u64cd\u4f5c\u7684\u8fd4\u56de\u7684\u884c MYSQL_ROW_OFFSET mysql_row_tell ( MYSQL_RES * result ); //\u8fd4\u56de\u4e00\u4e2a\u504f\u79fb\u503c\uff0c\u8868\u793a\u7ed3\u679c\u96c6\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e MYSQL_ROW_OFFSET mysql_row_seek ( MYSQL_RES * result , MYSQL_ROW_OFFSET offset ); //\u5728\u7ed3\u679c\u96c6\u4e2d\u79fb\u52a8\u5f53\u524d\u4f4d\u7f6e\uff0c\u8fd4\u56de\u4e4b\u524d\u4f4d\u7f6e void mysql_free_result ( MYSQL_RES * result ); MYSQL_RES * mysql_use_result ( MYSQL * connection ); //\u9010\u884c\u63d0\u53d6\u6570\u636e\uff0c\u672a\u63d0\u53d6\u7684\u6570\u636e\u7f51\u7edc\u4e2d unsigned int mysql_field_count ( MYSQL * connection ); MYSQL_FIELD * mysql_fetch_field ( MYSQL_RES * result ); \u5f00\u53d1\u5de5\u5177 \u00b6 make \u00b6 makefile \u00b6 \u540e\u7f00\u548c\u6a21\u5f0f\u89c4\u5219 \u00b6 makefile\u6587\u4ef6\u548c\u5b50\u76ee\u5f55 \u00b6 \u8c03\u8bd5 \u00b6 \u9884\u5904\u7406&\u5b8f \u00b6 GDB\u8c03\u8bd5 \u00b6 \u8fdb\u7a0b\u4e0e\u4fe1\u53f7 \u00b6 UNIX\u6807\u51c6\u5b9a\u4e49\u8fdb\u7a0b\u4e3a\uff1a\u4e00\u4e2a\u5176\u4e2d\u8fd0\u884c\u7740\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u548c\u8fd9\u4e9b\u7ebf\u7a0b\u6240\u9700\u8981\u7684\u7cfb\u7edf\u8d44\u6e90\u3002 \u542f\u52a8\u65b0\u8fdb\u7a0b \u5b83\u5fc5\u987b\u7528\u4e00\u4e2ashell\u6765\u542f\u52a8\u7a0b\u5e8f\uff0c\u4f7f\u7528system\u51fd\u6570\u7684\u6548\u7387\u4e0d\u9ad8\u3002 1 2 #include <stdlib.h> int system ( const char * string ); \u66ff\u6362\u8fdb\u7a0b\u6620\u50cfexec\u7cfb\u5217\u51fd\u6570 \u00b6 exec\u7cfb\u5217\u51fd\u6570\u628a\u5f53\u524d\u8fdb\u7a0b\u66ff\u6362\u4e3a\u4e00\u4e2a\u65b0\u8fdb\u7a0b\u3002\u53ef\u4ee5\u4f7f\u7528exec\u51fd\u6570\u8bb2\u7a0b\u5e8f\u7684\u6267\u884c\u4ece\u4e00\u4e2a\u7a0b\u5e8f\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u3002exec\u51fd\u6570\u6bd4system\u51fd\u6570\u66f4\u6709\u6548\uff0c\u65b0\u7684\u7a0b\u5e8f\u542f\u52a8\u540e\uff0c\u539f\u6765\u7684\u7a0b\u5e8f\u4e0d\u518d\u8fd0\u884c\u3002 1 2 3 4 5 6 7 8 #include <stdio.h> char ** environ ; int execl ( const char * path , const char * arg0 , ..., ( char * ) 0 ); int execlp ( const char * file , const char * arg0 , ..., ( char * ) 0 ); int execle ( const char * path , const char * arg0 , ..., ( char * ) 0 , char * const envp []); int execv ( const char * path , char * const argv []); int execvp ( const char * file , char * const argv []); int execve ( const char * path , char * const argv [], char * const envp []); \u590d\u5236\u8fdb\u7a0b\u6620\u50cffork \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <sys/types.h> #include <unistd.h> pid_t fork ( void ); pid_t new_pid ; new_pid = fork (); switch ( new_pid ) { case - 1 : //error break ; case 0 : //child break ; default : //parent break ; } wait\u7b49\u5f85\u4e00\u4e2a\u8fdb\u7a0b 1 2 3 4 5 #include <sys/types.h> #include <sys/wait.h> pid_t wait ( int * stat_loc ); pid_t waitpid ( pid_t pid , int * stat_loc , int options ); /*pid\u53c2\u6570\u5982\u679c\u4e3a-1\uff0cwaitpid\u5c06\u8fd4\u56de\u4efb\u4e00\u5b50\u8fdb\u7a0b\u4fe1\u606f\u3002*/ \u50f5\u5c38\u8fdb\u7a0b \u5b50\u8fdb\u7a0b\u7ec8\u6b62\u65f6\uff0c\u4e0e\u7236\u8fdb\u7a0b\u4e4b\u95f4\u7684\u5173\u8054\u8fd8\u4f1a\u4fdd\u6301\uff0c\u76f4\u5230\u7236\u8fdb\u7a0b\u4e5f\u6b63\u5e38\u7ec8\u6b62\u6216\u7236\u8fdb\u7a0b\u8c03\u7528wait\u624d\u7ed3\u675f\u3002\u4ee3\u8868\u5b50\u8fdb\u7a0b\u7684\u8868\u9879\u4e0d\u4f1a\u7acb\u523b\u91ca\u653e\uff0c\u4ecd\u7136\u5b58\u5728\u4e8e\u7cfb\u7edf\u4e2d\uff0c\u5b83\u7684\u9000\u51fa\u7801\u4ecd\u7136\u4fdd\u5b58\uff0c\u6b64\u65f6\u5b83\u6210\u4e3a\u4e00\u4e2a\u50f5\u5c38\u8fdb\u7a0b\u3002 \u4fe1\u53f7 \u00b6 \u4fe1\u53f7\u662funix\u548clinux\u7cfb\u7edf\u54cd\u5e94\u67d0\u4e9b\u6761\u4ef6\u800c\u4ea7\u751f\u7684\u4e00\u4e2a\u4e8b\u4ef6\u3002 \u5904\u7406\u4fe1\u53f7 1 2 #include <stdio.h> void ( * signal ( int sig , void ( * func )( int )))( int ); \u53d1\u9001\u4fe1\u53f7 1 2 3 4 5 6 7 8 #include <sys/types.h> #include <signal.h> int kill ( pid_t pid , int sig ); //\u6210\u529f0\uff0c\u5931\u8d25-1 #include <unistd.h> unsigned int alarm ( unsigned int seconds ); //\u5b9a\u65f6\u53d1\u9001SIGALRM\u4fe1\u53f7 int pause ( void ); //\u628a\u7a0b\u5e8f\u6302\u8d77\u76f4\u5230\u4e00\u4e2a\u4fe1\u53f7\u51fa\u73b0\u4e3a\u6b62 \u4e00\u4e2a\u5065\u58ee\u7684\u4fe1\u53f7\u63a5\u53e3 1 2 #include <signal.h> int sigaction ( int sig , const struct sigaction * act , struct sigaction * oact ); sigaction\u7ed3\u6784\u6210\u5458 1 2 3 void ( * ) ( int ) sa_handler //\u51fd\u6570\u6307\u9488\uff0c\u6307\u5411\u63a5\u6536\u5230\u4fe1\u53f7sig\u65f6\u5c06\u88ab\u8c03\u7528\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\u53ef\u4ee5\u8bbe\u7f6e\u4e3aSIG_IGN\u548cSIG_DFL,\u5206\u522b\u8868\u793a\u5ffd\u7565\u548c\u6062\u590d sigset_t sa_mask //\u4fe1\u53f7\u96c6,\u52a0\u5165\u5230\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5c4f\u853d\u5b57\u6bb5\u7684 int sa_flags // \u4fe1\u53f7\u96c6 1 2 3 4 5 6 7 8 9 10 #include <signal.h> int sigaddset ( sigset_t * set , int signo ); //\u589e\u52a0\u7ed9\u5b9a\u7684\u4fe1\u53f7 int sigemptyset ( sigset_t * set ); //\u5c06\u4fe1\u53f7\u96c6\u521d\u59cb\u5316\u4e3a\u7a7a int sigfillset ( sigset_t * set ); //\u5c06\u4fe1\u53f7\u96c6\u521d\u59cb\u5316\u4e3a\u5305\u542b\u6240\u6709\u5df2\u5b9a\u4e49\u7684\u4fe1\u53f7 int sigdelset ( sigset_t * set , int signo ); //\u5220\u9664\u7ed9\u5b9a\u7684\u4fe1\u53f7 int sigismember ( sigset_t * set , int signo ); //\u5224\u65ad\u4e00\u4e2a\u7ed9\u5b9a\u7684\u4fe1\u53f7\u662f\u5426\u662f\u4e00\u4e2a\u4fe1\u53f7\u96c6\u7684\u6210\u5458 int sigprocmask ( int how , const sigset_t * set , sigset_t * oset ); int sigpending ( sigset_t * set ); int sigsuspend ( const sigset_t * sigmask ); POSIX\u7ebf\u7a0b \u00b6 \u7ebf\u7a0b\u662f\u4e00\u4e2a\u8fdb\u7a0b\u5185\u90e8\u7684\u4e00\u4e2a\u63a7\u5236\u5e8f\u5217\u3002 \u5f53\u8fdb\u7a0b\u6267\u884cfork\u8c03\u7528\u65f6\uff0c\u5c06\u521b\u5efa\u51fa\u8be5\u8fdb\u7a0b\u7684\u4e00\u4e2a\u65b0\u526f\u672c\u3002\u8fd9\u4e2a\u65b0\u8fdb\u7a0b\u62e5\u6709\u81ea\u5df1\u7684\u53d8\u91cf\u548c\u81ea\u5df1\u7684PID\uff0c\u5b83\u7684\u65f6\u95f4\u8c03\u5ea6\u4e5f\u662f\u72ec\u7acb\u7684\uff0c\u5b83\u7684\u6267\u884c\u51e0\u4e4e\u5b8c\u5168\u72ec\u7acb\u4e8e\u7236\u8fdb\u7a0b\u3002 \u5f53\u8fdb\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u65f6\uff0c\u65b0\u7684\u6267\u884c\u7ebf\u7a0b\u5c06\u62e5\u6709\u81ea\u5df1\u7684\u6808(\u56e0\u6b64\u4e5f\u6709\u81ea\u5df1\u7684\u5c40\u90e8\u53d8\u91cf),\u4f46\u4e0e\u5b83\u7684\u521b\u5efa\u8005\u5171\u4eab\u5168\u5c40\u53d8\u91cf\u3001\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u548c\u5f53\u524d\u7684\u76ee\u5f55\u72b6\u6001\u3002 _PEENTRANT \u5b8f\u5b9a\u4e49\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u6211\u4eec\u9700\u8981\u53ef\u91cd\u5165\u529f\u80fd\u3002 1 2 3 #include <pthread.h> int pthread_create ( pthread_t * thread , pthread_attr_t * attr , void * ( * start_routine )( void * ), void * arg ); 1. \u7b2c\u4e00\u4e2a\u53c2\u6570\u5199\u5165\u4e00\u4e2a\u6807\u8bc6\u7b26\u6765\u5f15\u7528\u65b0\u7ebf\u7a0b 2. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u7ebf\u7a0b\u5c5e\u6027\uff0c\u4e00\u822c\u4e0d\u9700\u8981\u65f6\u8bbe\u7f6e\u4e3aNULL 3. \u7b2c\u4e09\u4e2a\u53c2\u6570\u542f\u52a8\u7ebf\u7a0b\u5c06\u8981\u6267\u884c\u7684\u51fd\u6570 4. \u7b2c\u56db\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u6267\u884c\u51fd\u6570\u7684\u53c2\u6570 \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002 1 2 3 4 #include <pthread.h> void pthread_exit ( void * retval ); //\u7ec8\u6b62\u8c03\u7528\u5b83\u7684\u7ebf\u7a0b int pthread_join ( pthread_t th , void ** thread_return ); //\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6267\u884c\u4e00\u4e2a\u6307\u9488\uff0c\u5b83\u6307\u5411\u53e6\u4e00\u4e2a\u6307\u9488\uff0c\u800c\u540e\u8005\u6307\u5411\u7ebf\u7a0b\u7684\u8fd4\u56de\u503c\u3002 \u68c0\u67e5\u5934\u6587\u4ef6/usr/include/pthread.h\u3002\u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u663e\u793a\u7684\u7248\u6743\u65e5\u671f\u662f2003\u5e74\u6216\u66f4\u665a\uff0c\u90a3\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u4f7f\u7528\u7684\u662fNPTL\u5b9e\u73b0\u3002 1 2 3 4 gcc - D_REENTRANT - I / usr / include / nptl thread1 . c - o thread1 - L / usr / lib / nptl - lpthread //\u5982\u679c\u7cfb\u7edf\u9ed8\u8ba4\u4f7f\u7528NPTL\u7ebf\u7a0b\u5e93\uff0c\u90a3\u4e48\u7f16\u8bd1\u7a0b\u5e8f\u5c31\u65e0\u9700\u52a0\u4e0a-I\u548c-L\u9009\u9879\u3002 gcc - D_REENTRANT thread1 . c - o thread1 - lpthread \u540c\u6b65 \u00b6 \u4fe1\u53f7\u91cf \u00b6 1 2 3 4 5 6 7 8 #include <semaphore.h> int sem_init ( sem_t * sem , int pshared , unsigned int value ); //pshared\u53c2\u6570\u63a7\u5236\u4fe1\u53f7\u91cf\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4e3a0\uff0c\u8868\u793a\u8fd9\u4e2a\u4fe1\u53f7\u91cf\u662f\u5f53\u524d\u8fdb\u7a0b\u7684\u5c40\u90e8\u4fe1\u53f7\u91cf\uff0c\u5426\u5219\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u91cf\u5c31\u53ef\u4ee5\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u3002 //\u8be5\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u662fsem_init\u8c03\u7528\u521d\u59cb\u5316\u7684\u4fe1\u53f7\u91cf int sem_wait ( sem_t * sem ); //\u51cf1\uff0c\u5b83\u4f1a\u7b49\u5f85\u4fe1\u53f7\u91cf\u6709\u4e2a\u975e\u96f6\u503c\u624d\u4f1a\u5f00\u59cb\u51cf\u6cd5\u64cd\u4f5c\u3002\u5982\u679c\u5bf9\u503c\u4e3a0\u7684\u4fe1\u53f7\u91cf\u8c03\u7528sem_wait\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a\u7b49\u5f85\u3002 int sem_post ( sem_t * sem ); //\u4ee5\u539f\u5b50\u64cd\u4f5c\u7684\u65b9\u5f0f\u7ed9\u4fe1\u53f7\u91cf\u7684\u503c\u52a01\u3002 int sem_destroy ( sem_t * sem ); \u4e92\u65a5\u91cf \u00b6 1 2 3 4 5 6 7 8 9 10 11 #include <pthread.h> int pthread_mutex_init ( pthread_mutex_t * mutex , const pthread_mutexattr_t * mutexattr ); int pthread_mutex_lock ( pthread_mutex_t * mutex ); int pthread_mutex_unlock ( pthread_mutex_t * mutex ); int pthread_mutex_destroy ( pthread_mutex_t * mutex ); //\u6210\u529f\u65f6\u8fd4\u56de0\uff0c\u5931\u8d25\u65f6\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002 \u7ebf\u7a0b\u5c5e\u6027 \u00b6 1 2 #include <pthread.h> int pthread_attr_init ( pthread_attr_t * attr ); \u7ebf\u7a0b\u8c03\u5ea6 \u53d6\u6d88\u7ebf\u7a0b \u591a\u7ebf\u7a0b \u8fdb\u7a0b\u95f4\u901a\u4fe1\uff1a\u7ba1\u9053 \u00b6 \u8fdb\u7a0b\u7ba1\u9053 \u00b6 1 2 3 4 #include <stdio.h> FILE * popen ( const char * command , const char * open_mode ); int pclose ( FILE * stream_to_close ); //\u8c03\u7528popen\u51fd\u6570\u8fd4\u56deFILE*\u6587\u4ef6\u6307\u9488\u6d41\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7fread\u4e0efwrite\u51fd\u6570\u6765\u5904\u7406\u6d41 \u5e95\u5c42\u7684pipe\u51fd\u6570 \u00b6 \u8fd9\u4e2a\u51fd\u6570\u5728\u4e24\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u4e0d\u9700\u8981\u542f\u52a8\u4e00\u4e2ashell\u6765\u89e3\u91ca\u8bf7\u6c42\u547d\u4ee4 1 2 3 #include <unistd.h> int pipe ( int file_descriptor [ 2 ]); //pipe\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u7531\u4e24\u4e2a\u6574\u6570\u7c7b\u578b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ec4\u6210\u7684\u6574\u7ec4\u7684\u6307\u9488\u3002 \u5199\u5165file_descriptor[1]\u7684\u6240\u6709\u6570\u636e\u90fd\u53ef\u4ee5\u4ecefile_descriptor[0]\u8bfb\u56de\u6765\u3002 pipe\u4f7f\u7528\u7684\u662f\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u662f\u6587\u4ef6\u6d41\uff0c\u6240\u6709\u5fc5\u987b\u4f7f\u7528\u5e95\u5c42\u7684read\u548cwrite\u8c03\u7528\u6765\u8bbf\u95ee\u6570\u636e\u3002 \u547d\u540d\u7ba1\u9053(\u4e0d\u5148\u5173\u7684\u8fdb\u7a0b\u4e4b\u95f4) \u00b6 \u547d\u4ee4\u884c\u4e0a\u521b\u5efa\u547d\u540d\u7ba1\u9053 1 2 mknod filename p mkfifo filename \u7a0b\u5e8f\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <sys/types.h> #include <sys/stat.h> int mkfifo ( const char * filename , mode_t mode ); int mknod ( const char * filename , mode_t mode | S_IFIFO , ( dev_t ) 0 ); /*open\u8c03\u7528\u5c06\u963b\u585e\uff0c\u9664\u975e\u6709\u4e00\u4e2a\u8fdb\u7a0b\u4ee5\u5199\u65b9\u5f0f\u6253\u5f00\u540c\u4e00\u4e2aFIFO\uff0c\u5426\u5219\u4e0d\u4f1a\u8fd4\u56de\u3002*/ open ( const char * path , O_RDONLY ); /*\u5373\u4f7f\u6ca1\u6709\u5176\u4ed6\u8fdb\u7a0b\u4ee5\u5199\u65b9\u5f0f\u6253\u5f00FIFO\uff0c\u8fd9\u4e2aopen\u8c03\u7528\u4e5f\u5c06\u6210\u529f\u5e76\u7acb\u523b\u8fd4\u56de\u3002*/ open ( const char * path , O_RDONLY | O_NONBLOCK ); /*open\u8c03\u7528\u5c06\u963b\u585e\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u8fdb\u7a0b\u4ee5\u8bfb\u65b9\u5f0f\u6253\u5f00\u540c\u4e00\u4e2aFIFO\u4e3a\u6b62*/ open ( const char * path , O_WRONLY ); /*\u7acb\u523b\u8fd4\u56de*/ open ( const char * path , O_WRONLY | O_NONBLOCK ); \u4fe1\u53f7\u91cf\u3001\u5171\u4eab\u5185\u5b58\u548c\u6d88\u606f\u961f\u5217 \u00b6 \u4fe1\u53f7\u91cf \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <sys/sem.h> /*\u76f4\u63a5\u63a7\u5236\u4fe1\u53f7\u91cf\u4fe1\u606f*/ int semctl ( int sem_id , int sem_num , int command , ...); union semun { int val ; struct semid_ds * buf ; unsigned short * array ; } /*\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4fe1\u53f7\u91cf\u6216\u53d6\u5f97\u4e00\u4e2a\u5df2\u6709\u4fe1\u53f7\u91cf\u7684\u952e num_sems\u53c2\u6570\u6307\u5b9a\u9700\u8981\u7684\u4fe1\u53f7\u91cf\u6570\u76ee\uff0c\u5b83\u51e0\u4e4e\u603b\u662f\u53d6\u503c\u4e3a1 \u6210\u529f\u65f6\u8fd4\u56de\u4e00\u4e2a\u6b63\u6570\u5373\u5176\u4ed6\u4fe1\u53f7\u91cf\u51fd\u6570\u5c06\u7528\u5230\u7684\u4fe1\u53f7\u91cf\u6807\u8bc6\u7b26\uff0c\u5931\u8d25\u8fd4\u56de-1*/ int semget ( key_t key , int num_sems , int sem_flags ); /*\u7528\u4e8e\u6539\u53d8\u4fe1\u53f7\u91cf\u7684\u503c*/ int semop ( int sem_id , struct sembuf * sem_ops , size_t num_sem_ops ); struct sembuf { short sem_num ; short sem_op ; short sem_flg ; } \u5171\u4eab\u5185\u5b58 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <sys/shm.h> /*\u521a\u521b\u5efa\u5171\u4eab\u5185\u5b58\u65f6\uff0c\u4e0d\u80fd\u88ab\u4efb\u4f55\u8fdb\u7a0b\u8bbf\u95ee\uff0cshmat\u51fd\u6570\u542f\u7528\u5bf9\u8be5\u5171\u4eab\u5185\u5b58\u7684\u8bbf\u95ee\uff0c\u5c06\u5176\u8fde\u63a5\u5230\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570shm_addr\u6307\u5b9a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u4e2d\u7684\u5730\u5740\u4f4d\u7f6e\uff0c\u4e00\u822c\u662f\u7a7a\u6307\u9488\uff0c\u8868\u793a\u8ba9\u7cfb\u7edf\u6765\u9009\u62e9\u5171\u4eab\u5185\u5b58\u51fa\u73b0\u7684\u5730\u5740\u3002*/ void * shmat ( int shm_id , const void * shm_addr , int shmflg ); /**/ int shmctl ( int shm_id , int cmd , struct shmid_ds * buf ); struct shmid_ds { uid_t shm_perm . uid ; uid_t shm_perm . gid ; mode_t shm_perm . mode ; } /*\u5c06\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002 \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002 \u5206\u79bb\u5e76\u672a\u5220\u9664\uff0c\u53ea\u662f\u4f7f\u5f97\u8be5\u5171\u4eab\u5185\u5b58\u5bf9\u5f53\u524d\u8fdb\u7a0b\u4e0d\u518d\u53ef\u7528*/ int shmdt ( const void * shm_addr ); /*\u521b\u5efa\u5171\u4eab\u5185\u5b58 \u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6807\u8bc6\u7b26 \u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u6307\u5b9a\u9700\u8981\u5171\u4eab\u7684\u5185\u5b58\u5bb9\u91cf*/ int shmget ( key_t key , size_t size , int shmflg ); \u6d88\u606f\u961f\u5217 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <sys/msg.h> /**/ int msgctl ( int msqid , int cmd , struct msqid_ds * buf ); struct msqid_ds { uid_t msg_perm . uid ; uid_t msg_perm . gid ; mode_t msg_perm . mode ; } /*\u521b\u5efa\u548c\u8bbf\u95ee\u4e00\u4e2a\u6d88\u606f\u961f\u5217 \u6210\u529f\u65f6msgget\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5373\u6807\u8bc6\u7b26\uff0c\u5931\u8d25\u8fd4\u56de-1*/ int msgget ( key_t key , int msgflg ); /*\u4ece\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u4e2d\u83b7\u53d6\u6d88\u606f*/ int msgrcv ( int msqid , void * msg_ptr , size_t msg_sz , long int msgtype , int msgflg ); /*\u7528\u6765\u628a\u6d88\u606f\u6dfb\u52a0\u5230\u6d88\u606f\u961f\u5217\u4e2d*/ int msgsnd ( int msqid , const void * msg_ptr , size_t msg_sz , int msgflg ); struct my_message { long int message_type ; //data } \u5957\u63a5\u5b57 \u00b6 \u5957\u63a5\u5b57\u76843\u4e2a\u5c5e\u6027\uff1a\u57df(domain)\u3001\u7c7b\u578b(type)\u3001\u534f\u8bae(protocol)\u3002 1 2 3 4 #include <sys/types.h> #include <sys/socket.h> int socket ( int domain , int type , int protocol ); |\u57df|\u8bf4\u660e| |---|---| |AF_UNIX|unix\u57df\u534f\u8bae(\u6587\u4ef6\u7cfb\u7edf\u5957\u63a5\u5b57)| |AF_INET|ARPA\u56e0\u7279\u7f51\u534f\u8bae(UNIX\u7f51\u7edc\u5957\u63a5\u5b57)| type\u53c2\u6570\u6307\u5b9a\u5957\u63a5\u5b57\u7684\u901a\u4fe1\u7279\u6027\u3002\u5b83\u7684\u53d6\u503c\u5305\u62ecSOCK_STREAM\u548cSOCK_DGRAM\u3002 AF_UNIX\u57df\u5957\u63a5\u5b57\u5730\u5740\u683c\u5f0f 1 2 3 4 struct sockaddr_un { sa_family_t sun_family ; char sun_path []; } AF_INET\u57df\u5957\u63a5\u5b57\u5730\u5740\u683c\u5f0f 1 2 3 4 5 6 7 8 struct sockaddr_in { short int sin_family ; unsigned short int sin_port ; struct in_addr sin_addr ; } struct in_addr { unsigned long int s_addr ; } \u547d\u540d\u5957\u63a5\u5b57 \u00b6 1 2 3 #include <sys/socket.h> /*bind\u7cfb\u7edf\u8c03\u7528\u628a\u53c2\u6570address\u4e2d\u7684\u5730\u5740\u5206\u914d\u7ed9\u4e0e\u6587\u4ef6\u63cf\u8ff0\u7b26socket\u5173\u8054\u7684\u672a\u547d\u540d\u5957\u63a5\u5b57\u6210\u529f\u65f6\u8fd4\u56de0\uff0c\u5931\u8d25\u65f6\u8fd4\u56de-1*/ int bind ( int socket , const struct sockaddr * address , size_t address_len ); \u521b\u5efa\u5957\u63a5\u5b57\u961f\u5217 \u00b6 1 2 3 4 #include <sys/socket.h> /*listen\u51fd\u6570\u5c06\u961f\u5217\u957f\u5ea6\u8bbe\u7f6e\u4e3abacklcg\u53c2\u6570\u7684\u503c \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1*/ int listen ( int socket , int backlog ); \u63a5\u53d7\u8fde\u63a5 \u00b6 1 2 #include <sys/socket.h> int accept ( int socket , struct sockaddr * address , size_t * address_len ); \u5982\u679c\u5957\u63a5\u5b57\u961f\u5217\u4e2d\u6ca1\u6709\u672a\u5904\u7406\u7684\u8fde\u63a5\uff0caccept\u5c06\u963b\u585e\u76f4\u5230\u5ba2\u6237\u5efa\u7acb\u8fde\u63a5\u4e3a\u6b62\u3002\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5957\u63a5\u5b57\u6587\u4ef6\u79d2\u901f\u7b26\u8bbe\u7f6e\u6807\u5fd7\u6765\u6539\u53d8\u8fd9\u4e00\u884c\u4e3a\u3002 1 2 int flags = fcntl ( socket , F_GETFL , 0 ); fcntl ( socket , F_SETFL , O_NONBLOCK | flags ); \u8bf7\u6c42\u8fde\u63a5 \u00b6 1 2 #include <sys/socket.h> int connect ( int socket , const struct sockaddr * address , size_t address_len ); //\u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25-1 \u4e3b\u673a\u5b57\u8282\u5e8f\u548c\u7f51\u7edc\u5b57\u8282\u5e8f \u00b6 1 2 3 4 5 #include <netinet/in.h> unsigned long int htonl ( unsigned long int hostlong ); unsigned short int htons ( unsigned short int hostshort ); unsigned long int ntohl ( unsigned long int netlong ); unsigned long int ntohs ( unsigned short int netshort ); \u5957\u63a5\u5b57\u9009\u9879 \u00b6 1 2 #include <sys/socket.h> int setsockopt ( int socket , int level , int option_name , const void * option_value , size_t option_len ); select\u7cfb\u7edf\u8c03\u7528 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <sys/types.h> #include <sys/time.h> void FD_ZERO ( fd_set * fdset ); //\u5c06fd_set\u521d\u59cb\u5316\u4e3a\u7a7a\u96c6\u5408 void FD_CLR ( int fd , fd_set * fdset ); //\u8bbe\u7f6e\u7531\u53c2\u6570fd\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 void FD_SET ( int fd , fd_set * fdset ); //\u6e05\u9664\u7531\u53c2\u6570fd\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 int FD_ISSET ( int fd , fd_set * fdset ); //\u53c2\u6570fd\u6307\u5411\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u7531\u53c2\u6570fdset\u6307\u5411\u7684fd_set\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u975e\u96f6\u503c\u3002 struct timeval { time_t tv_sec ; long tv_usec ; } //\u8bbe\u5b9a\u8d85\u65f6\u503c\u6765\u9632\u6b62\u65e0\u9650\u671f\u7684\u963b\u585e /*select\u8c03\u7528\u7528\u4e8e\u6d4b\u8bd5\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\u4e2d\uff0c\u662f\u5426\u6709\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u5df2\u5904\u4e8e\u53ef\u8bfb\u72b6\u6001\u6216\u53ef\u5199\u72b6\u6001\u6216\u9519\u8bef\u72b6\u6001\uff0c\u5b83\u5c06\u963b\u585e\u4ee5\u7b49\u5f85\u67d0\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fdb\u5165\u4e0a\u8ff0\u8fd9\u4e9b\u72b6\u6001\u3002*/ int select ( int nfds , fd_set * readfds , fd_set * writefds , fd_set * errorfds , struct timeval * timeout );","title":"Linux\u7f16\u7a0b\u57fa\u7840"},{"location":"os/linux/linux_program/#_1","text":"1 2 3 / dev / console //\u7cfb\u7edf\u63a7\u5236\u53f0 / dev / tty //\u63a7\u5236\u7ec8\u7aef / dev / null","title":"\u6587\u4ef6\u64cd\u4f5c"},{"location":"os/linux/linux_program/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <unistd.h> size_t write ( int fildes , const void * buf , size_t nbytes ); //\u628a\u7f13\u51b2\u533abuf\u524dnbytes\u4e2a\u5b57\u8282\u5199\u5165\u4e0e\u6587\u4ef6\u63cf\u8ff0\u7b26fildes\u5173\u8054\u7684\u6587\u4ef6\u4e2d\u3002 size_t read ( int fildes , void * buf , size_t nbytes ); //\u4ece\u6587\u4ef6\u63cf\u8ff0\u7b26fildes\u76f8\u5173\u7684\u6587\u4ef6\u91cc\u8bfb\u5165nbytes\u4e2a\u5b57\u8282\u6570\u636e\uff0c\u5b58\u653e\u5230buf\u4e2d\u3002 int close ( int fildes ); #include <fcntl.h> #include <sys/types.h> #include <sys/stat.h> int open ( const char * path , int oflags ); int open ( const char * path , int oflags , mode_t mode ); off_t lseek ( int fildes , off_t offset , int whence ); //\u5bf9\u6587\u4ef6\u63cf\u8ff0\u7b26fildes\u7684\u8bfb\u5199\u6307\u9488\u8fdb\u884c\u8bbe\u7f6e\u3002 int fstat ( int fildes , struct stat * buf ); //\u8fd4\u56de\u4e0e\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u5173\u7684\u6587\u4ef6\u7684\u72b6\u6001\u4fe1\u606f\uff0c\u5199\u5165buf\u7ed3\u6784 int stat ( const char * path , struct stat * buf ); //\u5f53\u6587\u4ef6\u662f\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5\u65f6\uff0c\u8fd4\u56de\u8be5\u7b26\u53f7\u94fe\u63a5\u6307\u5411\u7684\u6587\u4ef6\u7684\u4fe1\u606f\u3002 int lstat ( const char * path , struct stat * buf ); //\u5f53\u6587\u4ef6\u662f\u4e00\u4e2a\u7b26\u53f7\u94fe\u63a5\u65f6\uff0c\u8fd4\u56de\u8be5\u7b26\u53f7\u94fe\u63a5\u672c\u8eab\u7684\u4fe1\u606f\u3002 int dup ( int fildes ); //\u8d4b\u503c\u6587\u4ef6\u63cf\u8ff0\u7b26fildes\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u6587\u4ef6\u63cf\u8ff0\u7b26 int dup2 ( int fildes , int fildes2 ); //\u901a\u8fc7\u660e\u786e\u6307\u5b9a\u6728\u529e\u6cd5\u63cf\u8ff0\u7b26\u6765\u628a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u590d\u5236\u4e3a\u53e6\u5916\u4e00\u4e2a","title":"\u5e95\u5c42\u6587\u4ef6\u8bbf\u95ee"},{"location":"os/linux/linux_program/#io","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //stdin,stdout,stderr #include <stdio.h> FILE * fopen ( const char * filename , const char * mode ); size_t fread ( void * ptr , size_t size , size_t nitems , FILE * stream ); //\u6570\u636e\u4ece\u6587\u4ef6\u6d41stream\u8bfb\u5230\u7531ptr\u6307\u5411\u7684\u6570\u636e\u7f13\u51b2\u533a\u91cc\u3002size\u53c2\u6570\u6307\u5b9a\u6bcf\u4e2a\u6570\u636e\u8bb0\u5f55\u7684\u957f\u5ea6\uff0c\u8ba1\u6570\u5668nitems\u7ed9\u51fa\u8981\u4f20\u8f93\u7684\u8bb0\u5f55\u4e2a\u6570 size_t fwrite ( const void * ptr , size_t size , size_t nitems , FILE * stream ); int fclose ( FILE * stream ); int fflush ( FILE * stream ); //\u628a\u6587\u4ef6\u6d41\u91cc\u7684\u6240\u6709\u672a\u5199\u51fa\u6570\u636e\u7acb\u523b\u5199\u51fa\u3002fclose\u51fd\u6570\u9690\u542b\u6267\u884c\u4e86\u4e00\u6b21flush\u64cd\u4f5c\uff0c\u6240\u4ee5\u4e0d\u5fc5\u518d\u8c03\u7528fclose\u4e4b\u524d\u8c03\u7528fflush int fseek ( FILE * stream , long int offset , int whence ); //\u6587\u4ef6\u6d41\u91cc\u4e3a\u4e0b\u4e00\u6b21\u8bfb\u5199\u64cd\u4f5c\u6307\u5b9a\u4f4d\u7f6e int fgetc ( FILE * stream ); int getc ( FILE * stream ); int getchar (); //\u4ece\u6807\u51c6\u8f93\u5165\u91cc\u8bfb\u53d6\u4e0b\u4e00\u4e2a\u5b57\u7b26 int fputc ( int c , FILE * stream ); int putc ( int c , FILE * stream ); //\u4f46\u5b83\u53ef\u80fd\u88ab\u5b9e\u73b0\u4e3a\u4e00\u4e2a\u5b8f int putchar ( int c ); /****** fgets\u628a\u8bfb\u5230\u7684\u5b57\u7b26\u5199\u5230s\u6307\u5411\u7684\u5b57\u7b26\u4e32\u91cc\uff0c\u76f4\u5230\u51fa\u73b0\u4e0b\u9762\u67d0\u79cd\u60c5\u51b5\uff1a\u9047\u5230\u6362\u884c\u7b26\uff0c\u5df2\u7ecf\u4f20\u8f93\u4e86n-1\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u5230\u8fbe\u6587\u4ef6\u5c3e\u3002 \u4f1a\u628a\u9047\u5230\u7684\u6362\u884c\u7b26\u4e5f\u4f20\u9012\u5230\u63a5\u6536\u5b57\u7b26\u4e32\u91cc\uff0c\u5728\u52a0\u4e0a\u4e00\u4e2a\u8868\u793a\u7ed3\u5c3e\u7684\u7a7a\u5b57\u8282\\0\u3002\u4e00\u6b21\u8c03\u7528\u6700\u591a\u53ea\u80fd\u4f20\u8f93n-1\u4e2a\u5b57\u7b26\uff0c\u56e0\u4e3a\u5b83\u5fc5\u987b\u8981\u628a\u7a7a\u5b57\u8282\u52a0\u4e0a\u4ee5\u7ed3\u675f\u5b57\u7b26\u4e32\u3002 ******/ char * fgets ( char * s , int n , FILE * stream ); char * gets ( char * s ); //\u5b83\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6570\u636e\u5e76\u4e22\u53bb\u9047\u5230\u7684\u6362\u884c\u7b26\u3002\u5b83\u5728\u63a5\u6536\u5b57\u7b26\u4e32\u7684\u5c3e\u90e8\u52a0\u4e0a\u4e00\u4e2anull\u5b57\u8282\u3002","title":"\u6807\u51c6I/O"},{"location":"os/linux/linux_program/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 int printf ( const char * format , ...); //\u8f93\u51fa\u9001\u5230\u6807\u51c6\u8f93\u51fa int sprintf ( char * s , const char * format , ...); //\u628a\u8f93\u51fa\u548c\u4e00\u4e2a\u7ed3\u5c3e\u7a7a\u5b57\u7b26\u5199\u5230\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u8fc7\u6765\u7684\u5b57\u7b26\u4e322\u91cc int fprintf ( FILE * stream , const char * format , ...); //\u628a\u8f93\u51fa\u9001\u5230\u4e00\u4e2a\u6307\u5b9a\u7684\u6587\u4ef6\u6d41\u3002 int scanf ( const char * format , ...); int fscanf ( FILE * stream , const char * format , ...); int sscanf ( const char * s , const char * format , ...); /**** fgetpos: \u83b7\u53d6\u6587\u4ef6\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e\u3002 fsetpos: \u8bbe\u7f6e\u6587\u4ef6\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e ftell: \u8fd4\u56de\u6587\u4ef6\u6d41\u5f53\u524d\u4f4d\u7f6e\u7684\u504f\u79fb rewind: \u91cd\u7f6e\u6587\u4ef6\u6d41\u91cc\u7684\u8bfb\u5199\u4f4d\u7f6e freopen: \u91cd\u65b0\u4f7f\u7528\u4e00\u4e2a\u6587\u4ef6\u6d41 setvbuf: \u8bbe\u7f6e\u6587\u4ef6\u6d41\u7684\u7f13\u51b2\u673a\u5236 remove: \u76f8\u5f53\u4e8eunlink\u51fd\u6570\uff0c\u5982\u679c\u53c2\u6570path\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u76f8\u5f53\u4e8ermdir\u51fd\u6570 ****/ #include <errno.h> extern int errno ; int ferror ( FILE * stream ); int feof ( FILE * stream ); void clearerr ( FILE * stream ); int fileno ( FILE * stream ); FILE * fdopen ( int fildes , const char * mode );","title":"\u683c\u5f0f\u5316\u8f93\u5165\u8f93\u51fa"},{"location":"os/linux/linux_program/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <sys/stat.h> #include <unistd.h> int chmod ( const char * path , mode_t mode ); //\u6539\u53d8\u6587\u4ef6\u76ee\u5f55\u7684\u8bbf\u95ee\u6743\u9650 int chown ( const char * path , uid_t owner , gid_t group ); int unlink ( const char * path ); int link ( const char * path1 , const char * path2 ); int symlink ( const char * path1 , const char * path2 ); int mkdir ( const char * path , mode_t mode ); int rmidr ( const char * path ); //\u5220\u9664\u7a7a\u76ee\u5f55 char * getcwd ( char * buf , size_t size ); //\u83b7\u53d6\u5f53\u524d\u76ee\u5f55\u7684\u540d\u5b57 int chdir ( const char * path );","title":"\u6587\u4ef6\u548c\u76ee\u5f55\u7ef4\u62a4"},{"location":"os/linux/linux_program/#_5","text":"1 2 3 4 5 6 7 8 #include <sys/types.h> #include <dirent.h> DIR * opendir ( const char * name ); struct dirent * readdir ( DIR * dirp ); long int telldir ( DIR * dirp ); void seekdir ( DIR * dirp , long int loc ); int closedir ( DIR * dirp );","title":"\u626b\u63cf\u76ee\u5f55"},{"location":"os/linux/linux_program/#_6","text":"1 2 3 4 #include <string.h> #include <stdio.h> char * strerror ( int errnum ); void perror ( const char * s );","title":"\u9519\u8bef\u5904\u7406"},{"location":"os/linux/linux_program/#proc","text":"1 2 3 4 cat / proc / cpuinfo //\u67e5\u770bcpu\u7684\u8be6\u7ec6\u4fe1\u606f cat / proc / meminfo //\u5185\u5b58\u4f7f\u7528\u60c5\u51b5 cat / proc / version //\u5185\u6838\u7248\u672c\u4fe1\u606f cat / proc / sys / fs / file - max //\u540c\u65f6\u6253\u5f00\u7684\u6587\u4ef6\u603b\u6570","title":"/proc\u6587\u4ef6\u7cfb\u7edf"},{"location":"os/linux/linux_program/#fcntlmmap","text":"1 2 int fcntl ( int fildes , int cmd ); //\u5bf9\u5e95\u5c42\u6587\u4ef6\u63cf\u8ff0\u7b26\u63d0\u4f9b\u66f4\u591a\u7684\u64cd\u4f5c\u65b9\u6cd5 int fcntl ( int fildes , int cmd , long arg ); mmap (\u5185\u5b58\u6620\u5c04)\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5efa\u7acb\u4e00\u6bb5\u53ef\u4ee5\u88ab\u4e24\u4e2a\u6216\u66f4\u591a\u4e2a\u7a0b\u5e8f\u8bfb\u5199\u7684\u5185\u5b58\u3002\u4e00\u4e2a\u7a0b\u5e8f\u5bf9\u5b83\u6240\u505a\u51fa\u7684\u4fee\u6539\u53ef\u4ee5\u88ab\u5176\u4ed6\u7a0b\u5e8f\u770b\u89c1\u3002\u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u6307\u5411\u4e00\u6bb5\u5185\u5b58\u533a\u57df\u7684\u6307\u9488\uff0c\u8be5\u5185\u5b58\u533a\u57df\u4e0e\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8bbf\u95ee\u7684\u6587\u4ef6\u7684\u5185\u5bb9\u76f8\u5173\u8054\u3002 1 2 3 4 5 6 #include <sys/mman.h> void * mmap ( void * addr , size_t len , int prot , int flags , int fildes , off_t off ); int msync ( void * addr , size_t len , int flags ); //\u628a\u5728\u8be5\u5185\u5b58\u6bb5\u7684\u67d0\u4e2a\u90e8\u5206\u6216\u6574\u6bb5\u4e2d\u7684\u4fee\u6539\u5199\u56de\u5230\u88ab\u6620\u5c04\u7684\u6587\u4ef6\u4e2d int munmap ( void * addr , size_t len ); //\u91ca\u653e\u5185\u5b58\u6bb5","title":"fcntl\u548cmmap"},{"location":"os/linux/linux_program/#linux","text":"1 2 int main ( int argc , char * argv []) //argc\u662f\u7a0b\u5e8f\u53c2\u6570\u7684\u4e2a\u6570(\u5305\u62ec\u7a0b\u5e8f\u540d\u672c\u8eab)\uff0cargv\u662f\u4e00\u4e2a\u4ee3\u8868\u53c2\u6570\u81ea\u8eab\u7684\u5b57\u7b26\u4e32\u6570\u7ec4(\u7a0b\u5e8f\u540d\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20argv[0])\u3002 1 2 3 4 5 #include <stdio.h> int getopt ( int argc , char * const argv [], const char * optstring ); extern char * optarg ; extern int optind , opterr , optopt ; //getopt_long","title":"Linux\u73af\u5883"},{"location":"os/linux/linux_program/#_7","text":"1 2 3 4 5 / usr / adm & / var / log / var / log / messages / var / log / mail / etc / syslog . conf / etc / syslog - ng / syslog - ng . conf //\u68c0\u67e5\u7cfb\u7edf\u914d\u7f6e 1 2 3 4 5 6 #include <syslog.h> void syslog ( int priority , const char * message , arguments ...); //\u8f6c\u6362\u63a7\u5236\u7b26%m\u7528\u4e8e\u63d2\u5165\u4e0e\u9519\u8bef\u53d8\u91cferrno\u5f53\u524d\u503c\u5bf9\u5e94\u7684\u51fa\u9519\u6d88\u606f\u5b57\u7b26\u4e32 void closelog ( void ); void openlog ( const char * ident , int logopt , int facility ); int setlogmask ( int maskpri );","title":"\u65e5\u5fd7"},{"location":"os/linux/linux_program/#_8","text":"\u4ea4\u6362\u7a7a\u95f4(swap space) \u6309\u9700\u6362\u9875\u7684\u865a\u62df\u5185\u5b58\u7cfb\u7edf","title":"\u6570\u636e\u7ba1\u7406"},{"location":"os/linux/linux_program/#_9","text":"\u6587\u4ef6\u6bb5\u9501\u5b9a(\u6587\u4ef6\u533a\u57df\u9501\u5b9a) 1 2 3 #include <fcntl.h> int fcntl ( int fildes , int command , ...); int fcntl ( int fildes , int command , struct flock * flock_structure ); fcntl\u5bf9\u4e00\u4e2a\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fdb\u884c\u64cd\u4f5c\uff0c\u5e76\u6839\u636ecommand\u53c2\u6570\u7684\u8bbe\u7f6e\u5b8c\u6210\u4e0d\u540c\u7684\u4efb\u52a1\u3002\u63d0\u4f9b\u4e863\u4e2a\u7528\u4e8e\u6587\u4ef6\u9501\u5b9a\u7684\u547d\u4ee4\u9009\u9879\u3002 1 2 3 F_GETLK F_SETLK F_SETLKW flock(\u6587\u4ef6\u9501)\u7ed3\u6784\u4f9d\u8d56\u5177\u4f53\u7684\u5b9e\u73b0\uff0c\u81f3\u5c11\u5305\u542b\u4ee5\u4e0b\u6210\u5458\uff1a 1 2 3 4 5 short l_type short l_whence //\u53d6\u503c\u5fc5\u987b\u662fSEEK_SET(\u6587\u4ef6\u5934),SEEK_CUR(\u5f53\u524d\u4f4d\u7f6e),SEEK_END(\u6587\u4ef6\u5c3e)\u4e2d\u7684\u4e00\u4e2a\u3002l_whence\u901a\u5e38\u8bbe\u7f6e\u4e3aSEEK_SET,\u8fd9\u65f6l_start\u5c31\u4ece\u6587\u4ef6\u7684\u5f00\u59cb\u8ba1\u7b97 off_t l_start //l_whence\u662fl_start\u7684\u76f8\u5bf9\u504f\u79fb\u4f4d\u7f6e\uff0cl_start\u662f\u8be5\u533a\u57df\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282 off_t l_len pid_t l_pid l_type\u6210\u5458\u7684\u53d6\u503c\u5b9a\u4e49\u5728\u5934\u6587\u4ef6fcntl.h\u4e2d 1 2 3 F_RDLCK //\u5171\u4eab(\u6216\u8bfb)\u9501\u3002\u8bb8\u591a\u4e0d\u540c\u7684\u8fdb\u7a0b\u53ef\u4ee5\u62e5\u6709\u6587\u4ef6\u540c\u4e00(\u6216\u8005\u91cd\u53e0)\u533a\u57df\u4e0a\u7684\u5171\u4eab\u9501\u3002\u53ea\u8981\u4efb\u4e00\u8fdb\u7a0b\u62e5\u6709\u4e00\u628a\u5171\u4eab\u9501\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u8fdb\u7a0b\u53ef\u4ee5\u518d\u83b7\u5f97\u8be5\u533a\u57df\u4e0a\u7684\u72ec\u5360\u9501\u3002\u4e3a\u4e86\u83b7\u5f97\u4e00\u628a\u5171\u4eab\u9501\uff0c\u6587\u4ef6\u5fc5\u987b\u4ee5\u201c\u8bfb\u201d\u6216\u201c\u8bfb\u5199\u201d\u65b9\u5f0f\u6253\u5f00 F_UNLCK //\u89e3\u9501\uff0c\u7528\u6765\u6e05\u9664\u9501 F_WRLCK //\u72ec\u5360(\u6216\u5199)\u9501\u3002\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5728\u6587\u4ef6\u7684\u4efb\u4e00\u7279\u5b9a\u533a\u57df\u62e5\u6709\u4e00\u628a\u72ec\u5360\u9501\u3002\u4e00\u65e6\u4e00\u4e2a\u8fdb\u7a0b\u62e5\u6709\u4e86\u8fd9\u6837\u4e00\u628a\u9501\uff0c\u4efb\u4f55\u5176\u4ed6\u8fdb\u7a0b\u90fd\u65e0\u6cd5\u5728\u8be5\u533a\u57df\u4e0a\u83b7\u5f97\u4efb\u4f55\u7c7b\u578b\u7684\u9501\u3002\u4e3a\u4e86\u83b7\u5f97\u4e00\u628a\u72ec\u5360\u9501\uff0c\u6587\u4ef6\u5fc5\u987b\u4ee5\u201c\u5199\u201d\u6216\u201c\u8bfb/\u5199\u201d\u65b9\u5f0f\u6253\u5f00 F_GETLK\u547d\u4ee4 \u7528\u4e8e\u83b7\u53d6fildes\u6253\u5f00\u7684\u6587\u4ef6\u7684\u9501\u4fe1\u606f\u3002\u5b83\u4e0d\u4f1a\u5c1d\u8bd5\u53bb\u9501\u5b9a\u6587\u4ef6\u3002 \u8c03\u7528\u8fdb\u7a0b\u628a\u81ea\u5df1\u60f3\u521b\u5efa\u7684\u9501\u7c7b\u578b\u4fe1\u606f\u4f20\u9012\u7ed9fcntl\uff0c\u4f7f\u7528F_GETLK\u547d\u4ee4\u7684fcntl\u5c31\u4f1a\u8fd4\u56de\u5c06\u4f1a\u963b\u6b62\u83b7\u53d6\u9501\u7684\u4efb\u4f55\u4fe1\u606f\u3002 \u8fdb\u7a0b\u53ef\u80fd\u4f7f\u7528F_GETLK\u8c03\u7528\u6765\u67e5\u770b\u6587\u4ef6\u4e2d\u67d0\u4e2a\u533a\u57df\u7684\u5f53\u524d\u9501\u72b6\u6001\u3002\u5982\u679c\u6587\u4ef6\u5df2\u88ab\u9501\u5b9a\u4ece\u800c\u963b\u6b62\u9501\u8bf7\u6c42\u6210\u529f\u6267\u884c\uff0cfcntl\u4f1a\u7528\u76f8\u5173\u4fe1\u606f\u8986\u76d6flock\u7ed3\u6784\u3002\u5982\u679c\u6240\u8bf7\u6c42\u53ef\u4ee5\u6210\u529f\u6267\u884c\uff0cflock\u7ed3\u6784\u5c06\u4fdd\u6301\u4e0d\u53d8\uff0c\u5982\u679cF_GETLK\u8c03\u7528\u65e0\u6cd5\u83b7\u5f97\u4fe1\u606f\uff0c\u5b83\u5c06\u8fd4\u56de-1\u8868\u660e\u5931\u8d25\u3002\u6210\u529f\u5c31\u8fd4\u56de\u975e-1\u503c\u3002 F_SETLK\u547d\u4ee4 \u5bf9fildes\u6307\u5411\u7684\u6587\u4ef6\u7684\u67d0\u4e2a\u533a\u57df\u52a0\u9501\u6216\u89e3\u9501\u3002flock\u7ed3\u6784\u4e2d\u4f7f\u7528\u7684\u503c:l_type,l_pid\u3002\u4e0eF_GETLK\u4e00\u6837\uff0c\u8981\u52a0\u9501\u7684\u533a\u57df\u7531flock\u7ed3\u6784\u4e2d\u7684l_start,l_whence\u548cl_len\u7684\u503c\u5b9a\u4e49\u3002 \u5982\u679c\u9501\u6210\u529f\uff0c\u8fd4\u56de\u975e-1\u503c\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002 F_SETLKW\u547d\u4ee4 \u4e0eF_SETLK\u76f8\u540c\uff0c\u4f46\u5728\u65e0\u6cd5\u83b7\u53d6\u9501\u65f6\uff0c\u8fd9\u4e2a\u8c03\u7528\u5c06\u7b49\u5f85\u76f4\u5230\u53ef\u4ee5\u4e3a\u6b62\u3002\u4e00\u65e6\u5f00\u59cb\u7b49\u5f85\uff0c\u53ea\u6709\u5728\u53ef\u4ee5\u83b7\u53d6\u9501\u6216\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\u65f6\u624d\u4f1a\u8fd4\u56de\u3002","title":"\u6587\u4ef6\u9501\u5b9a"},{"location":"os/linux/linux_program/#mysql","text":"","title":"MySQL"},{"location":"os/linux/linux_program/#_10","text":"\u521d\u59cb\u5316\u4e00\u4e2a\u8fde\u63a5\u53e5\u67c4\u7ed3\u6784 \u5b9e\u9645\u8fdb\u884c\u8fde\u63a5 1 2 3 4 5 6 7 8 9 10 11 #include <mysql.h> MYSQL * mysql_init ( MYSQL * ); MYSQL * mysql_real_connect ( MYSQL * connection , //\u88abmysql_init\u521d\u59cb\u5316\u7684\u7ed3\u6784 const char * server_host , //\u53ef\u4ee5\u662f\u4e3b\u673a\u540d\u4e5f\u53ef\u4ee5\u662fip\u5730\u5740 const char * sql_user_name , const char * sql_password , const char * db_name , unsigned int port_number , //0 const char * unix_socket_name , //NULL unsigned int flags ); void mysql_close ( MYSQL * connection ); 1 2 3 4 5 6 7 8 int mysql_options ( MYSQL * connection , enum option_to_set , const char * argument ); /****** 1. \u5728mysql_init\u548cmysql_real_connect\u4e4b\u95f4\u5373\u53ef\u3002 2. MYSQL_OPT_CONNECT_TIMEOUT const unsigned int * \u8fde\u63a5\u8d85\u65f6\u4e4b\u524d\u7684\u7b49\u5f85\u79d2\u901f 3. MYSQL_OPT_COMPRESS None,\u4f7f\u7528NULL \u7f51\u7edc\u8fde\u63a5\u4e2d\u4f7f\u7528\u538b\u7f29\u673a\u5236 4. MYSQL_INIT_COMMAND const char * \u6bcf\u6b21\u5efa\u7acb\u540e\u53d1\u9001\u7684\u547d\u4ee4 5. \u6210\u529f\u7684\u8c03\u7528\u5c06\u8fd4\u56de0\u3002 ******/","title":"\u8fde\u63a5"},{"location":"os/linux/linux_program/#_11","text":"1 2 unsigned int mysql_errno ( MYSQL * connection ); char * mysql_error ( MYSQL * connection );","title":"\u9519\u8bef\u5904\u7406"},{"location":"os/linux/linux_program/#_12","text":"","title":"\u6267\u884c"},{"location":"os/linux/linux_program/#updatedeleteinsert","text":"1 my_ulonglong mysql_affected_rows ( MYSQL * connection ); //\u7528\u4e8e\u68c0\u67e5\u53d7\u5f71\u54cd\u7684\u884c\u6570","title":"\u4e0d\u8fd4\u56de\u6570\u636e\u7684\u8bed\u53e5UPDATE,DELETE,INSERT"},{"location":"os/linux/linux_program/#_13","text":"1 2 3 4 5 6 7 8 9 10 MYSQL_RES * mysql_store_result ( MYSQL * connection ); //\u63d0\u53d6\u6240\u6709\u7684\u6570\u636e my_ulonglong mysql_num_rows ( MYSQL_RES * result ); //\u8fd4\u56de\u7ed3\u679c\u96c6\u4e2d\u7684\u884c\u6570 MYSQL_ROW mysql_fetch_row ( MYSQL_RES * result ); //\u4ecemysql_store_result\u7684\u7ed3\u679c\u4e2d\u63d0\u53d6\u4e00\u884c\uff0c\u653e\u5165\u4e00\u4e2a\u884c\u7ed3\u6784\u4e2d void mysql_data_seek ( MYSQL_RES * result , myulonglong offset ); //\u5728\u7ed3\u679c\u96c6\u4e2d\u8df3\u8f6c\uff0c\u8bbe\u7f6e\u88ab\u4e0b\u4e00\u4e2amysql_fetch_row\u64cd\u4f5c\u7684\u8fd4\u56de\u7684\u884c MYSQL_ROW_OFFSET mysql_row_tell ( MYSQL_RES * result ); //\u8fd4\u56de\u4e00\u4e2a\u504f\u79fb\u503c\uff0c\u8868\u793a\u7ed3\u679c\u96c6\u4e2d\u7684\u5f53\u524d\u4f4d\u7f6e MYSQL_ROW_OFFSET mysql_row_seek ( MYSQL_RES * result , MYSQL_ROW_OFFSET offset ); //\u5728\u7ed3\u679c\u96c6\u4e2d\u79fb\u52a8\u5f53\u524d\u4f4d\u7f6e\uff0c\u8fd4\u56de\u4e4b\u524d\u4f4d\u7f6e void mysql_free_result ( MYSQL_RES * result ); MYSQL_RES * mysql_use_result ( MYSQL * connection ); //\u9010\u884c\u63d0\u53d6\u6570\u636e\uff0c\u672a\u63d0\u53d6\u7684\u6570\u636e\u7f51\u7edc\u4e2d unsigned int mysql_field_count ( MYSQL * connection ); MYSQL_FIELD * mysql_fetch_field ( MYSQL_RES * result );","title":"\u8fd4\u56de\u6570\u636e\u7684\u8bed\u53e5"},{"location":"os/linux/linux_program/#_14","text":"","title":"\u5f00\u53d1\u5de5\u5177"},{"location":"os/linux/linux_program/#make","text":"","title":"make"},{"location":"os/linux/linux_program/#makefile","text":"","title":"makefile"},{"location":"os/linux/linux_program/#_15","text":"","title":"\u540e\u7f00\u548c\u6a21\u5f0f\u89c4\u5219"},{"location":"os/linux/linux_program/#makefile_1","text":"","title":"makefile\u6587\u4ef6\u548c\u5b50\u76ee\u5f55"},{"location":"os/linux/linux_program/#_16","text":"","title":"\u8c03\u8bd5"},{"location":"os/linux/linux_program/#_17","text":"","title":"\u9884\u5904\u7406&amp;\u5b8f"},{"location":"os/linux/linux_program/#gdb","text":"","title":"GDB\u8c03\u8bd5"},{"location":"os/linux/linux_program/#_18","text":"UNIX\u6807\u51c6\u5b9a\u4e49\u8fdb\u7a0b\u4e3a\uff1a\u4e00\u4e2a\u5176\u4e2d\u8fd0\u884c\u7740\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u548c\u8fd9\u4e9b\u7ebf\u7a0b\u6240\u9700\u8981\u7684\u7cfb\u7edf\u8d44\u6e90\u3002 \u542f\u52a8\u65b0\u8fdb\u7a0b \u5b83\u5fc5\u987b\u7528\u4e00\u4e2ashell\u6765\u542f\u52a8\u7a0b\u5e8f\uff0c\u4f7f\u7528system\u51fd\u6570\u7684\u6548\u7387\u4e0d\u9ad8\u3002 1 2 #include <stdlib.h> int system ( const char * string );","title":"\u8fdb\u7a0b\u4e0e\u4fe1\u53f7"},{"location":"os/linux/linux_program/#exec","text":"exec\u7cfb\u5217\u51fd\u6570\u628a\u5f53\u524d\u8fdb\u7a0b\u66ff\u6362\u4e3a\u4e00\u4e2a\u65b0\u8fdb\u7a0b\u3002\u53ef\u4ee5\u4f7f\u7528exec\u51fd\u6570\u8bb2\u7a0b\u5e8f\u7684\u6267\u884c\u4ece\u4e00\u4e2a\u7a0b\u5e8f\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u3002exec\u51fd\u6570\u6bd4system\u51fd\u6570\u66f4\u6709\u6548\uff0c\u65b0\u7684\u7a0b\u5e8f\u542f\u52a8\u540e\uff0c\u539f\u6765\u7684\u7a0b\u5e8f\u4e0d\u518d\u8fd0\u884c\u3002 1 2 3 4 5 6 7 8 #include <stdio.h> char ** environ ; int execl ( const char * path , const char * arg0 , ..., ( char * ) 0 ); int execlp ( const char * file , const char * arg0 , ..., ( char * ) 0 ); int execle ( const char * path , const char * arg0 , ..., ( char * ) 0 , char * const envp []); int execv ( const char * path , char * const argv []); int execvp ( const char * file , char * const argv []); int execve ( const char * path , char * const argv [], char * const envp []);","title":"\u66ff\u6362\u8fdb\u7a0b\u6620\u50cfexec\u7cfb\u5217\u51fd\u6570"},{"location":"os/linux/linux_program/#fork","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 #include <sys/types.h> #include <unistd.h> pid_t fork ( void ); pid_t new_pid ; new_pid = fork (); switch ( new_pid ) { case - 1 : //error break ; case 0 : //child break ; default : //parent break ; } wait\u7b49\u5f85\u4e00\u4e2a\u8fdb\u7a0b 1 2 3 4 5 #include <sys/types.h> #include <sys/wait.h> pid_t wait ( int * stat_loc ); pid_t waitpid ( pid_t pid , int * stat_loc , int options ); /*pid\u53c2\u6570\u5982\u679c\u4e3a-1\uff0cwaitpid\u5c06\u8fd4\u56de\u4efb\u4e00\u5b50\u8fdb\u7a0b\u4fe1\u606f\u3002*/ \u50f5\u5c38\u8fdb\u7a0b \u5b50\u8fdb\u7a0b\u7ec8\u6b62\u65f6\uff0c\u4e0e\u7236\u8fdb\u7a0b\u4e4b\u95f4\u7684\u5173\u8054\u8fd8\u4f1a\u4fdd\u6301\uff0c\u76f4\u5230\u7236\u8fdb\u7a0b\u4e5f\u6b63\u5e38\u7ec8\u6b62\u6216\u7236\u8fdb\u7a0b\u8c03\u7528wait\u624d\u7ed3\u675f\u3002\u4ee3\u8868\u5b50\u8fdb\u7a0b\u7684\u8868\u9879\u4e0d\u4f1a\u7acb\u523b\u91ca\u653e\uff0c\u4ecd\u7136\u5b58\u5728\u4e8e\u7cfb\u7edf\u4e2d\uff0c\u5b83\u7684\u9000\u51fa\u7801\u4ecd\u7136\u4fdd\u5b58\uff0c\u6b64\u65f6\u5b83\u6210\u4e3a\u4e00\u4e2a\u50f5\u5c38\u8fdb\u7a0b\u3002","title":"\u590d\u5236\u8fdb\u7a0b\u6620\u50cffork"},{"location":"os/linux/linux_program/#_19","text":"\u4fe1\u53f7\u662funix\u548clinux\u7cfb\u7edf\u54cd\u5e94\u67d0\u4e9b\u6761\u4ef6\u800c\u4ea7\u751f\u7684\u4e00\u4e2a\u4e8b\u4ef6\u3002 \u5904\u7406\u4fe1\u53f7 1 2 #include <stdio.h> void ( * signal ( int sig , void ( * func )( int )))( int ); \u53d1\u9001\u4fe1\u53f7 1 2 3 4 5 6 7 8 #include <sys/types.h> #include <signal.h> int kill ( pid_t pid , int sig ); //\u6210\u529f0\uff0c\u5931\u8d25-1 #include <unistd.h> unsigned int alarm ( unsigned int seconds ); //\u5b9a\u65f6\u53d1\u9001SIGALRM\u4fe1\u53f7 int pause ( void ); //\u628a\u7a0b\u5e8f\u6302\u8d77\u76f4\u5230\u4e00\u4e2a\u4fe1\u53f7\u51fa\u73b0\u4e3a\u6b62 \u4e00\u4e2a\u5065\u58ee\u7684\u4fe1\u53f7\u63a5\u53e3 1 2 #include <signal.h> int sigaction ( int sig , const struct sigaction * act , struct sigaction * oact ); sigaction\u7ed3\u6784\u6210\u5458 1 2 3 void ( * ) ( int ) sa_handler //\u51fd\u6570\u6307\u9488\uff0c\u6307\u5411\u63a5\u6536\u5230\u4fe1\u53f7sig\u65f6\u5c06\u88ab\u8c03\u7528\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\u53ef\u4ee5\u8bbe\u7f6e\u4e3aSIG_IGN\u548cSIG_DFL,\u5206\u522b\u8868\u793a\u5ffd\u7565\u548c\u6062\u590d sigset_t sa_mask //\u4fe1\u53f7\u96c6,\u52a0\u5165\u5230\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5c4f\u853d\u5b57\u6bb5\u7684 int sa_flags // \u4fe1\u53f7\u96c6 1 2 3 4 5 6 7 8 9 10 #include <signal.h> int sigaddset ( sigset_t * set , int signo ); //\u589e\u52a0\u7ed9\u5b9a\u7684\u4fe1\u53f7 int sigemptyset ( sigset_t * set ); //\u5c06\u4fe1\u53f7\u96c6\u521d\u59cb\u5316\u4e3a\u7a7a int sigfillset ( sigset_t * set ); //\u5c06\u4fe1\u53f7\u96c6\u521d\u59cb\u5316\u4e3a\u5305\u542b\u6240\u6709\u5df2\u5b9a\u4e49\u7684\u4fe1\u53f7 int sigdelset ( sigset_t * set , int signo ); //\u5220\u9664\u7ed9\u5b9a\u7684\u4fe1\u53f7 int sigismember ( sigset_t * set , int signo ); //\u5224\u65ad\u4e00\u4e2a\u7ed9\u5b9a\u7684\u4fe1\u53f7\u662f\u5426\u662f\u4e00\u4e2a\u4fe1\u53f7\u96c6\u7684\u6210\u5458 int sigprocmask ( int how , const sigset_t * set , sigset_t * oset ); int sigpending ( sigset_t * set ); int sigsuspend ( const sigset_t * sigmask );","title":"\u4fe1\u53f7"},{"location":"os/linux/linux_program/#posix","text":"\u7ebf\u7a0b\u662f\u4e00\u4e2a\u8fdb\u7a0b\u5185\u90e8\u7684\u4e00\u4e2a\u63a7\u5236\u5e8f\u5217\u3002 \u5f53\u8fdb\u7a0b\u6267\u884cfork\u8c03\u7528\u65f6\uff0c\u5c06\u521b\u5efa\u51fa\u8be5\u8fdb\u7a0b\u7684\u4e00\u4e2a\u65b0\u526f\u672c\u3002\u8fd9\u4e2a\u65b0\u8fdb\u7a0b\u62e5\u6709\u81ea\u5df1\u7684\u53d8\u91cf\u548c\u81ea\u5df1\u7684PID\uff0c\u5b83\u7684\u65f6\u95f4\u8c03\u5ea6\u4e5f\u662f\u72ec\u7acb\u7684\uff0c\u5b83\u7684\u6267\u884c\u51e0\u4e4e\u5b8c\u5168\u72ec\u7acb\u4e8e\u7236\u8fdb\u7a0b\u3002 \u5f53\u8fdb\u7a0b\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7ebf\u7a0b\u65f6\uff0c\u65b0\u7684\u6267\u884c\u7ebf\u7a0b\u5c06\u62e5\u6709\u81ea\u5df1\u7684\u6808(\u56e0\u6b64\u4e5f\u6709\u81ea\u5df1\u7684\u5c40\u90e8\u53d8\u91cf),\u4f46\u4e0e\u5b83\u7684\u521b\u5efa\u8005\u5171\u4eab\u5168\u5c40\u53d8\u91cf\u3001\u6587\u4ef6\u63cf\u8ff0\u7b26\u3001\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u548c\u5f53\u524d\u7684\u76ee\u5f55\u72b6\u6001\u3002 _PEENTRANT \u5b8f\u5b9a\u4e49\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\u6211\u4eec\u9700\u8981\u53ef\u91cd\u5165\u529f\u80fd\u3002 1 2 3 #include <pthread.h> int pthread_create ( pthread_t * thread , pthread_attr_t * attr , void * ( * start_routine )( void * ), void * arg ); 1. \u7b2c\u4e00\u4e2a\u53c2\u6570\u5199\u5165\u4e00\u4e2a\u6807\u8bc6\u7b26\u6765\u5f15\u7528\u65b0\u7ebf\u7a0b 2. \u7b2c\u4e8c\u4e2a\u53c2\u6570\u8bbe\u7f6e\u7ebf\u7a0b\u5c5e\u6027\uff0c\u4e00\u822c\u4e0d\u9700\u8981\u65f6\u8bbe\u7f6e\u4e3aNULL 3. \u7b2c\u4e09\u4e2a\u53c2\u6570\u542f\u52a8\u7ebf\u7a0b\u5c06\u8981\u6267\u884c\u7684\u51fd\u6570 4. \u7b2c\u56db\u4e2a\u53c2\u6570\u4f20\u9012\u7ed9\u6267\u884c\u51fd\u6570\u7684\u53c2\u6570 \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002 1 2 3 4 #include <pthread.h> void pthread_exit ( void * retval ); //\u7ec8\u6b62\u8c03\u7528\u5b83\u7684\u7ebf\u7a0b int pthread_join ( pthread_t th , void ** thread_return ); //\u7b2c\u4e8c\u4e2a\u53c2\u6570\u6267\u884c\u4e00\u4e2a\u6307\u9488\uff0c\u5b83\u6307\u5411\u53e6\u4e00\u4e2a\u6307\u9488\uff0c\u800c\u540e\u8005\u6307\u5411\u7ebf\u7a0b\u7684\u8fd4\u56de\u503c\u3002 \u68c0\u67e5\u5934\u6587\u4ef6/usr/include/pthread.h\u3002\u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u663e\u793a\u7684\u7248\u6743\u65e5\u671f\u662f2003\u5e74\u6216\u66f4\u665a\uff0c\u90a3\u51e0\u4e4e\u53ef\u4ee5\u80af\u5b9a\u4f7f\u7528\u7684\u662fNPTL\u5b9e\u73b0\u3002 1 2 3 4 gcc - D_REENTRANT - I / usr / include / nptl thread1 . c - o thread1 - L / usr / lib / nptl - lpthread //\u5982\u679c\u7cfb\u7edf\u9ed8\u8ba4\u4f7f\u7528NPTL\u7ebf\u7a0b\u5e93\uff0c\u90a3\u4e48\u7f16\u8bd1\u7a0b\u5e8f\u5c31\u65e0\u9700\u52a0\u4e0a-I\u548c-L\u9009\u9879\u3002 gcc - D_REENTRANT thread1 . c - o thread1 - lpthread","title":"POSIX\u7ebf\u7a0b"},{"location":"os/linux/linux_program/#_20","text":"","title":"\u540c\u6b65"},{"location":"os/linux/linux_program/#_21","text":"1 2 3 4 5 6 7 8 #include <semaphore.h> int sem_init ( sem_t * sem , int pshared , unsigned int value ); //pshared\u53c2\u6570\u63a7\u5236\u4fe1\u53f7\u91cf\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4e3a0\uff0c\u8868\u793a\u8fd9\u4e2a\u4fe1\u53f7\u91cf\u662f\u5f53\u524d\u8fdb\u7a0b\u7684\u5c40\u90e8\u4fe1\u53f7\u91cf\uff0c\u5426\u5219\uff0c\u8fd9\u4e2a\u4fe1\u53f7\u91cf\u5c31\u53ef\u4ee5\u5728\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u3002 //\u8be5\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u662fsem_init\u8c03\u7528\u521d\u59cb\u5316\u7684\u4fe1\u53f7\u91cf int sem_wait ( sem_t * sem ); //\u51cf1\uff0c\u5b83\u4f1a\u7b49\u5f85\u4fe1\u53f7\u91cf\u6709\u4e2a\u975e\u96f6\u503c\u624d\u4f1a\u5f00\u59cb\u51cf\u6cd5\u64cd\u4f5c\u3002\u5982\u679c\u5bf9\u503c\u4e3a0\u7684\u4fe1\u53f7\u91cf\u8c03\u7528sem_wait\uff0c\u8fd9\u4e2a\u51fd\u6570\u5c31\u4f1a\u7b49\u5f85\u3002 int sem_post ( sem_t * sem ); //\u4ee5\u539f\u5b50\u64cd\u4f5c\u7684\u65b9\u5f0f\u7ed9\u4fe1\u53f7\u91cf\u7684\u503c\u52a01\u3002 int sem_destroy ( sem_t * sem );","title":"\u4fe1\u53f7\u91cf"},{"location":"os/linux/linux_program/#_22","text":"1 2 3 4 5 6 7 8 9 10 11 #include <pthread.h> int pthread_mutex_init ( pthread_mutex_t * mutex , const pthread_mutexattr_t * mutexattr ); int pthread_mutex_lock ( pthread_mutex_t * mutex ); int pthread_mutex_unlock ( pthread_mutex_t * mutex ); int pthread_mutex_destroy ( pthread_mutex_t * mutex ); //\u6210\u529f\u65f6\u8fd4\u56de0\uff0c\u5931\u8d25\u65f6\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002","title":"\u4e92\u65a5\u91cf"},{"location":"os/linux/linux_program/#_23","text":"1 2 #include <pthread.h> int pthread_attr_init ( pthread_attr_t * attr ); \u7ebf\u7a0b\u8c03\u5ea6 \u53d6\u6d88\u7ebf\u7a0b \u591a\u7ebf\u7a0b","title":"\u7ebf\u7a0b\u5c5e\u6027"},{"location":"os/linux/linux_program/#_24","text":"","title":"\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff1a\u7ba1\u9053"},{"location":"os/linux/linux_program/#_25","text":"1 2 3 4 #include <stdio.h> FILE * popen ( const char * command , const char * open_mode ); int pclose ( FILE * stream_to_close ); //\u8c03\u7528popen\u51fd\u6570\u8fd4\u56deFILE*\u6587\u4ef6\u6307\u9488\u6d41\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u901a\u8fc7fread\u4e0efwrite\u51fd\u6570\u6765\u5904\u7406\u6d41","title":"\u8fdb\u7a0b\u7ba1\u9053"},{"location":"os/linux/linux_program/#pipe","text":"\u8fd9\u4e2a\u51fd\u6570\u5728\u4e24\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u4e0d\u9700\u8981\u542f\u52a8\u4e00\u4e2ashell\u6765\u89e3\u91ca\u8bf7\u6c42\u547d\u4ee4 1 2 3 #include <unistd.h> int pipe ( int file_descriptor [ 2 ]); //pipe\u51fd\u6570\u7684\u53c2\u6570\u662f\u4e00\u4e2a\u7531\u4e24\u4e2a\u6574\u6570\u7c7b\u578b\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u7ec4\u6210\u7684\u6574\u7ec4\u7684\u6307\u9488\u3002 \u5199\u5165file_descriptor[1]\u7684\u6240\u6709\u6570\u636e\u90fd\u53ef\u4ee5\u4ecefile_descriptor[0]\u8bfb\u56de\u6765\u3002 pipe\u4f7f\u7528\u7684\u662f\u6587\u4ef6\u63cf\u8ff0\u7b26\u4e0d\u662f\u6587\u4ef6\u6d41\uff0c\u6240\u6709\u5fc5\u987b\u4f7f\u7528\u5e95\u5c42\u7684read\u548cwrite\u8c03\u7528\u6765\u8bbf\u95ee\u6570\u636e\u3002","title":"\u5e95\u5c42\u7684pipe\u51fd\u6570"},{"location":"os/linux/linux_program/#_26","text":"\u547d\u4ee4\u884c\u4e0a\u521b\u5efa\u547d\u540d\u7ba1\u9053 1 2 mknod filename p mkfifo filename \u7a0b\u5e8f\u4e2d 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <sys/types.h> #include <sys/stat.h> int mkfifo ( const char * filename , mode_t mode ); int mknod ( const char * filename , mode_t mode | S_IFIFO , ( dev_t ) 0 ); /*open\u8c03\u7528\u5c06\u963b\u585e\uff0c\u9664\u975e\u6709\u4e00\u4e2a\u8fdb\u7a0b\u4ee5\u5199\u65b9\u5f0f\u6253\u5f00\u540c\u4e00\u4e2aFIFO\uff0c\u5426\u5219\u4e0d\u4f1a\u8fd4\u56de\u3002*/ open ( const char * path , O_RDONLY ); /*\u5373\u4f7f\u6ca1\u6709\u5176\u4ed6\u8fdb\u7a0b\u4ee5\u5199\u65b9\u5f0f\u6253\u5f00FIFO\uff0c\u8fd9\u4e2aopen\u8c03\u7528\u4e5f\u5c06\u6210\u529f\u5e76\u7acb\u523b\u8fd4\u56de\u3002*/ open ( const char * path , O_RDONLY | O_NONBLOCK ); /*open\u8c03\u7528\u5c06\u963b\u585e\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u8fdb\u7a0b\u4ee5\u8bfb\u65b9\u5f0f\u6253\u5f00\u540c\u4e00\u4e2aFIFO\u4e3a\u6b62*/ open ( const char * path , O_WRONLY ); /*\u7acb\u523b\u8fd4\u56de*/ open ( const char * path , O_WRONLY | O_NONBLOCK );","title":"\u547d\u540d\u7ba1\u9053(\u4e0d\u5148\u5173\u7684\u8fdb\u7a0b\u4e4b\u95f4)"},{"location":"os/linux/linux_program/#_27","text":"","title":"\u4fe1\u53f7\u91cf\u3001\u5171\u4eab\u5185\u5b58\u548c\u6d88\u606f\u961f\u5217"},{"location":"os/linux/linux_program/#_28","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <sys/sem.h> /*\u76f4\u63a5\u63a7\u5236\u4fe1\u53f7\u91cf\u4fe1\u606f*/ int semctl ( int sem_id , int sem_num , int command , ...); union semun { int val ; struct semid_ds * buf ; unsigned short * array ; } /*\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4fe1\u53f7\u91cf\u6216\u53d6\u5f97\u4e00\u4e2a\u5df2\u6709\u4fe1\u53f7\u91cf\u7684\u952e num_sems\u53c2\u6570\u6307\u5b9a\u9700\u8981\u7684\u4fe1\u53f7\u91cf\u6570\u76ee\uff0c\u5b83\u51e0\u4e4e\u603b\u662f\u53d6\u503c\u4e3a1 \u6210\u529f\u65f6\u8fd4\u56de\u4e00\u4e2a\u6b63\u6570\u5373\u5176\u4ed6\u4fe1\u53f7\u91cf\u51fd\u6570\u5c06\u7528\u5230\u7684\u4fe1\u53f7\u91cf\u6807\u8bc6\u7b26\uff0c\u5931\u8d25\u8fd4\u56de-1*/ int semget ( key_t key , int num_sems , int sem_flags ); /*\u7528\u4e8e\u6539\u53d8\u4fe1\u53f7\u91cf\u7684\u503c*/ int semop ( int sem_id , struct sembuf * sem_ops , size_t num_sem_ops ); struct sembuf { short sem_num ; short sem_op ; short sem_flg ; }","title":"\u4fe1\u53f7\u91cf"},{"location":"os/linux/linux_program/#_29","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <sys/shm.h> /*\u521a\u521b\u5efa\u5171\u4eab\u5185\u5b58\u65f6\uff0c\u4e0d\u80fd\u88ab\u4efb\u4f55\u8fdb\u7a0b\u8bbf\u95ee\uff0cshmat\u51fd\u6570\u542f\u7528\u5bf9\u8be5\u5171\u4eab\u5185\u5b58\u7684\u8bbf\u95ee\uff0c\u5c06\u5176\u8fde\u63a5\u5230\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\u3002 \u7b2c\u4e8c\u4e2a\u53c2\u6570shm_addr\u6307\u5b9a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u4e2d\u7684\u5730\u5740\u4f4d\u7f6e\uff0c\u4e00\u822c\u662f\u7a7a\u6307\u9488\uff0c\u8868\u793a\u8ba9\u7cfb\u7edf\u6765\u9009\u62e9\u5171\u4eab\u5185\u5b58\u51fa\u73b0\u7684\u5730\u5740\u3002*/ void * shmat ( int shm_id , const void * shm_addr , int shmflg ); /**/ int shmctl ( int shm_id , int cmd , struct shmid_ds * buf ); struct shmid_ds { uid_t shm_perm . uid ; uid_t shm_perm . gid ; mode_t shm_perm . mode ; } /*\u5c06\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002 \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002 \u5206\u79bb\u5e76\u672a\u5220\u9664\uff0c\u53ea\u662f\u4f7f\u5f97\u8be5\u5171\u4eab\u5185\u5b58\u5bf9\u5f53\u524d\u8fdb\u7a0b\u4e0d\u518d\u53ef\u7528*/ int shmdt ( const void * shm_addr ); /*\u521b\u5efa\u5171\u4eab\u5185\u5b58 \u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u5171\u4eab\u5185\u5b58\u6807\u8bc6\u7b26 \u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u6307\u5b9a\u9700\u8981\u5171\u4eab\u7684\u5185\u5b58\u5bb9\u91cf*/ int shmget ( key_t key , size_t size , int shmflg );","title":"\u5171\u4eab\u5185\u5b58"},{"location":"os/linux/linux_program/#_30","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <sys/msg.h> /**/ int msgctl ( int msqid , int cmd , struct msqid_ds * buf ); struct msqid_ds { uid_t msg_perm . uid ; uid_t msg_perm . gid ; mode_t msg_perm . mode ; } /*\u521b\u5efa\u548c\u8bbf\u95ee\u4e00\u4e2a\u6d88\u606f\u961f\u5217 \u6210\u529f\u65f6msgget\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5373\u6807\u8bc6\u7b26\uff0c\u5931\u8d25\u8fd4\u56de-1*/ int msgget ( key_t key , int msgflg ); /*\u4ece\u4e00\u4e2a\u6d88\u606f\u961f\u5217\u4e2d\u83b7\u53d6\u6d88\u606f*/ int msgrcv ( int msqid , void * msg_ptr , size_t msg_sz , long int msgtype , int msgflg ); /*\u7528\u6765\u628a\u6d88\u606f\u6dfb\u52a0\u5230\u6d88\u606f\u961f\u5217\u4e2d*/ int msgsnd ( int msqid , const void * msg_ptr , size_t msg_sz , int msgflg ); struct my_message { long int message_type ; //data }","title":"\u6d88\u606f\u961f\u5217"},{"location":"os/linux/linux_program/#_31","text":"\u5957\u63a5\u5b57\u76843\u4e2a\u5c5e\u6027\uff1a\u57df(domain)\u3001\u7c7b\u578b(type)\u3001\u534f\u8bae(protocol)\u3002 1 2 3 4 #include <sys/types.h> #include <sys/socket.h> int socket ( int domain , int type , int protocol ); |\u57df|\u8bf4\u660e| |---|---| |AF_UNIX|unix\u57df\u534f\u8bae(\u6587\u4ef6\u7cfb\u7edf\u5957\u63a5\u5b57)| |AF_INET|ARPA\u56e0\u7279\u7f51\u534f\u8bae(UNIX\u7f51\u7edc\u5957\u63a5\u5b57)| type\u53c2\u6570\u6307\u5b9a\u5957\u63a5\u5b57\u7684\u901a\u4fe1\u7279\u6027\u3002\u5b83\u7684\u53d6\u503c\u5305\u62ecSOCK_STREAM\u548cSOCK_DGRAM\u3002 AF_UNIX\u57df\u5957\u63a5\u5b57\u5730\u5740\u683c\u5f0f 1 2 3 4 struct sockaddr_un { sa_family_t sun_family ; char sun_path []; } AF_INET\u57df\u5957\u63a5\u5b57\u5730\u5740\u683c\u5f0f 1 2 3 4 5 6 7 8 struct sockaddr_in { short int sin_family ; unsigned short int sin_port ; struct in_addr sin_addr ; } struct in_addr { unsigned long int s_addr ; }","title":"\u5957\u63a5\u5b57"},{"location":"os/linux/linux_program/#_32","text":"1 2 3 #include <sys/socket.h> /*bind\u7cfb\u7edf\u8c03\u7528\u628a\u53c2\u6570address\u4e2d\u7684\u5730\u5740\u5206\u914d\u7ed9\u4e0e\u6587\u4ef6\u63cf\u8ff0\u7b26socket\u5173\u8054\u7684\u672a\u547d\u540d\u5957\u63a5\u5b57\u6210\u529f\u65f6\u8fd4\u56de0\uff0c\u5931\u8d25\u65f6\u8fd4\u56de-1*/ int bind ( int socket , const struct sockaddr * address , size_t address_len );","title":"\u547d\u540d\u5957\u63a5\u5b57"},{"location":"os/linux/linux_program/#_33","text":"1 2 3 4 #include <sys/socket.h> /*listen\u51fd\u6570\u5c06\u961f\u5217\u957f\u5ea6\u8bbe\u7f6e\u4e3abacklcg\u53c2\u6570\u7684\u503c \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1*/ int listen ( int socket , int backlog );","title":"\u521b\u5efa\u5957\u63a5\u5b57\u961f\u5217"},{"location":"os/linux/linux_program/#_34","text":"1 2 #include <sys/socket.h> int accept ( int socket , struct sockaddr * address , size_t * address_len ); \u5982\u679c\u5957\u63a5\u5b57\u961f\u5217\u4e2d\u6ca1\u6709\u672a\u5904\u7406\u7684\u8fde\u63a5\uff0caccept\u5c06\u963b\u585e\u76f4\u5230\u5ba2\u6237\u5efa\u7acb\u8fde\u63a5\u4e3a\u6b62\u3002\u53ef\u4ee5\u901a\u8fc7\u5bf9\u5957\u63a5\u5b57\u6587\u4ef6\u79d2\u901f\u7b26\u8bbe\u7f6e\u6807\u5fd7\u6765\u6539\u53d8\u8fd9\u4e00\u884c\u4e3a\u3002 1 2 int flags = fcntl ( socket , F_GETFL , 0 ); fcntl ( socket , F_SETFL , O_NONBLOCK | flags );","title":"\u63a5\u53d7\u8fde\u63a5"},{"location":"os/linux/linux_program/#_35","text":"1 2 #include <sys/socket.h> int connect ( int socket , const struct sockaddr * address , size_t address_len ); //\u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25-1","title":"\u8bf7\u6c42\u8fde\u63a5"},{"location":"os/linux/linux_program/#_36","text":"1 2 3 4 5 #include <netinet/in.h> unsigned long int htonl ( unsigned long int hostlong ); unsigned short int htons ( unsigned short int hostshort ); unsigned long int ntohl ( unsigned long int netlong ); unsigned long int ntohs ( unsigned short int netshort );","title":"\u4e3b\u673a\u5b57\u8282\u5e8f\u548c\u7f51\u7edc\u5b57\u8282\u5e8f"},{"location":"os/linux/linux_program/#_37","text":"1 2 #include <sys/socket.h> int setsockopt ( int socket , int level , int option_name , const void * option_value , size_t option_len );","title":"\u5957\u63a5\u5b57\u9009\u9879"},{"location":"os/linux/linux_program/#select","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <sys/types.h> #include <sys/time.h> void FD_ZERO ( fd_set * fdset ); //\u5c06fd_set\u521d\u59cb\u5316\u4e3a\u7a7a\u96c6\u5408 void FD_CLR ( int fd , fd_set * fdset ); //\u8bbe\u7f6e\u7531\u53c2\u6570fd\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 void FD_SET ( int fd , fd_set * fdset ); //\u6e05\u9664\u7531\u53c2\u6570fd\u4f20\u9012\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 int FD_ISSET ( int fd , fd_set * fdset ); //\u53c2\u6570fd\u6307\u5411\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f\u7531\u53c2\u6570fdset\u6307\u5411\u7684fd_set\u96c6\u5408\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u975e\u96f6\u503c\u3002 struct timeval { time_t tv_sec ; long tv_usec ; } //\u8bbe\u5b9a\u8d85\u65f6\u503c\u6765\u9632\u6b62\u65e0\u9650\u671f\u7684\u963b\u585e /*select\u8c03\u7528\u7528\u4e8e\u6d4b\u8bd5\u6587\u4ef6\u63cf\u8ff0\u7b26\u96c6\u5408\u4e2d\uff0c\u662f\u5426\u6709\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u5df2\u5904\u4e8e\u53ef\u8bfb\u72b6\u6001\u6216\u53ef\u5199\u72b6\u6001\u6216\u9519\u8bef\u72b6\u6001\uff0c\u5b83\u5c06\u963b\u585e\u4ee5\u7b49\u5f85\u67d0\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u8fdb\u5165\u4e0a\u8ff0\u8fd9\u4e9b\u72b6\u6001\u3002*/ int select ( int nfds , fd_set * readfds , fd_set * writefds , fd_set * errorfds , struct timeval * timeout );","title":"select\u7cfb\u7edf\u8c03\u7528"},{"location":"source/regexp/","text":"\u6b63\u5219\u8868\u8fbe\u5f0f(Regular Expression,regexp) \u00b6 pcre/grep/ \u5b9a\u4f4d\u7b26 \u00b6 \u5b9a\u4f4d\u7b26 \u8bf4\u660e ^ \u5339\u914d\u5b57\u7b26\u4e32\u7684\u5f00\u59cb $ \u5339\u914d\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u4f4d\u7f6e \u9009\u6298\u7b26 \u00b6 \u5f53\u8981\u67e5\u627e\u7684\u6761\u4ef6\u6709\u591a\u4e2a\uff0c\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u6ee1\u8db3\u5373\u6210\u7acb\u65f6\uff0c\u4f7f\u7528\u9009\u62e9\u7b26\"|\"\u3002 1 grep -p --color 'Linux|UNIX' \u5b57\u7b26\u8303\u56f4 \u00b6 \u793a\u4f8b \u8bf4\u660e [abc] \u5339\u914d\u5b57\u7b26a,b,c [^abc] \u5339\u914d\u9664a,b,c\u4ee5\u5916\u7684\u5b57\u7b26 [a-z] \u5339\u914d\u5b57\u6bcda-z\u8303\u56f4\u5185\u7684\u5b57\u7b26 1 2 [^a-z] [a-zA-Z0-9] \u70b9\u5b57\u7b26\u548c\u9650\u5b9a\u7b26 \u00b6 \u70b9\u5b57\u7b26\".\"\u7528\u6765\u5339\u914d\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u3002 \u9650\u5b9a\u7b26(?,+,*,{})\u7528\u4e8e\u5339\u914d\u67d0\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u5b57\u7b26 \u8bf4\u660e \u793a\u4f8b . \u5339\u914d\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26 s.t\u2192sat,set,sit ? \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u96f6\u6b21\u6216\u8005\u4e00\u6b21 colou?r\u2192color,colour + \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u4e00\u6b21\u6216\u8005\u591a\u6b21 go+gle\u2192goole,gooooole * \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u96f6\u6b21\u6216\u8005\u591a\u6b21 go*gle\u2192gogle,goooogle {n} \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26n\u6b21 go{2}gle\u2192google {n,} \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11n\u6b21 go{3,}gle\u2192gooogle,gooooooogle {n,m} \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11n\u6b21\uff0c\u6700\u591am\u6b21 employe{0,2}\u2192employ,employe,employee \u5f53\u70b9\u5b57\u7b26\u548c\u9650\u5b9a\u7b26\u8fde\u7528\u65f6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5339\u914d\u6307\u5b9a\u6570\u91cf\u7684 \u4efb\u610f\u5b57\u7b26 \u3002 \u6b63\u5219\u8868\u8fbe\u5f0f\u652f\u6301\u8d2a\u5a6a\u5339\u914d\u548c\u60f0\u6027\u5339\u914d\u4e24\u79cd\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u8d2a\u5a6a\u5339\u914d\u3002\u5f53\u8981\u5b9e\u73b0\u60f0\u6027\u5339\u914d \uff0c\u5728\u4e0a\u4e00\u4e2a\u9650\u5b9a\u7b26\u540e\u9762\u52a0\u4e0a\"?\"\u7b26\u53f7\u3002 \u5339\u914d\u65b9\u5f0f \u793a\u4f8b \u8bf4\u660e \u8d2a\u5a6a a.*b \u6700\u5148\u51fa\u73b0\u7684a\u5230\u6700\u540e\u51fa\u73b0\u7684b\u2192 a00b00bab c \u60f0\u6027 a.*?b \u6700\u5148\u51fa\u73b0\u7684a\u5230\u6700\u5148\u51fa\u73b0\u7684b\u2192 a00b 00b ab c \u5c0f\u62ec\u53f7 \u00b6 \u5c0f\u62ec\u53f7\u7684\u4e24\u4e2a\u4f5c\u7528\uff0c\u4e00\u662f\u6539\u53d8\u4f5c\u7528\u8303\u56f4\uff0c\u4e8c\u662f\u5206\u7ec4\u3002 \u793a\u4f8b \u8bf4\u660e thir|fourth thir th fourth (thir|four)th thirth fourth app{2} appp pappapp (app){2} apppp appapp (\u5206\u7ec4\u540e\u8868\u793a\u5339\u914d2\u4e2aapp) \u53cd\u659c\u6760 \u00b6 \u53cd\u659c\u6760\"\\\"\u6709\u4e24\u4e2a\u4f5c\u7528\uff0c\u4e00\u662f\u4f5c\u4e3a\u8f6c\u4e49\u5b57\u7b26\uff0c\u4e8c\u662f\u8868\u793a\u4e00\u4e9b\u4e0d\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u6307\u5b9a\u9884\u5b9a\u4e49\u5b57\u7b26\u96c6\u7b49\u3002 \u5b57\u7b26 \u8bf4\u660e \\d \u4efb\u610f\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u76f8\u5f53\u4e8e[0-9] \\D \u4efb\u610f\u4e00\u4e2a\u975e\u5341\u8fdb\u5236\u7684\u6570\u5b57 \\w \u4efb\u610f\u4e00\u4e2a\u5355\u8bcd\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e[a-zA-z0-9] \\W \u4efb\u610f\u4e00\u4e2a\u975e\u5355\u8bcd\u5b57\u7b26 \\s \u4efb\u610f\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26(\u7a7a\u683c\uff0c\u6c34\u5e73\u5236\u8868\u7b26) \\S \u4efb\u610f\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26 \\b \u5355\u8bcd\u5206\u754c\u7b26\uff0c\\bapple \u2192 test apple \\B \u975e\u5355\u8bcd\u5206\u754c\u7b26\uff0c\\Bple \u2192 test ap ple \\xhh \u8868\u793ahh(\u5341\u516d\u8fdb\u52362\u4f4d\u6570\u5b57)\u5bf9\u5e94\u7684ASCII\u5b57\u7b26\uff0c\u5982\\x61\u662fa \u793a\u4f8b \u00b6 \u53ea\u5141\u8bb8\u8bbf\u95eehtml,css,jpg\u6269\u5c55\u540d 1 ^.*?\\.(html|css|jpg)$ \u9a8c\u8bc1ip\u5730\u5740 1 2 3 4 5 6 0~99: [1-9]?\\d 100~199: 1\\d{2} 200~255: 2([0-4]\\d|5[0-5]) 0~255: [1-9]?\\d|1\\d{2}|2([0-4]\\d|5[0-5]) 0.0.0.0: ^(0\\.){3}0$ --> ^(()\\.){3}()$ ip\u5730\u5740: ^(([1-9]?\\d|1\\d{2}|2([0-4]\\d|5[0-5]))\\.){3}([1-9]?\\d|1\\d{2}|2([0-4]\\d|5[0-5]))$ \u9a8c\u8bc1\u65e5\u671f\u683c\u5f0f 1 2 3 4 \u9a8c\u8bc1\u5e74\u4efd: [1-9]\\d{3} \u9a8c\u8bc1\u6708\u4efd: [1-9]|1[0-2] \u9a8c\u8bc1\u5929\u6570: [1-9]|[1-2]\\d|3[01] \u5b8c\u6574\u6b63\u5219\u8868\u8fbe\u5f0f: ^[1-9]\\d{3}-([1-9]|1[0-2])-([1-9]|[1-2]\\d|3[01])$","title":"\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"source/regexp/#regular-expressionregexp","text":"pcre/grep/","title":"\u6b63\u5219\u8868\u8fbe\u5f0f(Regular Expression,regexp)"},{"location":"source/regexp/#_1","text":"\u5b9a\u4f4d\u7b26 \u8bf4\u660e ^ \u5339\u914d\u5b57\u7b26\u4e32\u7684\u5f00\u59cb $ \u5339\u914d\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u4f4d\u7f6e","title":"\u5b9a\u4f4d\u7b26"},{"location":"source/regexp/#_2","text":"\u5f53\u8981\u67e5\u627e\u7684\u6761\u4ef6\u6709\u591a\u4e2a\uff0c\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u6ee1\u8db3\u5373\u6210\u7acb\u65f6\uff0c\u4f7f\u7528\u9009\u62e9\u7b26\"|\"\u3002 1 grep -p --color 'Linux|UNIX'","title":"\u9009\u6298\u7b26"},{"location":"source/regexp/#_3","text":"\u793a\u4f8b \u8bf4\u660e [abc] \u5339\u914d\u5b57\u7b26a,b,c [^abc] \u5339\u914d\u9664a,b,c\u4ee5\u5916\u7684\u5b57\u7b26 [a-z] \u5339\u914d\u5b57\u6bcda-z\u8303\u56f4\u5185\u7684\u5b57\u7b26 1 2 [^a-z] [a-zA-Z0-9]","title":"\u5b57\u7b26\u8303\u56f4"},{"location":"source/regexp/#_4","text":"\u70b9\u5b57\u7b26\".\"\u7528\u6765\u5339\u914d\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u3002 \u9650\u5b9a\u7b26(?,+,*,{})\u7528\u4e8e\u5339\u914d\u67d0\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u3002 \u5b57\u7b26 \u8bf4\u660e \u793a\u4f8b . \u5339\u914d\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26 s.t\u2192sat,set,sit ? \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u96f6\u6b21\u6216\u8005\u4e00\u6b21 colou?r\u2192color,colour + \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u4e00\u6b21\u6216\u8005\u591a\u6b21 go+gle\u2192goole,gooooole * \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u96f6\u6b21\u6216\u8005\u591a\u6b21 go*gle\u2192gogle,goooogle {n} \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26n\u6b21 go{2}gle\u2192google {n,} \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11n\u6b21 go{3,}gle\u2192gooogle,gooooooogle {n,m} \u5339\u914d\u524d\u9762\u7684\u5b57\u7b26\u81f3\u5c11n\u6b21\uff0c\u6700\u591am\u6b21 employe{0,2}\u2192employ,employe,employee \u5f53\u70b9\u5b57\u7b26\u548c\u9650\u5b9a\u7b26\u8fde\u7528\u65f6\uff0c\u53ef\u4ee5\u5b9e\u73b0\u5339\u914d\u6307\u5b9a\u6570\u91cf\u7684 \u4efb\u610f\u5b57\u7b26 \u3002 \u6b63\u5219\u8868\u8fbe\u5f0f\u652f\u6301\u8d2a\u5a6a\u5339\u914d\u548c\u60f0\u6027\u5339\u914d\u4e24\u79cd\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u8d2a\u5a6a\u5339\u914d\u3002\u5f53\u8981\u5b9e\u73b0\u60f0\u6027\u5339\u914d \uff0c\u5728\u4e0a\u4e00\u4e2a\u9650\u5b9a\u7b26\u540e\u9762\u52a0\u4e0a\"?\"\u7b26\u53f7\u3002 \u5339\u914d\u65b9\u5f0f \u793a\u4f8b \u8bf4\u660e \u8d2a\u5a6a a.*b \u6700\u5148\u51fa\u73b0\u7684a\u5230\u6700\u540e\u51fa\u73b0\u7684b\u2192 a00b00bab c \u60f0\u6027 a.*?b \u6700\u5148\u51fa\u73b0\u7684a\u5230\u6700\u5148\u51fa\u73b0\u7684b\u2192 a00b 00b ab c","title":"\u70b9\u5b57\u7b26\u548c\u9650\u5b9a\u7b26"},{"location":"source/regexp/#_5","text":"\u5c0f\u62ec\u53f7\u7684\u4e24\u4e2a\u4f5c\u7528\uff0c\u4e00\u662f\u6539\u53d8\u4f5c\u7528\u8303\u56f4\uff0c\u4e8c\u662f\u5206\u7ec4\u3002 \u793a\u4f8b \u8bf4\u660e thir|fourth thir th fourth (thir|four)th thirth fourth app{2} appp pappapp (app){2} apppp appapp (\u5206\u7ec4\u540e\u8868\u793a\u5339\u914d2\u4e2aapp)","title":"\u5c0f\u62ec\u53f7"},{"location":"source/regexp/#_6","text":"\u53cd\u659c\u6760\"\\\"\u6709\u4e24\u4e2a\u4f5c\u7528\uff0c\u4e00\u662f\u4f5c\u4e3a\u8f6c\u4e49\u5b57\u7b26\uff0c\u4e8c\u662f\u8868\u793a\u4e00\u4e9b\u4e0d\u53ef\u6253\u5370\u7684\u5b57\u7b26\uff0c\u6307\u5b9a\u9884\u5b9a\u4e49\u5b57\u7b26\u96c6\u7b49\u3002 \u5b57\u7b26 \u8bf4\u660e \\d \u4efb\u610f\u4e00\u4e2a\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u76f8\u5f53\u4e8e[0-9] \\D \u4efb\u610f\u4e00\u4e2a\u975e\u5341\u8fdb\u5236\u7684\u6570\u5b57 \\w \u4efb\u610f\u4e00\u4e2a\u5355\u8bcd\u5b57\u7b26\uff0c\u76f8\u5f53\u4e8e[a-zA-z0-9] \\W \u4efb\u610f\u4e00\u4e2a\u975e\u5355\u8bcd\u5b57\u7b26 \\s \u4efb\u610f\u4e00\u4e2a\u7a7a\u767d\u5b57\u7b26(\u7a7a\u683c\uff0c\u6c34\u5e73\u5236\u8868\u7b26) \\S \u4efb\u610f\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26 \\b \u5355\u8bcd\u5206\u754c\u7b26\uff0c\\bapple \u2192 test apple \\B \u975e\u5355\u8bcd\u5206\u754c\u7b26\uff0c\\Bple \u2192 test ap ple \\xhh \u8868\u793ahh(\u5341\u516d\u8fdb\u52362\u4f4d\u6570\u5b57)\u5bf9\u5e94\u7684ASCII\u5b57\u7b26\uff0c\u5982\\x61\u662fa","title":"\u53cd\u659c\u6760"},{"location":"source/regexp/#_7","text":"\u53ea\u5141\u8bb8\u8bbf\u95eehtml,css,jpg\u6269\u5c55\u540d 1 ^.*?\\.(html|css|jpg)$ \u9a8c\u8bc1ip\u5730\u5740 1 2 3 4 5 6 0~99: [1-9]?\\d 100~199: 1\\d{2} 200~255: 2([0-4]\\d|5[0-5]) 0~255: [1-9]?\\d|1\\d{2}|2([0-4]\\d|5[0-5]) 0.0.0.0: ^(0\\.){3}0$ --> ^(()\\.){3}()$ ip\u5730\u5740: ^(([1-9]?\\d|1\\d{2}|2([0-4]\\d|5[0-5]))\\.){3}([1-9]?\\d|1\\d{2}|2([0-4]\\d|5[0-5]))$ \u9a8c\u8bc1\u65e5\u671f\u683c\u5f0f 1 2 3 4 \u9a8c\u8bc1\u5e74\u4efd: [1-9]\\d{3} \u9a8c\u8bc1\u6708\u4efd: [1-9]|1[0-2] \u9a8c\u8bc1\u5929\u6570: [1-9]|[1-2]\\d|3[01] \u5b8c\u6574\u6b63\u5219\u8868\u8fbe\u5f0f: ^[1-9]\\d{3}-([1-9]|1[0-2])-([1-9]|[1-2]\\d|3[01])$","title":"\u793a\u4f8b"},{"location":"source/shell/","text":"Shell(\u58f3)\u5904\u4e8e\u5185\u6838\u4e0e\u7528\u6237\u4e4b\u95f4\u3002\u4e3b\u8981\u529f\u80fd\u4e3a\u547d\u4ee4\u89e3\u91ca\uff0c ls /bin/*sh \u3002 \u53d8\u91cf \u00b6 Shell\u4e2d\u7684\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u65e0\u987b\u5b9a\u4e49\uff0c\u5728\u4f7f\u7528\u65f6\u521b\u5efa\u3002shell\u4e2d\u4f7f\u7528$\u7b26\u53f7\u6765\u5f15\u7528\u53d8\u91cf\u3002 \u5f15\u7528\u683c\u5f0f \u8fd4\u56de\u503c \u4e3e\u4f8b $var \u8fd4\u56de\u53d8\u91cf\u503c var=\"hello\",$var\u5373hello ${var} \u8fd4\u56de\u53d8\u91cf\u503c var=\"hello\",${var}\u5373hello ${#var} \u8fd4\u56de\u53d8\u91cf\u7684\u957f\u5ea6 var=\"hello\",${#var}\u53735 ${var:start_index} \u8fd4\u56de\u4ecestart_index\u5f00\u59cb\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u5b50\u4e32\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u4e0b\u6807\u4ece0\u5f00\u59cb var=\"hello\",${var:2}\u5373llo ${var:start_index:length \u8fd4\u56de\u4ecestart_index\u5f00\u59cb\u7684\u957f\u5ea6length\u4e2a\u5b57\u7b26\u3002\u5f53start_index\u4e3a\u8d1f\u503c\uff0c\u8868\u793a\u4ece\u672b\u5c3e\u5f80\u524d\u6570start_index var=\"helloworld\" ${var:2:3}\u5373llo ${var:-4:3}\u5373orl ${var#string} \u8fd4\u56de\u4ece\u5de6\u8fb9\u5220\u9664string\u524d\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u62ecstring\uff0c\u5339\u914d\u6700\u8fd1\u7684\u5b57\u7b26 var=\"helloworld\",${var#*o}\u5373world,*\u8868\u793a\u901a\u914d\u7b26 ${var##string} \u8fd4\u56de\u4ece\u5de6\u8fb9\u5220\u9664string\u524d\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u62ecstring\uff0c\u5339\u914d\u6700\u957f\u7684\u5b57\u7b26 var=\"helloworld\",${var##*o}\u5373rld ${var:=newstring} \u5f53var\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\uff0c\u5219\u8fd4\u56denewstring\uff0c\u5e76\u628anewstring\u8d4b\u7ed9var\uff0c\u5426\u5219\u8fd4\u56de\u539f\u503c var=\"\",${var:=hello}\u5373hello,var=hello; var=\"hello\", ${var:=world}\u5373hello ${var:-newstring} \u5f53var\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\uff0c\u5219\u8fd4\u56denewstring\uff0c\u5426\u5219\u8fd4\u56de\u539f\u503c var=\"\",${var:-hello}\u5373hello,var\u4ecd\u4e3a\u7a7a; var=\"hello\", ${var:-world}\u5373hello ${var:+newstring} \u5f53var\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7a7a\u503c\uff0c\u5426\u5219\u8fd4\u56denewstring var=\"\",${var:+hello}\u4e3a\u7a7a; var=\"hello\", ${var:+world}\u5373world ${var:?newstring} \u5f53var\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\uff0c\u5219\u5c06newstring\u5199\u5165\u6807\u51c6\u9519\u8bef\u6d41\uff0c\u8be5\u8bed\u53e5\u5931\u8d25\uff1b\u5426\u5219\u8fd4\u56de\u539f\u503c var=\"\", ${var:?hello}\u5c06hello\u5199\u5165\u6807\u51c6\u9519\u8bef\u6d41\uff0c\u6b64\u65f6\u8f93\u51fa\u4e3abash:var:hello; var=\"hello\",${var:?world}\u5373hello ${var/substring/newstring} \u5c06var\u4e2d\u7b2c\u4e00\u4e2asubstring\u66ff\u6362\u4e3anewstring\u5e76\u8fd4\u56de\u65b0\u7684var var=\"hello\",${var/ell/wyx}\u5373hwyxo ${var//substring/newstring} \u5c06var\u4e2d\u6240\u6709substring\u66ff\u6362\u4e3anewstring\u5e76\u8fd4\u56de\u65b0\u7684var var=\"hellohello\"\uff0c${var//ell/wyx}\u5373hwyxohwyxo shell\u811a\u672c\u4e2d\u901a\u8fc7echo\u5173\u952e\u5b57\u6253\u5370\u53d8\u91cf\uff0c\u901a\u8fc7read\u5173\u952e\u5b57\u8bfb\u53d6\u53d8\uff0c read var \u3002 \u73af\u5883\u53d8\u91cf \u00b6 \u73af\u5883\u53d8\u91cf\u53c8\u79f0\u4e3a\u6c38\u4e45\u53d8\u91cf\uff0c\u4e0e\u5c40\u90e8\u53d8\u91cf\u76f8\u5bf9\uff0c\u7528\u4e8e\u521b\u5efa\u7684shell\u548c\u4ece\u8be5shell\u6d3e\u751f\u7684\u5b50shell\u6216\u8fdb\u7a0b\u4e2d\u3002\u4e3a\u4e86\u533a\u522b\u4e8e\u5c40\u90e8\u53d8\u91cf\uff0c\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u5b57\u6bcd\u5168\u90e8\u4e3a\u5927\u5199\u3002 1 export \u53d8\u91cf\u540d(=\u503c) \u4f4d\u7f6e\u53d8\u91cf \u00b6 \u4f4d\u7f6e\u53d8\u91cf\u5373\u6267\u884c\u811a\u672c\u65f6\u4f20\u5165\u811a\u672c\u4e2d\u5bf9\u5e94\u811a\u672c\u4f4d\u7f6e\u7684\u53d8\u91cf\u3002\u7c7b\u4f3c\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5f15\u7528\u65b9\u6cd5\u4e3a \u7b26\u53f7\u52a0\u4e0a\u4f4d\u7f6e\u53c2\u6570\uff0c\u5982 \u7b26\u53f7\u52a0\u4e0a\u4f4d\u7f6e\u53c2\u6570\uff0c\u5982 0, 1, 1, 2,\u5176\u4e2d$0\u4e3a\u811a\u672c\u540d\u79f0\u3002 \u4f7f\u7528 shift \u53ef\u4ee5\u79fb\u52a8\u4f4d\u7f6e\u53d8\u91cf\u5bf9\u5e94\u7684\u53c2\u6570\uff0cshift\u6bcf\u6267\u884c\u4e00\u6b21\uff0c\u53c2\u6570\u5e8f\u5217\u987a\u5e8f\u5de6\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u3002 \u6807\u51c6\u53d8\u91cf \u00b6 \u6807\u51c6\u53d8\u91cf\u4e5f\u662f\u73af\u5883\u53d8\u91cf\uff0c\u5728bash\u73af\u5883\u5efa\u7acb\u65f6\u751f\u6210\u3002\u8be5\u53d8\u91cf\u81ea\u52a8\u89e3\u6790\uff0c\u901a\u8fc7\u67e5\u770betc\u76ee\u5f55\u4e0b\u7684profile\u6587\u4ef6\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u6807\u51c6\u73af\u5883\u53d8\u91cf\u3002 \u4f7f\u7528env\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5305\u62ec\u73af\u5883\u53d8\u91cf\u548c\u6807\u51c6\u53d8\u91cf\u3002 \u7279\u6b8a\u53d8\u91cf \u00b6 # \u4f20\u9012\u5230\u811a\u672c\u6216\u51fd\u6570\u7684\u53c2\u6570\u6570\u91cf\u3002 \uff1f \u524d\u4e00\u4e2a\u547d\u4ee4\u6267\u884c\u60c5\u51b5\uff0c0\u8868\u793a\u6210\u529f\uff0c\u5176\u5b83\u503c\u8868\u793a\u5931\u8d25\u3002 $ \u8fd0\u884c\u5f53\u524d\u811a\u672c\u7684\u5f53\u524d\u8fdb\u7a0bid\u53f7\u3002 ! \u8fd0\u884c\u811a\u672c\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\u3002 * \u4f20\u9012\u7ed9\u811a\u672c\u6216\u51fd\u6570\u7684\u5168\u90e8\u53c2\u6570\u3002 \u53d8\u91cf\u7684\u8fd0\u7b97 \u00b6 let let\u547d\u4ee4\u53ef\u4ee5\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u548c\u6570\u503c\u8868\u8fbe\u5f0f\u6d4b\u8bd5\u3002 1 2 3 4 5 6 7 let \u8868\u8fbe\u5f0f ((\u7b97\u672f\u8868\u8fbe\u5f0f)) #!/bin/sh i = 1 let i=i+2 ((i+=2)) expr 1 2 expr 3+5 8 \u6761\u4ef6\u8bed\u53e5 \u00b6 \u6761\u4ef6\u5224\u65ad \u00b6 1 2 3 4 5 test \u9009\u9879 \u53c2\u6570 if test -f file then ... fi [\u547d\u4ee4\u4e0etest\u547d\u4ee4\u529f\u80fd\u76f8\u540c,\u9700\u8981\u6ce8\u610f\u7684\u662f[\u547d\u4ee4\u4e5f\u662f\u547d\u4ee4,\u547d\u4ee4\u4e0e\u9009\u9879\u4e4b\u95f4\u5e94\u6709\u7a7a\u683c\u3002\u56e0\u6b64\u5728[]\u7b26\u53f7\u4e0e[]\u7b26\u53f7\u4e2d\u7684\u68c0\u67e5\u6761\u4ef6\u4e4b\u95f4\u9700\u8981\u7559\u51fa\u7a7a\u683c\uff0c\u5426\u5219\u4ea7\u751f\u9519\u8bef\u3002 1 2 3 if [ -f file ]; then ... fi \u5b57\u7b26\u4e32\u6bd4\u8f83 \u6761\u4ef6 \u8bf4\u660e str1=str2 \u76f8\u7b49\u7ed3\u679c\u4e3a\u771f str1!=str2 \u4e0d\u60f3\u7b49\u7ed3\u679c\u4e3a\u771f -n str \u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -z str \u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u7ed3\u679c\u4e3a\u771f \u7b97\u672f\u6bd4\u8f83 \u6761\u4ef6 \u8bf4\u660e expr1 -eq expr2 \u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u76f8\u540c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -ne expr2 \u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -gt expr2 expr1\u7684\u8fd4\u56de\u503c\u5927\u4e8eexpr2\u7684\u8fd4\u56de\u503c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -ge expr2 expr1\u7684\u8fd4\u56de\u503c\u5927\u4e8e\u7b49\u4e8eexpr2\u7684\u8fd4\u56de\u503c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -lt expr2 expr1\u7684\u8fd4\u56de\u503c\u5c0f\u4e8eexpr2\u7684\u8fd4\u56de\u503c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -le expr2 expr1\u7684\u8fd4\u56de\u503c\u5c0f\u4e8e\u7b49\u4e8eexpr2\u7684\u8fd4\u56de\u503c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f !expr \u5f53\u8868\u8fbe\u5f0f\u7ed3\u679c\u4e3a\u5047\uff0c\u5219\u7ed3\u679c\u4e3a\u771f \u6587\u4ef6\u6d4b\u8bd5 \u6761\u4ef6 \u8bf4\u660e -d file file\u662f\u76ee\u5f55\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -f file file\u662f\u666e\u901a\u6587\u4ef6\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -r file file\u53ef\u8bfb\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -w file file\u53ef\u5199\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -x file file\u53ef\u6267\u884c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -s file file\u6587\u4ef6\u5927\u5c0f\u4e0d\u4e3a0\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -a file file\u5b58\u5728\uff0c\u5219\u7ed3\u679c\u4e3a\u771f if\u6761\u4ef6\u8bed\u53e5 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 if [ \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 ]; then ... fi if [ \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 ]; then ... else ... fi if [ \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 ]; then ... elif [ \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 ]; then ... else ... fi select\u8bed\u53e5 \u00b6 1 2 3 4 5 select \u53d8\u91cf in \u5217\u8868 do ... [break] done 1 2 3 4 5 6 7 8 9 #!/bin/sh #select echo \"please gei me a number:\" select data_sum in \"one\" \"two\" \"three\" \"four\" do echo \"you input \"$data_sum break done exit 0 case\u8bed\u53e5 \u00b6 1 2 3 4 5 6 7 8 case var in option1)...;; 'option2')...;; \"option3\")...;; ... *)... esac exit 0 \u5339\u914d\u9009\u9879\u53ef\u4ee5\u4f7f\u7528(\u5355\u5f15\u53f7/\u53cc\u5f15\u53f7)\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5217\u51fa\u3002\u9009\u9879\u540e\u9700\u6dfb\u52a0\u4e00\u4e2a)\uff0c\u6bcf\u4e2a\u5339\u914d\u6761\u4ef6 \u90fd\u4ee5;;\u7ed3\u5c3e\uff0c\u6700\u540e\u4e00\u4e2a\u5339\u914d\u9879*\u7c7b\u4f3cC\u8bed\u8a00\u4e2d\u7684default\uff0c\u662f\u4e00\u4e2a\u901a\u914d\u7b26\uff0c\u8be5\u5339\u914d\u9879\u4e0d\u9700\u8981;;\u7ed3\u5c3e\u3002 \u5faa\u73af \u00b6 \u51fd\u6570 \u00b6 \u8c03\u8bd5 \u00b6","title":"Shell\u7f16\u7a0b"},{"location":"source/shell/#_1","text":"Shell\u4e2d\u7684\u53d8\u91cf\u5728\u4f7f\u7528\u524d\u65e0\u987b\u5b9a\u4e49\uff0c\u5728\u4f7f\u7528\u65f6\u521b\u5efa\u3002shell\u4e2d\u4f7f\u7528$\u7b26\u53f7\u6765\u5f15\u7528\u53d8\u91cf\u3002 \u5f15\u7528\u683c\u5f0f \u8fd4\u56de\u503c \u4e3e\u4f8b $var \u8fd4\u56de\u53d8\u91cf\u503c var=\"hello\",$var\u5373hello ${var} \u8fd4\u56de\u53d8\u91cf\u503c var=\"hello\",${var}\u5373hello ${#var} \u8fd4\u56de\u53d8\u91cf\u7684\u957f\u5ea6 var=\"hello\",${#var}\u53735 ${var:start_index} \u8fd4\u56de\u4ecestart_index\u5f00\u59cb\u5230\u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u5b50\u4e32\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u4e0b\u6807\u4ece0\u5f00\u59cb var=\"hello\",${var:2}\u5373llo ${var:start_index:length \u8fd4\u56de\u4ecestart_index\u5f00\u59cb\u7684\u957f\u5ea6length\u4e2a\u5b57\u7b26\u3002\u5f53start_index\u4e3a\u8d1f\u503c\uff0c\u8868\u793a\u4ece\u672b\u5c3e\u5f80\u524d\u6570start_index var=\"helloworld\" ${var:2:3}\u5373llo ${var:-4:3}\u5373orl ${var#string} \u8fd4\u56de\u4ece\u5de6\u8fb9\u5220\u9664string\u524d\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u62ecstring\uff0c\u5339\u914d\u6700\u8fd1\u7684\u5b57\u7b26 var=\"helloworld\",${var#*o}\u5373world,*\u8868\u793a\u901a\u914d\u7b26 ${var##string} \u8fd4\u56de\u4ece\u5de6\u8fb9\u5220\u9664string\u524d\u7684\u5b57\u7b26\u4e32\uff0c\u5305\u62ecstring\uff0c\u5339\u914d\u6700\u957f\u7684\u5b57\u7b26 var=\"helloworld\",${var##*o}\u5373rld ${var:=newstring} \u5f53var\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\uff0c\u5219\u8fd4\u56denewstring\uff0c\u5e76\u628anewstring\u8d4b\u7ed9var\uff0c\u5426\u5219\u8fd4\u56de\u539f\u503c var=\"\",${var:=hello}\u5373hello,var=hello; var=\"hello\", ${var:=world}\u5373hello ${var:-newstring} \u5f53var\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\uff0c\u5219\u8fd4\u56denewstring\uff0c\u5426\u5219\u8fd4\u56de\u539f\u503c var=\"\",${var:-hello}\u5373hello,var\u4ecd\u4e3a\u7a7a; var=\"hello\", ${var:-world}\u5373hello ${var:+newstring} \u5f53var\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u7a7a\u503c\uff0c\u5426\u5219\u8fd4\u56denewstring var=\"\",${var:+hello}\u4e3a\u7a7a; var=\"hello\", ${var:+world}\u5373world ${var:?newstring} \u5f53var\u4e3a\u7a7a\u6216\u672a\u5b9a\u4e49\uff0c\u5219\u5c06newstring\u5199\u5165\u6807\u51c6\u9519\u8bef\u6d41\uff0c\u8be5\u8bed\u53e5\u5931\u8d25\uff1b\u5426\u5219\u8fd4\u56de\u539f\u503c var=\"\", ${var:?hello}\u5c06hello\u5199\u5165\u6807\u51c6\u9519\u8bef\u6d41\uff0c\u6b64\u65f6\u8f93\u51fa\u4e3abash:var:hello; var=\"hello\",${var:?world}\u5373hello ${var/substring/newstring} \u5c06var\u4e2d\u7b2c\u4e00\u4e2asubstring\u66ff\u6362\u4e3anewstring\u5e76\u8fd4\u56de\u65b0\u7684var var=\"hello\",${var/ell/wyx}\u5373hwyxo ${var//substring/newstring} \u5c06var\u4e2d\u6240\u6709substring\u66ff\u6362\u4e3anewstring\u5e76\u8fd4\u56de\u65b0\u7684var var=\"hellohello\"\uff0c${var//ell/wyx}\u5373hwyxohwyxo shell\u811a\u672c\u4e2d\u901a\u8fc7echo\u5173\u952e\u5b57\u6253\u5370\u53d8\u91cf\uff0c\u901a\u8fc7read\u5173\u952e\u5b57\u8bfb\u53d6\u53d8\uff0c read var \u3002","title":"\u53d8\u91cf"},{"location":"source/shell/#_2","text":"\u73af\u5883\u53d8\u91cf\u53c8\u79f0\u4e3a\u6c38\u4e45\u53d8\u91cf\uff0c\u4e0e\u5c40\u90e8\u53d8\u91cf\u76f8\u5bf9\uff0c\u7528\u4e8e\u521b\u5efa\u7684shell\u548c\u4ece\u8be5shell\u6d3e\u751f\u7684\u5b50shell\u6216\u8fdb\u7a0b\u4e2d\u3002\u4e3a\u4e86\u533a\u522b\u4e8e\u5c40\u90e8\u53d8\u91cf\uff0c\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u5b57\u6bcd\u5168\u90e8\u4e3a\u5927\u5199\u3002 1 export \u53d8\u91cf\u540d(=\u503c)","title":"\u73af\u5883\u53d8\u91cf"},{"location":"source/shell/#_3","text":"\u4f4d\u7f6e\u53d8\u91cf\u5373\u6267\u884c\u811a\u672c\u65f6\u4f20\u5165\u811a\u672c\u4e2d\u5bf9\u5e94\u811a\u672c\u4f4d\u7f6e\u7684\u53d8\u91cf\u3002\u7c7b\u4f3c\u51fd\u6570\u7684\u53c2\u6570\uff0c\u5f15\u7528\u65b9\u6cd5\u4e3a \u7b26\u53f7\u52a0\u4e0a\u4f4d\u7f6e\u53c2\u6570\uff0c\u5982 \u7b26\u53f7\u52a0\u4e0a\u4f4d\u7f6e\u53c2\u6570\uff0c\u5982 0, 1, 1, 2,\u5176\u4e2d$0\u4e3a\u811a\u672c\u540d\u79f0\u3002 \u4f7f\u7528 shift \u53ef\u4ee5\u79fb\u52a8\u4f4d\u7f6e\u53d8\u91cf\u5bf9\u5e94\u7684\u53c2\u6570\uff0cshift\u6bcf\u6267\u884c\u4e00\u6b21\uff0c\u53c2\u6570\u5e8f\u5217\u987a\u5e8f\u5de6\u79fb\u4e00\u4e2a\u4f4d\u7f6e\u3002","title":"\u4f4d\u7f6e\u53d8\u91cf"},{"location":"source/shell/#_4","text":"\u6807\u51c6\u53d8\u91cf\u4e5f\u662f\u73af\u5883\u53d8\u91cf\uff0c\u5728bash\u73af\u5883\u5efa\u7acb\u65f6\u751f\u6210\u3002\u8be5\u53d8\u91cf\u81ea\u52a8\u89e3\u6790\uff0c\u901a\u8fc7\u67e5\u770betc\u76ee\u5f55\u4e0b\u7684profile\u6587\u4ef6\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u6807\u51c6\u73af\u5883\u53d8\u91cf\u3002 \u4f7f\u7528env\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u4e2d\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5305\u62ec\u73af\u5883\u53d8\u91cf\u548c\u6807\u51c6\u53d8\u91cf\u3002","title":"\u6807\u51c6\u53d8\u91cf"},{"location":"source/shell/#_5","text":"# \u4f20\u9012\u5230\u811a\u672c\u6216\u51fd\u6570\u7684\u53c2\u6570\u6570\u91cf\u3002 \uff1f \u524d\u4e00\u4e2a\u547d\u4ee4\u6267\u884c\u60c5\u51b5\uff0c0\u8868\u793a\u6210\u529f\uff0c\u5176\u5b83\u503c\u8868\u793a\u5931\u8d25\u3002 $ \u8fd0\u884c\u5f53\u524d\u811a\u672c\u7684\u5f53\u524d\u8fdb\u7a0bid\u53f7\u3002 ! \u8fd0\u884c\u811a\u672c\u6700\u540e\u4e00\u4e2a\u547d\u4ee4\u3002 * \u4f20\u9012\u7ed9\u811a\u672c\u6216\u51fd\u6570\u7684\u5168\u90e8\u53c2\u6570\u3002","title":"\u7279\u6b8a\u53d8\u91cf"},{"location":"source/shell/#_6","text":"let let\u547d\u4ee4\u53ef\u4ee5\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97\u548c\u6570\u503c\u8868\u8fbe\u5f0f\u6d4b\u8bd5\u3002 1 2 3 4 5 6 7 let \u8868\u8fbe\u5f0f ((\u7b97\u672f\u8868\u8fbe\u5f0f)) #!/bin/sh i = 1 let i=i+2 ((i+=2)) expr 1 2 expr 3+5 8","title":"\u53d8\u91cf\u7684\u8fd0\u7b97"},{"location":"source/shell/#_7","text":"","title":"\u6761\u4ef6\u8bed\u53e5"},{"location":"source/shell/#_8","text":"1 2 3 4 5 test \u9009\u9879 \u53c2\u6570 if test -f file then ... fi [\u547d\u4ee4\u4e0etest\u547d\u4ee4\u529f\u80fd\u76f8\u540c,\u9700\u8981\u6ce8\u610f\u7684\u662f[\u547d\u4ee4\u4e5f\u662f\u547d\u4ee4,\u547d\u4ee4\u4e0e\u9009\u9879\u4e4b\u95f4\u5e94\u6709\u7a7a\u683c\u3002\u56e0\u6b64\u5728[]\u7b26\u53f7\u4e0e[]\u7b26\u53f7\u4e2d\u7684\u68c0\u67e5\u6761\u4ef6\u4e4b\u95f4\u9700\u8981\u7559\u51fa\u7a7a\u683c\uff0c\u5426\u5219\u4ea7\u751f\u9519\u8bef\u3002 1 2 3 if [ -f file ]; then ... fi \u5b57\u7b26\u4e32\u6bd4\u8f83 \u6761\u4ef6 \u8bf4\u660e str1=str2 \u76f8\u7b49\u7ed3\u679c\u4e3a\u771f str1!=str2 \u4e0d\u60f3\u7b49\u7ed3\u679c\u4e3a\u771f -n str \u5b57\u7b26\u4e32\u4e0d\u4e3a\u7a7a\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -z str \u5b57\u7b26\u4e32\u4e3a\u7a7a\uff0c\u5219\u7ed3\u679c\u4e3a\u771f \u7b97\u672f\u6bd4\u8f83 \u6761\u4ef6 \u8bf4\u660e expr1 -eq expr2 \u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u76f8\u540c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -ne expr2 \u8868\u8fbe\u5f0f\u8fd4\u56de\u503c\u4e0d\u540c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -gt expr2 expr1\u7684\u8fd4\u56de\u503c\u5927\u4e8eexpr2\u7684\u8fd4\u56de\u503c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -ge expr2 expr1\u7684\u8fd4\u56de\u503c\u5927\u4e8e\u7b49\u4e8eexpr2\u7684\u8fd4\u56de\u503c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -lt expr2 expr1\u7684\u8fd4\u56de\u503c\u5c0f\u4e8eexpr2\u7684\u8fd4\u56de\u503c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f expr1 -le expr2 expr1\u7684\u8fd4\u56de\u503c\u5c0f\u4e8e\u7b49\u4e8eexpr2\u7684\u8fd4\u56de\u503c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f !expr \u5f53\u8868\u8fbe\u5f0f\u7ed3\u679c\u4e3a\u5047\uff0c\u5219\u7ed3\u679c\u4e3a\u771f \u6587\u4ef6\u6d4b\u8bd5 \u6761\u4ef6 \u8bf4\u660e -d file file\u662f\u76ee\u5f55\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -f file file\u662f\u666e\u901a\u6587\u4ef6\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -r file file\u53ef\u8bfb\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -w file file\u53ef\u5199\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -x file file\u53ef\u6267\u884c\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -s file file\u6587\u4ef6\u5927\u5c0f\u4e0d\u4e3a0\uff0c\u5219\u7ed3\u679c\u4e3a\u771f -a file file\u5b58\u5728\uff0c\u5219\u7ed3\u679c\u4e3a\u771f","title":"\u6761\u4ef6\u5224\u65ad"},{"location":"source/shell/#if","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 if [ \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 ]; then ... fi if [ \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 ]; then ... else ... fi if [ \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 ]; then ... elif [ \u6761\u4ef6\u5224\u65ad\u8bed\u53e5 ]; then ... else ... fi","title":"if\u6761\u4ef6\u8bed\u53e5"},{"location":"source/shell/#select","text":"1 2 3 4 5 select \u53d8\u91cf in \u5217\u8868 do ... [break] done 1 2 3 4 5 6 7 8 9 #!/bin/sh #select echo \"please gei me a number:\" select data_sum in \"one\" \"two\" \"three\" \"four\" do echo \"you input \"$data_sum break done exit 0","title":"select\u8bed\u53e5"},{"location":"source/shell/#case","text":"1 2 3 4 5 6 7 8 case var in option1)...;; 'option2')...;; \"option3\")...;; ... *)... esac exit 0 \u5339\u914d\u9009\u9879\u53ef\u4ee5\u4f7f\u7528(\u5355\u5f15\u53f7/\u53cc\u5f15\u53f7)\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5217\u51fa\u3002\u9009\u9879\u540e\u9700\u6dfb\u52a0\u4e00\u4e2a)\uff0c\u6bcf\u4e2a\u5339\u914d\u6761\u4ef6 \u90fd\u4ee5;;\u7ed3\u5c3e\uff0c\u6700\u540e\u4e00\u4e2a\u5339\u914d\u9879*\u7c7b\u4f3cC\u8bed\u8a00\u4e2d\u7684default\uff0c\u662f\u4e00\u4e2a\u901a\u914d\u7b26\uff0c\u8be5\u5339\u914d\u9879\u4e0d\u9700\u8981;;\u7ed3\u5c3e\u3002","title":"case\u8bed\u53e5"},{"location":"source/shell/#_9","text":"","title":"\u5faa\u73af"},{"location":"source/shell/#_10","text":"","title":"\u51fd\u6570"},{"location":"source/shell/#_11","text":"","title":"\u8c03\u8bd5"},{"location":"source/tinyhttpd/","text":"TinyHttpd\u6e90\u7801 \u00b6 Tinyhttpd \u662fJ. David Blackstone\u57281999\u5e74\u5199\u7684\u4e00\u4e2a\u4e0d\u5230 500 \u884c\u7684\u8d85\u8f7b\u91cf\u578b Http Server\uff0c\u7528\u6765\u5b66\u4e60\u975e\u5e38\u4e0d\u9519\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u771f\u6b63\u7406\u89e3\u670d\u52a1\u5668\u7a0b\u5e8f\u7684\u672c\u8d28\u3002\u5b98\u7f51: http://tinyhttpd.sourceforge.net \u6e90\u7801&\u6ce8\u91ca \u00bavid's webserver */ /* This is a simple webserver. * Created November 1999 by J. David Blackstone. * CSE 4344 (Network concepts), Prof. Zeigler * University of Texas at Arlington */ /* This program compiles for Sparc Solaris 2.6. * To compile for Linux: * 1) Comment out the #include <pthread.h> line. * 2) Comment out the line that defines the variable newthread. * 3) Comment out the two lines that run pthread_create(). * 4) Uncomment the line that runs accept_request(). * 5) Remove -lsocket from the Makefile. */ #include <stdio.h> #include <sys/socket.h> #include <sys/types.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <ctype.h> #include <strings.h> #include <string.h> #include <sys/stat.h> #include <pthread.h> #include <sys/wait.h> #include <stdlib.h> #include <stdint.h> /***************************** * \u68c0\u67e5\u53c2\u6570c\u662f\u5426\u4e3a\u7a7a\u683c\u5b57\u7b26 * \u4e5f\u5c31\u662f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u683c('')\u3001\u5b9a\u4f4d\u5b57\u7b26('\\t')\u3001CR('\\r')\u3001\u6362\u884c('\\n')\u3001\u5782\u76f4\u5b9a\u4f4d\u5b57\u7b26('\\v')\u3001\u6216\u7ffb\u9875('\\f')\u7684\u60c5\u51b5\u3002 * \u53c2\u6570\u4e3a\u7a7a\u767d\u5b57\u7b26\u8fd4\u56de\u975e0\uff0c\u5426\u5219\u8fd4\u56de0\u3002 * ***************************/ #define ISspace(x) isspace((int)(x)) #define SERVER_STRING \"Server: jdbhttpd/0.1.0\\r\\n\" /* \u5b9a\u4e49server\u540d\u79f0 */ #define STDIN 0 #define STDOUT 1 #define STDERR 2 void accept_request ( void * ); void bad_request ( int ); void cat ( int , FILE * ); void cannot_execute ( int ); void error_die ( const char * ); void execute_cgi ( int , const char * , const char * , const char * ); int get_line ( int , char * , int ); void headers ( int , const char * ); void not_found ( int ); void serve_file ( int , const char * ); int startup ( u_short * ); void unimplemented ( int ); // Http\u8bf7\u6c42\uff0c\u540e\u7eed\u4e3b\u8981\u662f\u5904\u7406\u8fd9\u4e2a\u5934 // GET / HTTP/1.1 // Host: 192.168.0.23:47310 // Connection: keep-alive // Upgrade-Insecure-Requests: 1 // User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 // Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*; q = 0.8 // Accept - Encoding: gzip, deflate, sdch // Accept - Language : zh - CN, zh; q = 0.8 // Cookie: __guid = 179317988.1576506943281708800.1510107225903.8862; monitor_count = 5 // POST / color1.cgi HTTP / 1.1 // Host: 192.168.0.23 : 47310 // Connection : keep - alive // Content - Length : 10 // Cache - Control : max - age = 0 // Origin : http ://192.168.0.23:40786 // Upgrade - Insecure - Requests : 1 // User - Agent : Mozilla / 5.0 (Windows NT 6.1; WOW64) AppleWebKit / 537.36 (KHTML, like Gecko) Chrome / 55.0.2883.87 Safari / 537.36 // Content - Type : application / x - www - form - urlencoded // Accept : text / html, application / xhtml + xml, application / xml; q = 0.9, image / webp, */*;q=0.8 // Referer: http://192.168.0.23:47310/ // Accept-Encoding: gzip, deflate // Accept-Language: zh-CN,zh;q=0.8 // Cookie: __guid=179317988.1576506943281708800.1510107225903.8862; monitor_count=281 // Form Data // color=gray /********************************************************************** * A request has caused a call to accept() on the server port to return. * Process the request appropriately. * Parameters: the socket connected to the client(\u8fde\u63a5\u5230\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57) ***********************************************************************/ void accept_request ( void * arg ) { int client = ( intptr_t ) arg ; /* intptr_t\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u59cb\u7ec8\u4e0e\u5730\u5740\u4f4d\u6570\u76f8\u540c */ char buf [ 1024 ]; size_t numchars ; char method [ 255 ]; char url [ 255 ]; char path [ 512 ]; size_t i , j ; struct stat st ; /* \u6587\u4ef6\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6shux */ int cgi = 0 ; /* becomes true if server decides this is a CGI program */ char * query_string = NULL ; /**************************** * \u63a5\u6536\u6570\u636e\u653e\u5165buff\u7f13\u51b2\u533a * \u8fd4\u56de\u5b57\u8282\u6570 * **************************/ numchars = get_line ( client , buf , sizeof ( buf )); i = 0 ; j = 0 ; /************************************ * \u4e3e\u4f8b:\"GET / HTTP/1.1\\n\" * \u63d0\u53d6\u5b57\u7b26\u4e32GET * ISspace\u53c2\u6570\u4e3a\u7a7a\u767d\u5b57\u7b26\u8fd4\u56de\u975e0\uff0c\u5426\u5219\u8fd4\u56de0\u3002 * **********************************/ while ( ! ISspace ( buf [ i ]) && ( i < sizeof ( method ) - 1 )) { method [ i ] = buf [ i ]; i ++ ; } j = i ; method [ i ] = '\\0' ; printf ( \"LINE[%d] \\t function[%s] \\t method=[%s] \\n \" , __LINE__ , __FUNCTION__ , method ); /************************************ * \u51fd\u6570\u8bf4\u660e\uff1astrcasecmp()\u7528\u6765\u6bd4\u8f83\u53c2\u6570s1 \u548cs2 \u5b57\u7b26\u4e32\uff0c\u6bd4\u8f83\u65f6\u4f1a\u81ea\u52a8\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5dee\u5f02\u3002 * \u8fd4\u56de\u503c\uff1a\u82e5\u53c2\u6570s1 \u548cs2 \u5b57\u7b26\u4e32\u76f8\u540c\u5219\u8fd4\u56de0\u3002 * s1 \u957f\u5ea6\u5927\u4e8es2 \u957f\u5ea6\u5219\u8fd4\u56de\u5927\u4e8e0 \u7684\u503c\uff0c * s1 \u957f\u5ea6\u82e5\u5c0f\u4e8es2 \u957f\u5ea6\u5219\u8fd4\u56de\u5c0f\u4e8e0 \u7684\u503c\u3002 * *********************************/ if ( strcasecmp ( method , \"GET\" ) && strcasecmp ( method , \"POST\" )) { unimplemented ( client ); /* \u5982\u679c\u63a5\u6536\u5230\u7684\u6570\u636e\u4e2d\u65e2\u6709GET\u65b9\u6cd5\u4e0ePOST\u65b9\u6cd5\uff0c\u5219\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u8be5web\u65b9\u6cd5\u5c1a\u672a\u5b9e\u73b0 */ return ; } if ( strcasecmp ( method , \"POST\" ) == 0 ) cgi = 1 ; /* cgi\u4e3a\u6807\u5fd7\u4f4d\uff0c\u7f6e1\u8bf4\u660e\u5f00\u542fcgi\u89e3\u6790 */ i = 0 ; while ( ISspace ( buf [ j ]) && ( j < numchars )) /* \u5982\u679c\u4e3a\u7a7a\u767d\u5b57\u7b26\u5219\u8df3\u8fc7 */ j ++ ; /********************************* * //\u5f97\u5230 \"/\" * \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u7684http\u7684\u7f51\u5740\u4e3ahttp://x.x.x.x:8888/index.html * \u90a3\u4e48\u4f60\u5f97\u5230\u7684\u7b2c\u4e00\u6761http\u4fe1\u606f\u4e3aGET /index.html HTTP/1.1\uff0c\u90a3\u4e48 * \u89e3\u6790\u5f97\u5230\u7684\u5c31\u662f/index.html **********************************/ while ( ! ISspace ( buf [ j ]) && ( i < sizeof ( url ) - 1 ) && ( j < numchars )) { url [ i ] = buf [ j ]; i ++ ; j ++ ; } url [ i ] = '\\0' ; if ( strcasecmp ( method , \"GET\" ) == 0 ) { query_string = url ; while (( * query_string != '?' ) && ( * query_string != '\\0' )) /* \u5982\u679c\u662fGET\u8bf7\u6c42\uff0curl\u53ef\u80fd\u4f1a\u5e26\u6709?,\u6709\u67e5\u8be2\u53c2\u6570 */ query_string ++ ; if ( * query_string == '?' ) { cgi = 1 ; * query_string = '\\0' ; /* \u5c06\u89e3\u6790\u53c2\u6570\u622a\u53d6\u4e0b\u6765 */ query_string ++ ; } } sprintf ( path , \"htdocs%s\" , url ); /* url\u4e2d\u7684\u8def\u5f84\u683c\u5f0f\u5316\u5230path */ if ( path [ strlen ( path ) - 1 ] == '/' ) /* \u5982\u679cpath\u53ea\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u9996\u9875index.html */ strcat ( path , \"index.html\" ); /************************************** * \u51fd\u6570\u5b9a\u4e49: int stat(const char *file_name, struct stat *buf); * \u51fd\u6570\u8bf4\u660e: \u901a\u8fc7\u6587\u4ef6\u540dfilename\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5e76\u4fdd\u5b58\u5728buf\u6240\u6307\u7684\u7ed3\u6784\u4f53stat\u4e2d * \u8fd4\u56de\u503c: \u6267\u884c\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1\uff0c\u9519\u8bef\u4ee3\u7801\u5b58\u4e8eerrno\uff08\u9700\u8981include <errno.h>\uff09 * ***********************************/ if ( stat ( path , & st ) == - 1 ) { /* \u5047\u5982\u8bbf\u95ee\u7684\u7f51\u9875\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u65ad\u7684\u8bfb\u53d6\u5269\u4e0b\u7684\u8bf7\u6c42\u5934\u4fe1\u606f\uff0c\u5e76\u4e22\u5f03\u5373\u53ef */ while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); not_found ( client ); /* \u6700\u540e\u8fd4\u56de\u7f51\u9875\u4e0d\u5b58\u5728 */ } else { /*************************************** * st_mode\u662f\u7528\u7279\u5f81\u4f4d\u6765\u8868\u793a\u6587\u4ef6\u7c7b\u578b\u7684 * S_IFMT 0170000 \u6587\u4ef6\u7c7b\u578b\u7684\u4f4d\u906e\u7f69 * \u5982\u679c\u8def\u5f84\u662f\u4e2a\u76ee\u5f55\uff0c\u90a3\u5c31\u5c06\u4e3b\u9875\u8fdb\u884c\u663e\u793a ***************************************/ if (( st . st_mode & S_IFMT ) == S_IFDIR ) /* \u76ee\u5f55 */ strcat ( path , \"/index.html\" ); /* \u5982\u679c\u4f60\u7684\u6587\u4ef6\u9ed8\u8ba4\u662f\u6709\u6267\u884c\u6743\u9650\u7684\uff0c\u81ea\u52a8\u89e3\u6790\u6210cgi\u7a0b\u5e8f\uff0c\u5982\u679c\u6709\u6267\u884c\u6743\u9650\u4f46\u662f\u4e0d\u80fd\u6267\u884c\uff0c\u4f1a\u63a5\u53d7\u5230\u62a5\u9519\u4fe1\u53f7 */ if (( st . st_mode & S_IXUSR ) || /* S_IXUSR:\u6587\u4ef6\u6240\u6709\u8005\u5177\u53ef\u6267\u884c\u6743\u9650 */ ( st . st_mode & S_IXGRP ) || /* S_IXGRP:\u7528\u6237\u7ec4\u5177\u53ef\u6267\u884c\u6743\u9650 */ ( st . st_mode & S_IXOTH ) ) /* S_IXOTH:\u5176\u4ed6\u7528\u6237\u5177\u53ef\u8bfb\u53d6\u6743\u9650 */ cgi = 1 ; if ( ! cgi ) serve_file ( client , path ); /* \u8bfb\u53d6\u9759\u6001\u6587\u4ef6\u8fd4\u56de\u7ed9\u8bf7\u6c42\u7684http\u5ba2\u6237\u7aef */ else execute_cgi ( client , path , method , query_string ); /* \u6267\u884ccgi\u52a8\u6001\u89e3\u6790 */ } close ( client ); /* \u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5173\u95edsocket */ } /**********************************************************************/ /* Inform the client that a request it has made has a problem. * Parameters: client socket */ /**********************************************************************/ void bad_request ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 400 BAD REQUEST \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"Content-type: text/html \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"<P>Your browser sent a bad request, \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"such as a POST without a Content-Length. \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); } /**********************************************************************/ /* Put the entire contents of a file out on a socket. This function * is named after the UNIX \"cat\" command, because it might have been * easier just to do something like pipe, fork, and exec(\"cat\"). * Parameters: the client socket descriptor * FILE pointer for the file to cat */ /**********************************************************************/ void cat ( int client , FILE * resource ) { char buf [ 1024 ]; fgets ( buf , sizeof ( buf ), resource ); while ( ! feof ( resource )) /* \u5faa\u73af\u8bfb\u53d6 */ { send ( client , buf , strlen ( buf ), 0 ); fgets ( buf , sizeof ( buf ), resource ); } } /**********************************************************************/ /* Inform the client that a CGI script could not be executed. * Parameter: the client socket descriptor. */ /**********************************************************************/ void cannot_execute ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 500 Internal Server Error \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<P>Error prohibited CGI execution. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Print out an error message with perror() (for system errors; based * on value of errno, which indicates system call errors) and exit the * program indicating an error. */ /**********************************************************************/ void error_die ( const char * sc ) { perror ( sc ); exit ( 1 ); } /**********************************************************************/ /* Execute a CGI script. Will need to set environment variables as * appropriate. (\u6267\u884ccgi\u52a8\u6001\u89e3\u6790) * Parameters: client socket descriptor * path to the CGI script */ /**********************************************************************/ void execute_cgi ( int client , const char * path , const char * method , const char * query_string ) { char buf [ 1024 ]; int cgi_output [ 2 ]; /* \u8bfb\u5199\u7ba1\u9053\u7684\u58f0\u660e */ int cgi_input [ 2 ]; pid_t pid ; int status ; int i ; char c ; int numchars = 1 ; int content_length = - 1 ; buf [ 0 ] = 'A' ; buf [ 1 ] = '\\0' ; if ( strcasecmp ( method , \"GET\" ) == 0 ) /* \u5982\u679c\u662fGET\u8bf7\u6c42,\u8bfb\u53d6\u5e76\u4e14\u4e22\u5f03\u5934\u4fe1\u606f */ while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); else if ( strcasecmp ( method , \"POST\" ) == 0 ) /*POST*/ { numchars = get_line ( client , buf , sizeof ( buf )); while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* \u5faa\u73af\u8bfb\u53d6\u5934\u4fe1\u606f\u627e\u5230Content-Length\u5b57\u6bb5\u7684\u503c */ { buf [ 15 ] = '\\0' ; /* \"Content-Length: 15\" */ if ( strcasecmp ( buf , \"Content-Length:\" ) == 0 ) content_length = atoi ( & ( buf [ 16 ])); numchars = get_line ( client , buf , sizeof ( buf )); } if ( content_length == - 1 ) { bad_request ( client ); /* \u9519\u8bef\u8bf7\u6c42 */ return ; } } else /*HEAD or other*/ { } /**************************************** * #include<unistd.h> * int pipe(int filedes[2]); * \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff0c\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 * \u53c2\u6570\u6570\u7ec4\u5305\u542bpipe\u4f7f\u7528\u7684\u4e24\u4e2a\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u3002fd[0]:\u8bfb\u7ba1\u9053\uff0cfd[1]:\u5199\u7ba1\u9053\u3002 * \u5fc5\u987b\u5728fork()\u4e2d\u8c03\u7528pipe()\uff0c\u5426\u5219\u5b50\u8fdb\u7a0b\u4e0d\u4f1a\u7ee7\u627f\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 * \u4e24\u4e2a\u8fdb\u7a0b\u4e0d\u5171\u4eab\u7956\u5148\u8fdb\u7a0b\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528pipe\u3002\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u547d\u540d\u7ba1\u9053\u3002 * pipe(cgi_output)\u6267\u884c\u6210\u529f\u540e\uff0ccgi_output[0]:\u8bfb\u901a\u9053 cgi_output[1]:\u5199\u901a\u9053 * **************************************/ if ( pipe ( cgi_output ) < 0 ) { cannot_execute ( client ); return ; } if ( pipe ( cgi_input ) < 0 ) { cannot_execute ( client ); return ; } if ( ( pid = fork ()) < 0 ) { cannot_execute ( client ); return ; } sprintf ( buf , \"HTTP/1.0 200 OK \\r\\n \" ); /* \u8fd4\u56de\u6b63\u786e\u54cd\u5e94\u7801200 */ send ( client , buf , strlen ( buf ), 0 ); if ( pid == 0 ) /* child: CGI script */ { char meth_env [ 255 ]; char query_env [ 255 ]; char length_env [ 255 ]; dup2 ( cgi_output [ 1 ], STDOUT ); /* 1\u4ee3\u8868\u7740stdout\uff0c0\u4ee3\u8868\u7740stdin\uff0c\u5c06\u7cfb\u7edf\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u4e3acgi_output[1] */ dup2 ( cgi_input [ 0 ], STDIN ); /* \u5c06\u7cfb\u7edf\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u4e3acgi_input[0]\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u5173\u952e\uff0ccgi\u7a0b\u5e8f\u4e2d\u7528\u7684\u662f\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8fdb\u884c\u4ea4\u4e92 */ close ( cgi_output [ 0 ]); /* \u5173\u95ed\u4e86cgi_output\u4e2d\u7684\u8bfb\u901a\u9053 */ close ( cgi_input [ 1 ]); /* \u5173\u95ed\u4e86cgi_input\u4e2d\u7684\u5199\u901a\u9053 */ sprintf ( meth_env , \"REQUEST_METHOD=%s\" , method ); putenv ( meth_env ); if ( strcasecmp ( method , \"GET\" ) == 0 ) { sprintf ( query_env , \"QUERY_STRING=%s\" , query_string ); putenv ( query_env ); } else { /* POST */ sprintf ( length_env , \"CONTENT_LENGTH=%d\" , content_length ); putenv ( length_env ); } /************************************************** * #include<unistd.h> * int execl(const char * path,const char * arg,....); * execl()\u7528\u6765\u6267\u884c\u53c2\u6570path\u5b57\u7b26\u4e32\u6240\u4ee3\u8868\u7684\u6587\u4ef6\u8def\u5f84\uff0c * \u63a5\u4e0b\u6765\u7684\u53c2\u6570\u4ee3\u8868\u6267\u884c\u8be5\u6587\u4ef6\u65f6\u4f20\u9012\u8fc7\u53bb\u7684argv(0)\u3001argv[1]\u2026\u2026\uff0c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u7528\u7a7a\u6307\u9488(NULL)\u4f5c\u7ed3\u675f\u3002 * \u5982\u679c\u6267\u884c\u6210\u529f\u5219\u51fd\u6570\u4e0d\u4f1a\u8fd4\u56de\uff0c\u6267\u884c\u5931\u8d25\u5219\u76f4\u63a5\u8fd4\u56de-1\uff0c\u5931\u8d25\u539f\u56e0\u5b58\u4e8eerrno\u4e2d\u3002 * ***********************************************/ execl ( path , NULL ); exit ( 0 ); } else { /* parent */ close ( cgi_output [ 1 ]); /* \u5173\u95ed\u4e86cgi_output\u4e2d\u7684\u5199\u901a\u9053\uff0c\u6ce8\u610f\u8fd9\u662f\u7236\u8fdb\u7a0b\u4e2dcgi_output\u53d8\u91cf\u548c\u5b50\u8fdb\u7a0b\u8981\u533a\u5206\u5f00 */ close ( cgi_input [ 0 ]); /* \u5173\u95ed\u4e86cgi_input\u4e2d\u7684\u8bfb\u901a\u9053 */ if ( strcasecmp ( method , \"POST\" ) == 0 ) for ( i = 0 ; i < content_length ; i ++ ) { recv ( client , & c , 1 , 0 ); write ( cgi_input [ 1 ], & c , 1 ); } while ( read ( cgi_output [ 0 ], & c , 1 ) > 0 ) send ( client , & c , 1 , 0 ); close ( cgi_output [ 0 ]); close ( cgi_input [ 1 ]); /*************************************** * pid_t waitpid(pid_t pid, int * status, int options); * waitpid()\u4f1a\u6682\u65f6\u505c\u6b62\u76ee\u524d\u8fdb\u7a0b\u7684\u6267\u884c, \u76f4\u5230\u6709\u4fe1\u53f7\u6765\u5230\u6216\u5b50\u8fdb\u7a0b\u7ed3\u675f. * \u5982\u679c\u5728\u8c03\u7528wait()\u65f6\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u7ed3\u675f, \u5219wait()\u4f1a\u7acb\u5373\u8fd4\u56de\u5b50\u8fdb\u7a0b\u7ed3\u675f\u72b6\u6001\u503c. \u5b50\u8fdb\u7a0b\u7684\u7ed3\u675f\u72b6\u6001\u503c\u4f1a\u7531\u53c2\u6570status * \u8fd4\u56de,\u800c\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u8bc6\u522b\u7801\u4e5f\u4f1a\u4e00\u5feb\u8fd4\u56de. * \u5982\u679c\u4e0d\u5728\u610f\u7ed3\u675f\u72b6\u6001\u503c, \u5219\u53c2\u6570status \u53ef\u4ee5\u8bbe\u6210NULL. \u53c2\u6570pid \u4e3a\u6b32\u7b49\u5f85\u7684\u5b50\u8fdb\u7a0b\u8bc6\u522b\u7801, \u5176\u4ed6\u6570\u503c\u610f\u4e49\u5982\u4e0b\uff1a * 1\u3001pid<-1 \u7b49\u5f85\u8fdb\u7a0b\u7ec4\u8bc6\u522b\u7801\u4e3apid \u7edd\u5bf9\u503c\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b. * 2\u3001pid=-1 \u7b49\u5f85\u4efb\u4f55\u5b50\u8fdb\u7a0b, \u76f8\u5f53\u4e8ewait(). * 3\u3001pid=0 \u7b49\u5f85\u8fdb\u7a0b\u7ec4\u8bc6\u522b\u7801\u4e0e\u76ee\u524d\u8fdb\u7a0b\u76f8\u540c\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b. * 4\u3001pid>0 \u7b49\u5f85\u4efb\u4f55\u5b50\u8fdb\u7a0b\u8bc6\u522b\u7801\u4e3apid \u7684\u5b50\u8fdb\u7a0b. * ************************************/ waitpid ( pid , & status , 0 ); } } /**********************************************************************/ /* Get a line from a socket, whether the line ends in a newline, * carriage return, or a CRLF combination. Terminates the string read * with a null character. If no newline indicator is found before the * end of the buffer, the string is terminated with a null. If any of * the above three line terminators is read, the last character of the * string will be a linefeed and the string will be terminated with a * null character. * Parameters: the socket descriptor * the buffer to save the data in * the size of the buffer * Returns: the number of bytes stored (excluding null) */ /**********************************************************************/ int get_line ( int sock , char * buf , int size ) { int i = 0 ; char c = '\\0' ; int n ; while (( i < size - 1 ) && ( c != '\\n' )) { n = recv ( sock , & c , 1 , 0 ); /* DEBUG printf(\"%02X\\n\", c); */ if ( n > 0 ) { if ( c == '\\r' ) { n = recv ( sock , & c , 1 , MSG_PEEK ); /* DEBUG printf(\"%02X\\n\", c); */ if (( n > 0 ) && ( c == '\\n' )) recv ( sock , & c , 1 , 0 ); else c = '\\n' ; } buf [ i ] = c ; i ++ ; } else c = '\\n' ; } buf [ i ] = '\\0' ; return ( i ); } /**********************************************************************/ /* Return the informational HTTP headers about a file. */ /* Parameters: the socket to print the headers on * the name of the file */ /**********************************************************************/ void headers ( int client , const char * filename ) { char buf [ 1024 ]; ( void ) filename ; /* could use filename to determine file type */ strcpy ( buf , \"HTTP/1.0 200 OK \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); strcpy ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); strcpy ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Give a client a 404 not found status message. */ /**********************************************************************/ void not_found ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 404 NOT FOUND \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<HTML><TITLE>Not Found</TITLE> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<BODY><P>The server could not fulfill \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"your request because the resource specified \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"is unavailable or nonexistent. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</BODY></HTML> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Send a regular file to the client. Use headers, and report * errors to client if they occur. * Parameters: a pointer to a file structure produced from the socket * file descriptor * the name of the file to serve */ /**********************************************************************/ void serve_file ( int client , const char * filename ) { FILE * resource = NULL ; int numchars = 1 ; char buf [ 1024 ]; buf [ 0 ] = 'A' ; buf [ 1 ] = '\\0' ; while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); resource = fopen ( filename , \"r\" ); if ( resource == NULL ) not_found ( client ); else { headers ( client , filename ); cat ( client , resource ); } fclose ( resource ); } /**********************************************************************/ /* This function starts the process of listening for web connections * on a specified port. If the port is 0, then dynamically allocate a * port and modify the original port variable to reflect the actual * port. * Parameters: pointer to variable containing the port to connect on * Returns: the socket * \u6b64\u51fd\u6570\u542f\u52a8\u5728\u6307\u5b9a\u7aef\u53e3\u4e0a\u4fa6\u542cWeb\u8fde\u63a5\u7684\u8fc7\u7a0b\u3002 * \u5982\u679c\u7aef\u53e3\u4e3a0\uff0c\u5219\u52a8\u6001\u5206\u914d\u7aef\u53e3\u5e76\u4fee\u6539\u539f\u59cb\u7aef\u53e3\u53d8\u91cf\u4ee5\u53cd\u6620\u5b9e\u9645\u7aef\u53e3\u3002 * \u53c2\u6570\uff1a\u6307\u5411\u5305\u542b\u8fde\u63a5\u7aef\u53e3\u7684\u53d8\u91cf\u7684\u6307\u9488 * \u8fd4\u56de\uff1a\u5957\u63a5\u5b57 * */ /**********************************************************************/ int startup ( u_short * port ) { int httpd = 0 ; int on = 1 ; struct sockaddr_in name ; /********************************** * socket\u7cfb\u7edf\u8c03\u7528\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57 * \u8fd4\u56de\uff1a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8be5\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u8be5\u5957\u63a5\u5b57 * int socket(int domain, int type, int protocol); * domain\u6307\u5b9a\u534f\u8bae\u65cf\uff0c\u6700\u5e38\u7528\u7684\u662fAF_UNIX(unix\u548clinux\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u7684\u672c\u5730\u5957\u63a5\u5b57)\u548cAF_INET(UNIX\u7f51\u7edc\u5957\u63a5\u5b57) * type\u6307\u5b9a\u5957\u63a5\u5b57\u7684\u901a\u4fe1\u7c7b\u578b\uff0cSOCK_STREAM(\u6709\u5e8f\uff0c\u53ef\u9760\uff0c\u9762\u5411\u8fde\u63a5\u7684\u53cc\u5411\u5b57\u8282\u6d41)\u548cSOCK_DGRAM(\u6570\u636e\u62a5\u670d\u52a1) * protocol\u6307\u5b9a\u4f7f\u7528\u7684\u534f\u8bae\uff0c\u4e00\u822c\u7531\u5957\u63a5\u5b57\u7c7b\u578b\u548c\u5957\u63a5\u5b57\u57df\u6765\u51b3\u5b9a\uff0c\u4e00\u822c\u9ed8\u8ba40 * *******************************/ httpd = socket ( PF_INET , SOCK_STREAM , 0 ); if ( httpd == - 1 ) error_die ( \"socket\" ); memset ( & name , 0 , sizeof ( name )); /* \u7ed3\u6784\u4f53\u6e05\u7a7a\u7f6e\u96f6 */ name . sin_family = AF_INET ; name . sin_port = htons ( * port ); /* host to network, short \u77ed\u6574\u6570\u4ece\u4e3b\u673a\u5b57\u8282\u5e8f\u5230\u7f51\u7edc\u5b57\u8282\u5e8f\u8f6c\u6362 */ /******************************** * INADDR_ANY\u8f6c\u6362\u8fc7\u6765\u5c31\u662f0.0.0.0\uff0c\u6cdb\u6307\u672c\u673a\u7684\u610f\u601d\uff0c\u4e5f\u5c31\u662f\u8868\u793a\u672c\u673a\u7684\u6240\u6709IP * \u56e0\u4e3a\u6709\u4e9b\u673a\u5b50\u4e0d\u6b62\u4e00\u5757\u7f51\u5361\uff0c\u591a\u7f51\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u5c31\u8868\u793a\u6240\u6709\u7f51\u5361ip\u5730\u5740\u7684\u610f\u601d\u3002 * * \u6bd4\u5982\u4e00\u53f0\u7535\u8111\u67093\u5757\u7f51\u5361\uff0c\u5206\u522b\u8fde\u63a5\u4e09\u4e2a\u7f51\u7edc\uff0c\u90a3\u4e48\u8fd9\u53f0\u7535\u8111\u5c31\u67093\u4e2aip\u5730\u5740\u4e86\uff0c\u5982\u679c\u67d0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u76d1\u542c\u67d0\u4e2a\u7aef\u53e3\uff0c\u90a3\u4ed6\u8981\u76d1\u542c\u54ea\u4e2a\u7f51\u5361\u5730\u5740\u7684\u7aef\u53e3\u5462\uff1f * * \u5982\u679c\u7ed1\u5b9a\u67d0\u4e2a\u5177\u4f53\u7684ip\u5730\u5740\uff0c\u4f60\u53ea\u80fd\u76d1\u542c\u4f60\u6240\u8bbe\u7f6e\u7684ip\u5730\u5740\u6240\u5728\u7684\u7f51\u5361\u7684\u7aef\u53e3\uff0c\u5176\u5b83\u4e24\u5757\u7f51\u5361\u65e0\u6cd5\u76d1\u542c\u7aef\u53e3\uff0c * \u5982\u679c\u6211\u9700\u8981\u4e09\u4e2a\u7f51\u5361\u90fd\u76d1\u542c\uff0c\u90a3\u5c31\u9700\u8981\u7ed1\u5b9a3\u4e2aip\uff0c\u4e5f\u5c31\u7b49\u4e8e\u9700\u8981\u7ba1\u74063\u4e2a\u5957\u63a5\u5b57\u8fdb\u884c\u6570\u636e\u4ea4\u6362\uff0c\u8fd9\u6837\u5c82\u4e0d\u662f\u5f88\u7e41\u7410\uff1f * * \u6240\u4ee5\u51fa\u73b0INADDR_ANY\uff0c\u4f60\u53ea\u9700\u7ed1\u5b9aINADDR_ANY\uff0c\u7ba1\u7406\u4e00\u4e2a\u5957\u63a5\u5b57\u5c31\u884c\uff0c\u4e0d\u7ba1\u6570\u636e\u662f\u4ece\u54ea\u4e2a\u7f51\u5361\u8fc7\u6765\u7684\uff0c\u53ea\u8981\u662f\u7ed1\u5b9a\u7684\u7aef\u53e3\u53f7\u8fc7\u6765\u7684\u6570\u636e\uff0c\u90fd\u53ef\u4ee5\u63a5\u6536\u5230\u3002 * ******************************/ name . sin_addr . s_addr = htonl ( INADDR_ANY ); /* host to network, long */ /****************************************** * \u5957\u63a5\u5b57\u9009\u9879\uff1f\uff1f\uff1f\uff1fSO_REUSEADDR\uff1f\uff1f\uff1f\uff1f\u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\uff0c\u53ef\u5199blog * int setsockopt(int socket, int level, int option_name, * const void *option_value, size_t option_len); * \u5982\u679c\u5728\u5957\u63a5\u5b57\u7ea7\u522b\u8bbe\u7f6e\u9009\u9879\uff0clevel\u53c2\u6570\u8bbe\u7f6e\u4e3aSOL_SOCKET * option_name\u53c2\u6570\u6307\u5b9a\u8981\u8bbe\u7f6e\u7684\u9009\u9879\uff0cSO_REUSEADDR:\u9632\u6b62\u670d\u52a1\u5668\u5728\u53d1\u751f\u610f\u5916\u65f6\uff0c\u7aef\u53e3\u672a\u88ab\u91ca\u653e\uff0c\u53ef\u4ee5\u91cd\u65b0\u4f7f\u7528 * option_value\u53c2\u6570\u7684\u957f\u5ea6\u4e3aoption_len\u5b57\u8282\uff0c\u7528\u4e8e\u8bbe\u5b9a\u9009\u9879\u7684\u65b0\u503c\uff0c\u5b83\u88ab\u4f20\u9012\u7ed9\u5e95\u5c42\u534f\u8bae\u7684\u5904\u7406\u51fd\u6570\uff0c\u5e76\u4e14\u4e0d\u80fd\u88ab\u4fee\u6539 * \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 * ****************************************/ if (( setsockopt ( httpd , SOL_SOCKET , SO_REUSEADDR , & on , sizeof ( on ))) < 0 ) { error_die ( \"setsockopt failed\" ); } /****************************************** * \u547d\u540d\u5957\u63a5\u5b57\uff0cAF_UNIX\u5957\u63a5\u5b57\u4f1a\u5173\u8054\u5230\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u8def\u5f84\u540d\uff0cAF_INET\u5957\u63a5\u5b57\u5173\u8054\u5230\u4e00\u4e2aIP\u7aef\u53e3\u53f7 * int bind(int socket, const struct sockaddr *address, size_t address_len); * \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 * ***************************************/ if ( bind ( httpd , ( struct sockaddr * ) & name , sizeof ( name )) < 0 ) error_die ( \"bind\" ); if ( * port == 0 ) /* if dynamically allocating a port \u5982\u679c\u52a8\u6001\u5206\u914d\u7aef\u53e3\u53f7*/ { socklen_t namelen = sizeof ( name ); /***************************************** * ?????????\u4e0d\u660e\u767d\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f * int PASCAL FAR getsockname( SOCKET s, struct sockaddr FAR* name, int FAR* namelen); * s\uff1a\u6807\u8bc6\u4e00\u4e2a\u5df2\u6346\u7ed1\u5957\u63a5\u53e3\u7684\u63cf\u8ff0\u5b57\u3002 * name\uff1a\u63a5\u6536\u5957\u63a5\u53e3\u7684\u5730\u5740\uff08\u540d\u5b57\uff09\u3002 * namelen\uff1a\u540d\u5b57\u7f13\u51b2\u533a\u957f\u5ea6\u3002 * ***************************************/ if ( getsockname ( httpd , ( struct sockaddr * ) & name , & namelen ) == - 1 ) error_die ( \"getsockname\" ); * port = ntohs ( name . sin_port ); } /**************************************** * \u5957\u63a5\u5b57\u961f\u5217 * *************************************/ if ( listen ( httpd , 5 ) < 0 ) error_die ( \"listen\" ); return ( httpd ); } /**********************************************************************/ /* Inform the client that the requested web method has not been implemented. * Parameter: the client socket */ /**********************************************************************/ void unimplemented ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 501 Method Not Implemented \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<HTML><HEAD><TITLE>Method Not Implemented \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</TITLE></HEAD> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<BODY><P>HTTP request method not supported. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</BODY></HTML> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ int main ( void ) { int server_sock = - 1 ; u_short port = 4000 ; //unsigned short\u7c7b\u578b int client_sock = - 1 ; /**************************** * struct sockaddr_in{ * short int sin_family; //AF_INET * unsigned short int sin_port; //Port_number * struct in_addr sin_addr; //Internet address * }; * struct in_addr{ * unsigned long int s_addr; * }; * **************************/ struct sockaddr_in client_name ; /**************************** * \u731c\u6d4btypedef int socklen_t * /usr/include/arpa/inet.h * #ifndef __socklen_t_defined * typedef __socklen_t socklen_t; * # define __socklen_t_defined * #endif * **************************/ socklen_t client_name_len = sizeof ( client_name ); pthread_t newthread ; /*************** * startup: \u521d\u59cb\u5316 httpd \u670d\u52a1 * \u5305\u62ec\u5efa\u7acb\u5957\u63a5\u5b57\uff0c\u7ed1\u5b9a\u7aef\u53e3\uff0c\u8fdb\u884c\u76d1\u542c\u7b49\u3002 * *************/ server_sock = startup ( & port ); printf ( \"httpd running on port %d \\n \" , port ); while ( 1 ) { /***************************************** * int accept(int socket, struct sockaddr *address, size_t *address_len); * \u5f53\u6709\u8fde\u63a5\u65f6\uff0caccept\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u53d1\u9001\u9519\u8bef\u65f6\uff0c\u8fd4\u56de-1\u3002 * ***************************************/ client_sock = accept ( server_sock , ( struct sockaddr * ) & client_name , & client_name_len ); if ( client_sock == - 1 ) error_die ( \"accept\" ); /* accept_request(&client_sock); */ if ( pthread_create ( & newthread , NULL , ( void * ) accept_request , ( void * )( intptr_t ) client_sock ) != 0 ) perror ( \"pthread_create\" ); } close ( server_sock ); return ( 0 ); }","title":"TinyHttpd"},{"location":"source/tinyhttpd/#tinyhttpd","text":"Tinyhttpd \u662fJ. David Blackstone\u57281999\u5e74\u5199\u7684\u4e00\u4e2a\u4e0d\u5230 500 \u884c\u7684\u8d85\u8f7b\u91cf\u578b Http Server\uff0c\u7528\u6765\u5b66\u4e60\u975e\u5e38\u4e0d\u9519\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u771f\u6b63\u7406\u89e3\u670d\u52a1\u5668\u7a0b\u5e8f\u7684\u672c\u8d28\u3002\u5b98\u7f51: http://tinyhttpd.sourceforge.net","title":"TinyHttpd\u6e90\u7801"},{"location":"source/tinyhttpd/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 /* J. David's webserver */ /* This is a simple webserver. * Created November 1999 by J. David Blackstone. * CSE 4344 (Network concepts), Prof. Zeigler * University of Texas at Arlington */ /* This program compiles for Sparc Solaris 2.6. * To compile for Linux: * 1) Comment out the #include <pthread.h> line. * 2) Comment out the line that defines the variable newthread. * 3) Comment out the two lines that run pthread_create(). * 4) Uncomment the line that runs accept_request(). * 5) Remove -lsocket from the Makefile. */ #include <stdio.h> #include <sys/socket.h> #include <sys/types.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <ctype.h> #include <strings.h> #include <string.h> #include <sys/stat.h> #include <pthread.h> #include <sys/wait.h> #include <stdlib.h> #include <stdint.h> /***************************** * \u68c0\u67e5\u53c2\u6570c\u662f\u5426\u4e3a\u7a7a\u683c\u5b57\u7b26 * \u4e5f\u5c31\u662f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u683c('')\u3001\u5b9a\u4f4d\u5b57\u7b26('\\t')\u3001CR('\\r')\u3001\u6362\u884c('\\n')\u3001\u5782\u76f4\u5b9a\u4f4d\u5b57\u7b26('\\v')\u3001\u6216\u7ffb\u9875('\\f')\u7684\u60c5\u51b5\u3002 * \u53c2\u6570\u4e3a\u7a7a\u767d\u5b57\u7b26\u8fd4\u56de\u975e0\uff0c\u5426\u5219\u8fd4\u56de0\u3002 * ***************************/ #define ISspace(x) isspace((int)(x)) #define SERVER_STRING \"Server: jdbhttpd/0.1.0\\r\\n\" /* \u5b9a\u4e49server\u540d\u79f0 */ #define STDIN 0 #define STDOUT 1 #define STDERR 2 void accept_request ( void * ); void bad_request ( int ); void cat ( int , FILE * ); void cannot_execute ( int ); void error_die ( const char * ); void execute_cgi ( int , const char * , const char * , const char * ); int get_line ( int , char * , int ); void headers ( int , const char * ); void not_found ( int ); void serve_file ( int , const char * ); int startup ( u_short * ); void unimplemented ( int ); // Http\u8bf7\u6c42\uff0c\u540e\u7eed\u4e3b\u8981\u662f\u5904\u7406\u8fd9\u4e2a\u5934 // GET / HTTP/1.1 // Host: 192.168.0.23:47310 // Connection: keep-alive // Upgrade-Insecure-Requests: 1 // User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 // Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*; q = 0.8 // Accept - Encoding: gzip, deflate, sdch // Accept - Language : zh - CN, zh; q = 0.8 // Cookie: __guid = 179317988.1576506943281708800.1510107225903.8862; monitor_count = 5 // POST / color1.cgi HTTP / 1.1 // Host: 192.168.0.23 : 47310 // Connection : keep - alive // Content - Length : 10 // Cache - Control : max - age = 0 // Origin : http ://192.168.0.23:40786 // Upgrade - Insecure - Requests : 1 // User - Agent : Mozilla / 5.0 (Windows NT 6.1; WOW64) AppleWebKit / 537.36 (KHTML, like Gecko) Chrome / 55.0.2883.87 Safari / 537.36 // Content - Type : application / x - www - form - urlencoded // Accept : text / html, application / xhtml + xml, application / xml; q = 0.9, image / webp, */*;q=0.8 // Referer: http://192.168.0.23:47310/ // Accept-Encoding: gzip, deflate // Accept-Language: zh-CN,zh;q=0.8 // Cookie: __guid=179317988.1576506943281708800.1510107225903.8862; monitor_count=281 // Form Data // color=gray /********************************************************************** * A request has caused a call to accept() on the server port to return. * Process the request appropriately. * Parameters: the socket connected to the client(\u8fde\u63a5\u5230\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57) ***********************************************************************/ void accept_request ( void * arg ) { int client = ( intptr_t ) arg ; /* intptr_t\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u59cb\u7ec8\u4e0e\u5730\u5740\u4f4d\u6570\u76f8\u540c */ char buf [ 1024 ]; size_t numchars ; char method [ 255 ]; char url [ 255 ]; char path [ 512 ]; size_t i , j ; struct stat st ; /* \u6587\u4ef6\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6shux */ int cgi = 0 ; /* becomes true if server decides this is a CGI program */ char * query_string = NULL ; /**************************** * \u63a5\u6536\u6570\u636e\u653e\u5165buff\u7f13\u51b2\u533a * \u8fd4\u56de\u5b57\u8282\u6570 * **************************/ numchars = get_line ( client , buf , sizeof ( buf )); i = 0 ; j = 0 ; /************************************ * \u4e3e\u4f8b:\"GET / HTTP/1.1\\n\" * \u63d0\u53d6\u5b57\u7b26\u4e32GET * ISspace\u53c2\u6570\u4e3a\u7a7a\u767d\u5b57\u7b26\u8fd4\u56de\u975e0\uff0c\u5426\u5219\u8fd4\u56de0\u3002 * **********************************/ while ( ! ISspace ( buf [ i ]) && ( i < sizeof ( method ) - 1 )) { method [ i ] = buf [ i ]; i ++ ; } j = i ; method [ i ] = '\\0' ; printf ( \"LINE[%d] \\t function[%s] \\t method=[%s] \\n \" , __LINE__ , __FUNCTION__ , method ); /************************************ * \u51fd\u6570\u8bf4\u660e\uff1astrcasecmp()\u7528\u6765\u6bd4\u8f83\u53c2\u6570s1 \u548cs2 \u5b57\u7b26\u4e32\uff0c\u6bd4\u8f83\u65f6\u4f1a\u81ea\u52a8\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5dee\u5f02\u3002 * \u8fd4\u56de\u503c\uff1a\u82e5\u53c2\u6570s1 \u548cs2 \u5b57\u7b26\u4e32\u76f8\u540c\u5219\u8fd4\u56de0\u3002 * s1 \u957f\u5ea6\u5927\u4e8es2 \u957f\u5ea6\u5219\u8fd4\u56de\u5927\u4e8e0 \u7684\u503c\uff0c * s1 \u957f\u5ea6\u82e5\u5c0f\u4e8es2 \u957f\u5ea6\u5219\u8fd4\u56de\u5c0f\u4e8e0 \u7684\u503c\u3002 * *********************************/ if ( strcasecmp ( method , \"GET\" ) && strcasecmp ( method , \"POST\" )) { unimplemented ( client ); /* \u5982\u679c\u63a5\u6536\u5230\u7684\u6570\u636e\u4e2d\u65e2\u6709GET\u65b9\u6cd5\u4e0ePOST\u65b9\u6cd5\uff0c\u5219\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u8be5web\u65b9\u6cd5\u5c1a\u672a\u5b9e\u73b0 */ return ; } if ( strcasecmp ( method , \"POST\" ) == 0 ) cgi = 1 ; /* cgi\u4e3a\u6807\u5fd7\u4f4d\uff0c\u7f6e1\u8bf4\u660e\u5f00\u542fcgi\u89e3\u6790 */ i = 0 ; while ( ISspace ( buf [ j ]) && ( j < numchars )) /* \u5982\u679c\u4e3a\u7a7a\u767d\u5b57\u7b26\u5219\u8df3\u8fc7 */ j ++ ; /********************************* * //\u5f97\u5230 \"/\" * \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u7684http\u7684\u7f51\u5740\u4e3ahttp://x.x.x.x:8888/index.html * \u90a3\u4e48\u4f60\u5f97\u5230\u7684\u7b2c\u4e00\u6761http\u4fe1\u606f\u4e3aGET /index.html HTTP/1.1\uff0c\u90a3\u4e48 * \u89e3\u6790\u5f97\u5230\u7684\u5c31\u662f/index.html **********************************/ while ( ! ISspace ( buf [ j ]) && ( i < sizeof ( url ) - 1 ) && ( j < numchars )) { url [ i ] = buf [ j ]; i ++ ; j ++ ; } url [ i ] = '\\0' ; if ( strcasecmp ( method , \"GET\" ) == 0 ) { query_string = url ; while (( * query_string != '?' ) && ( * query_string != '\\0' )) /* \u5982\u679c\u662fGET\u8bf7\u6c42\uff0curl\u53ef\u80fd\u4f1a\u5e26\u6709?,\u6709\u67e5\u8be2\u53c2\u6570 */ query_string ++ ; if ( * query_string == '?' ) { cgi = 1 ; * query_string = '\\0' ; /* \u5c06\u89e3\u6790\u53c2\u6570\u622a\u53d6\u4e0b\u6765 */ query_string ++ ; } } sprintf ( path , \"htdocs%s\" , url ); /* url\u4e2d\u7684\u8def\u5f84\u683c\u5f0f\u5316\u5230path */ if ( path [ strlen ( path ) - 1 ] == '/' ) /* \u5982\u679cpath\u53ea\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u9996\u9875index.html */ strcat ( path , \"index.html\" ); /************************************** * \u51fd\u6570\u5b9a\u4e49: int stat(const char *file_name, struct stat *buf); * \u51fd\u6570\u8bf4\u660e: \u901a\u8fc7\u6587\u4ef6\u540dfilename\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5e76\u4fdd\u5b58\u5728buf\u6240\u6307\u7684\u7ed3\u6784\u4f53stat\u4e2d * \u8fd4\u56de\u503c: \u6267\u884c\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1\uff0c\u9519\u8bef\u4ee3\u7801\u5b58\u4e8eerrno\uff08\u9700\u8981include <errno.h>\uff09 * ***********************************/ if ( stat ( path , & st ) == - 1 ) { /* \u5047\u5982\u8bbf\u95ee\u7684\u7f51\u9875\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u65ad\u7684\u8bfb\u53d6\u5269\u4e0b\u7684\u8bf7\u6c42\u5934\u4fe1\u606f\uff0c\u5e76\u4e22\u5f03\u5373\u53ef */ while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); not_found ( client ); /* \u6700\u540e\u8fd4\u56de\u7f51\u9875\u4e0d\u5b58\u5728 */ } else { /*************************************** * st_mode\u662f\u7528\u7279\u5f81\u4f4d\u6765\u8868\u793a\u6587\u4ef6\u7c7b\u578b\u7684 * S_IFMT 0170000 \u6587\u4ef6\u7c7b\u578b\u7684\u4f4d\u906e\u7f69 * \u5982\u679c\u8def\u5f84\u662f\u4e2a\u76ee\u5f55\uff0c\u90a3\u5c31\u5c06\u4e3b\u9875\u8fdb\u884c\u663e\u793a ***************************************/ if (( st . st_mode & S_IFMT ) == S_IFDIR ) /* \u76ee\u5f55 */ strcat ( path , \"/index.html\" ); /* \u5982\u679c\u4f60\u7684\u6587\u4ef6\u9ed8\u8ba4\u662f\u6709\u6267\u884c\u6743\u9650\u7684\uff0c\u81ea\u52a8\u89e3\u6790\u6210cgi\u7a0b\u5e8f\uff0c\u5982\u679c\u6709\u6267\u884c\u6743\u9650\u4f46\u662f\u4e0d\u80fd\u6267\u884c\uff0c\u4f1a\u63a5\u53d7\u5230\u62a5\u9519\u4fe1\u53f7 */ if (( st . st_mode & S_IXUSR ) || /* S_IXUSR:\u6587\u4ef6\u6240\u6709\u8005\u5177\u53ef\u6267\u884c\u6743\u9650 */ ( st . st_mode & S_IXGRP ) || /* S_IXGRP:\u7528\u6237\u7ec4\u5177\u53ef\u6267\u884c\u6743\u9650 */ ( st . st_mode & S_IXOTH ) ) /* S_IXOTH:\u5176\u4ed6\u7528\u6237\u5177\u53ef\u8bfb\u53d6\u6743\u9650 */ cgi = 1 ; if ( ! cgi ) serve_file ( client , path ); /* \u8bfb\u53d6\u9759\u6001\u6587\u4ef6\u8fd4\u56de\u7ed9\u8bf7\u6c42\u7684http\u5ba2\u6237\u7aef */ else execute_cgi ( client , path , method , query_string ); /* \u6267\u884ccgi\u52a8\u6001\u89e3\u6790 */ } close ( client ); /* \u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5173\u95edsocket */ } /**********************************************************************/ /* Inform the client that a request it has made has a problem. * Parameters: client socket */ /**********************************************************************/ void bad_request ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 400 BAD REQUEST \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"Content-type: text/html \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"<P>Your browser sent a bad request, \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"such as a POST without a Content-Length. \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); } /**********************************************************************/ /* Put the entire contents of a file out on a socket. This function * is named after the UNIX \"cat\" command, because it might have been * easier just to do something like pipe, fork, and exec(\"cat\"). * Parameters: the client socket descriptor * FILE pointer for the file to cat */ /**********************************************************************/ void cat ( int client , FILE * resource ) { char buf [ 1024 ]; fgets ( buf , sizeof ( buf ), resource ); while ( ! feof ( resource )) /* \u5faa\u73af\u8bfb\u53d6 */ { send ( client , buf , strlen ( buf ), 0 ); fgets ( buf , sizeof ( buf ), resource ); } } /**********************************************************************/ /* Inform the client that a CGI script could not be executed. * Parameter: the client socket descriptor. */ /**********************************************************************/ void cannot_execute ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 500 Internal Server Error \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<P>Error prohibited CGI execution. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Print out an error message with perror() (for system errors; based * on value of errno, which indicates system call errors) and exit the * program indicating an error. */ /**********************************************************************/ void error_die ( const char * sc ) { perror ( sc ); exit ( 1 ); } /**********************************************************************/ /* Execute a CGI script. Will need to set environment variables as * appropriate. (\u6267\u884ccgi\u52a8\u6001\u89e3\u6790) * Parameters: client socket descriptor * path to the CGI script */ /**********************************************************************/ void execute_cgi ( int client , const char * path , const char * method , const char * query_string ) { char buf [ 1024 ]; int cgi_output [ 2 ]; /* \u8bfb\u5199\u7ba1\u9053\u7684\u58f0\u660e */ int cgi_input [ 2 ]; pid_t pid ; int status ; int i ; char c ; int numchars = 1 ; int content_length = - 1 ; buf [ 0 ] = 'A' ; buf [ 1 ] = '\\0' ; if ( strcasecmp ( method , \"GET\" ) == 0 ) /* \u5982\u679c\u662fGET\u8bf7\u6c42,\u8bfb\u53d6\u5e76\u4e14\u4e22\u5f03\u5934\u4fe1\u606f */ while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); else if ( strcasecmp ( method , \"POST\" ) == 0 ) /*POST*/ { numchars = get_line ( client , buf , sizeof ( buf )); while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* \u5faa\u73af\u8bfb\u53d6\u5934\u4fe1\u606f\u627e\u5230Content-Length\u5b57\u6bb5\u7684\u503c */ { buf [ 15 ] = '\\0' ; /* \"Content-Length: 15\" */ if ( strcasecmp ( buf , \"Content-Length:\" ) == 0 ) content_length = atoi ( & ( buf [ 16 ])); numchars = get_line ( client , buf , sizeof ( buf )); } if ( content_length == - 1 ) { bad_request ( client ); /* \u9519\u8bef\u8bf7\u6c42 */ return ; } } else /*HEAD or other*/ { } /**************************************** * #include<unistd.h> * int pipe(int filedes[2]); * \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff0c\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 * \u53c2\u6570\u6570\u7ec4\u5305\u542bpipe\u4f7f\u7528\u7684\u4e24\u4e2a\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u3002fd[0]:\u8bfb\u7ba1\u9053\uff0cfd[1]:\u5199\u7ba1\u9053\u3002 * \u5fc5\u987b\u5728fork()\u4e2d\u8c03\u7528pipe()\uff0c\u5426\u5219\u5b50\u8fdb\u7a0b\u4e0d\u4f1a\u7ee7\u627f\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 * \u4e24\u4e2a\u8fdb\u7a0b\u4e0d\u5171\u4eab\u7956\u5148\u8fdb\u7a0b\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528pipe\u3002\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u547d\u540d\u7ba1\u9053\u3002 * pipe(cgi_output)\u6267\u884c\u6210\u529f\u540e\uff0ccgi_output[0]:\u8bfb\u901a\u9053 cgi_output[1]:\u5199\u901a\u9053 * **************************************/ if ( pipe ( cgi_output ) < 0 ) { cannot_execute ( client ); return ; } if ( pipe ( cgi_input ) < 0 ) { cannot_execute ( client ); return ; } if ( ( pid = fork ()) < 0 ) { cannot_execute ( client ); return ; } sprintf ( buf , \"HTTP/1.0 200 OK \\r\\n \" ); /* \u8fd4\u56de\u6b63\u786e\u54cd\u5e94\u7801200 */ send ( client , buf , strlen ( buf ), 0 ); if ( pid == 0 ) /* child: CGI script */ { char meth_env [ 255 ]; char query_env [ 255 ]; char length_env [ 255 ]; dup2 ( cgi_output [ 1 ], STDOUT ); /* 1\u4ee3\u8868\u7740stdout\uff0c0\u4ee3\u8868\u7740stdin\uff0c\u5c06\u7cfb\u7edf\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u4e3acgi_output[1] */ dup2 ( cgi_input [ 0 ], STDIN ); /* \u5c06\u7cfb\u7edf\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u4e3acgi_input[0]\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u5173\u952e\uff0ccgi\u7a0b\u5e8f\u4e2d\u7528\u7684\u662f\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8fdb\u884c\u4ea4\u4e92 */ close ( cgi_output [ 0 ]); /* \u5173\u95ed\u4e86cgi_output\u4e2d\u7684\u8bfb\u901a\u9053 */ close ( cgi_input [ 1 ]); /* \u5173\u95ed\u4e86cgi_input\u4e2d\u7684\u5199\u901a\u9053 */ sprintf ( meth_env , \"REQUEST_METHOD=%s\" , method ); putenv ( meth_env ); if ( strcasecmp ( method , \"GET\" ) == 0 ) { sprintf ( query_env , \"QUERY_STRING=%s\" , query_string ); putenv ( query_env ); } else { /* POST */ sprintf ( length_env , \"CONTENT_LENGTH=%d\" , content_length ); putenv ( length_env ); } /************************************************** * #include<unistd.h> * int execl(const char * path,const char * arg,....); * execl()\u7528\u6765\u6267\u884c\u53c2\u6570path\u5b57\u7b26\u4e32\u6240\u4ee3\u8868\u7684\u6587\u4ef6\u8def\u5f84\uff0c * \u63a5\u4e0b\u6765\u7684\u53c2\u6570\u4ee3\u8868\u6267\u884c\u8be5\u6587\u4ef6\u65f6\u4f20\u9012\u8fc7\u53bb\u7684argv(0)\u3001argv[1]\u2026\u2026\uff0c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u7528\u7a7a\u6307\u9488(NULL)\u4f5c\u7ed3\u675f\u3002 * \u5982\u679c\u6267\u884c\u6210\u529f\u5219\u51fd\u6570\u4e0d\u4f1a\u8fd4\u56de\uff0c\u6267\u884c\u5931\u8d25\u5219\u76f4\u63a5\u8fd4\u56de-1\uff0c\u5931\u8d25\u539f\u56e0\u5b58\u4e8eerrno\u4e2d\u3002 * ***********************************************/ execl ( path , NULL ); exit ( 0 ); } else { /* parent */ close ( cgi_output [ 1 ]); /* \u5173\u95ed\u4e86cgi_output\u4e2d\u7684\u5199\u901a\u9053\uff0c\u6ce8\u610f\u8fd9\u662f\u7236\u8fdb\u7a0b\u4e2dcgi_output\u53d8\u91cf\u548c\u5b50\u8fdb\u7a0b\u8981\u533a\u5206\u5f00 */ close ( cgi_input [ 0 ]); /* \u5173\u95ed\u4e86cgi_input\u4e2d\u7684\u8bfb\u901a\u9053 */ if ( strcasecmp ( method , \"POST\" ) == 0 ) for ( i = 0 ; i < content_length ; i ++ ) { recv ( client , & c , 1 , 0 ); write ( cgi_input [ 1 ], & c , 1 ); } while ( read ( cgi_output [ 0 ], & c , 1 ) > 0 ) send ( client , & c , 1 , 0 ); close ( cgi_output [ 0 ]); close ( cgi_input [ 1 ]); /*************************************** * pid_t waitpid(pid_t pid, int * status, int options); * waitpid()\u4f1a\u6682\u65f6\u505c\u6b62\u76ee\u524d\u8fdb\u7a0b\u7684\u6267\u884c, \u76f4\u5230\u6709\u4fe1\u53f7\u6765\u5230\u6216\u5b50\u8fdb\u7a0b\u7ed3\u675f. * \u5982\u679c\u5728\u8c03\u7528wait()\u65f6\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u7ed3\u675f, \u5219wait()\u4f1a\u7acb\u5373\u8fd4\u56de\u5b50\u8fdb\u7a0b\u7ed3\u675f\u72b6\u6001\u503c. \u5b50\u8fdb\u7a0b\u7684\u7ed3\u675f\u72b6\u6001\u503c\u4f1a\u7531\u53c2\u6570status * \u8fd4\u56de,\u800c\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u8bc6\u522b\u7801\u4e5f\u4f1a\u4e00\u5feb\u8fd4\u56de. * \u5982\u679c\u4e0d\u5728\u610f\u7ed3\u675f\u72b6\u6001\u503c, \u5219\u53c2\u6570status \u53ef\u4ee5\u8bbe\u6210NULL. \u53c2\u6570pid \u4e3a\u6b32\u7b49\u5f85\u7684\u5b50\u8fdb\u7a0b\u8bc6\u522b\u7801, \u5176\u4ed6\u6570\u503c\u610f\u4e49\u5982\u4e0b\uff1a * 1\u3001pid<-1 \u7b49\u5f85\u8fdb\u7a0b\u7ec4\u8bc6\u522b\u7801\u4e3apid \u7edd\u5bf9\u503c\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b. * 2\u3001pid=-1 \u7b49\u5f85\u4efb\u4f55\u5b50\u8fdb\u7a0b, \u76f8\u5f53\u4e8ewait(). * 3\u3001pid=0 \u7b49\u5f85\u8fdb\u7a0b\u7ec4\u8bc6\u522b\u7801\u4e0e\u76ee\u524d\u8fdb\u7a0b\u76f8\u540c\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b. * 4\u3001pid>0 \u7b49\u5f85\u4efb\u4f55\u5b50\u8fdb\u7a0b\u8bc6\u522b\u7801\u4e3apid \u7684\u5b50\u8fdb\u7a0b. * ************************************/ waitpid ( pid , & status , 0 ); } } /**********************************************************************/ /* Get a line from a socket, whether the line ends in a newline, * carriage return, or a CRLF combination. Terminates the string read * with a null character. If no newline indicator is found before the * end of the buffer, the string is terminated with a null. If any of * the above three line terminators is read, the last character of the * string will be a linefeed and the string will be terminated with a * null character. * Parameters: the socket descriptor * the buffer to save the data in * the size of the buffer * Returns: the number of bytes stored (excluding null) */ /**********************************************************************/ int get_line ( int sock , char * buf , int size ) { int i = 0 ; char c = '\\0' ; int n ; while (( i < size - 1 ) && ( c != '\\n' )) { n = recv ( sock , & c , 1 , 0 ); /* DEBUG printf(\"%02X\\n\", c); */ if ( n > 0 ) { if ( c == '\\r' ) { n = recv ( sock , & c , 1 , MSG_PEEK ); /* DEBUG printf(\"%02X\\n\", c); */ if (( n > 0 ) && ( c == '\\n' )) recv ( sock , & c , 1 , 0 ); else c = '\\n' ; } buf [ i ] = c ; i ++ ; } else c = '\\n' ; } buf [ i ] = '\\0' ; return ( i ); } /**********************************************************************/ /* Return the informational HTTP headers about a file. */ /* Parameters: the socket to print the headers on * the name of the file */ /**********************************************************************/ void headers ( int client , const char * filename ) { char buf [ 1024 ]; ( void ) filename ; /* could use filename to determine file type */ strcpy ( buf , \"HTTP/1.0 200 OK \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); strcpy ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); strcpy ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Give a client a 404 not found status message. */ /**********************************************************************/ void not_found ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 404 NOT FOUND \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<HTML><TITLE>Not Found</TITLE> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<BODY><P>The server could not fulfill \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"your request because the resource specified \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"is unavailable or nonexistent. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</BODY></HTML> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Send a regular file to the client. Use headers, and report * errors to client if they occur. * Parameters: a pointer to a file structure produced from the socket * file descriptor * the name of the file to serve */ /**********************************************************************/ void serve_file ( int client , const char * filename ) { FILE * resource = NULL ; int numchars = 1 ; char buf [ 1024 ]; buf [ 0 ] = 'A' ; buf [ 1 ] = '\\0' ; while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); resource = fopen ( filename , \"r\" ); if ( resource == NULL ) not_found ( client ); else { headers ( client , filename ); cat ( client , resource ); } fclose ( resource ); } /**********************************************************************/ /* This function starts the process of listening for web connections * on a specified port. If the port is 0, then dynamically allocate a * port and modify the original port variable to reflect the actual * port. * Parameters: pointer to variable containing the port to connect on * Returns: the socket * \u6b64\u51fd\u6570\u542f\u52a8\u5728\u6307\u5b9a\u7aef\u53e3\u4e0a\u4fa6\u542cWeb\u8fde\u63a5\u7684\u8fc7\u7a0b\u3002 * \u5982\u679c\u7aef\u53e3\u4e3a0\uff0c\u5219\u52a8\u6001\u5206\u914d\u7aef\u53e3\u5e76\u4fee\u6539\u539f\u59cb\u7aef\u53e3\u53d8\u91cf\u4ee5\u53cd\u6620\u5b9e\u9645\u7aef\u53e3\u3002 * \u53c2\u6570\uff1a\u6307\u5411\u5305\u542b\u8fde\u63a5\u7aef\u53e3\u7684\u53d8\u91cf\u7684\u6307\u9488 * \u8fd4\u56de\uff1a\u5957\u63a5\u5b57 * */ /**********************************************************************/ int startup ( u_short * port ) { int httpd = 0 ; int on = 1 ; struct sockaddr_in name ; /********************************** * socket\u7cfb\u7edf\u8c03\u7528\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57 * \u8fd4\u56de\uff1a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8be5\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u8be5\u5957\u63a5\u5b57 * int socket(int domain, int type, int protocol); * domain\u6307\u5b9a\u534f\u8bae\u65cf\uff0c\u6700\u5e38\u7528\u7684\u662fAF_UNIX(unix\u548clinux\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u7684\u672c\u5730\u5957\u63a5\u5b57)\u548cAF_INET(UNIX\u7f51\u7edc\u5957\u63a5\u5b57) * type\u6307\u5b9a\u5957\u63a5\u5b57\u7684\u901a\u4fe1\u7c7b\u578b\uff0cSOCK_STREAM(\u6709\u5e8f\uff0c\u53ef\u9760\uff0c\u9762\u5411\u8fde\u63a5\u7684\u53cc\u5411\u5b57\u8282\u6d41)\u548cSOCK_DGRAM(\u6570\u636e\u62a5\u670d\u52a1) * protocol\u6307\u5b9a\u4f7f\u7528\u7684\u534f\u8bae\uff0c\u4e00\u822c\u7531\u5957\u63a5\u5b57\u7c7b\u578b\u548c\u5957\u63a5\u5b57\u57df\u6765\u51b3\u5b9a\uff0c\u4e00\u822c\u9ed8\u8ba40 * *******************************/ httpd = socket ( PF_INET , SOCK_STREAM , 0 ); if ( httpd == - 1 ) error_die ( \"socket\" ); memset ( & name , 0 , sizeof ( name )); /* \u7ed3\u6784\u4f53\u6e05\u7a7a\u7f6e\u96f6 */ name . sin_family = AF_INET ; name . sin_port = htons ( * port ); /* host to network, short \u77ed\u6574\u6570\u4ece\u4e3b\u673a\u5b57\u8282\u5e8f\u5230\u7f51\u7edc\u5b57\u8282\u5e8f\u8f6c\u6362 */ /******************************** * INADDR_ANY\u8f6c\u6362\u8fc7\u6765\u5c31\u662f0.0.0.0\uff0c\u6cdb\u6307\u672c\u673a\u7684\u610f\u601d\uff0c\u4e5f\u5c31\u662f\u8868\u793a\u672c\u673a\u7684\u6240\u6709IP * \u56e0\u4e3a\u6709\u4e9b\u673a\u5b50\u4e0d\u6b62\u4e00\u5757\u7f51\u5361\uff0c\u591a\u7f51\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u5c31\u8868\u793a\u6240\u6709\u7f51\u5361ip\u5730\u5740\u7684\u610f\u601d\u3002 * * \u6bd4\u5982\u4e00\u53f0\u7535\u8111\u67093\u5757\u7f51\u5361\uff0c\u5206\u522b\u8fde\u63a5\u4e09\u4e2a\u7f51\u7edc\uff0c\u90a3\u4e48\u8fd9\u53f0\u7535\u8111\u5c31\u67093\u4e2aip\u5730\u5740\u4e86\uff0c\u5982\u679c\u67d0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u76d1\u542c\u67d0\u4e2a\u7aef\u53e3\uff0c\u90a3\u4ed6\u8981\u76d1\u542c\u54ea\u4e2a\u7f51\u5361\u5730\u5740\u7684\u7aef\u53e3\u5462\uff1f * * \u5982\u679c\u7ed1\u5b9a\u67d0\u4e2a\u5177\u4f53\u7684ip\u5730\u5740\uff0c\u4f60\u53ea\u80fd\u76d1\u542c\u4f60\u6240\u8bbe\u7f6e\u7684ip\u5730\u5740\u6240\u5728\u7684\u7f51\u5361\u7684\u7aef\u53e3\uff0c\u5176\u5b83\u4e24\u5757\u7f51\u5361\u65e0\u6cd5\u76d1\u542c\u7aef\u53e3\uff0c * \u5982\u679c\u6211\u9700\u8981\u4e09\u4e2a\u7f51\u5361\u90fd\u76d1\u542c\uff0c\u90a3\u5c31\u9700\u8981\u7ed1\u5b9a3\u4e2aip\uff0c\u4e5f\u5c31\u7b49\u4e8e\u9700\u8981\u7ba1\u74063\u4e2a\u5957\u63a5\u5b57\u8fdb\u884c\u6570\u636e\u4ea4\u6362\uff0c\u8fd9\u6837\u5c82\u4e0d\u662f\u5f88\u7e41\u7410\uff1f * * \u6240\u4ee5\u51fa\u73b0INADDR_ANY\uff0c\u4f60\u53ea\u9700\u7ed1\u5b9aINADDR_ANY\uff0c\u7ba1\u7406\u4e00\u4e2a\u5957\u63a5\u5b57\u5c31\u884c\uff0c\u4e0d\u7ba1\u6570\u636e\u662f\u4ece\u54ea\u4e2a\u7f51\u5361\u8fc7\u6765\u7684\uff0c\u53ea\u8981\u662f\u7ed1\u5b9a\u7684\u7aef\u53e3\u53f7\u8fc7\u6765\u7684\u6570\u636e\uff0c\u90fd\u53ef\u4ee5\u63a5\u6536\u5230\u3002 * ******************************/ name . sin_addr . s_addr = htonl ( INADDR_ANY ); /* host to network, long */ /****************************************** * \u5957\u63a5\u5b57\u9009\u9879\uff1f\uff1f\uff1f\uff1fSO_REUSEADDR\uff1f\uff1f\uff1f\uff1f\u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\uff0c\u53ef\u5199blog * int setsockopt(int socket, int level, int option_name, * const void *option_value, size_t option_len); * \u5982\u679c\u5728\u5957\u63a5\u5b57\u7ea7\u522b\u8bbe\u7f6e\u9009\u9879\uff0clevel\u53c2\u6570\u8bbe\u7f6e\u4e3aSOL_SOCKET * option_name\u53c2\u6570\u6307\u5b9a\u8981\u8bbe\u7f6e\u7684\u9009\u9879\uff0cSO_REUSEADDR:\u9632\u6b62\u670d\u52a1\u5668\u5728\u53d1\u751f\u610f\u5916\u65f6\uff0c\u7aef\u53e3\u672a\u88ab\u91ca\u653e\uff0c\u53ef\u4ee5\u91cd\u65b0\u4f7f\u7528 * option_value\u53c2\u6570\u7684\u957f\u5ea6\u4e3aoption_len\u5b57\u8282\uff0c\u7528\u4e8e\u8bbe\u5b9a\u9009\u9879\u7684\u65b0\u503c\uff0c\u5b83\u88ab\u4f20\u9012\u7ed9\u5e95\u5c42\u534f\u8bae\u7684\u5904\u7406\u51fd\u6570\uff0c\u5e76\u4e14\u4e0d\u80fd\u88ab\u4fee\u6539 * \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 * ****************************************/ if (( setsockopt ( httpd , SOL_SOCKET , SO_REUSEADDR , & on , sizeof ( on ))) < 0 ) { error_die ( \"setsockopt failed\" ); } /****************************************** * \u547d\u540d\u5957\u63a5\u5b57\uff0cAF_UNIX\u5957\u63a5\u5b57\u4f1a\u5173\u8054\u5230\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u8def\u5f84\u540d\uff0cAF_INET\u5957\u63a5\u5b57\u5173\u8054\u5230\u4e00\u4e2aIP\u7aef\u53e3\u53f7 * int bind(int socket, const struct sockaddr *address, size_t address_len); * \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 * ***************************************/ if ( bind ( httpd , ( struct sockaddr * ) & name , sizeof ( name )) < 0 ) error_die ( \"bind\" ); if ( * port == 0 ) /* if dynamically allocating a port \u5982\u679c\u52a8\u6001\u5206\u914d\u7aef\u53e3\u53f7*/ { socklen_t namelen = sizeof ( name ); /***************************************** * ?????????\u4e0d\u660e\u767d\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f * int PASCAL FAR getsockname( SOCKET s, struct sockaddr FAR* name, int FAR* namelen); * s\uff1a\u6807\u8bc6\u4e00\u4e2a\u5df2\u6346\u7ed1\u5957\u63a5\u53e3\u7684\u63cf\u8ff0\u5b57\u3002 * name\uff1a\u63a5\u6536\u5957\u63a5\u53e3\u7684\u5730\u5740\uff08\u540d\u5b57\uff09\u3002 * namelen\uff1a\u540d\u5b57\u7f13\u51b2\u533a\u957f\u5ea6\u3002 * ***************************************/ if ( getsockname ( httpd , ( struct sockaddr * ) & name , & namelen ) == - 1 ) error_die ( \"getsockname\" ); * port = ntohs ( name . sin_port ); } /**************************************** * \u5957\u63a5\u5b57\u961f\u5217 * *************************************/ if ( listen ( httpd , 5 ) < 0 ) error_die ( \"listen\" ); return ( httpd ); } /**********************************************************************/ /* Inform the client that the requested web method has not been implemented. * Parameter: the client socket */ /**********************************************************************/ void unimplemented ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 501 Method Not Implemented \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<HTML><HEAD><TITLE>Method Not Implemented \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</TITLE></HEAD> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<BODY><P>HTTP request method not supported. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</BODY></HTML> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ int main ( void ) { int server_sock = - 1 ; u_short port = 4000 ; //unsigned short\u7c7b\u578b int client_sock = - 1 ; /**************************** * struct sockaddr_in{ * short int sin_family; //AF_INET * unsigned short int sin_port; //Port_number * struct in_addr sin_addr; //Internet address * }; * struct in_addr{ * unsigned long int s_addr; * }; * **************************/ struct sockaddr_in client_name ; /**************************** * \u731c\u6d4btypedef int socklen_t * /usr/include/arpa/inet.h * #ifndef __socklen_t_defined * typedef __socklen_t socklen_t; * # define __socklen_t_defined * #endif * **************************/ socklen_t client_name_len = sizeof ( client_name ); pthread_t newthread ; /*************** * startup: \u521d\u59cb\u5316 httpd \u670d\u52a1 * \u5305\u62ec\u5efa\u7acb\u5957\u63a5\u5b57\uff0c\u7ed1\u5b9a\u7aef\u53e3\uff0c\u8fdb\u884c\u76d1\u542c\u7b49\u3002 * *************/ server_sock = startup ( & port ); printf ( \"httpd running on port %d \\n \" , port ); while ( 1 ) { /***************************************** * int accept(int socket, struct sockaddr *address, size_t *address_len); * \u5f53\u6709\u8fde\u63a5\u65f6\uff0caccept\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u53d1\u9001\u9519\u8bef\u65f6\uff0c\u8fd4\u56de-1\u3002 * ***************************************/ client_sock = accept ( server_sock , ( struct sockaddr * ) & client_name , & client_name_len ); if ( client_sock == - 1 ) error_die ( \"accept\" ); /* accept_request(&client_sock); */ if ( pthread_create ( & newthread , NULL , ( void * ) accept_request , ( void * )( intptr_t ) client_sock ) != 0 ) perror ( \"pthread_create\" ); } close ( server_sock ); return ( 0 ); }","title":"\u6e90\u7801&amp;\u6ce8\u91ca"},{"location":"source/lua/lua_summary/","text":"Lua\u73af\u5883\u5b89\u88c5 \u00b6 1 2 3 4 5 curl -R -O http://www.lua.org/ftp/lua-5.3.0.tar.gz tar zxf lua-5.3.0.tar.gz cd lua-5.3.0 make linux test make install \u6ce8\u91ca \u00b6 \u5355\u884c\u6ce8\u91ca \u00b6 1 -- \u591a\u884c\u6ce8\u91ca \u00b6 1 2 3 4 --[[ \u591a\u884c\u6ce8\u91ca \u591a\u884c\u6ce8\u91ca ]]-- \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf\u603b\u662f\u8ba4\u4e3a\u662f\u5168\u5c40\u7684\u3002 \u5168\u5c40\u53d8\u91cf\u4e0d\u9700\u8981\u58f0\u660e\uff0c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u540e\u5373\u521b\u5efa\u4e86\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8bbf\u95ee\u4e00\u4e2a\u6ca1\u6709\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u4e5f\u4e0d\u4f1a\u51fa\u9519\uff0c\u53ea\u4e0d\u8fc7\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff1anil\u3002 Lua\u6570\u636e\u7c7b\u578b \u00b6 \u6570\u636e\u7c7b\u578b \u63cf\u8ff0 nil \u8868\u793a\u4e00\u4e2a\u65e0\u6548\u503c\uff0cnil\u4f5c\u6bd4\u8f83\u65f6\u5e94\u8be5\u52a0\u4e0a\u53cc\u5f15\u53f7\" boolean fase\u548ctrue number \u8868\u793a\u53cc\u7cbe\u5ea6\u7c7b\u578b\u7684\u5b9e\u6d6e\u70b9\u6570 string \u5b57\u7b26\u4e32\u7531\u4e00\u5bf9\u53cc\u5f15\u53f7\u6216\u5355\u5f15\u53f7\u6765\u8868\u793a function \u7531C\u6216Lua\u7f16\u5199\u7684\u51fd\u6570 userdata \u8868\u793a\u4efb\u610f\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684C\u6570\u636e\u7ed3\u6784 thread \u8868\u793a\u6267\u884c\u7684\u72ec\u7acb\u7ebf\u8def\uff0c\u7528\u4e8e\u6267\u884c\u534f\u540c\u7a0b\u5e8f table Lua \u4e2d\u7684\u8868\uff08table\uff09\u5176\u5b9e\u662f\u4e00\u4e2a\"\u5173\u8054\u6570\u7ec4\"\uff08associative arrays\uff09\uff0c\u6570\u7ec4\u7684\u7d22\u5f15\u53ef\u4ee5\u662f\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u6216\u8868\u7c7b\u578b\u3002\u5728 Lua \u91cc\uff0ctable \u7684\u521b\u5efa\u662f\u901a\u8fc7\"\u6784\u9020\u8868\u8fbe\u5f0f\"\u6765\u5b8c\u6210\uff0c\u6700\u7b80\u5355\u6784\u9020\u8868\u8fbe\u5f0f\u662f{}\uff0c\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u8868\u3002","title":"Lua\u603b\u7ed3"},{"location":"source/lua/lua_summary/#lua","text":"1 2 3 4 5 curl -R -O http://www.lua.org/ftp/lua-5.3.0.tar.gz tar zxf lua-5.3.0.tar.gz cd lua-5.3.0 make linux test make install","title":"Lua\u73af\u5883\u5b89\u88c5"},{"location":"source/lua/lua_summary/#_1","text":"","title":"\u6ce8\u91ca"},{"location":"source/lua/lua_summary/#_2","text":"1 --","title":"\u5355\u884c\u6ce8\u91ca"},{"location":"source/lua/lua_summary/#_3","text":"1 2 3 4 --[[ \u591a\u884c\u6ce8\u91ca \u591a\u884c\u6ce8\u91ca ]]-- \u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u53d8\u91cf\u603b\u662f\u8ba4\u4e3a\u662f\u5168\u5c40\u7684\u3002 \u5168\u5c40\u53d8\u91cf\u4e0d\u9700\u8981\u58f0\u660e\uff0c\u7ed9\u4e00\u4e2a\u53d8\u91cf\u8d4b\u503c\u540e\u5373\u521b\u5efa\u4e86\u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u8bbf\u95ee\u4e00\u4e2a\u6ca1\u6709\u521d\u59cb\u5316\u7684\u5168\u5c40\u53d8\u91cf\u4e5f\u4e0d\u4f1a\u51fa\u9519\uff0c\u53ea\u4e0d\u8fc7\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff1anil\u3002","title":"\u591a\u884c\u6ce8\u91ca"},{"location":"source/lua/lua_summary/#lua_1","text":"\u6570\u636e\u7c7b\u578b \u63cf\u8ff0 nil \u8868\u793a\u4e00\u4e2a\u65e0\u6548\u503c\uff0cnil\u4f5c\u6bd4\u8f83\u65f6\u5e94\u8be5\u52a0\u4e0a\u53cc\u5f15\u53f7\" boolean fase\u548ctrue number \u8868\u793a\u53cc\u7cbe\u5ea6\u7c7b\u578b\u7684\u5b9e\u6d6e\u70b9\u6570 string \u5b57\u7b26\u4e32\u7531\u4e00\u5bf9\u53cc\u5f15\u53f7\u6216\u5355\u5f15\u53f7\u6765\u8868\u793a function \u7531C\u6216Lua\u7f16\u5199\u7684\u51fd\u6570 userdata \u8868\u793a\u4efb\u610f\u5b58\u50a8\u5728\u53d8\u91cf\u4e2d\u7684C\u6570\u636e\u7ed3\u6784 thread \u8868\u793a\u6267\u884c\u7684\u72ec\u7acb\u7ebf\u8def\uff0c\u7528\u4e8e\u6267\u884c\u534f\u540c\u7a0b\u5e8f table Lua \u4e2d\u7684\u8868\uff08table\uff09\u5176\u5b9e\u662f\u4e00\u4e2a\"\u5173\u8054\u6570\u7ec4\"\uff08associative arrays\uff09\uff0c\u6570\u7ec4\u7684\u7d22\u5f15\u53ef\u4ee5\u662f\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u6216\u8868\u7c7b\u578b\u3002\u5728 Lua \u91cc\uff0ctable \u7684\u521b\u5efa\u662f\u901a\u8fc7\"\u6784\u9020\u8868\u8fbe\u5f0f\"\u6765\u5b8c\u6210\uff0c\u6700\u7b80\u5355\u6784\u9020\u8868\u8fbe\u5f0f\u662f{}\uff0c\u7528\u6765\u521b\u5efa\u4e00\u4e2a\u7a7a\u8868\u3002","title":"Lua\u6570\u636e\u7c7b\u578b"},{"location":"source/nginx/nginx_balence/","text":"\u8d1f\u8f7d\u5747\u8861\u4e0e\u7f13\u5b58 \u00b6 \u53cd\u5411\u4ee3\u7406 \u00b6 \u53cd\u5411\u4ee3\u7406\u4e0e\u6b63\u5411\u4ee3\u7406\u7684\u533a\u522b \u00b6 \u6b63\u5411\u4ee3\u7406:\u5ba2\u6237\u7aef\u5c06\u53d1\u9001\u7684\u8bf7\u6c42\u548c\u6307\u5b9a\u7684\u76ee\u6807\u670d\u52a1\u5668\u53d1\u9001\u7ed9\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u4ee3\u7406\u670d\u52a1\u5668\u5411\u76ee\u6807\u670d\u52a1\u5668\u53d1\u8d77\u8bf7\u6c42\uff0c\u5e76\u5c06\u83b7\u5f97\u7684\u54cd\u5e94\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u8fc7\u7a0b\u3002 \u53cd\u5411\u4ee3\u7406:\u53cd\u5411\u4ee3\u7406\u5bf9\u4e8e\u5ba2\u6237\u7aef\u6765\u8bf4\u5c31\u662f\u76ee\u6807\u670d\u52a1\u5668\uff0c\u5ba2\u6237\u7aef\u5411\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u540e\uff0c\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u5c06\u8be5\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5185\u90e8\u7f51\u7edc\u4e0a\u7684\u540e\u7aef\u670d\u52a1\u5668\uff0c\u5e76\u5c06\u540e\u7aef\u670d\u52a1\u5668\u4e0a\u5f97\u5230\u7684\u54cd\u5e94\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u5728nginx\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0cproxy_pass\u6307\u4ee4\u901a\u5e38\u5728location\u5757\u4e2d\u8fdb\u884c\u8bbe\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 server{ listen 80; server_name test.ng.test; location / { proxy_pass http://192.168.78.128; } } server{ listen 80; server_name test.web.com; location / { proxy_pass http://192.168.78.200; } } \u6307\u4ee4 \u8bf4\u660e proxy_set_header \u5728\u8bb2\u5ba2\u6237\u7aef\u8bf7\u6c42\u53d1\u9001\u7ed9\u540e\u7aef\u670d\u52a1\u5668\u4e4b\u524d\uff0c\u66f4\u6539\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u5934\u4fe1\u606f proxy_connect_timeout \u914d\u7f6enginx\u4e0e\u540e\u7aef\u4ee3\u7406\u670d\u52a1\u5668\u5c1d\u8bd5\u5efa\u7acb\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout \u914d\u7f6enginx\u5411\u540e\u7aef\u670d\u52a1\u5668\u7ec4\u53d1\u51faread\u8bf7\u6c42\u540e\uff0c\u7b49\u5f85\u54cd\u5e94\u7684\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout \u914d\u7f6enginx\u5411\u540e\u7aef\u670d\u52a1\u5668\u7ec4\u53d1\u51fawrite\u8bf7\u6c42\u540e\uff0c\u7b49\u5f85\u54cd\u5e94\u7684\u8d85\u65f6\u65f6\u95f4 proxy_redirect \u7528\u4e8e\u4fee\u6539\u540e\u7aef\u670d\u52a1\u5668\u8fd4\u56de\u7684\u54cd\u5e94\u5934\u4e2d\u7684location\u548crefresh ### \u914d\u7f6ehttps\u7f51\u7ad9 \u7f13\u5b58\u914d\u7f6e \u00b6 \u90ae\u4ef6\u670d\u52a1 \u00b6","title":"\u8d1f\u8f7d\u5747\u8861\u4e0e\u7f13\u5b58"},{"location":"source/nginx/nginx_balence/#_1","text":"","title":"\u8d1f\u8f7d\u5747\u8861\u4e0e\u7f13\u5b58"},{"location":"source/nginx/nginx_balence/#_2","text":"","title":"\u53cd\u5411\u4ee3\u7406"},{"location":"source/nginx/nginx_balence/#_3","text":"\u6b63\u5411\u4ee3\u7406:\u5ba2\u6237\u7aef\u5c06\u53d1\u9001\u7684\u8bf7\u6c42\u548c\u6307\u5b9a\u7684\u76ee\u6807\u670d\u52a1\u5668\u53d1\u9001\u7ed9\u4ee3\u7406\u670d\u52a1\u5668\uff0c\u4ee3\u7406\u670d\u52a1\u5668\u5411\u76ee\u6807\u670d\u52a1\u5668\u53d1\u8d77\u8bf7\u6c42\uff0c\u5e76\u5c06\u83b7\u5f97\u7684\u54cd\u5e94\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u8fc7\u7a0b\u3002 \u53cd\u5411\u4ee3\u7406:\u53cd\u5411\u4ee3\u7406\u5bf9\u4e8e\u5ba2\u6237\u7aef\u6765\u8bf4\u5c31\u662f\u76ee\u6807\u670d\u52a1\u5668\uff0c\u5ba2\u6237\u7aef\u5411\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u53d1\u9001\u8bf7\u6c42\u540e\uff0c\u53cd\u5411\u4ee3\u7406\u670d\u52a1\u5668\u5c06\u8be5\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5185\u90e8\u7f51\u7edc\u4e0a\u7684\u540e\u7aef\u670d\u52a1\u5668\uff0c\u5e76\u5c06\u540e\u7aef\u670d\u52a1\u5668\u4e0a\u5f97\u5230\u7684\u54cd\u5e94\u7ed3\u679c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u3002 \u5728nginx\u914d\u7f6e\u6587\u4ef6\u4e2d\uff0cproxy_pass\u6307\u4ee4\u901a\u5e38\u5728location\u5757\u4e2d\u8fdb\u884c\u8bbe\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 server{ listen 80; server_name test.ng.test; location / { proxy_pass http://192.168.78.128; } } server{ listen 80; server_name test.web.com; location / { proxy_pass http://192.168.78.200; } } \u6307\u4ee4 \u8bf4\u660e proxy_set_header \u5728\u8bb2\u5ba2\u6237\u7aef\u8bf7\u6c42\u53d1\u9001\u7ed9\u540e\u7aef\u670d\u52a1\u5668\u4e4b\u524d\uff0c\u66f4\u6539\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u5934\u4fe1\u606f proxy_connect_timeout \u914d\u7f6enginx\u4e0e\u540e\u7aef\u4ee3\u7406\u670d\u52a1\u5668\u5c1d\u8bd5\u5efa\u7acb\u8fde\u63a5\u7684\u8d85\u65f6\u65f6\u95f4 proxy_read_timeout \u914d\u7f6enginx\u5411\u540e\u7aef\u670d\u52a1\u5668\u7ec4\u53d1\u51faread\u8bf7\u6c42\u540e\uff0c\u7b49\u5f85\u54cd\u5e94\u7684\u8d85\u65f6\u65f6\u95f4 proxy_send_timeout \u914d\u7f6enginx\u5411\u540e\u7aef\u670d\u52a1\u5668\u7ec4\u53d1\u51fawrite\u8bf7\u6c42\u540e\uff0c\u7b49\u5f85\u54cd\u5e94\u7684\u8d85\u65f6\u65f6\u95f4 proxy_redirect \u7528\u4e8e\u4fee\u6539\u540e\u7aef\u670d\u52a1\u5668\u8fd4\u56de\u7684\u54cd\u5e94\u5934\u4e2d\u7684location\u548crefresh ### \u914d\u7f6ehttps\u7f51\u7ad9","title":"\u53cd\u5411\u4ee3\u7406\u4e0e\u6b63\u5411\u4ee3\u7406\u7684\u533a\u522b"},{"location":"source/nginx/nginx_balence/#_4","text":"","title":"\u7f13\u5b58\u914d\u7f6e"},{"location":"source/nginx/nginx_balence/#_5","text":"","title":"\u90ae\u4ef6\u670d\u52a1"},{"location":"source/nginx/nginx_base/","text":"Nginx\u5b89\u88c5 \u00b6 1 2 3 yum -y install gcc gcc-c++ wget wget http://nginx.org/download/nginx-1.10.1.tar.gz tar -zxvf nginx-1.10.1.tar.gz nginx\u76ee\u5f55\u7ed3\u6784 \u00b6 src\u76ee\u5f55: \u5b58\u653enginx\u6e90\u7801\u3002 man\u76ee\u5f55: \u5b58\u653enginx\u5e2e\u52a9\u6587\u6863\u3002 html\u76ee\u5f55: \u5b58\u653e\u9ed8\u8ba4\u7f51\u7ad9\u6587\u4ef6\u3002 contrib\u76ee\u5f55: \u5b58\u653e\u5176\u5b83\u673a\u6784\u6216\u7ec4\u7ec7\u8d21\u732e\u7684\u6587\u6863\u8d44\u6599\u3002 conf\u76ee\u5f55: \u5b58\u653enginx\u670d\u52a1\u5668\u7684\u914d\u7f6e\u6587\u4ef6\u3002 auto\u76ee\u5f55: \u5b58\u653e\u5927\u91cf\u7684\u811a\u672c\u6587\u4ef6\uff0c\u548cconfigure\u811a\u672c\u7a0b\u5e8f\u76f8\u5173\u3002 configure\u6587\u4ef6: Nginx\u81ea\u52a8\u5b89\u88c5\u811a\u672c\uff0c\u7528\u4e8e\u73af\u5883\u68c0\u67e5\uff0c\u751f\u6210\u7f16\u8bd1\u4ee3\u7801\u9700\u8981\u7684makefile\u6587\u4ef6\u3002 CHANGES,CHANGES.ru,LICENSE\u548cREADME\u90fd\u662fNginx\u670d\u52a1\u5668\u7684\u76f8\u5173\u8d44\u6599\u3002 \u7f16\u8bd1\u5b89\u88c5nginx \u00b6 1 yum -y install pcre-devel openssl-devel zlib-devel 1 2 3 4 5 6 7 cd nginx-1.10.1 ./configure \\ --prefix=/usr/local/nginx \\ --with-http_ssl_module make && make install nginx\u542f\u52a8\u4e0e\u505c\u6b62 \u00b6 1 2 3 4 5 6 7 cd /usr/local/nginx/sbin ./nginx ps -aux | grep nginx ./nginx -s top //\u7acb\u5373\u505c\u6b62 ./nginx -s quit //\u4ece\u5bb9\u505c\u6b62 kill nginx \u4e3b\u8fdb\u7a0bpid killall nginx \u547d\u4ee4 \u8bf4\u660e nginx -s reload \u5728nginx\u5df2\u7ecf\u542f\u52a8\u7684\u60c5\u51b5\u4e0b\u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6(\u5e73\u6ed1\u91cd\u542f) nginx -s reopen \u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6 nginx -c /xxx/nginx.conf \u4ee5\u7279\u5b9a\u76ee\u5f55\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6\u542f\u52a8nginx nginx -t \u68c0\u67e5\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u6b63\u786e nginx -t /xxx/nginx.conf \u68c0\u67e5\u7279\u5b9a\u7684nginx\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u6b63\u786e nginx -v \u663e\u793a\u7248\u672c\u4fe1\u606f nginx -V \u663e\u793a\u7248\u672c\u4fe1\u606f\u548c\u7f16\u8bd1\u9009\u9879 \u5176\u5b83 \u00b6 \u7aef\u53e3\u53f7\u67e5\u770b 1 netstat -tlnp \u521b\u5efa\u8f6f\u8fde\u63a5\u540e\u53ef\u5728\u4efb\u610f\u76ee\u5f55\u4e0b\u4f7f\u7528nginx 1 2 echo $PATH ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx \u6dfb\u52a0\u7cfb\u7edf\u670d\u52a1 1 vi /etc/init.d/nginx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #! /bin/bash DAEMON = /usr/local/nginx/sbin/nginx case \" $1 \" in start ) echo \"Starting nginx daemon...\" $DAEMON && echo \"SUCCESS\" ;; stop ) echo \"Stoping nginx daemon...\" $DAEMON -s quit && echo \"SUCCESS\" ;; reload ) echo \"Starting nginx daemon...\" $DAEMON -s reload && echo \"SUCCESS\" ;; restart ) echo \"Starting nginx daemon...\" $DAEMON -s quit $DAEMON && echo \"SUCCESS\" ;; * ) echo \"Usage:service nginx(start|stop|restart|reload)\" exit 2 ;; esac 1 chmod +x /etc/init.d/nginx \u8bbe\u7f6e\u5f00\u673a\u81ea\u542f \u5728/etc/init.d/nginx\u4e2d\u6dfb\u52a0 1 #chkconfig: 35 85 15 1 chkconfig --add nginx Nginx\u914d\u7f6e \u00b6 \u914d\u7f6e\u6587\u4ef6nginx.conf \u00b6 1 2 3 4 5 6 7 main events {...} http{ server { location{ ... } } } \u5757 \u8bf4\u660e main \u4e3b\u8981\u63a7\u5236nginx\u5b50\u8fdb\u7a0b\u6240\u5c5e\u7684\u7528\u6237\u548c\u7528\u6237\u7ec4\uff0c\u6d3e\u751f\u5b50\u8fdb\u7a0b\u6570\uff0c\u9519\u8bef\u65e5\u5fd7\u4f4d\u7f6e\u4e0e\u7ea7\u522b\uff0cpid\u4f4d\u7f6e\uff0c\u5b50\u8fdb\u7a0b\u4f18\u5148\u7ea7\uff0c\u8fdb\u7a0b\u5bf9\u5e94CPU\uff0c\u8fdb\u7a0b\u80fd\u591f\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u76ee\u7b49\u3002 events \u63a7\u5236nginx\u5904\u7406\ud83d\udd17\u7684\u65b9\u5f0f http nginx\u5904\u7406http\u8bf7\u6c42\u7684\u4e3b\u8981\u914d\u7f6e\u5757\uff0c\u5927\u591a\u6570\u914d\u7f6e\u90fd\u5728\u8fd9\u91cc\u8fdb\u884c server nginx\u4e2d\u4e3b\u673a\u7684\u914d\u7f6e\u5757\uff0c\u53ef\u7528\u4e8e\u914d\u7f6e\u591a\u4e2a\u865a\u62df\u4e3b\u673a location server\u4e2d\u5bf9\u5e94\u76ee\u5f55\u7ea7\u522b\u7684\u63a7\u5236\u5757\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a \u9ed8\u8ba4\u914d\u7f6e\u6307\u4ee4 \u6307\u4ee4 \u8bf4\u660e worker_processes \u914d\u7f6enginx\u7684\u5de5\u4f5c\u8fdb\u7a0b\u6570\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3acpu\u603b\u6838\u6570\u6216\u8005\u603b\u6838\u6570\u7684\u4e24\u500d worker_connections \u914d\u7f6enginx\u5141\u8bb8\u5355\u4e2a\u8fdb\u7a0b\u5e76\u53d1\u8fde\u63a5\u7684\u6700\u5927\u8bf7\u6c42\u6570 include \u7528\u4e8e\u5f15\u5165\u914d\u7f6e\u6587\u4ef6 default_type \u8bbe\u7f6e\u9ed8\u8ba4\u6587\u4ef6\u7c7b\u578b sendfile \u9ed8\u8ba4\u503c\u4f4don\uff0c\u8868\u793a\u5f00\u542f\u9ad8\u6548\u6587\u4ef6\u4f20\u8f93\u6a21\u5f0f keepalive_timeout \u8bbe\u7f6e\u957f\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4(\u5355\u4f4d:\u79d2) listen \u76d1\u542c\u7aef\u53e3\uff0c\u9ed8\u8ba4\u76d1\u542c80\u7aef\u53e3 server_name \u8bbe\u7f6e\u4e3b\u673a\u57df\u540d root \u8bbe\u7f6e\u4e3b\u673a\u7ad9\u70b9\u6839\u76ee\u5f55\u5730\u5740 index \u8bbe\u7f6e\u9ed8\u8ba4\u7d22\u5f15\u6587\u4ef6 error_page \u81ea\u5b9a\u4e49\u9519\u8bef\u9875\u9762 \u8bbf\u95ee\u63a7\u5236 \u00b6 \u65e5\u5fd7\u6587\u4ef6 \u00b6 \u8bbf\u95ee\u65e5\u5fd7 \u00b6 /usr/local/nginx/logs 1 2 3 4 5 log_format main 'xxxx' access_log logs/access.log main; access_log off; //\u5173\u95ed\u65e5\u5fd7 \u5185\u7f6e\u53d8\u91cf \u542b\u4e49 $remote_addr \u5ba2\u6237\u7aefip\u5730\u5740 $remote_usr \u5ba2\u6237\u7aef\u7528\u6237\u540d $time_local \u8bbf\u95ee\u65f6\u7684\u670d\u52a1\u5668\u65f6\u533a $request \u8bf7\u6c42\u7684url\u548chttp\u534f\u8bae $status \u8bb0\u5f55\u8bf7\u6c42\u8fd4\u56de\u7684http\u72b6\u6001\u7801 $body_bytes_sent \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u6587\u4ef6\u4e3b\u4f53\u5185\u5bb9\u7684\u5927\u5c0f $http_referer \u6765\u8defurl\u5730\u5740 $http_user_agent \u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u4fe1\u606f $http_x_forwarded_for \u5ba2\u6237\u7aefip\u5730\u5740\u5217\u8868(\u5305\u62ec\u4e2d\u95f4\u7ecf\u8fc7\u7684\u4ee3\u7406) \u9519\u8bef\u65e5\u5fd7 \u00b6 nginx.conf\u6587\u4ef6\u7684error_log\u9ed8\u8ba4\u914d\u7f6e 1 2 3 4 5 6 7 error_log logs/error.log error_log logs/error.log notice; error_log logs/error.log info; error_log /dev/null; \u65e5\u5fd7\u6587\u4ef6\u5207\u5272 \u00b6 \u624b\u52a8\u5207\u5272 \u00b6 1 2 mv access.log 201xxxx.log nginx -s reopen \u81ea\u52a8\u5207\u5272 \u00b6 \u7f16\u5199autolog.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #\uff01/bin/bash logs_path = \"/usr/local/nginx/logs/xxx\" mv $logs_path/access.log $logs_path/'date+\"%Y%m%d%H%M\"'.log /usr/local/nginx/sbin/nginx -s reopen chmod +x autolog.sh crontab -e 0 0 * * * /usr/local/nginx/logs/xxx/autolog.sh > /dev/null 2>&1 \u865a\u62df\u4e3b\u673a \u00b6 \u57fa\u4e8e\u7aef\u53e3\u914d\u7f6e\u865a\u62df\u4e3b\u673a \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 server{ listen 8001; server_name 192.168.78.3; root html/html8001; index index.html index.htm; } server{ listen 8002; server_name 192.168.78.3; root html/html8002; index index.html index.htm; } \u57fa\u4e8eip\u914d\u7f6enginx\u865a\u62df\u4e3b\u673a \u00b6 1 2 3 4 cd /etc/sysconfig/network-scripts/ vim xxx DEVICE = IPADDR = 1 2 3 4 5 6 7 8 9 10 11 12 server{ listen 80; server_name 192.168.78.3; root html/192.168.78.3; index index.html index.htm; } server{ listen 80; server_name 192.168.78.4; root html/192.168.78.4; index index.html index.htm; } \u57fa\u4e8e\u57df\u540d\u914d\u7f6e\u865a\u62df\u4e3b\u673a \u00b6 1 2 3 vim /etc/hosts 127.0.0.1 www.ng.test 127.0.0.1 ng.test 1 2 3 4 5 6 server{ listen 80; server_name *.ng.test root html/www.ng.test index index.html index.htm; } \u8bbe\u7f6e\u76ee\u5f55\u5217\u8868 \u00b6 Nginx\u9ed8\u8ba4\u4e0d\u5141\u8bb8\u5217\u51fa\u6574\u4e2a\u76ee\u5f55\u3002\u5982\u679c\u8be5\u7ad9\u70b9\u76ee\u5f55\u4e0b\u6ca1\u6709\u6307\u5b9a\u7684\u6587\u4ef6\uff0c\u4f1a\u62a5403\u9519\u8bef\u3002\u5f53\u5f00\u542f\u76ee\u5f55\u5217\u8868\u529f\u80fd\u540e\uff0c\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u4f1a\u62a5\u9519\uff0c\u53ef\u4ee5\u8ba9\u8be5\u7ad9\u70b9\u6216\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u5c55\u793a\u3002\u5f00\u542f\u914d\u7f6e\u6307\u4ee4\uff1a autoindex on; \u3002 \u4e0a\u8ff0\u6307\u4ee4\u5728http\u5757\u4e2d\uff0c\u8868\u793a\u5bf9\u6240\u6709\u7ad9\u70b9\u6709\u6548\uff1b\u5728server\u5757\u4e2d\uff0c\u5bf9\u6307\u5b9a\u7ad9\u70b9\u6709\u6548\u3002\u5728location\u5757\u4e2d\uff0c\u8868\u793a\u5bf9\u67d0\u4e2a\u76ee\u5f55\u6709\u7528\u3002 1 2 autoindex_exact_size off; //\u4ee5kB/MB/GB\u4e3a\u5355\u4f4d\u663e\u793a\u6587\u4ef6\u5927\u5c0f autoindex_localtime; //\u663e\u793a\u6587\u4ef6\u7684\u670d\u52a1\u5668\u65f6\u95f4 \u5b50\u914d\u7f6e\u6587\u4ef6\u5f15\u5165 \u00b6 1 2 3 4 5 6 7 mkdir /usr/local/nginx/conf/vhost cd vhost touch www.ng.text.conf vi www.ng.text.conf server{ xxxx; } 1 2 include vhost/www.ng.test.conf; include vhost/*.conf;","title":"Nginx\u5b89\u88c5\u4e0e\u57fa\u672c\u914d\u7f6e"},{"location":"source/nginx/nginx_base/#nginx","text":"1 2 3 yum -y install gcc gcc-c++ wget wget http://nginx.org/download/nginx-1.10.1.tar.gz tar -zxvf nginx-1.10.1.tar.gz","title":"Nginx\u5b89\u88c5"},{"location":"source/nginx/nginx_base/#nginx_1","text":"src\u76ee\u5f55: \u5b58\u653enginx\u6e90\u7801\u3002 man\u76ee\u5f55: \u5b58\u653enginx\u5e2e\u52a9\u6587\u6863\u3002 html\u76ee\u5f55: \u5b58\u653e\u9ed8\u8ba4\u7f51\u7ad9\u6587\u4ef6\u3002 contrib\u76ee\u5f55: \u5b58\u653e\u5176\u5b83\u673a\u6784\u6216\u7ec4\u7ec7\u8d21\u732e\u7684\u6587\u6863\u8d44\u6599\u3002 conf\u76ee\u5f55: \u5b58\u653enginx\u670d\u52a1\u5668\u7684\u914d\u7f6e\u6587\u4ef6\u3002 auto\u76ee\u5f55: \u5b58\u653e\u5927\u91cf\u7684\u811a\u672c\u6587\u4ef6\uff0c\u548cconfigure\u811a\u672c\u7a0b\u5e8f\u76f8\u5173\u3002 configure\u6587\u4ef6: Nginx\u81ea\u52a8\u5b89\u88c5\u811a\u672c\uff0c\u7528\u4e8e\u73af\u5883\u68c0\u67e5\uff0c\u751f\u6210\u7f16\u8bd1\u4ee3\u7801\u9700\u8981\u7684makefile\u6587\u4ef6\u3002 CHANGES,CHANGES.ru,LICENSE\u548cREADME\u90fd\u662fNginx\u670d\u52a1\u5668\u7684\u76f8\u5173\u8d44\u6599\u3002","title":"nginx\u76ee\u5f55\u7ed3\u6784"},{"location":"source/nginx/nginx_base/#nginx_2","text":"1 yum -y install pcre-devel openssl-devel zlib-devel 1 2 3 4 5 6 7 cd nginx-1.10.1 ./configure \\ --prefix=/usr/local/nginx \\ --with-http_ssl_module make && make install","title":"\u7f16\u8bd1\u5b89\u88c5nginx"},{"location":"source/nginx/nginx_base/#nginx_3","text":"1 2 3 4 5 6 7 cd /usr/local/nginx/sbin ./nginx ps -aux | grep nginx ./nginx -s top //\u7acb\u5373\u505c\u6b62 ./nginx -s quit //\u4ece\u5bb9\u505c\u6b62 kill nginx \u4e3b\u8fdb\u7a0bpid killall nginx \u547d\u4ee4 \u8bf4\u660e nginx -s reload \u5728nginx\u5df2\u7ecf\u542f\u52a8\u7684\u60c5\u51b5\u4e0b\u91cd\u65b0\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6(\u5e73\u6ed1\u91cd\u542f) nginx -s reopen \u91cd\u65b0\u6253\u5f00\u65e5\u5fd7\u6587\u4ef6 nginx -c /xxx/nginx.conf \u4ee5\u7279\u5b9a\u76ee\u5f55\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6\u542f\u52a8nginx nginx -t \u68c0\u67e5\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u6b63\u786e nginx -t /xxx/nginx.conf \u68c0\u67e5\u7279\u5b9a\u7684nginx\u914d\u7f6e\u6587\u4ef6\u662f\u5426\u6b63\u786e nginx -v \u663e\u793a\u7248\u672c\u4fe1\u606f nginx -V \u663e\u793a\u7248\u672c\u4fe1\u606f\u548c\u7f16\u8bd1\u9009\u9879","title":"nginx\u542f\u52a8\u4e0e\u505c\u6b62"},{"location":"source/nginx/nginx_base/#_1","text":"\u7aef\u53e3\u53f7\u67e5\u770b 1 netstat -tlnp \u521b\u5efa\u8f6f\u8fde\u63a5\u540e\u53ef\u5728\u4efb\u610f\u76ee\u5f55\u4e0b\u4f7f\u7528nginx 1 2 echo $PATH ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/nginx \u6dfb\u52a0\u7cfb\u7edf\u670d\u52a1 1 vi /etc/init.d/nginx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 #! /bin/bash DAEMON = /usr/local/nginx/sbin/nginx case \" $1 \" in start ) echo \"Starting nginx daemon...\" $DAEMON && echo \"SUCCESS\" ;; stop ) echo \"Stoping nginx daemon...\" $DAEMON -s quit && echo \"SUCCESS\" ;; reload ) echo \"Starting nginx daemon...\" $DAEMON -s reload && echo \"SUCCESS\" ;; restart ) echo \"Starting nginx daemon...\" $DAEMON -s quit $DAEMON && echo \"SUCCESS\" ;; * ) echo \"Usage:service nginx(start|stop|restart|reload)\" exit 2 ;; esac 1 chmod +x /etc/init.d/nginx \u8bbe\u7f6e\u5f00\u673a\u81ea\u542f \u5728/etc/init.d/nginx\u4e2d\u6dfb\u52a0 1 #chkconfig: 35 85 15 1 chkconfig --add nginx","title":"\u5176\u5b83"},{"location":"source/nginx/nginx_base/#nginx_4","text":"","title":"Nginx\u914d\u7f6e"},{"location":"source/nginx/nginx_base/#nginxconf","text":"1 2 3 4 5 6 7 main events {...} http{ server { location{ ... } } } \u5757 \u8bf4\u660e main \u4e3b\u8981\u63a7\u5236nginx\u5b50\u8fdb\u7a0b\u6240\u5c5e\u7684\u7528\u6237\u548c\u7528\u6237\u7ec4\uff0c\u6d3e\u751f\u5b50\u8fdb\u7a0b\u6570\uff0c\u9519\u8bef\u65e5\u5fd7\u4f4d\u7f6e\u4e0e\u7ea7\u522b\uff0cpid\u4f4d\u7f6e\uff0c\u5b50\u8fdb\u7a0b\u4f18\u5148\u7ea7\uff0c\u8fdb\u7a0b\u5bf9\u5e94CPU\uff0c\u8fdb\u7a0b\u80fd\u591f\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u6570\u76ee\u7b49\u3002 events \u63a7\u5236nginx\u5904\u7406\ud83d\udd17\u7684\u65b9\u5f0f http nginx\u5904\u7406http\u8bf7\u6c42\u7684\u4e3b\u8981\u914d\u7f6e\u5757\uff0c\u5927\u591a\u6570\u914d\u7f6e\u90fd\u5728\u8fd9\u91cc\u8fdb\u884c server nginx\u4e2d\u4e3b\u673a\u7684\u914d\u7f6e\u5757\uff0c\u53ef\u7528\u4e8e\u914d\u7f6e\u591a\u4e2a\u865a\u62df\u4e3b\u673a location server\u4e2d\u5bf9\u5e94\u76ee\u5f55\u7ea7\u522b\u7684\u63a7\u5236\u5757\uff0c\u53ef\u4ee5\u6709\u591a\u4e2a \u9ed8\u8ba4\u914d\u7f6e\u6307\u4ee4 \u6307\u4ee4 \u8bf4\u660e worker_processes \u914d\u7f6enginx\u7684\u5de5\u4f5c\u8fdb\u7a0b\u6570\uff0c\u4e00\u822c\u8bbe\u7f6e\u4e3acpu\u603b\u6838\u6570\u6216\u8005\u603b\u6838\u6570\u7684\u4e24\u500d worker_connections \u914d\u7f6enginx\u5141\u8bb8\u5355\u4e2a\u8fdb\u7a0b\u5e76\u53d1\u8fde\u63a5\u7684\u6700\u5927\u8bf7\u6c42\u6570 include \u7528\u4e8e\u5f15\u5165\u914d\u7f6e\u6587\u4ef6 default_type \u8bbe\u7f6e\u9ed8\u8ba4\u6587\u4ef6\u7c7b\u578b sendfile \u9ed8\u8ba4\u503c\u4f4don\uff0c\u8868\u793a\u5f00\u542f\u9ad8\u6548\u6587\u4ef6\u4f20\u8f93\u6a21\u5f0f keepalive_timeout \u8bbe\u7f6e\u957f\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4(\u5355\u4f4d:\u79d2) listen \u76d1\u542c\u7aef\u53e3\uff0c\u9ed8\u8ba4\u76d1\u542c80\u7aef\u53e3 server_name \u8bbe\u7f6e\u4e3b\u673a\u57df\u540d root \u8bbe\u7f6e\u4e3b\u673a\u7ad9\u70b9\u6839\u76ee\u5f55\u5730\u5740 index \u8bbe\u7f6e\u9ed8\u8ba4\u7d22\u5f15\u6587\u4ef6 error_page \u81ea\u5b9a\u4e49\u9519\u8bef\u9875\u9762","title":"\u914d\u7f6e\u6587\u4ef6nginx.conf"},{"location":"source/nginx/nginx_base/#_2","text":"","title":"\u8bbf\u95ee\u63a7\u5236"},{"location":"source/nginx/nginx_base/#_3","text":"","title":"\u65e5\u5fd7\u6587\u4ef6"},{"location":"source/nginx/nginx_base/#_4","text":"/usr/local/nginx/logs 1 2 3 4 5 log_format main 'xxxx' access_log logs/access.log main; access_log off; //\u5173\u95ed\u65e5\u5fd7 \u5185\u7f6e\u53d8\u91cf \u542b\u4e49 $remote_addr \u5ba2\u6237\u7aefip\u5730\u5740 $remote_usr \u5ba2\u6237\u7aef\u7528\u6237\u540d $time_local \u8bbf\u95ee\u65f6\u7684\u670d\u52a1\u5668\u65f6\u533a $request \u8bf7\u6c42\u7684url\u548chttp\u534f\u8bae $status \u8bb0\u5f55\u8bf7\u6c42\u8fd4\u56de\u7684http\u72b6\u6001\u7801 $body_bytes_sent \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u6587\u4ef6\u4e3b\u4f53\u5185\u5bb9\u7684\u5927\u5c0f $http_referer \u6765\u8defurl\u5730\u5740 $http_user_agent \u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u4fe1\u606f $http_x_forwarded_for \u5ba2\u6237\u7aefip\u5730\u5740\u5217\u8868(\u5305\u62ec\u4e2d\u95f4\u7ecf\u8fc7\u7684\u4ee3\u7406)","title":"\u8bbf\u95ee\u65e5\u5fd7"},{"location":"source/nginx/nginx_base/#_5","text":"nginx.conf\u6587\u4ef6\u7684error_log\u9ed8\u8ba4\u914d\u7f6e 1 2 3 4 5 6 7 error_log logs/error.log error_log logs/error.log notice; error_log logs/error.log info; error_log /dev/null;","title":"\u9519\u8bef\u65e5\u5fd7"},{"location":"source/nginx/nginx_base/#_6","text":"","title":"\u65e5\u5fd7\u6587\u4ef6\u5207\u5272"},{"location":"source/nginx/nginx_base/#_7","text":"1 2 mv access.log 201xxxx.log nginx -s reopen","title":"\u624b\u52a8\u5207\u5272"},{"location":"source/nginx/nginx_base/#_8","text":"\u7f16\u5199autolog.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #\uff01/bin/bash logs_path = \"/usr/local/nginx/logs/xxx\" mv $logs_path/access.log $logs_path/'date+\"%Y%m%d%H%M\"'.log /usr/local/nginx/sbin/nginx -s reopen chmod +x autolog.sh crontab -e 0 0 * * * /usr/local/nginx/logs/xxx/autolog.sh > /dev/null 2>&1","title":"\u81ea\u52a8\u5207\u5272"},{"location":"source/nginx/nginx_base/#_9","text":"","title":"\u865a\u62df\u4e3b\u673a"},{"location":"source/nginx/nginx_base/#_10","text":"1 2 3 4 5 6 7 8 9 10 11 12 server{ listen 8001; server_name 192.168.78.3; root html/html8001; index index.html index.htm; } server{ listen 8002; server_name 192.168.78.3; root html/html8002; index index.html index.htm; }","title":"\u57fa\u4e8e\u7aef\u53e3\u914d\u7f6e\u865a\u62df\u4e3b\u673a"},{"location":"source/nginx/nginx_base/#ipnginx","text":"1 2 3 4 cd /etc/sysconfig/network-scripts/ vim xxx DEVICE = IPADDR = 1 2 3 4 5 6 7 8 9 10 11 12 server{ listen 80; server_name 192.168.78.3; root html/192.168.78.3; index index.html index.htm; } server{ listen 80; server_name 192.168.78.4; root html/192.168.78.4; index index.html index.htm; }","title":"\u57fa\u4e8eip\u914d\u7f6enginx\u865a\u62df\u4e3b\u673a"},{"location":"source/nginx/nginx_base/#_11","text":"1 2 3 vim /etc/hosts 127.0.0.1 www.ng.test 127.0.0.1 ng.test 1 2 3 4 5 6 server{ listen 80; server_name *.ng.test root html/www.ng.test index index.html index.htm; }","title":"\u57fa\u4e8e\u57df\u540d\u914d\u7f6e\u865a\u62df\u4e3b\u673a"},{"location":"source/nginx/nginx_base/#_12","text":"Nginx\u9ed8\u8ba4\u4e0d\u5141\u8bb8\u5217\u51fa\u6574\u4e2a\u76ee\u5f55\u3002\u5982\u679c\u8be5\u7ad9\u70b9\u76ee\u5f55\u4e0b\u6ca1\u6709\u6307\u5b9a\u7684\u6587\u4ef6\uff0c\u4f1a\u62a5403\u9519\u8bef\u3002\u5f53\u5f00\u542f\u76ee\u5f55\u5217\u8868\u529f\u80fd\u540e\uff0c\u4e0a\u8ff0\u60c5\u51b5\u4e0d\u4f1a\u62a5\u9519\uff0c\u53ef\u4ee5\u8ba9\u8be5\u7ad9\u70b9\u6216\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u5c55\u793a\u3002\u5f00\u542f\u914d\u7f6e\u6307\u4ee4\uff1a autoindex on; \u3002 \u4e0a\u8ff0\u6307\u4ee4\u5728http\u5757\u4e2d\uff0c\u8868\u793a\u5bf9\u6240\u6709\u7ad9\u70b9\u6709\u6548\uff1b\u5728server\u5757\u4e2d\uff0c\u5bf9\u6307\u5b9a\u7ad9\u70b9\u6709\u6548\u3002\u5728location\u5757\u4e2d\uff0c\u8868\u793a\u5bf9\u67d0\u4e2a\u76ee\u5f55\u6709\u7528\u3002 1 2 autoindex_exact_size off; //\u4ee5kB/MB/GB\u4e3a\u5355\u4f4d\u663e\u793a\u6587\u4ef6\u5927\u5c0f autoindex_localtime; //\u663e\u793a\u6587\u4ef6\u7684\u670d\u52a1\u5668\u65f6\u95f4","title":"\u8bbe\u7f6e\u76ee\u5f55\u5217\u8868"},{"location":"source/nginx/nginx_base/#_13","text":"1 2 3 4 5 6 7 mkdir /usr/local/nginx/conf/vhost cd vhost touch www.ng.text.conf vi www.ng.text.conf server{ xxxx; } 1 2 include vhost/www.ng.test.conf; include vhost/*.conf;","title":"\u5b50\u914d\u7f6e\u6587\u4ef6\u5f15\u5165"},{"location":"source/nginx/nginx_high/","text":"\u9ad8\u53ef\u7528\u8d1f\u8f7d\u5747\u8861\u96c6\u7fa4 \u00b6 nginx\u914d\u7f6e\u4f18\u5316 \u00b6 lnmp\u5206\u5e03\u5f0f\u96c6\u7fa4 \u00b6 nginx+keepalived\u9ad8\u53ef\u7528\u65b9\u6848 \u00b6","title":"\u9ad8\u53ef\u7528\u8d1f\u8f7d\u5747\u8861\u96c6\u7fa4"},{"location":"source/nginx/nginx_high/#_1","text":"","title":"\u9ad8\u53ef\u7528\u8d1f\u8f7d\u5747\u8861\u96c6\u7fa4"},{"location":"source/nginx/nginx_high/#nginx","text":"","title":"nginx\u914d\u7f6e\u4f18\u5316"},{"location":"source/nginx/nginx_high/#lnmp","text":"","title":"lnmp\u5206\u5e03\u5f0f\u96c6\u7fa4"},{"location":"source/nginx/nginx_high/#nginxkeepalived","text":"","title":"nginx+keepalived\u9ad8\u53ef\u7528\u65b9\u6848"},{"location":"source/nginx/nginx_web/","text":"Web\u670d\u52a1\u642d\u5efa \u00b6 nginx+php \u00b6 php\u5b89\u88c5\u4e0e\u4f7f\u7528 \u00b6 \u7f16\u8bd1\u5b89\u88c5php \u00b6 \u9009\u9879 \u8bf4\u660e --prefix \u5b89\u88c5\u76ee\u5f55\uff0c\u9ed8\u8ba4\u76ee\u5f55\u4e3a/usr/local\uff0c\u4e5f\u53ef\u4ee5\u8bbe\u4e3a/usr/local/php --enable-fpm \u5f00\u542fphp\u7684fpm\u529f\u80fd\uff0c\u63d0\u4f9bphp FastCGI\u7ba1\u7406\u5668 --with-zlib \u5305\u542bzlib\u5e93\uff0c\u652f\u6301\u6570\u636e\u538b\u7f29\u548c\u89e3\u538b\u7f29 --enable-zip \u5f00\u542fzip\u529f\u80fd --enable-mbstring \u5f00\u542fmbstring\u529f\u80fd\uff0c\u7528\u4e8e\u591a\u5b50\u8282\u5b57\u7b26\u4e32\u5904\u7406 --with-mcrypt \u5305\u542bmcrypt\u52a0\u5bc6\u652f\u6301(yilailibmcrypt) --with-mysqli \u5305\u542bmysql\u6570\u636e\u5e93\u8bbf\u95ee\u652f\u6301 --with-pdo-mysql \u5305\u542b\u57fa\u4e8ePDO(php data object)\u7684mysql\u6570\u636e\u5e93\u8bbf\u95ee\u652f\u6301 --with-gd \u5305\u542bgd\u5e93\u652f\u6301\uff0c\u7528\u4e8ephp\u56fe\u50cf\u5904\u7406 --with-jpeg-dir \u5305\u542bjpeg\u56fe\u50cf\u683c\u5f0f\u5904\u7406\u5e93(\u4f9d\u8d56libjpeg-devel) --with-png-dir \u5305\u542bpng\u56fe\u50cf\u683c\u5f0f\u5904\u7406\u5e93(\u4f9d\u8d56libpng-devel) --with-freetype-dir \u5305\u542bfreetype\u5b57\u4f53\u56fe\u50cf\u5904\u7406\u5e93(\u4f9d\u8d56freetype-devel) --with-curl \u5305\u542bcurl\u652f\u6301(\u4f9d\u8d56curl-devel) --with-openssl \u5305\u542bopenssl\u652f\u6301(\u4f9d\u8d56openssl-devel) --with-mhash \u5305\u542bmhash\u52a0\u5bc6\u652f\u6301 --enable-bcmath \u5f00\u542f\u7cbe\u51c6\u8ba1\u7b97\u529f\u80fd --enable-opcache \u5f00\u542fopcache\u529f\u80fd\uff0c\u4e00\u79cdphp\u7684\u4ee3\u7801\u4f18\u5316\u5668 1 2 3 4 5 6 7 yum -y install libxml2-devel openssl-devel \\ curl-devel libjpeg-devel libpng-devel freetype-devel //https://sourceforge.net/projects/mcrypt tar -zxvf libmcrypt-2.5.8.tar.gz cd libmcrypt-2.5.8 ./configure make && make install 1 2 3 4 5 6 7 8 9 //http://php.net cd php-5.6.27 ./configure --prefix=/usr/local/php--enable-fpm\\ --with-zlib --enable-zip --enable-mbstring --with-mcrypt --with-mysql \\ --with-mysqli --with-pdo-mysql --with-gd --with-jpeg-dir --with-png-dir \\ --with-freetype-dir --with-curl --with-openssl --with-mhash --enable-bcmath \\ --enable-opcache make && make install 1 2 3 4 5 <?php echo \"Hello World!\\n\"; ?> /usr/local/php/bin/php -f test.php php\u4e0enginx\u6574\u5408 \u00b6 FastCGI & PHP-FPM \u00b6 php\u63d0\u4f9b\u7684php-fpm\u662f\u4e00\u4e2aFastCGI\u8fdb\u7a0b\u7ba1\u7406\u5668\uff0c\u5176\u53ef\u6267\u884c\u6587\u4ef6\u4f4d\u4e8ephp\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684sbin\u76ee\u5f55\u4e2d\u3002\u5728\u542f\u52a8php-fpm\u4e4b\u524d\uff0c\u9700\u8981\u5148\u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u3002\u5728etc\u76ee\u5f55\u4e0b\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6php-fpm.conf.default\uff0c\u5c06\u8be5\u6587\u4ef6\u590d\u5236\u4e3aphp-fpm.conf\u5373\u53ef\u3002 1 2 3 4 5 6 cd /php-5.6.27 cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm chmod +x /etc/init.d/php-fpm chkconfig--add php-fpm service php-fpm start|reload|restart|stop php\u914d\u7f6e\u6587\u4ef6 \u00b6 php-fpm.conf PHP-FPM\u542f\u52a8\u65f6\uff0c\u5177\u4f53\u76d1\u542c\u7684\u7aef\u53e3\u53f7\u548c\u5de5\u4f5c\u7528\u6237\u5728php-fpm.conf\u914d\u7f6e\u6587\u4ef6\u4e2d\u53ef\u4ee5\u4fee\u6539\u3002 \";\"\u5f00\u5934\u7684\u914d\u7f6e\u662f\u6ce8\u89c6\u6389\uff0c\u6ca1\u751f\u6548\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [global] ;pi=run/php-fpm.pid ;error_log=log/php-fpm.log ;daemonize=yes ;events.mechanism=epoll [www] user=nobody group=nobody listen=127.0.0.1:9000 ;listen.owner=nobody ;listen.group=nobody ;listen.mode=0660 ;listen.allowed_clients=127.0.0.1 pm=dynamic ;access.log=log/$pool.access.log ;php_flag[display_errors]=off ;php_admin_value[memory_limit]=32M php.ini php-fpm.conf\u53ea\u548cPHP-FPM\u6709\u5173\uff0cphp\u672c\u8eab\u7684\u914d\u7f6e\u6587\u4ef6\u4e3aphp.ini\u3002 1 2 3 4 cd /usr/local/php/lib ls | grep php.ini php.ini-development //\u5f00\u53d1\u73af\u5883 php.ini-production //\u7ebf\u4e0a\u73af\u5883 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 [PHP] output_buffering=4096 //\u8f93\u51fa\u7f13\u51b2(\u5b57\u8282\u6570) ;open_basedir= //\u9650\u5236php\u811a\u672c\u53ef\u8bbf\u95ee\u7684\u8def\u5f84 disable_functions = //\u7981\u7528\u7684\u51fd\u6570\u5217\u8868 max_execution_time=30 //\u6bcf\u4e2aphp\u811a\u672c\u6700\u957f\u65f6\u95f4\u9650\u5236(\u79d2) memory_limit=128M //\u6bcf\u4e2aphp\u811a\u672c\u6700\u5927\u5185\u5b58\u4f7f\u7528\u9650\u5236 display_errors=On //\u662f\u5426\u8f93\u51fa\u9519\u8bef\u4fe1\u606f log_errors=On //\u662f\u5426\u5f00\u542f\u9519\u8bef\u65e5\u5fd7 ;error_log=php_errors.log //\u9519\u8bef\u65e5\u5fd7\u4fdd\u5b58\u4f4d\u7f6e post_max_size=8M //\u901a\u8fc7post\u63d0\u4ea4\u7684\u6700\u5927\u9650\u5236 default_mimetype=\"text/html\" //\u9ed8\u8ba4\u7684mime\u7c7b\u578b default_charset=\"UTF-8\" //\u9ed8\u8ba4\u5b57\u7b26\u96c6 file_uploads=On //\u662f\u5426\u5141\u8bb8\u4e0a\u4f20\u6587\u4ef6 ;upload_tmp_dir= //\u4e0a\u4f20\u6587\u4ef6\u4e34\u65f6\u4fdd\u5b58\u76ee\u5f55 upload_max_filesize=2M //\u4e0a\u4f20\u6587\u4ef6\u6700\u5927\u9650\u5236 allow_url_fopen=On //\u662f\u5426\u5141\u8bb8\u6253\u5f00\u8fdc\u7a0b\u6587\u4ef6 [Date] ;date.timezone= //\u65f6\u533a\u914d\u7f6e [mail function] ;sendmail_path= //sendmail\u7684\u8def\u5f84 [Session] session.save_handler=files //\u5c06\u4f1a\u8bdd\u4ee5\u6587\u4ef6\u5f62\u5f0f\u4fdd\u5b58 ;session.save_path=\"\\tmp\" //\u56de\u8bdd\u4fdd\u5b58\u76ee\u5f55 FastCGI\u73af\u5883\u53d8\u91cf \u00b6 \u5728nginx\u7684conf\u76ee\u5f55\u4e2d\u6709\u4e00\u4e2afastcgi.conf\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u901a\u8fc7fastcgi_param\u6570\u7ec4\u578b\u6307\u4ee4\u4fdd\u5b58\u4e86\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\u3002 1 2 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param QUERY_STRING $query_string; \u9009\u9879 \u8bf4\u660e \u793a\u4f8b SCRIPT_FILENAME \u811a\u672c\u6587\u4ef6\u8def\u5f84 /usr/local/nginx/html/index.php QUERY_STRING ?\u540e\u9762\u7684URL\u53c2\u6570 a=1&b=2 REQUEST_METHOD \u8bf7\u6c42\u65b9\u5f0f POST CONTENT_TYPE \u8bf7\u6c42\u5185\u5bb9\u7684\u7c7b\u578b application/x-www-form-urlencoded CONTENT_LENGTH \u8bf7\u6c42\u5185\u5bb9\u957f\u5ea6 8 SCRIPT_NAME \u811a\u672c\u6587\u4ef6\u540d /index.php REQUEST_URI \u8bf7\u6c42URI /index.php?a=1&b=1 DOCUMENT_URI \u6587\u6863uri /index.php DOCUMENT_ROOT \u6587\u6863\u6839\u76ee\u5f55 /usr/local/nginx/html SERVER_PROTOCOL HTTP\u534f\u8bae\u7248\u672c HTTP/1.1 REQUEST_SCHEME \u8bf7\u6c42\u534f\u8bae(http/https) http GATEWAY_INTERFACE \u7f51\u5173\u63a5\u53e3 CGI/1.1 SERVER_SOFTWARE \u670d\u52a1\u5668\u8f6f\u4ef6\u548c\u7248\u672c nginx/1.10.1 REMOTE_ADDR \u6765\u6e90\u5730\u5740 192.168.78.1 REMOTE_PORT \u6765\u6e90\u7aef\u53e3 60100 SERVER_ADDR \u670d\u52a1\u5668\u5730\u5740 192.168.78.2 SERVER_PORT \u670d\u52a1\u5668\u7aef\u53e3 80 SERVER_NAME \u670d\u52a1\u5668\u540d\u79f0 ng.test \u5728Nginx\u914d\u7f6e\u6587\u4ef6\u4e2d\u652f\u6301php \u00b6 1 2 3 4 5 6 7 8 9 10 server{ listen 80; server_name ng.test www.ng.test; root html/www.ng.test; index index.html index.htm index.php; location ~\\.php${ fastcgi_pass 127.0.0.1:9000; include fastcgi.conf; } } \u5224\u65adphp\u6587\u4ef6\u662f\u5426\u5b58\u5728 \u00b6 404\u9875\u9762 & PATHINFO 1 2 3 4 5 location ~\\.php${ try_files $uri = 404; fastcgi_pass 127.0.0.1:9000; include fastcgi.conf; } nginx+apache \u00b6 Apache HTTP Server(httpd) 1 openresty \u00b6 \u83b7\u53d6 OpenResty 1 2 3 4 5 tar -zxvf openresty-1.11.2.1.tar.gz cd openresty-1.11.2.1 yum -y install perl pcre-devel openssl-devel ./configure make && make install 1 2 3 4 5 6 7 bin\uff1a\u5b58\u653e\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u3002 luajit\uff1a\u5b58\u653eLuaJIT(Lua\u4ee3\u7801\u89e3\u91ca\u5668)\u76f8\u5173\u7684\u6587\u4ef6\u3002 lualib\uff1a\u5b58\u653elua\u5e93\u6587\u4ef6\u3002 nginx\uff1aOpenResty\u6574\u5408\u7684Nginx\u5b58\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u3002 pod\uff1a\u5b58\u653e\u7528\u4e8ebin/restydoc\u7a0b\u5e8f\u8bfb\u53d6\u7684pod\u6587\u6863\u3002 resty.index\uff1a\u5b58\u653epkd\u6587\u6863\u7d22\u5f15\u3002 site\uff1aOPM(OpenResty Package Manager)\u5305\u7684\u5b58\u653e\u76ee\u5f55\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cd /usr/local/openresty/bin ./resty -e 'print(\"hello\")' ./resty ~/hello.lua vi conf/nginx.conf worker_processes 1 error_log logs/error.log events{ worker_connections 1024; } http{ server{ listen 8080; location / { default_type text/html; content_by_lua_file test.lua; } } } \u6a21\u5757\u914d\u7f6e\u4e0e\u5e94\u7528 \u00b6 \u6a21\u5757\u6982\u8ff0 \u00b6 \u8c03\u8bd5\u8f93\u51fa \u00b6 \u54cd\u5e94\u72b6\u6001\u76f8\u5173 \u00b6 \u7f51\u9875\u538b\u7f29 \u00b6 \u91cd\u5199\u4e0e\u91cd\u5b9a\u5411 \u00b6 \u9632\u76d7\u94fe\u914d \u00b6","title":"Web\u670d\u52a1\u642d\u5efa\u4e0e\u6a21\u5757\u5316\u914d\u7f6e"},{"location":"source/nginx/nginx_web/#web","text":"","title":"Web\u670d\u52a1\u642d\u5efa"},{"location":"source/nginx/nginx_web/#nginxphp","text":"","title":"nginx+php"},{"location":"source/nginx/nginx_web/#php","text":"","title":"php\u5b89\u88c5\u4e0e\u4f7f\u7528"},{"location":"source/nginx/nginx_web/#php_1","text":"\u9009\u9879 \u8bf4\u660e --prefix \u5b89\u88c5\u76ee\u5f55\uff0c\u9ed8\u8ba4\u76ee\u5f55\u4e3a/usr/local\uff0c\u4e5f\u53ef\u4ee5\u8bbe\u4e3a/usr/local/php --enable-fpm \u5f00\u542fphp\u7684fpm\u529f\u80fd\uff0c\u63d0\u4f9bphp FastCGI\u7ba1\u7406\u5668 --with-zlib \u5305\u542bzlib\u5e93\uff0c\u652f\u6301\u6570\u636e\u538b\u7f29\u548c\u89e3\u538b\u7f29 --enable-zip \u5f00\u542fzip\u529f\u80fd --enable-mbstring \u5f00\u542fmbstring\u529f\u80fd\uff0c\u7528\u4e8e\u591a\u5b50\u8282\u5b57\u7b26\u4e32\u5904\u7406 --with-mcrypt \u5305\u542bmcrypt\u52a0\u5bc6\u652f\u6301(yilailibmcrypt) --with-mysqli \u5305\u542bmysql\u6570\u636e\u5e93\u8bbf\u95ee\u652f\u6301 --with-pdo-mysql \u5305\u542b\u57fa\u4e8ePDO(php data object)\u7684mysql\u6570\u636e\u5e93\u8bbf\u95ee\u652f\u6301 --with-gd \u5305\u542bgd\u5e93\u652f\u6301\uff0c\u7528\u4e8ephp\u56fe\u50cf\u5904\u7406 --with-jpeg-dir \u5305\u542bjpeg\u56fe\u50cf\u683c\u5f0f\u5904\u7406\u5e93(\u4f9d\u8d56libjpeg-devel) --with-png-dir \u5305\u542bpng\u56fe\u50cf\u683c\u5f0f\u5904\u7406\u5e93(\u4f9d\u8d56libpng-devel) --with-freetype-dir \u5305\u542bfreetype\u5b57\u4f53\u56fe\u50cf\u5904\u7406\u5e93(\u4f9d\u8d56freetype-devel) --with-curl \u5305\u542bcurl\u652f\u6301(\u4f9d\u8d56curl-devel) --with-openssl \u5305\u542bopenssl\u652f\u6301(\u4f9d\u8d56openssl-devel) --with-mhash \u5305\u542bmhash\u52a0\u5bc6\u652f\u6301 --enable-bcmath \u5f00\u542f\u7cbe\u51c6\u8ba1\u7b97\u529f\u80fd --enable-opcache \u5f00\u542fopcache\u529f\u80fd\uff0c\u4e00\u79cdphp\u7684\u4ee3\u7801\u4f18\u5316\u5668 1 2 3 4 5 6 7 yum -y install libxml2-devel openssl-devel \\ curl-devel libjpeg-devel libpng-devel freetype-devel //https://sourceforge.net/projects/mcrypt tar -zxvf libmcrypt-2.5.8.tar.gz cd libmcrypt-2.5.8 ./configure make && make install 1 2 3 4 5 6 7 8 9 //http://php.net cd php-5.6.27 ./configure --prefix=/usr/local/php--enable-fpm\\ --with-zlib --enable-zip --enable-mbstring --with-mcrypt --with-mysql \\ --with-mysqli --with-pdo-mysql --with-gd --with-jpeg-dir --with-png-dir \\ --with-freetype-dir --with-curl --with-openssl --with-mhash --enable-bcmath \\ --enable-opcache make && make install 1 2 3 4 5 <?php echo \"Hello World!\\n\"; ?> /usr/local/php/bin/php -f test.php","title":"\u7f16\u8bd1\u5b89\u88c5php"},{"location":"source/nginx/nginx_web/#phpnginx","text":"","title":"php\u4e0enginx\u6574\u5408"},{"location":"source/nginx/nginx_web/#fastcgi-php-fpm","text":"php\u63d0\u4f9b\u7684php-fpm\u662f\u4e00\u4e2aFastCGI\u8fdb\u7a0b\u7ba1\u7406\u5668\uff0c\u5176\u53ef\u6267\u884c\u6587\u4ef6\u4f4d\u4e8ephp\u5b89\u88c5\u76ee\u5f55\u4e0b\u7684sbin\u76ee\u5f55\u4e2d\u3002\u5728\u542f\u52a8php-fpm\u4e4b\u524d\uff0c\u9700\u8981\u5148\u521b\u5efa\u914d\u7f6e\u6587\u4ef6\u3002\u5728etc\u76ee\u5f55\u4e0b\u63d0\u4f9b\u4e86\u9ed8\u8ba4\u914d\u7f6e\u6587\u4ef6php-fpm.conf.default\uff0c\u5c06\u8be5\u6587\u4ef6\u590d\u5236\u4e3aphp-fpm.conf\u5373\u53ef\u3002 1 2 3 4 5 6 cd /php-5.6.27 cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm chmod +x /etc/init.d/php-fpm chkconfig--add php-fpm service php-fpm start|reload|restart|stop","title":"FastCGI &amp; PHP-FPM"},{"location":"source/nginx/nginx_web/#php_2","text":"php-fpm.conf PHP-FPM\u542f\u52a8\u65f6\uff0c\u5177\u4f53\u76d1\u542c\u7684\u7aef\u53e3\u53f7\u548c\u5de5\u4f5c\u7528\u6237\u5728php-fpm.conf\u914d\u7f6e\u6587\u4ef6\u4e2d\u53ef\u4ee5\u4fee\u6539\u3002 \";\"\u5f00\u5934\u7684\u914d\u7f6e\u662f\u6ce8\u89c6\u6389\uff0c\u6ca1\u751f\u6548\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [global] ;pi=run/php-fpm.pid ;error_log=log/php-fpm.log ;daemonize=yes ;events.mechanism=epoll [www] user=nobody group=nobody listen=127.0.0.1:9000 ;listen.owner=nobody ;listen.group=nobody ;listen.mode=0660 ;listen.allowed_clients=127.0.0.1 pm=dynamic ;access.log=log/$pool.access.log ;php_flag[display_errors]=off ;php_admin_value[memory_limit]=32M php.ini php-fpm.conf\u53ea\u548cPHP-FPM\u6709\u5173\uff0cphp\u672c\u8eab\u7684\u914d\u7f6e\u6587\u4ef6\u4e3aphp.ini\u3002 1 2 3 4 cd /usr/local/php/lib ls | grep php.ini php.ini-development //\u5f00\u53d1\u73af\u5883 php.ini-production //\u7ebf\u4e0a\u73af\u5883 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 [PHP] output_buffering=4096 //\u8f93\u51fa\u7f13\u51b2(\u5b57\u8282\u6570) ;open_basedir= //\u9650\u5236php\u811a\u672c\u53ef\u8bbf\u95ee\u7684\u8def\u5f84 disable_functions = //\u7981\u7528\u7684\u51fd\u6570\u5217\u8868 max_execution_time=30 //\u6bcf\u4e2aphp\u811a\u672c\u6700\u957f\u65f6\u95f4\u9650\u5236(\u79d2) memory_limit=128M //\u6bcf\u4e2aphp\u811a\u672c\u6700\u5927\u5185\u5b58\u4f7f\u7528\u9650\u5236 display_errors=On //\u662f\u5426\u8f93\u51fa\u9519\u8bef\u4fe1\u606f log_errors=On //\u662f\u5426\u5f00\u542f\u9519\u8bef\u65e5\u5fd7 ;error_log=php_errors.log //\u9519\u8bef\u65e5\u5fd7\u4fdd\u5b58\u4f4d\u7f6e post_max_size=8M //\u901a\u8fc7post\u63d0\u4ea4\u7684\u6700\u5927\u9650\u5236 default_mimetype=\"text/html\" //\u9ed8\u8ba4\u7684mime\u7c7b\u578b default_charset=\"UTF-8\" //\u9ed8\u8ba4\u5b57\u7b26\u96c6 file_uploads=On //\u662f\u5426\u5141\u8bb8\u4e0a\u4f20\u6587\u4ef6 ;upload_tmp_dir= //\u4e0a\u4f20\u6587\u4ef6\u4e34\u65f6\u4fdd\u5b58\u76ee\u5f55 upload_max_filesize=2M //\u4e0a\u4f20\u6587\u4ef6\u6700\u5927\u9650\u5236 allow_url_fopen=On //\u662f\u5426\u5141\u8bb8\u6253\u5f00\u8fdc\u7a0b\u6587\u4ef6 [Date] ;date.timezone= //\u65f6\u533a\u914d\u7f6e [mail function] ;sendmail_path= //sendmail\u7684\u8def\u5f84 [Session] session.save_handler=files //\u5c06\u4f1a\u8bdd\u4ee5\u6587\u4ef6\u5f62\u5f0f\u4fdd\u5b58 ;session.save_path=\"\\tmp\" //\u56de\u8bdd\u4fdd\u5b58\u76ee\u5f55","title":"php\u914d\u7f6e\u6587\u4ef6"},{"location":"source/nginx/nginx_web/#fastcgi","text":"\u5728nginx\u7684conf\u76ee\u5f55\u4e2d\u6709\u4e00\u4e2afastcgi.conf\u6587\u4ef6\uff0c\u8be5\u6587\u4ef6\u4e2d\u901a\u8fc7fastcgi_param\u6570\u7ec4\u578b\u6307\u4ee4\u4fdd\u5b58\u4e86\u4e00\u4e9b\u73af\u5883\u53d8\u91cf\u3002 1 2 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param QUERY_STRING $query_string; \u9009\u9879 \u8bf4\u660e \u793a\u4f8b SCRIPT_FILENAME \u811a\u672c\u6587\u4ef6\u8def\u5f84 /usr/local/nginx/html/index.php QUERY_STRING ?\u540e\u9762\u7684URL\u53c2\u6570 a=1&b=2 REQUEST_METHOD \u8bf7\u6c42\u65b9\u5f0f POST CONTENT_TYPE \u8bf7\u6c42\u5185\u5bb9\u7684\u7c7b\u578b application/x-www-form-urlencoded CONTENT_LENGTH \u8bf7\u6c42\u5185\u5bb9\u957f\u5ea6 8 SCRIPT_NAME \u811a\u672c\u6587\u4ef6\u540d /index.php REQUEST_URI \u8bf7\u6c42URI /index.php?a=1&b=1 DOCUMENT_URI \u6587\u6863uri /index.php DOCUMENT_ROOT \u6587\u6863\u6839\u76ee\u5f55 /usr/local/nginx/html SERVER_PROTOCOL HTTP\u534f\u8bae\u7248\u672c HTTP/1.1 REQUEST_SCHEME \u8bf7\u6c42\u534f\u8bae(http/https) http GATEWAY_INTERFACE \u7f51\u5173\u63a5\u53e3 CGI/1.1 SERVER_SOFTWARE \u670d\u52a1\u5668\u8f6f\u4ef6\u548c\u7248\u672c nginx/1.10.1 REMOTE_ADDR \u6765\u6e90\u5730\u5740 192.168.78.1 REMOTE_PORT \u6765\u6e90\u7aef\u53e3 60100 SERVER_ADDR \u670d\u52a1\u5668\u5730\u5740 192.168.78.2 SERVER_PORT \u670d\u52a1\u5668\u7aef\u53e3 80 SERVER_NAME \u670d\u52a1\u5668\u540d\u79f0 ng.test","title":"FastCGI\u73af\u5883\u53d8\u91cf"},{"location":"source/nginx/nginx_web/#nginxphp_1","text":"1 2 3 4 5 6 7 8 9 10 server{ listen 80; server_name ng.test www.ng.test; root html/www.ng.test; index index.html index.htm index.php; location ~\\.php${ fastcgi_pass 127.0.0.1:9000; include fastcgi.conf; } }","title":"\u5728Nginx\u914d\u7f6e\u6587\u4ef6\u4e2d\u652f\u6301php"},{"location":"source/nginx/nginx_web/#php_3","text":"404\u9875\u9762 & PATHINFO 1 2 3 4 5 location ~\\.php${ try_files $uri = 404; fastcgi_pass 127.0.0.1:9000; include fastcgi.conf; }","title":"\u5224\u65adphp\u6587\u4ef6\u662f\u5426\u5b58\u5728"},{"location":"source/nginx/nginx_web/#nginxapache","text":"Apache HTTP Server(httpd) 1","title":"nginx+apache"},{"location":"source/nginx/nginx_web/#openresty","text":"\u83b7\u53d6 OpenResty 1 2 3 4 5 tar -zxvf openresty-1.11.2.1.tar.gz cd openresty-1.11.2.1 yum -y install perl pcre-devel openssl-devel ./configure make && make install 1 2 3 4 5 6 7 bin\uff1a\u5b58\u653e\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u3002 luajit\uff1a\u5b58\u653eLuaJIT(Lua\u4ee3\u7801\u89e3\u91ca\u5668)\u76f8\u5173\u7684\u6587\u4ef6\u3002 lualib\uff1a\u5b58\u653elua\u5e93\u6587\u4ef6\u3002 nginx\uff1aOpenResty\u6574\u5408\u7684Nginx\u5b58\u653e\u5728\u8fd9\u4e2a\u76ee\u5f55\u3002 pod\uff1a\u5b58\u653e\u7528\u4e8ebin/restydoc\u7a0b\u5e8f\u8bfb\u53d6\u7684pod\u6587\u6863\u3002 resty.index\uff1a\u5b58\u653epkd\u6587\u6863\u7d22\u5f15\u3002 site\uff1aOPM(OpenResty Package Manager)\u5305\u7684\u5b58\u653e\u76ee\u5f55\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 cd /usr/local/openresty/bin ./resty -e 'print(\"hello\")' ./resty ~/hello.lua vi conf/nginx.conf worker_processes 1 error_log logs/error.log events{ worker_connections 1024; } http{ server{ listen 8080; location / { default_type text/html; content_by_lua_file test.lua; } } }","title":"openresty"},{"location":"source/nginx/nginx_web/#_1","text":"","title":"\u6a21\u5757\u914d\u7f6e\u4e0e\u5e94\u7528"},{"location":"source/nginx/nginx_web/#_2","text":"","title":"\u6a21\u5757\u6982\u8ff0"},{"location":"source/nginx/nginx_web/#_3","text":"","title":"\u8c03\u8bd5\u8f93\u51fa"},{"location":"source/nginx/nginx_web/#_4","text":"","title":"\u54cd\u5e94\u72b6\u6001\u76f8\u5173"},{"location":"source/nginx/nginx_web/#_5","text":"","title":"\u7f51\u9875\u538b\u7f29"},{"location":"source/nginx/nginx_web/#_6","text":"","title":"\u91cd\u5199\u4e0e\u91cd\u5b9a\u5411"},{"location":"source/nginx/nginx_web/#_7","text":"","title":"\u9632\u76d7\u94fe\u914d"},{"location":"source/php/php_summary/","text":"\u5355\u5f15\u53f7/\u53cc\u5f15\u53f7 \u5b57\u7b26\u4e32\u62fc\u63a5 \u5b57\u7b26\u4e32\u5206\u5272 \u7d22\u5f15\u6570\u7ec4/\u5173\u8054\u6570\u7ec4 array()///[] \u4e8c\u7ef4\u591a\u7ef4\u6570\u7ec4 \u6570\u7ec4\u8f6c\u5b57\u7b26\u4e32 _GET/_POST","title":"PHP\u603b\u7ed3"},{"location":"source/redis/redis_base/","text":"Redis\u6e90\u7801\u5b89\u88c5 \u00b6 1 2 3 4 5 6 git clone --branch 2.8 --depth 1 git@github.com:antirez/redis.git cd redis make cd src ./redis-server --daemonzie yes ./redis-cli redis\u547d\u4ee4\u53c2\u8003: redis\u547d\u4ee4","title":"Redis\u57fa\u7840"},{"location":"source/redis/redis_base/#redis","text":"1 2 3 4 5 6 git clone --branch 2.8 --depth 1 git@github.com:antirez/redis.git cd redis make cd src ./redis-server --daemonzie yes ./redis-cli redis\u547d\u4ee4\u53c2\u8003: redis\u547d\u4ee4","title":"Redis\u6e90\u7801\u5b89\u88c5"},{"location":"unity/List/","text":"\u672c\u6a21\u5757\u89c4\u5212 \u00b6 \u56fe\u5f62\u5b66 \u00b6 unity\u5f15\u64ce \u00b6","title":"\u89c4\u5212"},{"location":"unity/List/#_1","text":"","title":"\u672c\u6a21\u5757\u89c4\u5212"},{"location":"unity/List/#_2","text":"","title":"\u56fe\u5f62\u5b66"},{"location":"unity/List/#unity","text":"","title":"unity\u5f15\u64ce"},{"location":"unity/unity_base/","text":"unity\u57fa\u7840 \u00b6 unity\u5de5\u7a0b\u7ed3\u6784 \u00b6 Assets \u5305\u542b\u6240\u6709\u7684\u5de5\u7a0b\u6587\u4ef6\uff0c\u662f\u4e3b\u8981\u5de5\u4f5c\u7684\u5730\u65b9 Library \u5de5\u7a0b\u7684\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u53ef\u5220\u9664\u81ea\u52a8\u91cd\u5efa ProjectSettings \u5de5\u7a0b\u7684\u914d\u7f6e\u6587\u4ef6 unity\u7a97\u53e3 \u00b6 Hierarchy\u5c42\u7ea7 Project\u5de5\u7a0b Inspector\u67e5\u770b Scene\u573a\u666f/Game\u6e38\u620f Unity\u811a\u672c\u57fa\u7840 \u00b6 1. Game Object\u6700\u57fa\u7840\u7684\u6e38\u620f\u5355\u4f4d\uff0c\u4e00\u4e2a\u6700\u57fa\u672c\u7684Game Object\u4ec5\u5305\u542b\u4e00\u4e2aTransform\u7ec4\u4ef6\uff0c\u7528\u4e8e\u5bf9\u5176\u8fdb\u884c\u4f4d\u79fb\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u3002 2. MonoBehavior\u662f\u6240\u6709Unity\u811a\u672c\u7684\u57fa\u7c7b\u3002 \u811a\u672c\u5e8f\u5217\u5316 \u00b6 \u8bb2\u811a\u672c\u6307\u5b9a\u7ed9\u573a\u666f\u4e2d\u7684\u6e38\u620f\u4f53\uff0c\u5c31\u53ef\u5728\u5bf9\u5e94\u6e38\u620f\u4f53\u7684Inspector\u7a97\u53e3\u4e2d\u914d\u7f6e\u811a\u672c\u5b9e\u4f8b\u7684public\u6210\u5458\u53d8\u91cf\u521d\u59cb\u503c\u3002 \u9ed8\u8ba4\u53ea\u6709\u7ee7\u627f\u81eaMonoBehaviour\u7684\u811a\u672c\u624d\u80fd\u5e8f\u5217\u5316\u3002\u5982\u679c\u4e00\u4e2a\u666e\u901ac#\u7c7b\u9700\u8981\u5e8f\u5217\u5316\u9700\u8981\u6dfb\u52a0'[System.Serializable]'\u5c5e\u6027\u3002 unity\u53ea\u80fd\u5e8f\u5217\u5316public\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e14\u4e0d\u80fd\u5e8f\u5217\u5316\u5c5e\u6027\u3002 \u7ec4\u4ef6\u5f0f\u7f16\u7a0b \u00b6 \u7ec4\u4ef6\u7684\u83b7\u53d6 1 2 3 4 5 Rigidbody rigid = this . gameObject . GetComponent < Rigidbody >(); if ( rigid == null ) { rigid = this . gameObject . AddComponent < Rigidbody >(); } Unity\u6d88\u606f\u673a\u5236\u5728\u7ec4\u4ef6\u95f4\u901a\u4fe1 SendMessage\u51fd\u6570(\u6548\u7387\u6bd4\u8f83\u4f4e) 1 2 3 4 5 6 7 8 9 10 11 12 //TestScript.cs public class TestScript : MonoBehaviour { void Start (){ this . gameObject . SendMessage ( \"DoSomething\" ); } } //DoSomethingScript.cs public class DoSomethingScript : MonoBeHaviour { public void DoSomething (){ Debug . Log ( \"DoSomething\" ); } } \u7ee7\u627f\u548c\u7ec4\u5408 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //TestScript.cs public class TestScript : MonoBehaviour { void Start (){ this . gameObject . GetComponent < DoSomethingBase >(). DoSomething (); } } //DoSomethingBase.cs public class DoSomethingBase : MonoBehaviour { public abstract void DoSomething (); } //DoSomethingScript.cs public class DoSomethingScript : DoSomethingBase { public override void DoSomething (){ Debug . Log ( \"DoSomething\" ); } } \u534f\u7a0b\u7f16\u7a0b \u534f\u7a0b\u51fd\u6570\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57IEnumerator\u5b9a\u4e49\uff0c\u5e76\u4e00\u5b9a\u8981\u4f7f\u7528\u5173\u952e\u5b57yield\u8fd4\u56de\u3002\u534f\u7a0b\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u9700\u8981\u4f7f\u7528\u51fd\u6570StartCoroutine\u5c06\u534f\u7a0b\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System.Collections ; using UnityEngine ; public class CoroTest : MonoBehaviour { void start (){ Coroutine coro = StartCoroutine ( DoSomethingDelay ( 1.5f )); StartCoroutine ( RunLoop ()); } } IEnumerator DoSomethingDelay ( float sec ){ yield return new WaitForSeconds ( sec ); Debug . log ( \"xxx\" ); yield return new WaitForSeconds ( sec ); StartCoroutine ( DoSomethingDelay ( 1.5f )); } IEnumeraator RunLoop (){ while ( ture ){ Debug . log ( \"xxx\" ); yield return 0 ; } } \u9884\u7f6e\u6587\u4ef6Prefab\u548c\u8d44\u6e90\u7ba1\u7406 \u00b6 \u5f53\u5728\u573a\u666f\u4e2d\u5b8c\u6210\u5bf9Game Object\u7684\u914d\u7f6e\u540e\uff0c\u5c06\u5176\u62d6\u52a8\u5230Object\u7a97\u53e3\u4e2d\u5373\u521b\u5efa\u4e86Prefab\u3002 1. \u5220\u9664\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u4e0d\u4f1a\u5f71\u54cd\u5230Project\u7a97\u53e3\u4e2d\u7684Prefab\u3002 2. \u5982\u679c\u4fee\u6539\u4e86\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\uff0c\u9009\u62e9Inspector\u7a97\u53e3\u53f3\u4e0a\u89d2\u7684Prefab->apple,Project\u7a97\u53e3\u4e2d\u4fdd\u5b58\u7684prefab\u5219\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u8be5\u4fee\u6539\u7684\u7ed3\u679c\u3002 3. \u5982\u679c\u4fee\u6539\u4e86\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\uff0c\u9009\u62e9Inspector\u7a97\u53e3\u53f3\u4e0a\u89d2\u7684Prefab->Revert,\u5219\u4f1a\u8fd4\u56de\u5230Prefab\u7684\u8bbe\u7f6e\u4e2d\u3002 4. \u5982\u679c\u4fee\u6539\u4e86Prefab\u7684\u67d0\u9879\u8bbe\u7f6e\uff0c\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u53c8\u6ca1\u6709\u4fee\u6539\u8fc7\u8be5\u9879\u8bbe\u7f6e\uff0c\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u5219\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u4e0ePrefab\u76f8\u540c\u7684\u8bbe\u7f6e\u3002 \u8bfb\u53d6\u8d44\u6e90\u548c\u5b9e\u4f8b\u5316 \u00b6 1 GameObject go = new GameObject(\"Game Object Name\"); \u4f7f\u7528new\u7684\u65b9\u5f0f\u975e\u5e38\u76f4\u63a5\uff0c\u4f46\u5728unity\u4e2d\u53ea\u5141\u8bb8\u5bf9\u4e00\u4e2a\u7a7a\u7684Game Object\u4f7f\u7528\u5173\u952e\u5b57new\u8fdb\u884c\u521b\u5efa\u3002 1 2 3 4 5 6 public GameObject prefab; public GameObject instance; void start(){ instance = Instantiate(prefab); Destroy(instance,0.1f); } \u5728unity\u4e2d\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528c#\u6807\u51c6\u5e93\u4e2d\u7684IO\u51fd\u6570\u8bfb\u53d6unity\u6240\u9700\u7684\u8d44\u6e90\uff0c\u800c\u662f\u5fc5\u987b\u5c06\u8d44\u6e90\u653e\u5165\u540d\u4e3aResources\u7684\u6587\u4ef6\u5939\u4e2d\uff0cunity\u8fd0\u884c\u6709\u591a\u4e2aResource\u6587\u4ef6\u5939\u4e14\u53ef\u4ee5\u5b58\u653e\u5728\u5de5\u7a0b\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 void start(){ GameObject prefab = Resource.Load<GameObject>(\"Player\"); instance = Instantiate(prefab); GameObject go =Resources.Load<GameObject>(\"Prefab\u540d\u79f0\"); Texture texture = Resources.Load<Texture>(\"\u8d34\u56fe\u540d\u79f0\"); } \u65f6\u95f4\u548c\u52a8\u753b \u00b6 \u4efb\u4f55\u548c\u52a8\u753b\u6548\u679c\u76f8\u5173\u7684\u53c2\u6570\uff0c\u6bd4\u5982\u79fb\u52a8\u901f\u5ea6\uff0c\u65cb\u8f6c\u901f\u5ea6\u7b49\uff0c\u5728\u4f7f\u7528\u524d\u90fd\u9700\u8981\u4e0eTime.deltaTime\u76f8\u4e58\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u4e0d\u540c\u5e27\u6570\u4e0b\u53d6\u5f97\u76f8\u5bf9\u4e00\u81f4\u7684\u52a8\u753b\u6548\u679c\u3002 Unity2D\u7cfb\u7edf\u7b80\u4ecb \u00b6 WEB\u670d\u52a1\u5668/tcp/udp \u00b6 IOS/Android\u79fb\u690d \u00b6 UGUI \u00b6 \u5149\u7167\u6e32\u67d3\u7269\u7406\u6750\u8d28\u7b49 \u00b6 \u884c\u4e3a\u6811AI \u00b6 Shader\u7279\u6548 \u00b6 Lua \u00b6 C \u00b6 \u4e00\u4e9b\u6e38\u620f\u7c7b\u578b\u5b9e\u4f8b \u00b6","title":"Unity\u57fa\u7840"},{"location":"unity/unity_base/#unity","text":"","title":"unity\u57fa\u7840"},{"location":"unity/unity_base/#unity_1","text":"Assets \u5305\u542b\u6240\u6709\u7684\u5de5\u7a0b\u6587\u4ef6\uff0c\u662f\u4e3b\u8981\u5de5\u4f5c\u7684\u5730\u65b9 Library \u5de5\u7a0b\u7684\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u53ef\u5220\u9664\u81ea\u52a8\u91cd\u5efa ProjectSettings \u5de5\u7a0b\u7684\u914d\u7f6e\u6587\u4ef6","title":"unity\u5de5\u7a0b\u7ed3\u6784"},{"location":"unity/unity_base/#unity_2","text":"Hierarchy\u5c42\u7ea7 Project\u5de5\u7a0b Inspector\u67e5\u770b Scene\u573a\u666f/Game\u6e38\u620f","title":"unity\u7a97\u53e3"},{"location":"unity/unity_base/#unity_3","text":"1. Game Object\u6700\u57fa\u7840\u7684\u6e38\u620f\u5355\u4f4d\uff0c\u4e00\u4e2a\u6700\u57fa\u672c\u7684Game Object\u4ec5\u5305\u542b\u4e00\u4e2aTransform\u7ec4\u4ef6\uff0c\u7528\u4e8e\u5bf9\u5176\u8fdb\u884c\u4f4d\u79fb\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u3002 2. MonoBehavior\u662f\u6240\u6709Unity\u811a\u672c\u7684\u57fa\u7c7b\u3002","title":"Unity\u811a\u672c\u57fa\u7840"},{"location":"unity/unity_base/#_1","text":"\u8bb2\u811a\u672c\u6307\u5b9a\u7ed9\u573a\u666f\u4e2d\u7684\u6e38\u620f\u4f53\uff0c\u5c31\u53ef\u5728\u5bf9\u5e94\u6e38\u620f\u4f53\u7684Inspector\u7a97\u53e3\u4e2d\u914d\u7f6e\u811a\u672c\u5b9e\u4f8b\u7684public\u6210\u5458\u53d8\u91cf\u521d\u59cb\u503c\u3002 \u9ed8\u8ba4\u53ea\u6709\u7ee7\u627f\u81eaMonoBehaviour\u7684\u811a\u672c\u624d\u80fd\u5e8f\u5217\u5316\u3002\u5982\u679c\u4e00\u4e2a\u666e\u901ac#\u7c7b\u9700\u8981\u5e8f\u5217\u5316\u9700\u8981\u6dfb\u52a0'[System.Serializable]'\u5c5e\u6027\u3002 unity\u53ea\u80fd\u5e8f\u5217\u5316public\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e14\u4e0d\u80fd\u5e8f\u5217\u5316\u5c5e\u6027\u3002","title":"\u811a\u672c\u5e8f\u5217\u5316"},{"location":"unity/unity_base/#_2","text":"\u7ec4\u4ef6\u7684\u83b7\u53d6 1 2 3 4 5 Rigidbody rigid = this . gameObject . GetComponent < Rigidbody >(); if ( rigid == null ) { rigid = this . gameObject . AddComponent < Rigidbody >(); } Unity\u6d88\u606f\u673a\u5236\u5728\u7ec4\u4ef6\u95f4\u901a\u4fe1 SendMessage\u51fd\u6570(\u6548\u7387\u6bd4\u8f83\u4f4e) 1 2 3 4 5 6 7 8 9 10 11 12 //TestScript.cs public class TestScript : MonoBehaviour { void Start (){ this . gameObject . SendMessage ( \"DoSomething\" ); } } //DoSomethingScript.cs public class DoSomethingScript : MonoBeHaviour { public void DoSomething (){ Debug . Log ( \"DoSomething\" ); } } \u7ee7\u627f\u548c\u7ec4\u5408 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //TestScript.cs public class TestScript : MonoBehaviour { void Start (){ this . gameObject . GetComponent < DoSomethingBase >(). DoSomething (); } } //DoSomethingBase.cs public class DoSomethingBase : MonoBehaviour { public abstract void DoSomething (); } //DoSomethingScript.cs public class DoSomethingScript : DoSomethingBase { public override void DoSomething (){ Debug . Log ( \"DoSomething\" ); } } \u534f\u7a0b\u7f16\u7a0b \u534f\u7a0b\u51fd\u6570\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57IEnumerator\u5b9a\u4e49\uff0c\u5e76\u4e00\u5b9a\u8981\u4f7f\u7528\u5173\u952e\u5b57yield\u8fd4\u56de\u3002\u534f\u7a0b\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u9700\u8981\u4f7f\u7528\u51fd\u6570StartCoroutine\u5c06\u534f\u7a0b\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System.Collections ; using UnityEngine ; public class CoroTest : MonoBehaviour { void start (){ Coroutine coro = StartCoroutine ( DoSomethingDelay ( 1.5f )); StartCoroutine ( RunLoop ()); } } IEnumerator DoSomethingDelay ( float sec ){ yield return new WaitForSeconds ( sec ); Debug . log ( \"xxx\" ); yield return new WaitForSeconds ( sec ); StartCoroutine ( DoSomethingDelay ( 1.5f )); } IEnumeraator RunLoop (){ while ( ture ){ Debug . log ( \"xxx\" ); yield return 0 ; } }","title":"\u7ec4\u4ef6\u5f0f\u7f16\u7a0b"},{"location":"unity/unity_base/#prefab","text":"\u5f53\u5728\u573a\u666f\u4e2d\u5b8c\u6210\u5bf9Game Object\u7684\u914d\u7f6e\u540e\uff0c\u5c06\u5176\u62d6\u52a8\u5230Object\u7a97\u53e3\u4e2d\u5373\u521b\u5efa\u4e86Prefab\u3002 1. \u5220\u9664\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u4e0d\u4f1a\u5f71\u54cd\u5230Project\u7a97\u53e3\u4e2d\u7684Prefab\u3002 2. \u5982\u679c\u4fee\u6539\u4e86\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\uff0c\u9009\u62e9Inspector\u7a97\u53e3\u53f3\u4e0a\u89d2\u7684Prefab->apple,Project\u7a97\u53e3\u4e2d\u4fdd\u5b58\u7684prefab\u5219\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u8be5\u4fee\u6539\u7684\u7ed3\u679c\u3002 3. \u5982\u679c\u4fee\u6539\u4e86\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\uff0c\u9009\u62e9Inspector\u7a97\u53e3\u53f3\u4e0a\u89d2\u7684Prefab->Revert,\u5219\u4f1a\u8fd4\u56de\u5230Prefab\u7684\u8bbe\u7f6e\u4e2d\u3002 4. \u5982\u679c\u4fee\u6539\u4e86Prefab\u7684\u67d0\u9879\u8bbe\u7f6e\uff0c\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u53c8\u6ca1\u6709\u4fee\u6539\u8fc7\u8be5\u9879\u8bbe\u7f6e\uff0c\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u5219\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u4e0ePrefab\u76f8\u540c\u7684\u8bbe\u7f6e\u3002","title":"\u9884\u7f6e\u6587\u4ef6Prefab\u548c\u8d44\u6e90\u7ba1\u7406"},{"location":"unity/unity_base/#_3","text":"1 GameObject go = new GameObject(\"Game Object Name\"); \u4f7f\u7528new\u7684\u65b9\u5f0f\u975e\u5e38\u76f4\u63a5\uff0c\u4f46\u5728unity\u4e2d\u53ea\u5141\u8bb8\u5bf9\u4e00\u4e2a\u7a7a\u7684Game Object\u4f7f\u7528\u5173\u952e\u5b57new\u8fdb\u884c\u521b\u5efa\u3002 1 2 3 4 5 6 public GameObject prefab; public GameObject instance; void start(){ instance = Instantiate(prefab); Destroy(instance,0.1f); } \u5728unity\u4e2d\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528c#\u6807\u51c6\u5e93\u4e2d\u7684IO\u51fd\u6570\u8bfb\u53d6unity\u6240\u9700\u7684\u8d44\u6e90\uff0c\u800c\u662f\u5fc5\u987b\u5c06\u8d44\u6e90\u653e\u5165\u540d\u4e3aResources\u7684\u6587\u4ef6\u5939\u4e2d\uff0cunity\u8fd0\u884c\u6709\u591a\u4e2aResource\u6587\u4ef6\u5939\u4e14\u53ef\u4ee5\u5b58\u653e\u5728\u5de5\u7a0b\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 void start(){ GameObject prefab = Resource.Load<GameObject>(\"Player\"); instance = Instantiate(prefab); GameObject go =Resources.Load<GameObject>(\"Prefab\u540d\u79f0\"); Texture texture = Resources.Load<Texture>(\"\u8d34\u56fe\u540d\u79f0\"); }","title":"\u8bfb\u53d6\u8d44\u6e90\u548c\u5b9e\u4f8b\u5316"},{"location":"unity/unity_base/#_4","text":"\u4efb\u4f55\u548c\u52a8\u753b\u6548\u679c\u76f8\u5173\u7684\u53c2\u6570\uff0c\u6bd4\u5982\u79fb\u52a8\u901f\u5ea6\uff0c\u65cb\u8f6c\u901f\u5ea6\u7b49\uff0c\u5728\u4f7f\u7528\u524d\u90fd\u9700\u8981\u4e0eTime.deltaTime\u76f8\u4e58\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u4e0d\u540c\u5e27\u6570\u4e0b\u53d6\u5f97\u76f8\u5bf9\u4e00\u81f4\u7684\u52a8\u753b\u6548\u679c\u3002","title":"\u65f6\u95f4\u548c\u52a8\u753b"},{"location":"unity/unity_base/#unity2d","text":"","title":"Unity2D\u7cfb\u7edf\u7b80\u4ecb"},{"location":"unity/unity_base/#webtcpudp","text":"","title":"WEB\u670d\u52a1\u5668/tcp/udp"},{"location":"unity/unity_base/#iosandroid","text":"","title":"IOS/Android\u79fb\u690d"},{"location":"unity/unity_base/#ugui","text":"","title":"UGUI"},{"location":"unity/unity_base/#_5","text":"","title":"\u5149\u7167\u6e32\u67d3\u7269\u7406\u6750\u8d28\u7b49"},{"location":"unity/unity_base/#ai","text":"","title":"\u884c\u4e3a\u6811AI"},{"location":"unity/unity_base/#shader","text":"","title":"Shader\u7279\u6548"},{"location":"unity/unity_base/#lua","text":"","title":"Lua"},{"location":"unity/unity_base/#c","text":"","title":"C"},{"location":"unity/unity_base/#_6","text":"","title":"\u4e00\u4e9b\u6e38\u620f\u7c7b\u578b\u5b9e\u4f8b"},{"location":"unity/unity_shader/","text":"\u7a0b\u5e8f\u5458\u7684\u4e09\u5927\u6d6a\u6f2b \u00b6 \u7f16\u8bd1\u539f\u7406\uff0c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u56fe\u5f62\u5b66->\u5916\u8c8c\u534f\u4f1a \u6e32\u67d3\u6d41\u6c34\u7ebf \u00b6 \u6982\u5ff5\u6d41\u6c34\u7ebf\uff1a\u5e94\u7528\u9636\u6bb5\uff0c\u51e0\u4f55\u9636\u6bb5\uff0c\u5149\u6805\u5316\u9636\u6bb5 \u6570\u5b66 \u00b6 \u77e2\u91cf->\u6709\u5927\u5c0f(\u6a21)\u548c\u65b9\u5411\u7684\u6709\u5411\u7ebf\u6bb5\uff0c\u76f8\u5bf9\u91cf \u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u53ef\u4ee5\u8868\u793a\u6210 \u4e00\u4e2a\u4ece\u539f\u70b9\u51fa\u53d1\u7684\u77e2\u91cf\u3002 \u5355\u4f4d\u77e2\u91cf->\u6a21\u4e3a\u4e00\u7684\u77e2\u91cf","title":"Shader"},{"location":"unity/unity_shader/#_1","text":"\u7f16\u8bd1\u539f\u7406\uff0c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u56fe\u5f62\u5b66->\u5916\u8c8c\u534f\u4f1a","title":"\u7a0b\u5e8f\u5458\u7684\u4e09\u5927\u6d6a\u6f2b"},{"location":"unity/unity_shader/#_2","text":"\u6982\u5ff5\u6d41\u6c34\u7ebf\uff1a\u5e94\u7528\u9636\u6bb5\uff0c\u51e0\u4f55\u9636\u6bb5\uff0c\u5149\u6805\u5316\u9636\u6bb5","title":"\u6e32\u67d3\u6d41\u6c34\u7ebf"},{"location":"unity/unity_shader/#_3","text":"\u77e2\u91cf->\u6709\u5927\u5c0f(\u6a21)\u548c\u65b9\u5411\u7684\u6709\u5411\u7ebf\u6bb5\uff0c\u76f8\u5bf9\u91cf \u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u53ef\u4ee5\u8868\u793a\u6210 \u4e00\u4e2a\u4ece\u539f\u70b9\u51fa\u53d1\u7684\u77e2\u91cf\u3002 \u5355\u4f4d\u77e2\u91cf->\u6a21\u4e3a\u4e00\u7684\u77e2\u91cf","title":"\u6570\u5b66"}]}