{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Site \u00b6 \u90fd\u662f\u4e9b\u8001\u751f\u5e38\u8c08\u7684\u95ee\u9898\uff0c\u5c1d\u8bd5\u603b\u7ed3\u8868\u8fbe\u3002 About Me \u00b6 AS\u60a3\u8005\uff0c\u4e09\u6d41\u7801\u755c\uff0c\u52c3\u5b66\u7ed3\u4e1a\uff0c\u6781\u5ea6\u5931\u8d25\uff0c\u8eba\u5e73\u72b6\u6001\u3002 Contact \u00b6 GitHub \ud83d\udcee \u77e5\u4e4e","title":"About"},{"location":"#about-site","text":"\u90fd\u662f\u4e9b\u8001\u751f\u5e38\u8c08\u7684\u95ee\u9898\uff0c\u5c1d\u8bd5\u603b\u7ed3\u8868\u8fbe\u3002","title":"About Site"},{"location":"#about-me","text":"AS\u60a3\u8005\uff0c\u4e09\u6d41\u7801\u755c\uff0c\u52c3\u5b66\u7ed3\u4e1a\uff0c\u6781\u5ea6\u5931\u8d25\uff0c\u8eba\u5e73\u72b6\u6001\u3002","title":"About Me"},{"location":"#contact","text":"GitHub \ud83d\udcee \u77e5\u4e4e","title":"Contact"},{"location":"cplus/cpp_summary/","text":"C++ \u00b6 C++\u57fa\u7840 \u00b6 \u7f16\u8bd1 \u00b6 1 2 gcc main.cc -lstdc++ g++ main.cc namesapce \u00b6 1 2 3 4 5 namespace name{ //variables, functions, classes } using name::xxx; const \u00b6 C++ \u4e2d\u7684\u5e38\u91cf(const)\u66f4\u7c7b\u4f3c\u4e8e#define\u547d\u4ee4\uff0c\u662f\u4e00\u4e2a\u503c\u66ff\u6362\u7684\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7#define\u662f\u5728\u9884\u5904\u7406\u9636\u6bb5\u66ff\u6362\uff0c\u800c\u5e38\u91cf\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u66ff\u6362\u3002 C\u548cC++\u4e2d\u5168\u5c40 const \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u76f8\u540c\uff0c\u90fd\u662f\u5f53\u524d\u6587\u4ef6\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4eec\u7684\u53ef\u89c1\u8303\u56f4\uff1aC\u8bed\u8a00\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u58f0\u660e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\uff1b\u800cC++\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u4ec5\u9650\u4e8e\u5f53\u524d\u6587\u4ef6\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4e0d\u53ef\u89c1\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u591a\u6b21\u5f15\u5165\u540e\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002 inline\u5185\u8054\u51fd\u6570 \u00b6 \u5728\u51fd\u6570\u5b9a\u4e49\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\uff0c\u5728\u51fd\u6570\u58f0\u660e\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\u867d\u7136\u6ca1\u6709\u9519\uff0c\u4f46\u8fd9\u79cd\u505a\u6cd5\u662f\u65e0\u6548\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u51fd\u6570\u58f0\u660e\u5904\u7684 inline \u5173\u952e\u5b57\u3002 \u5728\u591a\u6587\u4ef6\u7f16\u7a0b\u65f6\uff0c\u5efa\u8bae\u5c06\u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u76f4\u63a5\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u7981\u7528\u5185\u8054\u51fd\u6570\u7684\u58f0\u660e\u3002 \u51fd\u6570\u9ed8\u8ba4\u53c2\u6570 \u00b6 C++\u89c4\u5b9a\uff0c\u9ed8\u8ba4\u53c2\u6570\u53ea\u80fd\u653e\u5728\u5f62\u53c2\u5217\u8868\u7684\u6700\u540e\uff0c\u800c\u4e14\u4e00\u65e6\u4e3a\u67d0\u4e2a\u5f62\u53c2\u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u7684\u6240\u6709\u5f62\u53c2\u90fd\u5fc5\u987b\u6709\u9ed8\u8ba4\u503c\u3002 \u8fd9\u662f\u56e0\u4e3aC++ \u89c4\u5b9a\uff0c\u5728\u7ed9\u5b9a\u7684\u4f5c\u7528\u57df\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u6b21\u9ed8\u8ba4\u53c2\u6570\u3002\uff08\u540c\u4e00\u6e90\u6587\u4ef6\u5185\u5b9a\u4e49+\u58f0\u660e\u5e26\u9ed8\u8ba4\u53c2\u6570\u4f1a\u62a5\u9519\uff09 \u91cd\u8f7d \u00b6 \u51fd\u6570\u91cd\u8f7d\uff1a\u51fd\u6570\u540d\u5b57\u76f8\u540c\uff0c\u6570\u5217\u8868\u4e0d\u540c\uff08\u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\uff09\u3002 \u7c7b\u548c\u5bf9\u8c61 \u00b6 \u7c7b\u662f\u4e00\u4e2a\u6a21\u677f\uff08Template\uff09\uff0c\u7f16\u8bd1\u540e\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\u4e0d\u80fd\u5bf9\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002\u53ea\u6709\u5728\u521b\u5efa\u5bf9\u8c61\u540e\u624d\u7ed9\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u8fd9\u4e2a\u65f6\u5019\u8d4b\u503c\u4e86\u3002 \u4f7f\u7528new\u5728\u5806\u4e0a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u662f\u533f\u540d\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u5fc5\u987b\u8981\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5b83\uff0c\u518d\u501f\u52a9\u6307\u9488\u6765\u8bbf\u95ee\u5b83\u7684\u6210\u5458\u53d8\u91cf\u6216\u6210\u5458\u51fd\u6570\u3002 ::\u88ab\u79f0\u4e3a\u57df\u89e3\u6790\u7b26\uff08\u4e5f\u79f0\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u6216\u4f5c\u7528\u57df\u9650\u5b9a\u7b26\uff09\uff0c\u7528\u6765\u8fde\u63a5\u7c7b\u540d\u548c\u51fd\u6570\u540d\uff0c\u6307\u660e\u5f53\u524d\u51fd\u6570\u5c5e\u4e8e\u54ea\u4e2a\u7c7b \u5728\u7c7b\u4f53\u4e2d\u548c\u7c7b\u4f53\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u662f\u6709\u533a\u522b\u7684\uff1a\u5728\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u4f1a\u81ea\u52a8\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5728\u7c7b\u4f53\u5916\u5b9a\u4e49\u7684\u4e0d\u4f1a \u6210\u5458\u53d8\u91cf\u5927\u90fd\u4ee5m_\u5f00\u5934\uff0c\u8fd9\u662f\u7ea6\u5b9a\u6210\u4fd7\u7684\u5199\u6cd5\uff0c\u4e0d\u662f\u8bed\u6cd5\u89c4\u5b9a\u7684\u5185\u5bb9\u3002\u4ee5m_\u5f00\u5934\u65e2\u53ef\u4ee5\u4e00\u773c\u770b\u51fa\u8fd9\u662f\u6210\u5458\u53d8\u91cf\uff0c\u53c8\u53ef\u4ee5\u548c\u6210\u5458\u51fd\u6570\u4e2d\u7684\u5f62\u53c2\u540d\u5b57\u533a\u5206\u5f00\u3002 \u7f16\u8bd1\u5668\u4f1a\u5c06\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u5206\u5f00\u5b58\u50a8\uff1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u6240\u6709\u5bf9\u8c61\u90fd\u5171\u4eab\u540c\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801 \u6784\u9020\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570\u5fc5\u987b\u662fpublic\u5c5e\u6027\u7684\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\uff0c\u51fd\u6570\u540d\u524d\u9762\u90fd\u4e0d\u80fd\u51fa\u73b0\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5373\u4f7f\u662f void \u4e5f\u4e0d\u5141\u8bb8\uff1b \u51fd\u6570\u4f53\u4e2d\u4e0d\u80fd\u6709 return \u8bed\u53e5\u3002 \u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868 \u00b6 \u521d\u59cb\u5316const\u6210\u5458\u53d8\u91cf\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 class VLA { private : const int m_len ; int * m_arr ; public : VLA ( int len ); }; //\u5fc5\u987b\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316 m_len VLA :: VLA ( int len ) : m_len ( len ){ m_arr = new int [ len ]; } \u5bf9\u8c61\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6784\u9020\u521d\u59cb\u5316 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <iostream> using namespace std ; class CSample { public : CSample (){ //\u6784\u9020\u51fd\u6570 1 cout << \"Constructor 1 Called\" << endl ; } CSample ( int n ){ //\u6784\u9020\u51fd\u6570 2 cout << \"Constructor 2 Called\" << endl ; } }; int main (){ cout << \"stepl\" << endl ; CSample arrayl [ 2 ]; cout << \"step2\" << endl ; CSample array2 [ 2 ] = { 4 , 5 }; cout << \"step3\" << endl ; CSample array3 [ 2 ] = { 3 }; cout << \"step4\" << endl ; CSample * array4 = new CSample [ 2 ]; delete [] array4 ; return 0 ; } //\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6 class CTest { public : CTest ( int n ){ } //\u6784\u9020\u51fd\u6570(1) CTest ( int n , int m ){ } //\u6784\u9020\u51fd\u6570(2) CTest (){ } //\u6784\u9020\u51fd\u6570(3) }; int main (){ //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u3001(3) \u521d\u59cb\u5316 CTest arrayl [ 3 ] = { 1 , CTest ( 1 , 2 ) }; //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(2)\u3001(2)\u3001(1)\u521d\u59cb\u5316 CTest array2 [ 3 ] = { CTest ( 2 , 3 ), CTest ( 1 , 2 ), 1 }; //\u4e24\u4e2a\u5143\u7d20\u6307\u5411\u7684\u5bf9\u8c61\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u521d\u59cb\u5316 CTest * pArray [ 3 ] = { new CTest ( 4 ), new CTest ( 1 , 2 ) }; //pArray[2] \u6ca1\u6709\u521d\u59cb\u5316\uff0c\u5176\u503c\u662f\u968f\u673a\u7684\uff0c\u4e0d\u77e5\u9053\u6307\u5411\u54ea\u91cc\u3002 return 0 ; } \u6790\u6784\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570\u7684\u540d\u5b57\u548c\u7c7b\u540d\u76f8\u540c\uff0c\u800c\u6790\u6784\u51fd\u6570\u7684\u540d\u5b57\u662f\u5728\u7c7b\u540d\u524d\u9762\u52a0\u4e00\u4e2a~\u7b26\u53f7\u3002\u6790\u6784\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u4e0d\u80fd\u88ab\u91cd\u8f7d\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002 \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u5b83\u548c\u5168\u5c40\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u5b83\u548c\u5c40\u90e8\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u6267\u884c\u65f6\u673a \u00b6 \u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u8c03\u7528\uff0c\u5bf9\u8c61\u7684\u9500\u6bc1\u65f6\u673a\u4e0e\u5b83\u6240\u5728\u7684\u5185\u5b58\u533a\u57df\u6709\u5173\uff1a \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 new\u521b\u5efa\u7684\u5bf9\u8c61\u4f4d\u4e8e\u5806\u533a\uff0c\u901a\u8fc7delete\u5220\u9664\u65f6\u624d\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709delete\uff0c\u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u6210\u5458\u5bf9\u8c61\u548c\u5c01\u95ed\u7c7b \u00b6 \u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u5982\u679c\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5c31\u79f0\u4e4b\u4e3a\u201c\u6210\u5458\u5bf9\u8c61\u201d\u3002\u5305\u542b\u6210\u5458\u5bf9\u8c61\u7684\u7c7b\u53eb\u5c01\u95ed\u7c7b\uff08enclosed class\uff09\u3002 \u521b\u5efa\u5c01\u95ed\u7c7b\u7684\u5bf9\u8c61\u65f6\uff0c\u5176\u6210\u5458\u5bf9\u8c61\u4e5f\u9700\u8981\u88ab\u521b\u5efa\uff0c\u6210\u5458\u5bf9\u8c61\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\uff1f\u9700\u8981\u501f\u52a9\u5c01\u95ed\u7c7b\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <iostream> using namespace std ; //\u8f6e\u80ce\u7c7b class Tyre { public : Tyre ( int radius , int width ); void show () const ; private : int m_radius ; //\u534a\u5f84 int m_width ; //\u5bbd\u5ea6 }; Tyre :: Tyre ( int radius , int width ) : m_radius ( radius ), m_width ( width ){ } void Tyre :: show () const { cout << \"\u8f6e\u6bc2\u534a\u5f84\uff1a\" << this -> m_radius << \"\u540b\" << endl ; cout << \"\u8f6e\u80ce\u5bbd\u5ea6\uff1a\" << this -> m_width << \"mm\" << endl ; } //\u5f15\u64ce\u7c7b class Engine { public : Engine ( float displacement = 2.0 ); void show () const ; private : float m_displacement ; }; Engine :: Engine ( float displacement ) : m_displacement ( displacement ) {} void Engine :: show () const { cout << \"\u6392\u91cf\uff1a\" << this -> m_displacement << \"L\" << endl ; } //\u6c7d\u8f66\u7c7b class Car { public : Car ( int price , int radius , int width ); void show () const ; private : int m_price ; //\u4ef7\u683c Tyre m_tyre ; Engine m_engine ; }; Car :: Car ( int price , int radius , int width ) : m_price ( price ), m_tyre ( radius , width ) /*\u6307\u660em_tyre\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65b9\u5f0f*/ { }; //\u8fd9\u91cc\u5e76\u6ca1\u6709\u8bf4\u660e m_engine \u8be5\u5982\u4f55\u5904\u7406,\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\u3002 void Car :: show () const { cout << \"\u4ef7\u683c\uff1a\" << this -> m_price << \"\uffe5\" << endl ; this -> m_tyre . show (); this -> m_engine . show (); } int main () { Car car ( 200000 , 19 , 245 ); car . show (); return 0 ; } \u5c01\u95ed\u7c7b\u5bf9\u8c61\u751f\u6210\u65f6\uff0c\u5148\u6267\u884c\u6240\u6709\u6210\u5458\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u624d\u6267\u884c\u5c01\u95ed\u7c7b\u81ea\u5df1\u7684\u6784\u9020\u51fd\u6570\u3002\u6210\u5458\u5bf9\u8c61\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6210\u5458\u5bf9\u8c61\u5728\u7c7b\u5b9a\u4e49\u4e2d\u7684\u6b21\u5e8f\u4e00\u81f4\uff0c\u4e0e\u5b83\u4eec\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u5e8f\u65e0\u5173\u3002 \u5f53\u5c01\u95ed\u7c7b\u5bf9\u8c61\u6d88\u4ea1\u65f6\uff0c\u5148\u6267\u884c\u5c01\u95ed\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u6267\u884c\u6210\u5458\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u6210\u5458\u5bf9\u8c61\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6784\u9020\u7684\u540e\u6790\u6784\u3002 C++ this\u6307\u9488 \u00b6 this \u5b9e\u9645\u4e0a\u662f\u6210\u5458\u51fd\u6570\u7684\u4e00\u4e2a\u5f62\u53c2\uff0c\u5728\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\u5c06\u5bf9\u8c61\u7684\u5730\u5740\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9 this\u3002\u4e0d\u8fc7 this \u8fd9\u4e2a\u5f62\u53c2\u662f\u9690\u5f0f\u7684\uff0c\u5b83\u5e76\u4e0d\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u7531\u7f16\u8bd1\u5668\u9ed8\u9ed8\u5730\u5c06\u5b83\u6dfb\u52a0\u5230\u53c2\u6570\u5217\u8868\u4e2d\u3002 \u6210\u5458\u51fd\u6570\u6700\u7ec8\u88ab\u7f16\u8bd1\u6210\u4e0e\u5bf9\u8c61\u65e0\u5173\u7684\u666e\u901a\u51fd\u6570\uff0c\u9664\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u4f1a\u4e22\u5931\u6240\u6709\u4fe1\u606f\uff0c\u6240\u4ee5\u7f16\u8bd1\u65f6\u8981\u5728\u6210\u5458\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u628a\u5f53\u524d\u5bf9\u8c61\u7684\u9996\u5730\u5740\u4f20\u5165\uff0c\u4ee5\u6b64\u6765\u5173\u8054\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f this\uff0c\u5b83\u662f\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u5173\u8054\u7684\u6865\u6881\u3002 this \u662f const \u6307\u9488\uff0c\u5b83\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff0c\u4e00\u5207\u4f01\u56fe\u4fee\u6539\u8be5\u6307\u9488\u7684\u64cd\u4f5c\uff0c\u5982\u8d4b\u503c\u3001\u9012\u589e\u3001\u9012\u51cf\u7b49\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\u3002 this \u53ea\u80fd\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u7528\u5728\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u610f\u4e49\uff0c\u4e5f\u662f\u975e\u6cd5\u7684\u3002 \u53ea\u6709\u5f53\u5bf9\u8c61\u88ab\u521b\u5efa\u540e this \u624d\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728 static \u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528\uff08\u540e\u7eed\u4f1a\u8bb2\u5230 static \u6210\u5458\uff09\u3002 static\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570 \u00b6 static\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u5728\u7c7b\u58f0\u660e\u7684\u5916\u90e8\u521d\u59cb\u5316\uff1a 1 2 type class :: name = value ; int Student :: m_total = 0 ; //\u9759\u6001\u6210\u5458\u53d8\u91cf\u5728\u521d\u59cb\u5316\u65f6\u4e0d\u80fd\u518d\u52a0 static static \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\u65e2\u4e0d\u662f\u5728\u58f0\u660e\u7c7b\u65f6\u5206\u914d\uff0c\u4e5f\u4e0d\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5206\u914d\uff0c\u800c\u662f\u5728\uff08\u7c7b\u5916\uff09\u521d\u59cb\u5316\u65f6\u5206\u914d\u3002\u53cd\u8fc7\u6765\u8bf4\uff0c\u6ca1\u6709\u5728\u7c7b\u5916\u521d\u59cb\u5316\u7684 static \u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u3002 static\u6210\u5458\u53d8\u91cf\u548c\u666e\u901astatic\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u5728\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\u65f6\u624d\u91ca\u653e\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0cstatic \u6210\u5458\u53d8\u91cf\u4e0d\u5360\u7528\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u4e0d\u968f\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5206\u914d\u5185\u5b58\uff0c\u4e5f\u4e0d\u968f\u5bf9\u8c61\u7684\u9500\u6bc1\u800c\u91ca\u653e\u5185\u5b58\uff0c\u5373\u4f7f\u4e0d\u521b\u5efa\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u3002\u800c\u666e\u901a\u6210\u5458\u53d8\u91cf\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u91ca\u653e\u5185\u5b58\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u666e\u901a\u6210\u5458\u51fd\u6570\u7684\u6839\u672c\u533a\u522b\u5728\u4e8e\uff1a\u666e\u901a\u6210\u5458\u51fd\u6570\u6709 this \u6307\u9488\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2d\u7684\u4efb\u610f\u6210\u5458\uff1b\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff08\u5305\u62ec\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\uff09\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8bbf\u95ee\u9759\u6001\u6210\u5458\u3002\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u5728\u58f0\u660e\u65f6\u8981\u52a0 static\uff0c\u5728\u5b9a\u4e49\u65f6\u4e0d\u80fd\u52a0 static\u3002 const\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570 \u00b6 \u521d\u59cb\u5316 const \u6210\u5458\u53d8\u91cf\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 const \u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u4fee\u6539\u5b83\u4eec\u7684\u503c\uff0c\u8fd9\u79cd\u63aa\u65bd\u4e3b\u8981\u8fd8\u662f\u4e3a\u4e86\u4fdd\u62a4\u6570\u636e\u800c\u8bbe\u7f6e\u7684\u3002const \u6210\u5458\u51fd\u6570\u4e5f\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002 \u5e38\u6210\u5458\u51fd\u6570\u9700\u8981\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u7684\u65f6\u5019\u5728\u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u5173\u952e\u5b57\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Student { public : Student ( char * name , int age , float score ); void show (); //\u58f0\u660e\u5e38\u6210\u5458\u51fd\u6570 char * getname () const ; int getage () const ; float getscore () const ; private : char * m_name ; int m_age ; float m_score ; }; Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } //\u5b9a\u4e49\u5e38\u6210\u5458\u51fd\u6570 char * Student :: getname () const { return m_name ; } int Student :: getage () const { return m_age ; } float Student :: getscore () const { return m_score ; } \u51fd\u6570\u5f00\u5934\u7684 const \u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8868\u793a\u8fd4\u56de\u503c\u662f const \u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f8b\u5982const char * getname()\u3002 \u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u8868\u793a\u5e38\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u79cd\u51fd\u6570\u53ea\u80fd\u8bfb\u53d6\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u80fd\u4fee\u6539\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u4f8b\u5982char * getname() const\u3002 const\u5bf9\u8c61 \u00b6 const\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u5bf9\u8c61\uff0c\u79f0\u4e3a\u5e38\u5bf9\u8c61\u3002\u53ea\u80fd\u8c03\u7528\u7c7b\u7684 const\u6210\u5458\uff08\u5305\u62ecconst\u6210\u5458\u53d8\u91cf\u548cconst\u6210\u5458\u51fd\u6570\uff09\u4e86\u3002 1 2 3 4 5 const class object ( params ); class const object ( params ); const class * p = new class ( params ); class const * p = new class ( params ); friend\u53cb\u5143\u51fd\u6570\u4e0e\u53cb\u5143\u7c7b \u00b6 \u53cb\u5143\u7684\u5173\u7cfb\u662f\u5355\u5411\u7684\u800c\u4e0d\u662f\u53cc\u5411\u7684\u3002 \u53cb\u5143\u7684\u5173\u7cfb\u4e0d\u80fd\u4f20\u9012\u3002 \u4e00\u822c\u4e0d\u5efa\u8bae\u628a\u6574\u4e2a\u7c7b\u58f0\u660e\u4e3a\u53cb\u5143\u7c7b\uff0c\u800c\u53ea\u5c06\u67d0\u4e9b\u6210\u5458\u51fd\u6570\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\u3002 \u53cb\u5143\u51fd\u6570 \u00b6 \u5f53\u524d\u7c7b\u4ee5\u5916\u5b9a\u4e49\u7684\u3001\u4e0d\u5c5e\u4e8e\u5f53\u524d\u7c7b\u7684\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u7c7b\u4e2d\u58f0\u660e\uff0c\u4f46\u8981\u5728\u524d\u9762\u52a0friend\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u53cb\u5143\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u662f\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u7684\u975e\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec public\u3001protected\u3001private \u5c5e\u6027\u7684\u3002 \u53cb\u5143\u51fd\u6570\u4e0d\u540c\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6210\u5458\u51fd\u6570\u5728\u8c03\u7528\u65f6\u4f1a\u9690\u5f0f\u5730\u589e\u52a0 this\u6307\u9488\uff0c\u6307\u5411\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\uff0c\u5728\u53cb\u5143\u51fd\u6570\u4e2d\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u5fc5\u987b\u8981\u501f\u52a9\u5bf9\u8c61\u3002 \u53cb\u5143\u51fd\u6570\uff1a\u6709\u65f6\u5019\u7c7b\u9700\u8981\u63d0\u524d\u58f0\u660e\uff0c\u7c7b\u7684\u63d0\u524d\u58f0\u660e\u7684\u4f7f\u7528\u8303\u56f4\u662f\u6709\u9650\u7684\uff0c\u53ea\u6709\u5728\u6b63\u5f0f\u58f0\u660e\u4e00\u4e2a\u7c7b\u4ee5\u540e\u624d\u80fd\u7528\u5b83\u53bb\u521b\u5efa\u5bf9\u8c61\u3002 \u53cb\u5143\u7c7b \u00b6 \u53cb\u5143\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u90fd\u662f\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <iostream> using namespace std ; class Address ; //\u63d0\u524d\u58f0\u660eAddress\u7c7b //\u58f0\u660eStudent\u7c7b class Student { public : Student ( char * name , int age , float score ); public : void show ( Address * addr ); private : char * m_name ; int m_age ; float m_score ; }; //\u58f0\u660eAddress\u7c7b class Address { public : Address ( char * province , char * city , char * district ); public : //\u5c06Student\u7c7b\u58f0\u660e\u4e3aAddress\u7c7b\u7684\u53cb\u5143\u7c7b friend class Student ; private : char * m_province ; //\u7701\u4efd char * m_city ; //\u57ce\u5e02 char * m_district ; //\u533a\uff08\u5e02\u533a\uff09 }; //\u5b9e\u73b0Student\u7c7b Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show ( Address * addr ){ cout << m_name << \"\u7684\u5e74\u9f84\u662f \" << m_age << \"\uff0c\u6210\u7ee9\u662f \" << m_score << endl ; cout << \"\u5bb6\u5ead\u4f4f\u5740\uff1a\" << addr -> m_province << \"\u7701\" << addr -> m_city << \"\u5e02\" << addr -> m_district << \"\u533a\" << endl ; } //\u5b9e\u73b0Address\u7c7b Address :: Address ( char * province , char * city , char * district ){ m_province = province ; m_city = city ; m_district = district ; } int main (){ Student stu ( \"\u5c0f\u660e\" , 16 , 95.5f ); Address addr ( \"\u9655\u897f\" , \"\u897f\u5b89\" , \"\u96c1\u5854\" ); stu . show ( & addr ); Student * pstu = new Student ( \"\u674e\u78ca\" , 16 , 80.5 ); Address * paddr = new Address ( \"\u6cb3\u5317\" , \"\u8861\u6c34\" , \"\u6843\u57ce\" ); pstu -> show ( paddr ); return 0 ; } string\u7c7b \u00b6 string\u7c7b\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f6c\u6362\u51fd\u6570c_str()\uff0c\u8be5\u51fd\u6570\u80fd\u591f\u5c06 string\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aC\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002 1 2 string path = \"D: \\\\ demo.txt\" ; FILE * fp = fopen ( path . c_str (), \"rt\" ); C++\u5f15\u7528 \u00b6 \u5f15\u7528\u5728\u5b9a\u4e49\u65f6\u9700\u8981\u6dfb\u52a0&\uff0c\u5728\u4f7f\u7528\u65f6\u4e0d\u80fd\u6dfb\u52a0&\uff0c\u4f7f\u7528\u65f6\u6dfb\u52a0&\u8868\u793a\u53d6\u5730\u5740\u3002\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u7684\u540c\u65f6\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u4ee5\u540e\u4e5f\u8981\u4ece\u4e00\u800c\u7ec8\uff0c\u4e0d\u80fd\u518d\u5f15\u7528\u5176\u5b83\u6570\u636e\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5e38\u91cf\uff08const \u53d8\u91cf\uff09\u3002 \u5f15\u7528\u53ea\u662f\u5bf9\u6307\u9488\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u5b83\u7684\u5e95\u5c42\u4f9d\u7136\u662f\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u5f15\u7528\u5360\u7528\u7684\u5185\u5b58\u548c\u6307\u9488\u5360\u7528\u7684\u5185\u5b58\u957f\u5ea6\u4e00\u6837\uff0c\u5728 32 \u4f4d\u73af\u5883\u4e0b\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5728 64 \u4f4d\u73af\u5883\u4e0b\u662f 8 \u4e2a\u5b57\u8282\uff0c\u4e4b\u6240\u4ee5\u4e0d\u80fd\u83b7\u53d6\u5f15\u7528\u7684\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fdb\u884c\u4e86\u5185\u90e8\u8f6c\u6362\u3002 \u6307\u9488\u548c\u5f15\u7528\u7684\u533a\u522b \u00b6 \u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u65f6\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u6570\u636e\uff1b\u6307\u9488\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u6307\u9488\u5728\u5b9a\u4e49\u65f6\u4e0d\u5fc5\u8d4b\u503c\uff0c\u4e5f\u80fd\u6307\u5411\u4efb\u610f\u6570\u636e\u3002 \u6709 const \u6307\u9488\uff0c\u4f46\u662f\u6ca1\u6709 const \u5f15\u7528\u3002 \u6307\u9488\u53ef\u4ee5\u6709\u591a\u7ea7\uff0c\u4f46\u662f\u5f15\u7528\u53ea\u80fd\u6709\u4e00\u7ea7\u3002 \u3002\u5bf9\u6307\u9488\u4f7f\u7528++\u8868\u793a\u6307\u5411\u4e0b\u4e00\u4efd\u6570\u636e\uff0c\u5bf9\u5f15\u7528\u4f7f\u7528 ++ \u8868\u793a\u5b83\u6240\u6307\u4ee3\u7684\u6570\u636e\u672c\u8eab\u52a01\uff0c\u81ea\u51cf\uff08--\uff09\u4e5f\u662f\u3002 const\u548c\u5f15\u7528\u7684\u5947\u5999\u53cd\u5e94 \u00b6 \u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e \u00b6 \u6307\u9488\u5c31\u662f\u6570\u636e\u6216\u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u6216\u4ee3\u7801\u3002\u6307\u9488\u53ea\u80fd\u6307\u5411\u5185\u5b58\uff0c\u4e0d\u80fd\u6307\u5411\u5bc4\u5b58\u5668\u6216\u8005\u786c\u76d8\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u548c\u786c\u76d8\u6ca1\u6cd5\u5bfb\u5740\u3002 int\u3001double\u3001bool\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e\u5f80\u5f80\u4e0d\u8d85\u8fc7 8 \u4e2a\u5b57\u8282\uff0c\u7528\u4e00\u4e24\u4e2a\u5bc4\u5b58\u5668\u5c31\u80fd\u5b58\u50a8\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\uff1b\u800c\u5bf9\u8c61\u3001\u7ed3\u6784\u4f53\u53d8\u91cf\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5927\u5c0f\u4e0d\u53ef\u9884\u6d4b\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5185\u5b58\u4e2d\u3002 \u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u867d\u7136\u5728\u5185\u5b58\u4e2d\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u5bfb\u5740\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u4f7f\u7528&\u6765\u83b7\u53d6\u5b83\u7684\u5730\u5740\uff0c\u66f4\u4e0d\u80fd\u7528\u6307\u9488\u6307\u5411\u5b83\u3002 \u5f15\u7528\u4e0d\u80fd\u6307\u4ee3\u4e34\u65f6\u6570\u636e\u5982\u51fd\u6570\u53c2\u6570\u7b49\u3002 \u4e34\u65f6\u6570\u636e\uff0c\u4f8b\u5982\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3001\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u4e5f\u53ef\u80fd\u4f1a\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u4e00\u65e6\u5b83\u4eec\u88ab\u653e\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5c31\u6ca1\u6cd5\u7528&\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\u4e86\uff0c\u4e5f\u5c31\u6ca1\u6cd5\u7528\u6307\u9488\u6307\u5411\u5b83\u4eec\u3002 \u7f16\u8bd1\u5668\u4f1a\u4e3a\u4e34\u65f6\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u65e0\u540d\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u5e76\u5c06\u4e34\u65f6\u6570\u636e\u653e\u5165\u8be5\u4e34\u65f6\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u518d\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u8be5\u4e34\u65f6\u53d8\u91cf\u3002 \u7ed9\u5f15\u7528\u6dfb\u52a0 const \u9650\u5b9a\u540e\uff0c\u4e0d\u4f46\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u7c7b\u578b\u76f8\u8fd1\u7684\u6570\u636e(const\u5f15\u7528\u4e0e\u8f6c\u6362\u7c7b\u578b)\uff0c\u5b83\u4eec\u80cc\u540e\u7684\u673a\u5236\u90fd\u662f\u4e34\u65f6\u53d8\u91cf\u3002 \u5f15\u7528\u7c7b\u578b\u7684\u51fd\u6570\u5f62\u53c2\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528const\u3002 \u7ee7\u627f\u4e0e\u6d3e\u751f \u00b6 1 2 3 class \u6d3e\u751f\u7c7b\u540d:\uff3b\u7ee7\u627f\u65b9\u5f0f\uff3d \u57fa\u7c7b\u540d{ \u6d3e\u751f\u7c7b\u65b0\u589e\u52a0\u7684\u6210\u5458 }; 1) public\u7ee7\u627f\u65b9\u5f0f 1. \u57fa\u7c7b\u4e2d\u6240\u6709 public \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e3a public \u5c5e\u6027\uff1b 2. \u57fa\u7c7b\u4e2d\u6240\u6709 protected \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e3a protected \u5c5e\u6027\uff1b 3. \u57fa\u7c7b\u4e2d\u6240\u6709 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u80fd\u4f7f\u7528\u3002 2) protected\u7ee7\u627f\u65b9\u5f0f 1. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 public \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e3a protected \u5c5e\u6027\uff1b 2. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 protected \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e3a protected \u5c5e\u6027\uff1b 3. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u80fd\u4f7f\u7528\u3002 3) private\u7ee7\u627f\u65b9\u5f0f 1. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 public \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5747\u4e3a private \u5c5e\u6027\uff1b 2. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 protected \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5747\u4e3a private \u5c5e\u6027\uff1b 3. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u80fd\u4f7f\u7528\u3002 \u4e0d\u7ba1\u7ee7\u627f\u65b9\u5f0f\u5982\u4f55\uff0c\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u59cb\u7ec8\u4e0d\u80fd\u4f7f\u7528\u3002\u57fa\u7c7b\u7684 private \u6210\u5458\u662f\u80fd\u591f\u88ab\u7ee7\u627f\u7684\uff0c\u5e76\u4e14\uff08\u6210\u5458\u53d8\u91cf\uff09\u4f1a\u5360\u7528\u6d3e\u751f\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u53ea\u662f\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u53ef\u89c1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528\u3002 \u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\u57fa\u7c7b private \u6210\u5458\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u501f\u52a9\u57fa\u7c7b\u7684\u975e private \u6210\u5458\u51fd\u6570\uff0c\u5982\u679c\u57fa\u7c7b\u6ca1\u6709\u975e private \u6210\u5458\u51fd\u6570\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5c06\u65e0\u6cd5\u8bbf\u95ee\u3002 using \u53ea\u80fd\u6539\u53d8\u57fa\u7c7b\u4e2d public \u548c protected \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0d\u80fd\u6539\u53d8 private \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u56e0\u4e3a\u57fa\u7c7b\u4e2d private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6839\u672c\u4e0d\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u8bbf\u95ee\u3002 \u5982\u679c\u6d3e\u751f\u7c7b\u4e2d\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\uff09\u548c\u57fa\u7c7b\u4e2d\u7684\u6210\u5458\u91cd\u540d\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u4ece\u57fa\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684\u6210\u5458\u3002 \u57fa\u7c7b\u6210\u5458\u51fd\u6570\u548c\u6d3e\u751f\u7c7b\u6210\u5458\u51fd\u6570\u4e0d\u4f1a\u6784\u6210\u91cd\u8f7d\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6709\u540c\u540d\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u540c\u540d\u51fd\u6570\uff0c\u4e0d\u7ba1\u5b83\u4eec\u7684\u53c2\u6570\u662f\u5426\u4e00\u6837\u3002 \u53ea\u6709\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u624d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\uff0c\u4e0d\u540c\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u662f\u4f1a\u9020\u6210\u906e\u853d\uff0c\u4f7f\u5f97\u5916\u5c42\u51fd\u6570\u65e0\u6548\u3002\u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u62e5\u6709\u4e0d\u540c\u7684\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u540c\u540d\u51fd\u6570\u4e0d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\u3002 \u7ee7\u627f\u7684\u4f5c\u7528\u57df\u5d4c\u5957 \u00b6 \u6d3e\u751f\u7c7b\u7684\u4f5c\u7528\u57df\u4f4d\u4e8e\u57fa\u7c7b\u4f5c\u7528\u57df\u4e4b\u5185 \u7ee7\u627f\u4e0b\u7684\u5185\u5b58\u6a21\u578b \u00b6 \u6709\u7ee7\u627f\u5173\u7cfb\u65f6\uff0c\u6d3e\u751f\u7c7b\u7684\u5185\u5b58\u6a21\u578b\u53ef\u4ee5\u770b\u6210\u662f\u57fa\u7c7b\u6210\u5458\u53d8\u91cf\u548c\u65b0\u589e\u6210\u5458\u53d8\u91cf\u7684\u603b\u548c\uff0c\u800c\u6240\u6709\u6210\u5458\u51fd\u6570\u4ecd\u7136\u5b58\u50a8\u5728\u53e6\u5916\u4e00\u4e2a\u533a\u57df\u2014\u2014\u4ee3\u7801\u533a\uff0c\u7531\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u6a21\u578b\u4e2d\uff0c\u4f1a\u5305\u542b\u6240\u6709\u57fa\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u6848\u7684\u4f18\u70b9\u662f\u8bbf\u95ee\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u5728\u6d3e\u751f\u7c7b\u5bf9\u8c61\u4e2d\u76f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u53d8\u91cf\uff0c\u65e0\u9700\u7ecf\u8fc7\u597d\u51e0\u5c42\u95f4\u63a5\u8ba1\u7b97\u3002 \u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570 \u00b6 \u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u603b\u662f\u5148\u8c03\u7528\u57fa\u7c7b\u6784\u9020\u51fd\u6570\u518d\u6267\u884c\u5176\u4ed6\u4ee3\u7801\uff08\u5305\u62ec\u53c2\u6570\u521d\u59cb\u5316\u8868\u4ee5\u53ca\u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\uff09 \u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u521b\u5efa\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u540c\uff0c\u5373\u5148\u6267\u884c\u57fa\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u518d\u6267\u884c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u3002 \u800c\u9500\u6bc1\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6267\u884c\u6d3e\u751f\u7c7b\u6790\u6784\u51fd\u6570\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { public : A (){ cout << \"A constructor\" << endl ;} ~ A (){ cout << \"A destructor\" << endl ;} }; class B : public A { public : B (){ cout << \"B constructor\" << endl ;} ~ B (){ cout << \"B destructor\" << endl ;} }; class C : public B { public : C (){ cout << \"C constructor\" << endl ;} ~ C (){ cout << \"C destructor\" << endl ;} }; int main (){ C test ; return 0 ; } \u591a\u7ee7\u627f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class D : public A , private B , protected C { //\u7c7bD\u65b0\u589e\u52a0\u7684\u6210\u5458 } D ( \u5f62\u53c2\u5217\u8868 ) : A ( \u5b9e\u53c2\u5217\u8868 ), B ( \u5b9e\u53c2\u5217\u8868 ), C ( \u5b9e\u53c2\u5217\u8868 ){ //\u5176\u4ed6\u64cd\u4f5c } #include <iostream> using namespace std ; //\u57fa\u7c7b class BaseA { public : BaseA ( int a , int b ); ~ BaseA (); public : void show (); protected : int m_a ; int m_b ; }; BaseA :: BaseA ( int a , int b ) : m_a ( a ), m_b ( b ){ cout << \"BaseA constructor\" << endl ; } BaseA ::~ BaseA (){ cout << \"BaseA destructor\" << endl ; } void BaseA :: show (){ cout << \"m_a = \" << m_a << endl ; cout << \"m_b = \" << m_b << endl ; } //\u57fa\u7c7b class BaseB { public : BaseB ( int c , int d ); ~ BaseB (); void show (); protected : int m_c ; int m_d ; }; BaseB :: BaseB ( int c , int d ) : m_c ( c ), m_d ( d ){ cout << \"BaseB constructor\" << endl ; } BaseB ::~ BaseB (){ cout << \"BaseB destructor\" << endl ; } void BaseB :: show (){ cout << \"m_c = \" << m_c << endl ; cout << \"m_d = \" << m_d << endl ; } //\u6d3e\u751f\u7c7b class Derived : public BaseA , public BaseB { public : Derived ( int a , int b , int c , int d , int e ); ~ Derived (); public : void display (); private : int m_e ; }; Derived :: Derived ( int a , int b , int c , int d , int e ) : BaseA ( a , b ), BaseB ( c , d ), m_e ( e ){ cout << \"Derived constructor\" << endl ; } Derived ::~ Derived (){ cout << \"Derived destructor\" << endl ; } void Derived :: display (){ BaseA :: show (); //\u8c03\u7528BaseA\u7c7b\u7684show()\u51fd\u6570 BaseB :: show (); //\u8c03\u7528BaseB\u7c7b\u7684show()\u51fd\u6570 cout << \"m_e = \" << m_e << endl ; } int main (){ Derived obj ( 1 , 2 , 3 , 4 , 5 ); obj . display (); return 0 ; } \u547d\u540d\u51b2\u7a81\u65f6\u4f7f\u7528\u57df\u89e3\u6790\u7b26\u3002 \u865a\u7ee7\u627f\u548c\u865a\u57fa\u7c7b\u8be6\u89e3 \u00b6 \u83f1\u5f62\u7ee7\u627f \u4e3a\u4e86\u89e3\u51b3\u591a\u7ee7\u627f\u65f6\u7684\u547d\u540d\u51b2\u7a81\u548c\u5197\u4f59\u6570\u636e\u95ee\u9898\uff0cC++ \u63d0\u51fa\u4e86\u865a\u7ee7\u627f\uff0c\u4f7f\u5f97\u5728\u6d3e\u751f\u7c7b\u4e2d\u53ea\u4fdd\u7559\u4e00\u4efd\u95f4\u63a5\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u865a\u7ee7\u627f\u7684\u76ee\u7684\u662f\u8ba9\u67d0\u4e2a\u7c7b\u505a\u51fa\u58f0\u660e\uff0c\u627f\u8bfa\u613f\u610f\u5171\u4eab\u5b83\u7684\u57fa\u7c7b\u3002\u5176\u4e2d\uff0c\u8fd9\u4e2a\u88ab\u5171\u4eab\u7684\u57fa\u7c7b\u5c31\u79f0\u4e3a\u865a\u57fa\u7c7b\uff08Virtual Base Class\uff09\uff0c\u672c\u4f8b\u4e2d\u7684 A \u5c31\u662f\u4e00\u4e2a\u865a\u57fa\u7c7b\u3002\u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c\u4e0d\u8bba\u865a\u57fa\u7c7b\u5728\u7ee7\u627f\u4f53\u7cfb\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u90fd\u53ea\u5305\u542b\u4e00\u4efd\u865a\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u5bf9\u6700\u7ec8\u7684\u6d3e\u751f\u7c7b\u6765\u8bf4\uff0c\u865a\u57fa\u7c7b\u662f\u95f4\u63a5\u57fa\u7c7b\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u57fa\u7c7b\u3002\u8fd9\u8ddf\u666e\u901a\u7ee7\u627f\u4e0d\u540c\uff0c\u5728\u666e\u901a\u7ee7\u627f\u4e2d\uff0c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u7c7b\u5176\u5b9e\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u53d1\u751f\u6570\u636e\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u8f6c\u6362\u53ea\u6709\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u624d\u6709\u610f\u4e49\uff0c\u5e76\u4e14\u53ea\u80fd\u5c06\u6d3e\u751f\u7c7b\u8d4b\u503c\u7ed9\u57fa\u7c7b\uff0c\u5305\u62ec\u5c06\u6d3e\u751f\u7c7b\u5bf9\u8c61\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5bf9\u8c61\u3001\u5c06\u6d3e\u751f\u7c7b\u6307\u9488\u8d4b\u503c\u7ed9\u57fa\u7c7b\u6307\u9488\u3001\u5c06\u6d3e\u751f\u7c7b\u5f15\u7528\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5f15\u7528\uff0c\u8fd9\u5728 C++ \u4e2d\u79f0\u4e3a\u5411\u4e0a\u8f6c\u578b\uff08Upcasting\uff09\u3002\u76f8\u5e94\u5730\uff0c\u5c06\u57fa\u7c7b\u8d4b\u503c\u7ed9\u6d3e\u751f\u7c7b\u79f0\u4e3a\u5411\u4e0b\u8f6c\u578b\uff08Downcasting\uff09\u3002 \u8d4b\u503c\u7684\u672c\u8d28\u662f\u5c06\u73b0\u6709\u7684\u6570\u636e\u5199\u5165\u5df2\u5206\u914d\u597d\u7684\u5185\u5b58\u4e2d\uff0c\u5bf9\u8c61\u7684\u5185\u5b58\u53ea\u5305\u542b\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u6240\u4ee5\u5bf9\u8c61\u4e4b\u95f4\u7684\u8d4b\u503c\u662f\u6210\u5458\u53d8\u91cf\u7684\u8d4b\u503c\uff0c\u6210\u5458\u51fd\u6570\u4e0d\u5b58\u5728\u8d4b\u503c\u95ee\u9898\u3002 \u591a\u6001\u4e0e\u865a\u51fd\u6570 \u00b6 \u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u53ea\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002 \u8ba9\u57fa\u7c7b\u6307\u9488\u80fd\u591f\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0cC++ \u589e\u52a0\u4e86\u865a\u51fd\u6570\uff08Virtual Function\uff09\u3002\u4f7f\u7528\u865a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u58f0\u660e\u524d\u9762\u589e\u52a0 virtual \u5173\u952e\u5b57\u3002 \u6709\u4e86\u865a\u51fd\u6570\uff0c\u57fa\u7c7b\u6307\u9488\u6307\u5411\u57fa\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u57fa\u7c7b\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\uff09\uff0c\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u6309\u7167\u57fa\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u6d3e\u751f\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u5b83\u6709\u591a\u79cd\u5f62\u6001\uff0c\u6216\u8005\u8bf4\u6709\u591a\u79cd\u8868\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u591a\u6001\uff08Polymorphism\uff09\u3002 \u865a\u51fd\u6570\u7684\u6ce8\u610f\u4e8b\u9879 1. \u53ea\u9700\u8981\u5728\u865a\u51fd\u6570\u7684\u58f0\u660e\u5904\u52a0\u4e0a virtual \u5173\u952e\u5b57\uff0c\u51fd\u6570\u5b9a\u4e49\u5904\u53ef\u4ee5\u52a0\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u3002 \u53ef\u4ee5\u53ea\u5c06\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u8fd9\u6837\u6240\u6709\u6d3e\u751f\u7c7b\u4e2d\u5177\u6709\u906e\u853d\u5173\u7cfb\u7684\u540c\u540d\u51fd\u6570\u90fd\u5c06\u81ea\u52a8\u6210\u4e3a\u865a\u51fd\u6570\u3002 \u5f53\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u865a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u5b9a\u4e49\u65b0\u7684\u51fd\u6570\u6765\u906e\u853d\u6b64\u51fd\u6570\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u3002 \u53ea\u6709\u6d3e\u751f\u7c7b\u7684\u865a\u51fd\u6570\u8986\u76d6\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u624d\u80fd\u6784\u6210\u591a\u6001\uff08\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u8bbf\u95ee\u6d3e\u751f\u7c7b\u51fd\u6570\uff09\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u800c\u4e14\u6709\u65f6\u5019\u5fc5\u987b\u8981\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u6784\u6210\u591a\u6001\u7684\u6761\u4ef6 1. \u5fc5\u987b\u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff1b 2. \u7ee7\u627f\u5173\u7cfb\u4e2d\u5fc5\u987b\u6709\u540c\u540d\u7684\u865a\u51fd\u6570\uff0c\u5e76\u4e14\u5b83\u4eec\u662f\u8986\u76d6\u5173\u7cfb\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u3002 3. \u5b58\u5728\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u901a\u8fc7\u8be5\u6307\u9488\u8c03\u7528\u865a\u51fd\u6570\u3002 \u865a\u6790\u6784\u51fd\u6570\u7684\u5fc5\u8981\u6027 \u00b6 \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 1 2 3 4 5 6 7 class Base { public : Base (); virtual ~ Base (); protected : char * str ; }; \u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u8be6\u89e3 \u00b6 1 virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) = 0 ; \u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u53ea\u6709\u51fd\u6570\u58f0\u660e\uff0c\u5728\u865a\u51fd\u6570\u58f0\u660e\u7684\u7ed3\u5c3e\u52a0\u4e0a=0\uff0c\u8868\u660e\u6b64\u51fd\u6570\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08Abstract Class\uff09\u3002\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u65e0\u6cd5\u5b9e\u4f8b\u5316\u3002\u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u624d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u62bd\u8c61\u57fa\u7c7b\u9664\u4e86\u7ea6\u675f\u6d3e\u751f\u7c7b\u7684\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u591a\u6001\u3002 \u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7c7b\u6210\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u4f46\u662f\u62bd\u8c61\u57fa\u7c7b\u4e2d\u9664\u4e86\u5305\u542b\u7eaf\u865a\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u5176\u5b83\u7684\u6210\u5458\u51fd\u6570\uff08\u865a\u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\uff09\u548c\u6210\u5458\u53d8\u91cf\u3002 \u53ea\u6709\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\u624d\u80fd\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u666e\u901a\u6210\u5458\u51fd\u6570\u548c\u9876\u5c42\u51fd\u6570\u5747\u4e0d\u80fd\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u865a\u51fd\u6570\u8868 \u00b6 \u7f16\u8bd1\u5668\u4e4b\u6240\u4ee5\u80fd\u901a\u8fc7\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u627e\u5230\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u989d\u5916\u5730\u589e\u52a0\u4e86\u865a\u51fd\u6570\u8868\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5305\u542b\u4e86\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u5728\u521b\u5efa\u8be5\u7c7b\u7684\u5bf9\u8c61\u65f6\u5c31\u4f1a\u989d\u5916\u5730\u589e\u52a0\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u865a\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\u3002\u4e0d\u8fc7\u6570\u7ec4\u548c\u5bf9\u8c61\u662f\u5206\u5f00\u5b58\u50a8\u7684\uff0c\u4e3a\u4e86\u5c06\u5bf9\u8c61\u548c\u6570\u7ec4\u5173\u8054\u8d77\u6765\uff0c\u7f16\u8bd1\u5668\u8fd8\u8981\u5728\u5bf9\u8c61\u4e2d\u5b89\u63d2\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u6570\u7ec4\u5c31\u662f\u865a\u51fd\u6570\u8868\uff08Virtual function table\uff09\uff0c\u7b80\u5199\u4e3avtable\u3002 typeid\u8fd0\u7b97\u7b26\u4e0eRTTI\u673a\u5236 \u00b6 typeid \u8fd0\u7b97\u7b26\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u7c7b\u578b\u4fe1\u606f\u662f\u521b\u5efa\u6570\u636e\u7684\u6a21\u677f\uff0c\u6570\u636e\u5360\u7528\u591a\u5927\u5185\u5b58\u3001\u80fd\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c\u3001\u8be5\u5982\u4f55\u64cd\u4f5c\u7b49\uff0c\u8fd9\u4e9b\u90fd\u7531\u5b83\u7684\u7c7b\u578b\u4fe1\u606f\u51b3\u5b9a\u3002 \u8fd9\u79cd\u5728\u7a0b\u5e8f\u8fd0\u884c\u540e\u786e\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u4fe1\u606f\u7684\u673a\u5236\u79f0\u4e3a\u8fd0\u884c\u65f6\u7c7b\u578b\u8bc6\u522b\uff08Run-Time Type Identification\uff0cRTTI\uff09\u3002\u5728 C++ \u4e2d\uff0c\u53ea\u6709\u7c7b\u4e2d\u5305\u542b\u4e86\u865a\u51fd\u6570\u65f6\u624d\u4f1a\u542f\u7528 RTTI \u673a\u5236\uff0c\u5176\u4ed6\u6240\u6709\u60c5\u51b5\u90fd\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u786e\u5b9a\u7c7b\u578b\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> using namespace std ; //\u57fa\u7c7b class People { public : virtual void func (){ } }; //\u6d3e\u751f\u7c7b class Student : public People { }; int main (){ People * p ; int n ; cin >> n ; if ( n <= 100 ){ p = new People (); } else { p = new Student (); } //\u6839\u636e\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c if ( typeid ( * p ) == typeid ( People )){ cout << \"I am human.\" << endl ; } else { cout << \"I am a student.\" << endl ; } return 0 ; } \u9664\u4e86 typeid \u8fd0\u7b97\u7b26\uff0cdynamic_cast \u8fd0\u7b97\u7b26\u548c\u5f02\u5e38\u5904\u7406\u4e5f\u4f9d\u8d56\u4e8e RTTI \u673a\u5236\uff0c\u5e76\u4e14\u8981\u80fd\u591f\u901a\u8fc7\u6d3e\u751f\u7c7b\u83b7\u53d6\u57fa\u7c7b\u7684\u4fe1\u606f\uff0c\u6216\u8005\u8bf4\u8981\u80fd\u591f\u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\uff0c\u8981\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u518d\u589e\u52a0\u4e00\u6761\u7ef3\u7d22\u3002\u79f0\u6b64\u4e3a\u7ee7\u627f\u94fe\uff08Inheritance Chain\uff09\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d \u00b6 1 2 3 \u8fd4\u56de\u503c\u7c7b\u578b operator \u8fd0\u7b97\u7b26\u540d\u79f0 ( \u5f62\u53c2\u8868\u5217 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> using namespace std ; class complex { public : complex (); complex ( double real , double imag ); public : //\u58f0\u660e\u8fd0\u7b97\u7b26\u91cd\u8f7d complex operator + ( const complex & A ) const ; void display () const ; private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; complex :: complex () : m_real ( 0.0 ), m_imag ( 0.0 ){ } complex :: complex ( double real , double imag ) : m_real ( real ), m_imag ( imag ){ } //\u5b9e\u73b0\u8fd0\u7b97\u7b26\u91cd\u8f7d complex complex :: operator + ( const complex & A ) const { complex B ; B . m_real = this -> m_real + A . m_real ; B . m_imag = this -> m_imag + A . m_imag ; return B ; } void complex :: display () const { cout << m_real << \" + \" << m_imag << \"i\" << endl ; } int main (){ complex c1 ( 4.3 , 5.8 ); complex c2 ( 2.4 , 3.7 ); complex c3 ; c3 = c1 + c2 ; c3 . display (); return 0 ; } 1 2 c3 = c1 + c2 ; c3 = c1 . operator + ( c2 ); \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570--->\u53cb\u5143\u51fd\u6570\u3002 \u91cd\u8f7d\u4e0d\u80fd\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u6027\u3002 \u91cd\u8f7d\u4e0d\u4f1a\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u7528\u6cd5\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u80fd\u6709\u9ed8\u8ba4\u7684\u53c2\u6570\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570\u3002 \u7bad\u5934\u8fd0\u7b97\u7b26->\u3001\u4e0b\u6807\u8fd0\u7b97\u7b26[ ]\u3001\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26( )\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26=\u53ea\u80fd\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d\u3002 \u6a21\u677f\u548c\u6cdb\u578b \u00b6 \u6a21\u677f\u51fd\u6570 1 2 3 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , ... > \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //\u5728\u51fd\u6570\u4f53\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u53c2\u6570 } \u7c7b\u6a21\u677f 1 2 3 4 5 6 7 8 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > class \u7c7b\u540d{ //TODO: }; template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > \u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d < \u7c7b\u578b\u53c2\u6570 1 , \u7c7b\u578b\u53c2\u6570 2 , ... >:: \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> using namespace std ; template < class T1 , class T2 > //\u8fd9\u91cc\u4e0d\u80fd\u6709\u5206\u53f7 class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const ; //\u83b7\u53d6x\u5750\u6807 void setX ( T1 x ); //\u8bbe\u7f6ex\u5750\u6807 T2 getY () const ; //\u83b7\u53d6y\u5750\u6807 void setY ( T2 y ); //\u8bbe\u7f6ey\u5750\u6807 private : T1 m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < class T1 , class T2 > //\u6a21\u677f\u5934 T1 Point < T1 , T2 >:: getX () const /*\u51fd\u6570\u5934*/ { return m_x ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setX ( T1 x ){ m_x = x ; } template < class T1 , class T2 > T2 Point < T1 , T2 >:: getY () const { return m_y ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setY ( T2 y ){ m_y = y ; } int main (){ Point < int , int > p1 ( 10 , 20 ); cout << \"x=\" << p1 . getX () << \", y=\" << p1 . getY () << endl ; Point < int , char *> p2 ( 10 , \"\u4e1c\u7ecf180\u5ea6\" ); cout << \"x=\" << p2 . getX () << \", y=\" << p2 . getY () << endl ; Point < char * , char *> * p3 = new Point < char * , char *> ( \"\u4e1c\u7ecf180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ); cout << \"x=\" << p3 -> getX () << \", y=\" << p3 -> getY () << endl ; return 0 ; } \u53ef\u8fb9\u957f\u6570\u7ec4\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> #include <cstring> using namespace std ; template < class T > class CArray { int size ; //\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 T * ptr ; //\u6307\u5411\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4 public : CArray ( int s = 0 ); //s\u4ee3\u8868\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 CArray ( CArray & a ); ~ CArray (); void push_back ( const T & v ); //\u7528\u4e8e\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20v CArray & operator = ( const CArray & a ); //\u7528\u4e8e\u6570\u7ec4\u5bf9\u8c61\u95f4\u7684\u8d4b\u503c T length () { return size ; } T & operator []( int i ) { //\u7528\u4ee5\u652f\u6301\u6839\u636e\u4e0b\u6807\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\uff0c\u5982a[i] = 4;\u548cn = a[i]\u8fd9\u6837\u7684\u8bed\u53e5 return ptr [ i ]; } }; template < class T > CArray < T >:: CArray ( int s ) : size ( s ) { if ( s == 0 ) ptr = NULL ; else ptr = new T [ s ]; } template < class T > CArray < T >:: CArray ( CArray & a ) { if ( ! a . ptr ) { ptr = NULL ; size = 0 ; return ; } ptr = new T [ a . size ]; memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; } template < class T > CArray < T >::~ CArray () { if ( ptr ) delete [] ptr ; } template < class T > CArray < T > & CArray < T >:: operator = ( const CArray & a ) { //\u8d4b\u503c\u53f7\u7684\u4f5c\u7528\u662f\u4f7f\"=\"\u5de6\u8fb9\u5bf9\u8c61\u91cc\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u548c\u5185\u5bb9\u90fd\u548c\u53f3\u8fb9\u7684\u5bf9\u8c61\u4e00\u6837 if ( this == & a ) //\u9632\u6b62a=a\u8fd9\u6837\u7684\u8d4b\u503c\u5bfc\u81f4\u51fa\u9519 return * this ; if ( a . ptr == NULL ) { //\u5982\u679ca\u91cc\u9762\u7684\u6570\u7ec4\u662f\u7a7a\u7684 if ( ptr ) delete [] ptr ; ptr = NULL ; size = 0 ; return * this ; } if ( size < a . size ) { //\u5982\u679c\u539f\u6709\u7a7a\u95f4\u591f\u5927\uff0c\u5c31\u4e0d\u7528\u5206\u914d\u65b0\u7684\u7a7a\u95f4 if ( ptr ) delete [] ptr ; ptr = new T [ a . size ]; } memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; return * this ; } template < class T > void CArray < T >:: push_back ( const T & v ) { //\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 if ( ptr ) { T * tmpPtr = new T [ size + 1 ]; //\u91cd\u65b0\u5206\u914d\u7a7a\u95f4 memcpy ( tmpPtr , ptr , sizeof ( T ) * size ); //\u62f7\u8d1d\u539f\u6570\u7ec4\u5185\u5bb9 delete [] ptr ; ptr = tmpPtr ; } else //\u6570\u7ec4\u672c\u6765\u662f\u7a7a\u7684 ptr = new T [ 1 ]; ptr [ size ++ ] = v ; //\u52a0\u5165\u65b0\u7684\u6570\u7ec4\u5143\u7d20 } int main () { CArray < int > a ; for ( int i = 0 ; i < 5 ; ++ i ) a . push_back ( i ); for ( int i = 0 ; i < a . length (); ++ i ) cout << a [ i ] << \" \" ; return 0 ; } \u91cd\u8f7d\u51fd\u6570\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> using namespace std ; template < class T > void Swap ( T & a , T & b ); //\u6a21\u677f\u2460\uff1a\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c template < typename T > void Swap ( T a [], T b [], int len ); //\u6a21\u677f\u2461\uff1a\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 void printArray ( int arr [], int len ); //\u6253\u5370\u6570\u7ec4\u5143\u7d20 int main (){ //\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c int m = 10 , n = 99 ; Swap ( m , n ); //\u5339\u914d\u6a21\u677f\u2460 cout << m << \", \" << n << endl ; //\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; int b [ 5 ] = { 10 , 20 , 30 , 40 , 50 }; int len = sizeof ( a ) / sizeof ( int ); //\u6570\u7ec4\u957f\u5ea6 Swap ( a , b , len ); //\u5339\u914d\u6a21\u677f\u2461 printArray ( a , len ); printArray ( b , len ); return 0 ; } template < class T > void Swap ( T & a , T & b ){ T temp = a ; a = b ; b = temp ; } template < typename T > void Swap ( T a [], T b [], int len ){ T temp ; for ( int i = 0 ; i < len ; i ++ ){ temp = a [ i ]; a [ i ] = b [ i ]; b [ i ] = temp ; } } void printArray ( int arr [], int len ){ for ( int i = 0 ; i < len ; i ++ ){ if ( i == len - 1 ){ cout << arr [ i ] << endl ; } else { cout << arr [ i ] << \", \" ; } } } \u4e3a\u51fd\u6570\u6a21\u677f\u663e\u5f0f\u5730\u6307\u660e\u5b9e\u53c2 \u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08Explicit Specialization\uff09 \u00b6 \u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> #include <string> using namespace std ; typedef struct { string name ; int age ; float score ; } STU ; //\u51fd\u6570\u6a21\u677f template < class T > const T & Max ( const T & a , const T & b ); //\u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9STU\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> const STU & Max < STU > ( const STU & a , const STU & b ); //\u91cd\u8f7d<< ostream & operator << ( ostream & out , const STU & stu ); int main (){ int a = 10 ; int b = 20 ; cout << Max ( a , b ) << endl ; STU stu1 = { \"\u738b\u660e\" , 16 , 95.5 }; STU stu2 = { \"\u5f90\u4eae\" , 17 , 90.0 }; cout << Max ( stu1 , stu2 ) << endl ; return 0 ; } template < class T > const T & Max ( const T & a , const T & b ){ return a > b ? a : b ; } template <> const STU & Max < STU > ( const STU & a , const STU & b ){ return a . score > b . score ? a : b ; } ostream & operator << ( ostream & out , const STU & stu ){ out << stu . name << \" , \" << stu . age << \" , \" << stu . score ; return out ; } \u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> class Point < char * , char *> { public : Point ( char * x , char * y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } char * getY () const { return m_y ; } void setY ( char * y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 char * m_y ; //y\u5750\u6807 }; //\u8fd9\u91cc\u4e0d\u80fd\u5e26\u6a21\u677f\u5934template<> void Point < char * , char *>:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < int , char *> ( 10 , \"\u4e1c\u4eac180\u5ea6\" ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; } \u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 template < typename T2 > class Point < char * , T2 > { public : Point ( char * x , T2 y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < typename T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < char * , T2 >:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < char * , int > ( \"\u4e1c\u4eac180\u5ea6\" , 10 ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; } \u975e\u7c7b\u578b\u53c2\u6570 \u00b6 1 2 template < typename T , int N > class Demo { }; template < class T , int N > void func ( T ( & arr )[ N ]); \u7c7b\u6a21\u677f\u4e2d\u4f7f\u7528\u975e\u7c7b\u578b\u53c2\u6570 \u00b6 \u52a8\u6001\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #include <iostream> #include <cstring> #include <cstdlib> using namespace std ; template < typename T , int N > class Array { public : Array (); ~ Array (); public : T & operator []( int i ); //\u91cd\u8f7d\u4e0b\u6807\u8fd0\u7b97\u7b26[] int length () const { return m_length ; } //\u83b7\u53d6\u6570\u7ec4\u957f\u5ea6 bool capacity ( int n ); //\u6539\u53d8\u6570\u7ec4\u5bb9\u91cf private : int m_length ; //\u6570\u7ec4\u7684\u5f53\u524d\u957f\u5ea6 int m_capacity ; //\u5f53\u524d\u5185\u5b58\u7684\u5bb9\u91cf\uff08\u80fd\u5bb9\u4e43\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff09 T * m_p ; //\u6307\u5411\u6570\u7ec4\u5185\u5b58\u7684\u6307\u9488 }; template < typename T , int N > Array < T , N >:: Array (){ m_p = new T [ N ]; m_capacity = m_length = N ; } template < typename T , int N > Array < T , N >::~ Array (){ delete [] m_p ; } template < typename T , int N > T & Array < T , N >:: operator []( int i ){ if ( i < 0 || i >= m_length ){ cout << \"Exception: Array index out of bounds!\" << endl ; } return m_p [ i ]; } template < typename T , int N > bool Array < T , N >:: capacity ( int n ){ if ( n > 0 ){ //\u589e\u5927\u6570\u7ec4 int len = m_length + n ; //\u589e\u5927\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len <= m_capacity ){ //\u73b0\u6709\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 m_length = len ; return true ; } else { //\u73b0\u6709\u5185\u5b58\u4e0d\u80fd\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 T * pTemp = new T [ m_length + 2 * n * sizeof ( T )]; //\u589e\u52a0\u7684\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3 2*n \u4e2a\u5143\u7d20 if ( pTemp == NULL ){ //\u5185\u5b58\u5206\u914d\u5931\u8d25 cout << \"Exception: Failed to allocate memory!\" << endl ; return false ; } else { //\u5185\u5b58\u5206\u914d\u6210\u529f memcpy ( pTemp , m_p , m_length * sizeof ( T ) ); delete [] m_p ; m_p = pTemp ; m_capacity = m_length = len ; } } } else { //\u6536\u7f29\u6570\u7ec4 int len = m_length - abs ( n ); //\u6536\u7f29\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len < 0 ){ cout << \"Exception: Array length is too small!\" << endl ; return false ; } else { m_length = len ; return true ; } } } int main (){ Array < int , 5 > arr ; //\u4e3a\u6570\u7ec4\u5143\u7d20\u8d4b\u503c for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e00\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6269\u5927\u5bb9\u91cf\u5e76\u4e3a\u589e\u52a0\u7684\u5143\u7d20\u8d4b\u503c arr . capacity ( 8 ); for ( int i = 5 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e8c\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6536\u7f29\u5bb9\u91cf arr . capacity ( - 4 ); //\u7b2c\u4e09\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; return 0 ; } \u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u662f\u7531\u7f16\u8bd1\u5668\u5b8c\u6210\u7684\uff0c\u800c\u4e0d\u662f\u7531\u94fe\u63a5\u5668\u5b8c\u6210\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u94fe\u63a5\u671f\u95f4\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002\u6240\u4ee5\u4e0d\u80fd\u5c06\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u591a\u4e2a\u6587\u4ef6\u4e2d Note \u00b6 \u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316 \u00b6 \u7c7b\u6a21\u677f\u4e0e\u7ee7\u627f \u00b6 \u7c7b\u6a21\u677f\u4e0e\u53cb\u5143 \u00b6 \u7c7b\u6a21\u677f\u4e2d\u7684\u9759\u6001\u6210\u5458 \u00b6 \u5f02\u5e38\u5904\u7406\uff08try catch\uff09 \u00b6 \u5f02\u5e38\u5fc5\u987b\u663e\u5f0f\u5730\u629b\u51fa\uff0c\u624d\u80fd\u88ab\u68c0\u6d4b\u548c\u6355\u83b7\u5230\uff1b\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684\u629b\u51fa\uff0c\u5373\u4f7f\u6709\u5f02\u5e38\u4e5f\u68c0\u6d4b\u4e0d\u5230\u3002 1 \u629b\u51fa\uff08 Throw \uff09 --> \u68c0\u6d4b\uff08 Try \uff09 --> \u6355\u83b7\uff08 Catch \uff09 \u7a0b\u5e8f\u7684\u9519\u8bef\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\u8bed\u6cd5\u9519\u8bef\u3001\u903b\u8f91\u9519\u8bef\u548c\u8fd0\u884c\u65f6\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 try { //\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_1 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_2 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } //\u5176\u4ed6\u7684catch catch ( exception_type_n e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } \u8fdb\u9636 \u00b6 \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u00b6 const \u5f15\u7528 \u53ea\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <iostream> #include <string> using namespace std ; class Student { public : Student ( string name = \"\" , int age = 0 , float score = 0.0f ); //\u666e\u901a\u6784\u9020\u51fd\u6570 Student ( const Student & stu ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u58f0\u660e\uff09 public : void display (); private : string m_name ; int m_age ; float m_score ; }; Student :: Student ( string name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u5b9a\u4e49\uff09 Student :: Student ( const Student & stu ){ this -> m_name = stu . m_name ; this -> m_age = stu . m_age ; this -> m_score = stu . m_score ; cout << \"Copy constructor was called.\" << endl ; } void Student :: display (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } int main (){ Student stu1 ( \"\u5c0f\u660e\" , 16 , 90.5 ); Student stu2 = stu1 ; //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Student stu3 ( stu1 ); //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 stu1 . display (); stu2 . display (); stu3 . display (); return 0 ; } \u5728\u5b9a\u4e49\u7684\u540c\u65f6\u8fdb\u884c\u8d4b\u503c\u53eb\u505a\u521d\u59cb\u5316\uff08Initialization\uff09\uff0c\u5b9a\u4e49\u5b8c\u6210\u4ee5\u540e\u518d\u8d4b\u503c\uff08\u4e0d\u7ba1\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u6709\u6ca1\u6709\u8d4b\u503c\uff09\u5c31\u53eb\u505a\u8d4b\u503c\uff08Assignment\uff09\u3002\u521d\u59cb\u5316\u53ea\u80fd\u6709\u4e00\u6b21\uff0c\u8d4b\u503c\u53ef\u4ee5\u6709\u591a\u6b21\u3002 \u5f53\u4ee5\u62f7\u8d1d\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1b\u5f53\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u8d4b\u503c\u65f6\uff0c\u4f1a\u8c03\u7528\u91cd\u8f7d\u8fc7\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 1","title":"c++"},{"location":"cplus/cpp_summary/#c","text":"","title":"C++"},{"location":"cplus/cpp_summary/#c_1","text":"","title":"C++\u57fa\u7840"},{"location":"cplus/cpp_summary/#_1","text":"1 2 gcc main.cc -lstdc++ g++ main.cc","title":"\u7f16\u8bd1"},{"location":"cplus/cpp_summary/#namesapce","text":"1 2 3 4 5 namespace name{ //variables, functions, classes } using name::xxx;","title":"namesapce"},{"location":"cplus/cpp_summary/#const","text":"C++ \u4e2d\u7684\u5e38\u91cf(const)\u66f4\u7c7b\u4f3c\u4e8e#define\u547d\u4ee4\uff0c\u662f\u4e00\u4e2a\u503c\u66ff\u6362\u7684\u8fc7\u7a0b\uff0c\u53ea\u4e0d\u8fc7#define\u662f\u5728\u9884\u5904\u7406\u9636\u6bb5\u66ff\u6362\uff0c\u800c\u5e38\u91cf\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u66ff\u6362\u3002 C\u548cC++\u4e2d\u5168\u5c40 const \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u76f8\u540c\uff0c\u90fd\u662f\u5f53\u524d\u6587\u4ef6\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4eec\u7684\u53ef\u89c1\u8303\u56f4\uff1aC\u8bed\u8a00\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u58f0\u660e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\uff1b\u800cC++\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u4ec5\u9650\u4e8e\u5f53\u524d\u6587\u4ef6\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4e0d\u53ef\u89c1\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u591a\u6b21\u5f15\u5165\u540e\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002","title":"const"},{"location":"cplus/cpp_summary/#inline","text":"\u5728\u51fd\u6570\u5b9a\u4e49\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\uff0c\u5728\u51fd\u6570\u58f0\u660e\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\u867d\u7136\u6ca1\u6709\u9519\uff0c\u4f46\u8fd9\u79cd\u505a\u6cd5\u662f\u65e0\u6548\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u51fd\u6570\u58f0\u660e\u5904\u7684 inline \u5173\u952e\u5b57\u3002 \u5728\u591a\u6587\u4ef6\u7f16\u7a0b\u65f6\uff0c\u5efa\u8bae\u5c06\u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u76f4\u63a5\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u7981\u7528\u5185\u8054\u51fd\u6570\u7684\u58f0\u660e\u3002","title":"inline\u5185\u8054\u51fd\u6570"},{"location":"cplus/cpp_summary/#_2","text":"C++\u89c4\u5b9a\uff0c\u9ed8\u8ba4\u53c2\u6570\u53ea\u80fd\u653e\u5728\u5f62\u53c2\u5217\u8868\u7684\u6700\u540e\uff0c\u800c\u4e14\u4e00\u65e6\u4e3a\u67d0\u4e2a\u5f62\u53c2\u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u7684\u6240\u6709\u5f62\u53c2\u90fd\u5fc5\u987b\u6709\u9ed8\u8ba4\u503c\u3002 \u8fd9\u662f\u56e0\u4e3aC++ \u89c4\u5b9a\uff0c\u5728\u7ed9\u5b9a\u7684\u4f5c\u7528\u57df\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u6b21\u9ed8\u8ba4\u53c2\u6570\u3002\uff08\u540c\u4e00\u6e90\u6587\u4ef6\u5185\u5b9a\u4e49+\u58f0\u660e\u5e26\u9ed8\u8ba4\u53c2\u6570\u4f1a\u62a5\u9519\uff09","title":"\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570"},{"location":"cplus/cpp_summary/#_3","text":"\u51fd\u6570\u91cd\u8f7d\uff1a\u51fd\u6570\u540d\u5b57\u76f8\u540c\uff0c\u6570\u5217\u8868\u4e0d\u540c\uff08\u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\uff09\u3002","title":"\u91cd\u8f7d"},{"location":"cplus/cpp_summary/#_4","text":"\u7c7b\u662f\u4e00\u4e2a\u6a21\u677f\uff08Template\uff09\uff0c\u7f16\u8bd1\u540e\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\u4e0d\u80fd\u5bf9\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002\u53ea\u6709\u5728\u521b\u5efa\u5bf9\u8c61\u540e\u624d\u7ed9\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u8fd9\u4e2a\u65f6\u5019\u8d4b\u503c\u4e86\u3002 \u4f7f\u7528new\u5728\u5806\u4e0a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u662f\u533f\u540d\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u5fc5\u987b\u8981\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5b83\uff0c\u518d\u501f\u52a9\u6307\u9488\u6765\u8bbf\u95ee\u5b83\u7684\u6210\u5458\u53d8\u91cf\u6216\u6210\u5458\u51fd\u6570\u3002 ::\u88ab\u79f0\u4e3a\u57df\u89e3\u6790\u7b26\uff08\u4e5f\u79f0\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u6216\u4f5c\u7528\u57df\u9650\u5b9a\u7b26\uff09\uff0c\u7528\u6765\u8fde\u63a5\u7c7b\u540d\u548c\u51fd\u6570\u540d\uff0c\u6307\u660e\u5f53\u524d\u51fd\u6570\u5c5e\u4e8e\u54ea\u4e2a\u7c7b \u5728\u7c7b\u4f53\u4e2d\u548c\u7c7b\u4f53\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u662f\u6709\u533a\u522b\u7684\uff1a\u5728\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u4f1a\u81ea\u52a8\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5728\u7c7b\u4f53\u5916\u5b9a\u4e49\u7684\u4e0d\u4f1a \u6210\u5458\u53d8\u91cf\u5927\u90fd\u4ee5m_\u5f00\u5934\uff0c\u8fd9\u662f\u7ea6\u5b9a\u6210\u4fd7\u7684\u5199\u6cd5\uff0c\u4e0d\u662f\u8bed\u6cd5\u89c4\u5b9a\u7684\u5185\u5bb9\u3002\u4ee5m_\u5f00\u5934\u65e2\u53ef\u4ee5\u4e00\u773c\u770b\u51fa\u8fd9\u662f\u6210\u5458\u53d8\u91cf\uff0c\u53c8\u53ef\u4ee5\u548c\u6210\u5458\u51fd\u6570\u4e2d\u7684\u5f62\u53c2\u540d\u5b57\u533a\u5206\u5f00\u3002 \u7f16\u8bd1\u5668\u4f1a\u5c06\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u5206\u5f00\u5b58\u50a8\uff1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u6240\u6709\u5bf9\u8c61\u90fd\u5171\u4eab\u540c\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801","title":"\u7c7b\u548c\u5bf9\u8c61"},{"location":"cplus/cpp_summary/#_5","text":"\u6784\u9020\u51fd\u6570\u5fc5\u987b\u662fpublic\u5c5e\u6027\u7684\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\uff0c\u51fd\u6570\u540d\u524d\u9762\u90fd\u4e0d\u80fd\u51fa\u73b0\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5373\u4f7f\u662f void \u4e5f\u4e0d\u5141\u8bb8\uff1b \u51fd\u6570\u4f53\u4e2d\u4e0d\u80fd\u6709 return \u8bed\u53e5\u3002","title":"\u6784\u9020\u51fd\u6570"},{"location":"cplus/cpp_summary/#_6","text":"\u521d\u59cb\u5316const\u6210\u5458\u53d8\u91cf\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 class VLA { private : const int m_len ; int * m_arr ; public : VLA ( int len ); }; //\u5fc5\u987b\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316 m_len VLA :: VLA ( int len ) : m_len ( len ){ m_arr = new int [ len ]; }","title":"\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868"},{"location":"cplus/cpp_summary/#_7","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <iostream> using namespace std ; class CSample { public : CSample (){ //\u6784\u9020\u51fd\u6570 1 cout << \"Constructor 1 Called\" << endl ; } CSample ( int n ){ //\u6784\u9020\u51fd\u6570 2 cout << \"Constructor 2 Called\" << endl ; } }; int main (){ cout << \"stepl\" << endl ; CSample arrayl [ 2 ]; cout << \"step2\" << endl ; CSample array2 [ 2 ] = { 4 , 5 }; cout << \"step3\" << endl ; CSample array3 [ 2 ] = { 3 }; cout << \"step4\" << endl ; CSample * array4 = new CSample [ 2 ]; delete [] array4 ; return 0 ; } //\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6 class CTest { public : CTest ( int n ){ } //\u6784\u9020\u51fd\u6570(1) CTest ( int n , int m ){ } //\u6784\u9020\u51fd\u6570(2) CTest (){ } //\u6784\u9020\u51fd\u6570(3) }; int main (){ //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u3001(3) \u521d\u59cb\u5316 CTest arrayl [ 3 ] = { 1 , CTest ( 1 , 2 ) }; //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(2)\u3001(2)\u3001(1)\u521d\u59cb\u5316 CTest array2 [ 3 ] = { CTest ( 2 , 3 ), CTest ( 1 , 2 ), 1 }; //\u4e24\u4e2a\u5143\u7d20\u6307\u5411\u7684\u5bf9\u8c61\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u521d\u59cb\u5316 CTest * pArray [ 3 ] = { new CTest ( 4 ), new CTest ( 1 , 2 ) }; //pArray[2] \u6ca1\u6709\u521d\u59cb\u5316\uff0c\u5176\u503c\u662f\u968f\u673a\u7684\uff0c\u4e0d\u77e5\u9053\u6307\u5411\u54ea\u91cc\u3002 return 0 ; }","title":"\u5bf9\u8c61\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6784\u9020\u521d\u59cb\u5316"},{"location":"cplus/cpp_summary/#_8","text":"\u6784\u9020\u51fd\u6570\u7684\u540d\u5b57\u548c\u7c7b\u540d\u76f8\u540c\uff0c\u800c\u6790\u6784\u51fd\u6570\u7684\u540d\u5b57\u662f\u5728\u7c7b\u540d\u524d\u9762\u52a0\u4e00\u4e2a~\u7b26\u53f7\u3002\u6790\u6784\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u4e0d\u80fd\u88ab\u91cd\u8f7d\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002 \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u5b83\u548c\u5168\u5c40\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u5b83\u548c\u5c40\u90e8\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002","title":"\u6790\u6784\u51fd\u6570"},{"location":"cplus/cpp_summary/#_9","text":"\u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u8c03\u7528\uff0c\u5bf9\u8c61\u7684\u9500\u6bc1\u65f6\u673a\u4e0e\u5b83\u6240\u5728\u7684\u5185\u5b58\u533a\u57df\u6709\u5173\uff1a \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 new\u521b\u5efa\u7684\u5bf9\u8c61\u4f4d\u4e8e\u5806\u533a\uff0c\u901a\u8fc7delete\u5220\u9664\u65f6\u624d\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709delete\uff0c\u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u3002","title":"\u6790\u6784\u51fd\u6570\u6267\u884c\u65f6\u673a"},{"location":"cplus/cpp_summary/#_10","text":"\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u5982\u679c\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5c31\u79f0\u4e4b\u4e3a\u201c\u6210\u5458\u5bf9\u8c61\u201d\u3002\u5305\u542b\u6210\u5458\u5bf9\u8c61\u7684\u7c7b\u53eb\u5c01\u95ed\u7c7b\uff08enclosed class\uff09\u3002 \u521b\u5efa\u5c01\u95ed\u7c7b\u7684\u5bf9\u8c61\u65f6\uff0c\u5176\u6210\u5458\u5bf9\u8c61\u4e5f\u9700\u8981\u88ab\u521b\u5efa\uff0c\u6210\u5458\u5bf9\u8c61\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\uff1f\u9700\u8981\u501f\u52a9\u5c01\u95ed\u7c7b\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <iostream> using namespace std ; //\u8f6e\u80ce\u7c7b class Tyre { public : Tyre ( int radius , int width ); void show () const ; private : int m_radius ; //\u534a\u5f84 int m_width ; //\u5bbd\u5ea6 }; Tyre :: Tyre ( int radius , int width ) : m_radius ( radius ), m_width ( width ){ } void Tyre :: show () const { cout << \"\u8f6e\u6bc2\u534a\u5f84\uff1a\" << this -> m_radius << \"\u540b\" << endl ; cout << \"\u8f6e\u80ce\u5bbd\u5ea6\uff1a\" << this -> m_width << \"mm\" << endl ; } //\u5f15\u64ce\u7c7b class Engine { public : Engine ( float displacement = 2.0 ); void show () const ; private : float m_displacement ; }; Engine :: Engine ( float displacement ) : m_displacement ( displacement ) {} void Engine :: show () const { cout << \"\u6392\u91cf\uff1a\" << this -> m_displacement << \"L\" << endl ; } //\u6c7d\u8f66\u7c7b class Car { public : Car ( int price , int radius , int width ); void show () const ; private : int m_price ; //\u4ef7\u683c Tyre m_tyre ; Engine m_engine ; }; Car :: Car ( int price , int radius , int width ) : m_price ( price ), m_tyre ( radius , width ) /*\u6307\u660em_tyre\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65b9\u5f0f*/ { }; //\u8fd9\u91cc\u5e76\u6ca1\u6709\u8bf4\u660e m_engine \u8be5\u5982\u4f55\u5904\u7406,\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\u3002 void Car :: show () const { cout << \"\u4ef7\u683c\uff1a\" << this -> m_price << \"\uffe5\" << endl ; this -> m_tyre . show (); this -> m_engine . show (); } int main () { Car car ( 200000 , 19 , 245 ); car . show (); return 0 ; } \u5c01\u95ed\u7c7b\u5bf9\u8c61\u751f\u6210\u65f6\uff0c\u5148\u6267\u884c\u6240\u6709\u6210\u5458\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u624d\u6267\u884c\u5c01\u95ed\u7c7b\u81ea\u5df1\u7684\u6784\u9020\u51fd\u6570\u3002\u6210\u5458\u5bf9\u8c61\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6210\u5458\u5bf9\u8c61\u5728\u7c7b\u5b9a\u4e49\u4e2d\u7684\u6b21\u5e8f\u4e00\u81f4\uff0c\u4e0e\u5b83\u4eec\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u5e8f\u65e0\u5173\u3002 \u5f53\u5c01\u95ed\u7c7b\u5bf9\u8c61\u6d88\u4ea1\u65f6\uff0c\u5148\u6267\u884c\u5c01\u95ed\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u6267\u884c\u6210\u5458\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u6210\u5458\u5bf9\u8c61\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6784\u9020\u7684\u540e\u6790\u6784\u3002","title":"\u6210\u5458\u5bf9\u8c61\u548c\u5c01\u95ed\u7c7b"},{"location":"cplus/cpp_summary/#c-this","text":"this \u5b9e\u9645\u4e0a\u662f\u6210\u5458\u51fd\u6570\u7684\u4e00\u4e2a\u5f62\u53c2\uff0c\u5728\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\u5c06\u5bf9\u8c61\u7684\u5730\u5740\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9 this\u3002\u4e0d\u8fc7 this \u8fd9\u4e2a\u5f62\u53c2\u662f\u9690\u5f0f\u7684\uff0c\u5b83\u5e76\u4e0d\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u7531\u7f16\u8bd1\u5668\u9ed8\u9ed8\u5730\u5c06\u5b83\u6dfb\u52a0\u5230\u53c2\u6570\u5217\u8868\u4e2d\u3002 \u6210\u5458\u51fd\u6570\u6700\u7ec8\u88ab\u7f16\u8bd1\u6210\u4e0e\u5bf9\u8c61\u65e0\u5173\u7684\u666e\u901a\u51fd\u6570\uff0c\u9664\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u4f1a\u4e22\u5931\u6240\u6709\u4fe1\u606f\uff0c\u6240\u4ee5\u7f16\u8bd1\u65f6\u8981\u5728\u6210\u5458\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u628a\u5f53\u524d\u5bf9\u8c61\u7684\u9996\u5730\u5740\u4f20\u5165\uff0c\u4ee5\u6b64\u6765\u5173\u8054\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f this\uff0c\u5b83\u662f\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u5173\u8054\u7684\u6865\u6881\u3002 this \u662f const \u6307\u9488\uff0c\u5b83\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff0c\u4e00\u5207\u4f01\u56fe\u4fee\u6539\u8be5\u6307\u9488\u7684\u64cd\u4f5c\uff0c\u5982\u8d4b\u503c\u3001\u9012\u589e\u3001\u9012\u51cf\u7b49\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\u3002 this \u53ea\u80fd\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u7528\u5728\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u610f\u4e49\uff0c\u4e5f\u662f\u975e\u6cd5\u7684\u3002 \u53ea\u6709\u5f53\u5bf9\u8c61\u88ab\u521b\u5efa\u540e this \u624d\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728 static \u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528\uff08\u540e\u7eed\u4f1a\u8bb2\u5230 static \u6210\u5458\uff09\u3002","title":"C++ this\u6307\u9488"},{"location":"cplus/cpp_summary/#static","text":"static\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u5728\u7c7b\u58f0\u660e\u7684\u5916\u90e8\u521d\u59cb\u5316\uff1a 1 2 type class :: name = value ; int Student :: m_total = 0 ; //\u9759\u6001\u6210\u5458\u53d8\u91cf\u5728\u521d\u59cb\u5316\u65f6\u4e0d\u80fd\u518d\u52a0 static static \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\u65e2\u4e0d\u662f\u5728\u58f0\u660e\u7c7b\u65f6\u5206\u914d\uff0c\u4e5f\u4e0d\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5206\u914d\uff0c\u800c\u662f\u5728\uff08\u7c7b\u5916\uff09\u521d\u59cb\u5316\u65f6\u5206\u914d\u3002\u53cd\u8fc7\u6765\u8bf4\uff0c\u6ca1\u6709\u5728\u7c7b\u5916\u521d\u59cb\u5316\u7684 static \u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u3002 static\u6210\u5458\u53d8\u91cf\u548c\u666e\u901astatic\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u5728\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\u65f6\u624d\u91ca\u653e\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0cstatic \u6210\u5458\u53d8\u91cf\u4e0d\u5360\u7528\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u4e0d\u968f\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5206\u914d\u5185\u5b58\uff0c\u4e5f\u4e0d\u968f\u5bf9\u8c61\u7684\u9500\u6bc1\u800c\u91ca\u653e\u5185\u5b58\uff0c\u5373\u4f7f\u4e0d\u521b\u5efa\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u3002\u800c\u666e\u901a\u6210\u5458\u53d8\u91cf\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u91ca\u653e\u5185\u5b58\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u666e\u901a\u6210\u5458\u51fd\u6570\u7684\u6839\u672c\u533a\u522b\u5728\u4e8e\uff1a\u666e\u901a\u6210\u5458\u51fd\u6570\u6709 this \u6307\u9488\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2d\u7684\u4efb\u610f\u6210\u5458\uff1b\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff08\u5305\u62ec\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\uff09\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8bbf\u95ee\u9759\u6001\u6210\u5458\u3002\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u5728\u58f0\u660e\u65f6\u8981\u52a0 static\uff0c\u5728\u5b9a\u4e49\u65f6\u4e0d\u80fd\u52a0 static\u3002","title":"static\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570"},{"location":"cplus/cpp_summary/#const_1","text":"\u521d\u59cb\u5316 const \u6210\u5458\u53d8\u91cf\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 const \u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u4fee\u6539\u5b83\u4eec\u7684\u503c\uff0c\u8fd9\u79cd\u63aa\u65bd\u4e3b\u8981\u8fd8\u662f\u4e3a\u4e86\u4fdd\u62a4\u6570\u636e\u800c\u8bbe\u7f6e\u7684\u3002const \u6210\u5458\u51fd\u6570\u4e5f\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002 \u5e38\u6210\u5458\u51fd\u6570\u9700\u8981\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u7684\u65f6\u5019\u5728\u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u5173\u952e\u5b57\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Student { public : Student ( char * name , int age , float score ); void show (); //\u58f0\u660e\u5e38\u6210\u5458\u51fd\u6570 char * getname () const ; int getage () const ; float getscore () const ; private : char * m_name ; int m_age ; float m_score ; }; Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } //\u5b9a\u4e49\u5e38\u6210\u5458\u51fd\u6570 char * Student :: getname () const { return m_name ; } int Student :: getage () const { return m_age ; } float Student :: getscore () const { return m_score ; } \u51fd\u6570\u5f00\u5934\u7684 const \u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8868\u793a\u8fd4\u56de\u503c\u662f const \u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f8b\u5982const char * getname()\u3002 \u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u8868\u793a\u5e38\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u79cd\u51fd\u6570\u53ea\u80fd\u8bfb\u53d6\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u80fd\u4fee\u6539\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u4f8b\u5982char * getname() const\u3002","title":"const\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570"},{"location":"cplus/cpp_summary/#const_2","text":"const\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u5bf9\u8c61\uff0c\u79f0\u4e3a\u5e38\u5bf9\u8c61\u3002\u53ea\u80fd\u8c03\u7528\u7c7b\u7684 const\u6210\u5458\uff08\u5305\u62ecconst\u6210\u5458\u53d8\u91cf\u548cconst\u6210\u5458\u51fd\u6570\uff09\u4e86\u3002 1 2 3 4 5 const class object ( params ); class const object ( params ); const class * p = new class ( params ); class const * p = new class ( params );","title":"const\u5bf9\u8c61"},{"location":"cplus/cpp_summary/#friend","text":"\u53cb\u5143\u7684\u5173\u7cfb\u662f\u5355\u5411\u7684\u800c\u4e0d\u662f\u53cc\u5411\u7684\u3002 \u53cb\u5143\u7684\u5173\u7cfb\u4e0d\u80fd\u4f20\u9012\u3002 \u4e00\u822c\u4e0d\u5efa\u8bae\u628a\u6574\u4e2a\u7c7b\u58f0\u660e\u4e3a\u53cb\u5143\u7c7b\uff0c\u800c\u53ea\u5c06\u67d0\u4e9b\u6210\u5458\u51fd\u6570\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\u3002","title":"friend\u53cb\u5143\u51fd\u6570\u4e0e\u53cb\u5143\u7c7b"},{"location":"cplus/cpp_summary/#_11","text":"\u5f53\u524d\u7c7b\u4ee5\u5916\u5b9a\u4e49\u7684\u3001\u4e0d\u5c5e\u4e8e\u5f53\u524d\u7c7b\u7684\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u7c7b\u4e2d\u58f0\u660e\uff0c\u4f46\u8981\u5728\u524d\u9762\u52a0friend\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u53cb\u5143\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u662f\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u7684\u975e\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec public\u3001protected\u3001private \u5c5e\u6027\u7684\u3002 \u53cb\u5143\u51fd\u6570\u4e0d\u540c\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6210\u5458\u51fd\u6570\u5728\u8c03\u7528\u65f6\u4f1a\u9690\u5f0f\u5730\u589e\u52a0 this\u6307\u9488\uff0c\u6307\u5411\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\uff0c\u5728\u53cb\u5143\u51fd\u6570\u4e2d\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u5fc5\u987b\u8981\u501f\u52a9\u5bf9\u8c61\u3002 \u53cb\u5143\u51fd\u6570\uff1a\u6709\u65f6\u5019\u7c7b\u9700\u8981\u63d0\u524d\u58f0\u660e\uff0c\u7c7b\u7684\u63d0\u524d\u58f0\u660e\u7684\u4f7f\u7528\u8303\u56f4\u662f\u6709\u9650\u7684\uff0c\u53ea\u6709\u5728\u6b63\u5f0f\u58f0\u660e\u4e00\u4e2a\u7c7b\u4ee5\u540e\u624d\u80fd\u7528\u5b83\u53bb\u521b\u5efa\u5bf9\u8c61\u3002","title":"\u53cb\u5143\u51fd\u6570"},{"location":"cplus/cpp_summary/#_12","text":"\u53cb\u5143\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u90fd\u662f\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <iostream> using namespace std ; class Address ; //\u63d0\u524d\u58f0\u660eAddress\u7c7b //\u58f0\u660eStudent\u7c7b class Student { public : Student ( char * name , int age , float score ); public : void show ( Address * addr ); private : char * m_name ; int m_age ; float m_score ; }; //\u58f0\u660eAddress\u7c7b class Address { public : Address ( char * province , char * city , char * district ); public : //\u5c06Student\u7c7b\u58f0\u660e\u4e3aAddress\u7c7b\u7684\u53cb\u5143\u7c7b friend class Student ; private : char * m_province ; //\u7701\u4efd char * m_city ; //\u57ce\u5e02 char * m_district ; //\u533a\uff08\u5e02\u533a\uff09 }; //\u5b9e\u73b0Student\u7c7b Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show ( Address * addr ){ cout << m_name << \"\u7684\u5e74\u9f84\u662f \" << m_age << \"\uff0c\u6210\u7ee9\u662f \" << m_score << endl ; cout << \"\u5bb6\u5ead\u4f4f\u5740\uff1a\" << addr -> m_province << \"\u7701\" << addr -> m_city << \"\u5e02\" << addr -> m_district << \"\u533a\" << endl ; } //\u5b9e\u73b0Address\u7c7b Address :: Address ( char * province , char * city , char * district ){ m_province = province ; m_city = city ; m_district = district ; } int main (){ Student stu ( \"\u5c0f\u660e\" , 16 , 95.5f ); Address addr ( \"\u9655\u897f\" , \"\u897f\u5b89\" , \"\u96c1\u5854\" ); stu . show ( & addr ); Student * pstu = new Student ( \"\u674e\u78ca\" , 16 , 80.5 ); Address * paddr = new Address ( \"\u6cb3\u5317\" , \"\u8861\u6c34\" , \"\u6843\u57ce\" ); pstu -> show ( paddr ); return 0 ; }","title":"\u53cb\u5143\u7c7b"},{"location":"cplus/cpp_summary/#string","text":"string\u7c7b\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f6c\u6362\u51fd\u6570c_str()\uff0c\u8be5\u51fd\u6570\u80fd\u591f\u5c06 string\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aC\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002 1 2 string path = \"D: \\\\ demo.txt\" ; FILE * fp = fopen ( path . c_str (), \"rt\" );","title":"string\u7c7b"},{"location":"cplus/cpp_summary/#c_2","text":"\u5f15\u7528\u5728\u5b9a\u4e49\u65f6\u9700\u8981\u6dfb\u52a0&\uff0c\u5728\u4f7f\u7528\u65f6\u4e0d\u80fd\u6dfb\u52a0&\uff0c\u4f7f\u7528\u65f6\u6dfb\u52a0&\u8868\u793a\u53d6\u5730\u5740\u3002\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u7684\u540c\u65f6\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u4ee5\u540e\u4e5f\u8981\u4ece\u4e00\u800c\u7ec8\uff0c\u4e0d\u80fd\u518d\u5f15\u7528\u5176\u5b83\u6570\u636e\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5e38\u91cf\uff08const \u53d8\u91cf\uff09\u3002 \u5f15\u7528\u53ea\u662f\u5bf9\u6307\u9488\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u5b83\u7684\u5e95\u5c42\u4f9d\u7136\u662f\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u5f15\u7528\u5360\u7528\u7684\u5185\u5b58\u548c\u6307\u9488\u5360\u7528\u7684\u5185\u5b58\u957f\u5ea6\u4e00\u6837\uff0c\u5728 32 \u4f4d\u73af\u5883\u4e0b\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5728 64 \u4f4d\u73af\u5883\u4e0b\u662f 8 \u4e2a\u5b57\u8282\uff0c\u4e4b\u6240\u4ee5\u4e0d\u80fd\u83b7\u53d6\u5f15\u7528\u7684\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fdb\u884c\u4e86\u5185\u90e8\u8f6c\u6362\u3002","title":"C++\u5f15\u7528"},{"location":"cplus/cpp_summary/#_13","text":"\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u65f6\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u6570\u636e\uff1b\u6307\u9488\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u6307\u9488\u5728\u5b9a\u4e49\u65f6\u4e0d\u5fc5\u8d4b\u503c\uff0c\u4e5f\u80fd\u6307\u5411\u4efb\u610f\u6570\u636e\u3002 \u6709 const \u6307\u9488\uff0c\u4f46\u662f\u6ca1\u6709 const \u5f15\u7528\u3002 \u6307\u9488\u53ef\u4ee5\u6709\u591a\u7ea7\uff0c\u4f46\u662f\u5f15\u7528\u53ea\u80fd\u6709\u4e00\u7ea7\u3002 \u3002\u5bf9\u6307\u9488\u4f7f\u7528++\u8868\u793a\u6307\u5411\u4e0b\u4e00\u4efd\u6570\u636e\uff0c\u5bf9\u5f15\u7528\u4f7f\u7528 ++ \u8868\u793a\u5b83\u6240\u6307\u4ee3\u7684\u6570\u636e\u672c\u8eab\u52a01\uff0c\u81ea\u51cf\uff08--\uff09\u4e5f\u662f\u3002","title":"\u6307\u9488\u548c\u5f15\u7528\u7684\u533a\u522b"},{"location":"cplus/cpp_summary/#const_3","text":"","title":"const\u548c\u5f15\u7528\u7684\u5947\u5999\u53cd\u5e94"},{"location":"cplus/cpp_summary/#_14","text":"\u6307\u9488\u5c31\u662f\u6570\u636e\u6216\u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u6216\u4ee3\u7801\u3002\u6307\u9488\u53ea\u80fd\u6307\u5411\u5185\u5b58\uff0c\u4e0d\u80fd\u6307\u5411\u5bc4\u5b58\u5668\u6216\u8005\u786c\u76d8\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u548c\u786c\u76d8\u6ca1\u6cd5\u5bfb\u5740\u3002 int\u3001double\u3001bool\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e\u5f80\u5f80\u4e0d\u8d85\u8fc7 8 \u4e2a\u5b57\u8282\uff0c\u7528\u4e00\u4e24\u4e2a\u5bc4\u5b58\u5668\u5c31\u80fd\u5b58\u50a8\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\uff1b\u800c\u5bf9\u8c61\u3001\u7ed3\u6784\u4f53\u53d8\u91cf\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5927\u5c0f\u4e0d\u53ef\u9884\u6d4b\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5185\u5b58\u4e2d\u3002 \u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u867d\u7136\u5728\u5185\u5b58\u4e2d\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u5bfb\u5740\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u4f7f\u7528&\u6765\u83b7\u53d6\u5b83\u7684\u5730\u5740\uff0c\u66f4\u4e0d\u80fd\u7528\u6307\u9488\u6307\u5411\u5b83\u3002 \u5f15\u7528\u4e0d\u80fd\u6307\u4ee3\u4e34\u65f6\u6570\u636e\u5982\u51fd\u6570\u53c2\u6570\u7b49\u3002 \u4e34\u65f6\u6570\u636e\uff0c\u4f8b\u5982\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3001\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u4e5f\u53ef\u80fd\u4f1a\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u4e00\u65e6\u5b83\u4eec\u88ab\u653e\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5c31\u6ca1\u6cd5\u7528&\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\u4e86\uff0c\u4e5f\u5c31\u6ca1\u6cd5\u7528\u6307\u9488\u6307\u5411\u5b83\u4eec\u3002 \u7f16\u8bd1\u5668\u4f1a\u4e3a\u4e34\u65f6\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u65e0\u540d\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u5e76\u5c06\u4e34\u65f6\u6570\u636e\u653e\u5165\u8be5\u4e34\u65f6\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u518d\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u8be5\u4e34\u65f6\u53d8\u91cf\u3002 \u7ed9\u5f15\u7528\u6dfb\u52a0 const \u9650\u5b9a\u540e\uff0c\u4e0d\u4f46\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u7c7b\u578b\u76f8\u8fd1\u7684\u6570\u636e(const\u5f15\u7528\u4e0e\u8f6c\u6362\u7c7b\u578b)\uff0c\u5b83\u4eec\u80cc\u540e\u7684\u673a\u5236\u90fd\u662f\u4e34\u65f6\u53d8\u91cf\u3002 \u5f15\u7528\u7c7b\u578b\u7684\u51fd\u6570\u5f62\u53c2\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528const\u3002","title":"\u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e"},{"location":"cplus/cpp_summary/#_15","text":"1 2 3 class \u6d3e\u751f\u7c7b\u540d:\uff3b\u7ee7\u627f\u65b9\u5f0f\uff3d \u57fa\u7c7b\u540d{ \u6d3e\u751f\u7c7b\u65b0\u589e\u52a0\u7684\u6210\u5458 }; 1) public\u7ee7\u627f\u65b9\u5f0f 1. \u57fa\u7c7b\u4e2d\u6240\u6709 public \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e3a public \u5c5e\u6027\uff1b 2. \u57fa\u7c7b\u4e2d\u6240\u6709 protected \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e3a protected \u5c5e\u6027\uff1b 3. \u57fa\u7c7b\u4e2d\u6240\u6709 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u80fd\u4f7f\u7528\u3002 2) protected\u7ee7\u627f\u65b9\u5f0f 1. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 public \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e3a protected \u5c5e\u6027\uff1b 2. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 protected \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e3a protected \u5c5e\u6027\uff1b 3. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u80fd\u4f7f\u7528\u3002 3) private\u7ee7\u627f\u65b9\u5f0f 1. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 public \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5747\u4e3a private \u5c5e\u6027\uff1b 2. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 protected \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5747\u4e3a private \u5c5e\u6027\uff1b 3. \u57fa\u7c7b\u4e2d\u7684\u6240\u6709 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u80fd\u4f7f\u7528\u3002 \u4e0d\u7ba1\u7ee7\u627f\u65b9\u5f0f\u5982\u4f55\uff0c\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u59cb\u7ec8\u4e0d\u80fd\u4f7f\u7528\u3002\u57fa\u7c7b\u7684 private \u6210\u5458\u662f\u80fd\u591f\u88ab\u7ee7\u627f\u7684\uff0c\u5e76\u4e14\uff08\u6210\u5458\u53d8\u91cf\uff09\u4f1a\u5360\u7528\u6d3e\u751f\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u53ea\u662f\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u53ef\u89c1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528\u3002 \u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\u57fa\u7c7b private \u6210\u5458\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u501f\u52a9\u57fa\u7c7b\u7684\u975e private \u6210\u5458\u51fd\u6570\uff0c\u5982\u679c\u57fa\u7c7b\u6ca1\u6709\u975e private \u6210\u5458\u51fd\u6570\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5c06\u65e0\u6cd5\u8bbf\u95ee\u3002 using \u53ea\u80fd\u6539\u53d8\u57fa\u7c7b\u4e2d public \u548c protected \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0d\u80fd\u6539\u53d8 private \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u56e0\u4e3a\u57fa\u7c7b\u4e2d private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6839\u672c\u4e0d\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u8bbf\u95ee\u3002 \u5982\u679c\u6d3e\u751f\u7c7b\u4e2d\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\uff09\u548c\u57fa\u7c7b\u4e2d\u7684\u6210\u5458\u91cd\u540d\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u4ece\u57fa\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684\u6210\u5458\u3002 \u57fa\u7c7b\u6210\u5458\u51fd\u6570\u548c\u6d3e\u751f\u7c7b\u6210\u5458\u51fd\u6570\u4e0d\u4f1a\u6784\u6210\u91cd\u8f7d\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6709\u540c\u540d\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u540c\u540d\u51fd\u6570\uff0c\u4e0d\u7ba1\u5b83\u4eec\u7684\u53c2\u6570\u662f\u5426\u4e00\u6837\u3002 \u53ea\u6709\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u624d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\uff0c\u4e0d\u540c\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u662f\u4f1a\u9020\u6210\u906e\u853d\uff0c\u4f7f\u5f97\u5916\u5c42\u51fd\u6570\u65e0\u6548\u3002\u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u62e5\u6709\u4e0d\u540c\u7684\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u540c\u540d\u51fd\u6570\u4e0d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\u3002","title":"\u7ee7\u627f\u4e0e\u6d3e\u751f"},{"location":"cplus/cpp_summary/#_16","text":"\u6d3e\u751f\u7c7b\u7684\u4f5c\u7528\u57df\u4f4d\u4e8e\u57fa\u7c7b\u4f5c\u7528\u57df\u4e4b\u5185","title":"\u7ee7\u627f\u7684\u4f5c\u7528\u57df\u5d4c\u5957"},{"location":"cplus/cpp_summary/#_17","text":"\u6709\u7ee7\u627f\u5173\u7cfb\u65f6\uff0c\u6d3e\u751f\u7c7b\u7684\u5185\u5b58\u6a21\u578b\u53ef\u4ee5\u770b\u6210\u662f\u57fa\u7c7b\u6210\u5458\u53d8\u91cf\u548c\u65b0\u589e\u6210\u5458\u53d8\u91cf\u7684\u603b\u548c\uff0c\u800c\u6240\u6709\u6210\u5458\u51fd\u6570\u4ecd\u7136\u5b58\u50a8\u5728\u53e6\u5916\u4e00\u4e2a\u533a\u57df\u2014\u2014\u4ee3\u7801\u533a\uff0c\u7531\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u6a21\u578b\u4e2d\uff0c\u4f1a\u5305\u542b\u6240\u6709\u57fa\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u6848\u7684\u4f18\u70b9\u662f\u8bbf\u95ee\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u5728\u6d3e\u751f\u7c7b\u5bf9\u8c61\u4e2d\u76f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u53d8\u91cf\uff0c\u65e0\u9700\u7ecf\u8fc7\u597d\u51e0\u5c42\u95f4\u63a5\u8ba1\u7b97\u3002","title":"\u7ee7\u627f\u4e0b\u7684\u5185\u5b58\u6a21\u578b"},{"location":"cplus/cpp_summary/#_18","text":"\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u603b\u662f\u5148\u8c03\u7528\u57fa\u7c7b\u6784\u9020\u51fd\u6570\u518d\u6267\u884c\u5176\u4ed6\u4ee3\u7801\uff08\u5305\u62ec\u53c2\u6570\u521d\u59cb\u5316\u8868\u4ee5\u53ca\u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\uff09 \u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u521b\u5efa\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u540c\uff0c\u5373\u5148\u6267\u884c\u57fa\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u518d\u6267\u884c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u3002 \u800c\u9500\u6bc1\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6267\u884c\u6d3e\u751f\u7c7b\u6790\u6784\u51fd\u6570\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { public : A (){ cout << \"A constructor\" << endl ;} ~ A (){ cout << \"A destructor\" << endl ;} }; class B : public A { public : B (){ cout << \"B constructor\" << endl ;} ~ B (){ cout << \"B destructor\" << endl ;} }; class C : public B { public : C (){ cout << \"C constructor\" << endl ;} ~ C (){ cout << \"C destructor\" << endl ;} }; int main (){ C test ; return 0 ; }","title":"\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570"},{"location":"cplus/cpp_summary/#_19","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class D : public A , private B , protected C { //\u7c7bD\u65b0\u589e\u52a0\u7684\u6210\u5458 } D ( \u5f62\u53c2\u5217\u8868 ) : A ( \u5b9e\u53c2\u5217\u8868 ), B ( \u5b9e\u53c2\u5217\u8868 ), C ( \u5b9e\u53c2\u5217\u8868 ){ //\u5176\u4ed6\u64cd\u4f5c } #include <iostream> using namespace std ; //\u57fa\u7c7b class BaseA { public : BaseA ( int a , int b ); ~ BaseA (); public : void show (); protected : int m_a ; int m_b ; }; BaseA :: BaseA ( int a , int b ) : m_a ( a ), m_b ( b ){ cout << \"BaseA constructor\" << endl ; } BaseA ::~ BaseA (){ cout << \"BaseA destructor\" << endl ; } void BaseA :: show (){ cout << \"m_a = \" << m_a << endl ; cout << \"m_b = \" << m_b << endl ; } //\u57fa\u7c7b class BaseB { public : BaseB ( int c , int d ); ~ BaseB (); void show (); protected : int m_c ; int m_d ; }; BaseB :: BaseB ( int c , int d ) : m_c ( c ), m_d ( d ){ cout << \"BaseB constructor\" << endl ; } BaseB ::~ BaseB (){ cout << \"BaseB destructor\" << endl ; } void BaseB :: show (){ cout << \"m_c = \" << m_c << endl ; cout << \"m_d = \" << m_d << endl ; } //\u6d3e\u751f\u7c7b class Derived : public BaseA , public BaseB { public : Derived ( int a , int b , int c , int d , int e ); ~ Derived (); public : void display (); private : int m_e ; }; Derived :: Derived ( int a , int b , int c , int d , int e ) : BaseA ( a , b ), BaseB ( c , d ), m_e ( e ){ cout << \"Derived constructor\" << endl ; } Derived ::~ Derived (){ cout << \"Derived destructor\" << endl ; } void Derived :: display (){ BaseA :: show (); //\u8c03\u7528BaseA\u7c7b\u7684show()\u51fd\u6570 BaseB :: show (); //\u8c03\u7528BaseB\u7c7b\u7684show()\u51fd\u6570 cout << \"m_e = \" << m_e << endl ; } int main (){ Derived obj ( 1 , 2 , 3 , 4 , 5 ); obj . display (); return 0 ; } \u547d\u540d\u51b2\u7a81\u65f6\u4f7f\u7528\u57df\u89e3\u6790\u7b26\u3002","title":"\u591a\u7ee7\u627f"},{"location":"cplus/cpp_summary/#_20","text":"\u83f1\u5f62\u7ee7\u627f \u4e3a\u4e86\u89e3\u51b3\u591a\u7ee7\u627f\u65f6\u7684\u547d\u540d\u51b2\u7a81\u548c\u5197\u4f59\u6570\u636e\u95ee\u9898\uff0cC++ \u63d0\u51fa\u4e86\u865a\u7ee7\u627f\uff0c\u4f7f\u5f97\u5728\u6d3e\u751f\u7c7b\u4e2d\u53ea\u4fdd\u7559\u4e00\u4efd\u95f4\u63a5\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u865a\u7ee7\u627f\u7684\u76ee\u7684\u662f\u8ba9\u67d0\u4e2a\u7c7b\u505a\u51fa\u58f0\u660e\uff0c\u627f\u8bfa\u613f\u610f\u5171\u4eab\u5b83\u7684\u57fa\u7c7b\u3002\u5176\u4e2d\uff0c\u8fd9\u4e2a\u88ab\u5171\u4eab\u7684\u57fa\u7c7b\u5c31\u79f0\u4e3a\u865a\u57fa\u7c7b\uff08Virtual Base Class\uff09\uff0c\u672c\u4f8b\u4e2d\u7684 A \u5c31\u662f\u4e00\u4e2a\u865a\u57fa\u7c7b\u3002\u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c\u4e0d\u8bba\u865a\u57fa\u7c7b\u5728\u7ee7\u627f\u4f53\u7cfb\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u90fd\u53ea\u5305\u542b\u4e00\u4efd\u865a\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u5bf9\u6700\u7ec8\u7684\u6d3e\u751f\u7c7b\u6765\u8bf4\uff0c\u865a\u57fa\u7c7b\u662f\u95f4\u63a5\u57fa\u7c7b\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u57fa\u7c7b\u3002\u8fd9\u8ddf\u666e\u901a\u7ee7\u627f\u4e0d\u540c\uff0c\u5728\u666e\u901a\u7ee7\u627f\u4e2d\uff0c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u7c7b\u5176\u5b9e\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u53d1\u751f\u6570\u636e\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u8f6c\u6362\u53ea\u6709\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u624d\u6709\u610f\u4e49\uff0c\u5e76\u4e14\u53ea\u80fd\u5c06\u6d3e\u751f\u7c7b\u8d4b\u503c\u7ed9\u57fa\u7c7b\uff0c\u5305\u62ec\u5c06\u6d3e\u751f\u7c7b\u5bf9\u8c61\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5bf9\u8c61\u3001\u5c06\u6d3e\u751f\u7c7b\u6307\u9488\u8d4b\u503c\u7ed9\u57fa\u7c7b\u6307\u9488\u3001\u5c06\u6d3e\u751f\u7c7b\u5f15\u7528\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5f15\u7528\uff0c\u8fd9\u5728 C++ \u4e2d\u79f0\u4e3a\u5411\u4e0a\u8f6c\u578b\uff08Upcasting\uff09\u3002\u76f8\u5e94\u5730\uff0c\u5c06\u57fa\u7c7b\u8d4b\u503c\u7ed9\u6d3e\u751f\u7c7b\u79f0\u4e3a\u5411\u4e0b\u8f6c\u578b\uff08Downcasting\uff09\u3002 \u8d4b\u503c\u7684\u672c\u8d28\u662f\u5c06\u73b0\u6709\u7684\u6570\u636e\u5199\u5165\u5df2\u5206\u914d\u597d\u7684\u5185\u5b58\u4e2d\uff0c\u5bf9\u8c61\u7684\u5185\u5b58\u53ea\u5305\u542b\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u6240\u4ee5\u5bf9\u8c61\u4e4b\u95f4\u7684\u8d4b\u503c\u662f\u6210\u5458\u53d8\u91cf\u7684\u8d4b\u503c\uff0c\u6210\u5458\u51fd\u6570\u4e0d\u5b58\u5728\u8d4b\u503c\u95ee\u9898\u3002","title":"\u865a\u7ee7\u627f\u548c\u865a\u57fa\u7c7b\u8be6\u89e3"},{"location":"cplus/cpp_summary/#_21","text":"\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u53ea\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002 \u8ba9\u57fa\u7c7b\u6307\u9488\u80fd\u591f\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0cC++ \u589e\u52a0\u4e86\u865a\u51fd\u6570\uff08Virtual Function\uff09\u3002\u4f7f\u7528\u865a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u58f0\u660e\u524d\u9762\u589e\u52a0 virtual \u5173\u952e\u5b57\u3002 \u6709\u4e86\u865a\u51fd\u6570\uff0c\u57fa\u7c7b\u6307\u9488\u6307\u5411\u57fa\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u57fa\u7c7b\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\uff09\uff0c\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u6309\u7167\u57fa\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u6d3e\u751f\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u5b83\u6709\u591a\u79cd\u5f62\u6001\uff0c\u6216\u8005\u8bf4\u6709\u591a\u79cd\u8868\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u591a\u6001\uff08Polymorphism\uff09\u3002 \u865a\u51fd\u6570\u7684\u6ce8\u610f\u4e8b\u9879 1. \u53ea\u9700\u8981\u5728\u865a\u51fd\u6570\u7684\u58f0\u660e\u5904\u52a0\u4e0a virtual \u5173\u952e\u5b57\uff0c\u51fd\u6570\u5b9a\u4e49\u5904\u53ef\u4ee5\u52a0\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u3002 \u53ef\u4ee5\u53ea\u5c06\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u8fd9\u6837\u6240\u6709\u6d3e\u751f\u7c7b\u4e2d\u5177\u6709\u906e\u853d\u5173\u7cfb\u7684\u540c\u540d\u51fd\u6570\u90fd\u5c06\u81ea\u52a8\u6210\u4e3a\u865a\u51fd\u6570\u3002 \u5f53\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u865a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u5b9a\u4e49\u65b0\u7684\u51fd\u6570\u6765\u906e\u853d\u6b64\u51fd\u6570\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u3002 \u53ea\u6709\u6d3e\u751f\u7c7b\u7684\u865a\u51fd\u6570\u8986\u76d6\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u624d\u80fd\u6784\u6210\u591a\u6001\uff08\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u8bbf\u95ee\u6d3e\u751f\u7c7b\u51fd\u6570\uff09\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u800c\u4e14\u6709\u65f6\u5019\u5fc5\u987b\u8981\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u6784\u6210\u591a\u6001\u7684\u6761\u4ef6 1. \u5fc5\u987b\u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff1b 2. \u7ee7\u627f\u5173\u7cfb\u4e2d\u5fc5\u987b\u6709\u540c\u540d\u7684\u865a\u51fd\u6570\uff0c\u5e76\u4e14\u5b83\u4eec\u662f\u8986\u76d6\u5173\u7cfb\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u3002 3. \u5b58\u5728\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u901a\u8fc7\u8be5\u6307\u9488\u8c03\u7528\u865a\u51fd\u6570\u3002","title":"\u591a\u6001\u4e0e\u865a\u51fd\u6570"},{"location":"cplus/cpp_summary/#_22","text":"\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 1 2 3 4 5 6 7 class Base { public : Base (); virtual ~ Base (); protected : char * str ; };","title":"\u865a\u6790\u6784\u51fd\u6570\u7684\u5fc5\u8981\u6027"},{"location":"cplus/cpp_summary/#_23","text":"1 virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) = 0 ; \u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u53ea\u6709\u51fd\u6570\u58f0\u660e\uff0c\u5728\u865a\u51fd\u6570\u58f0\u660e\u7684\u7ed3\u5c3e\u52a0\u4e0a=0\uff0c\u8868\u660e\u6b64\u51fd\u6570\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08Abstract Class\uff09\u3002\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u65e0\u6cd5\u5b9e\u4f8b\u5316\u3002\u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u624d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u62bd\u8c61\u57fa\u7c7b\u9664\u4e86\u7ea6\u675f\u6d3e\u751f\u7c7b\u7684\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u591a\u6001\u3002 \u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7c7b\u6210\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u4f46\u662f\u62bd\u8c61\u57fa\u7c7b\u4e2d\u9664\u4e86\u5305\u542b\u7eaf\u865a\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u5176\u5b83\u7684\u6210\u5458\u51fd\u6570\uff08\u865a\u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\uff09\u548c\u6210\u5458\u53d8\u91cf\u3002 \u53ea\u6709\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\u624d\u80fd\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u666e\u901a\u6210\u5458\u51fd\u6570\u548c\u9876\u5c42\u51fd\u6570\u5747\u4e0d\u80fd\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\u3002","title":"\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u8be6\u89e3"},{"location":"cplus/cpp_summary/#_24","text":"\u7f16\u8bd1\u5668\u4e4b\u6240\u4ee5\u80fd\u901a\u8fc7\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u627e\u5230\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u989d\u5916\u5730\u589e\u52a0\u4e86\u865a\u51fd\u6570\u8868\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5305\u542b\u4e86\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u5728\u521b\u5efa\u8be5\u7c7b\u7684\u5bf9\u8c61\u65f6\u5c31\u4f1a\u989d\u5916\u5730\u589e\u52a0\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u865a\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\u3002\u4e0d\u8fc7\u6570\u7ec4\u548c\u5bf9\u8c61\u662f\u5206\u5f00\u5b58\u50a8\u7684\uff0c\u4e3a\u4e86\u5c06\u5bf9\u8c61\u548c\u6570\u7ec4\u5173\u8054\u8d77\u6765\uff0c\u7f16\u8bd1\u5668\u8fd8\u8981\u5728\u5bf9\u8c61\u4e2d\u5b89\u63d2\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u6570\u7ec4\u5c31\u662f\u865a\u51fd\u6570\u8868\uff08Virtual function table\uff09\uff0c\u7b80\u5199\u4e3avtable\u3002","title":"\u865a\u51fd\u6570\u8868"},{"location":"cplus/cpp_summary/#typeidrtti","text":"typeid \u8fd0\u7b97\u7b26\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u7c7b\u578b\u4fe1\u606f\u662f\u521b\u5efa\u6570\u636e\u7684\u6a21\u677f\uff0c\u6570\u636e\u5360\u7528\u591a\u5927\u5185\u5b58\u3001\u80fd\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c\u3001\u8be5\u5982\u4f55\u64cd\u4f5c\u7b49\uff0c\u8fd9\u4e9b\u90fd\u7531\u5b83\u7684\u7c7b\u578b\u4fe1\u606f\u51b3\u5b9a\u3002 \u8fd9\u79cd\u5728\u7a0b\u5e8f\u8fd0\u884c\u540e\u786e\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u4fe1\u606f\u7684\u673a\u5236\u79f0\u4e3a\u8fd0\u884c\u65f6\u7c7b\u578b\u8bc6\u522b\uff08Run-Time Type Identification\uff0cRTTI\uff09\u3002\u5728 C++ \u4e2d\uff0c\u53ea\u6709\u7c7b\u4e2d\u5305\u542b\u4e86\u865a\u51fd\u6570\u65f6\u624d\u4f1a\u542f\u7528 RTTI \u673a\u5236\uff0c\u5176\u4ed6\u6240\u6709\u60c5\u51b5\u90fd\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u786e\u5b9a\u7c7b\u578b\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> using namespace std ; //\u57fa\u7c7b class People { public : virtual void func (){ } }; //\u6d3e\u751f\u7c7b class Student : public People { }; int main (){ People * p ; int n ; cin >> n ; if ( n <= 100 ){ p = new People (); } else { p = new Student (); } //\u6839\u636e\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c if ( typeid ( * p ) == typeid ( People )){ cout << \"I am human.\" << endl ; } else { cout << \"I am a student.\" << endl ; } return 0 ; } \u9664\u4e86 typeid \u8fd0\u7b97\u7b26\uff0cdynamic_cast \u8fd0\u7b97\u7b26\u548c\u5f02\u5e38\u5904\u7406\u4e5f\u4f9d\u8d56\u4e8e RTTI \u673a\u5236\uff0c\u5e76\u4e14\u8981\u80fd\u591f\u901a\u8fc7\u6d3e\u751f\u7c7b\u83b7\u53d6\u57fa\u7c7b\u7684\u4fe1\u606f\uff0c\u6216\u8005\u8bf4\u8981\u80fd\u591f\u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\uff0c\u8981\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u518d\u589e\u52a0\u4e00\u6761\u7ef3\u7d22\u3002\u79f0\u6b64\u4e3a\u7ee7\u627f\u94fe\uff08Inheritance Chain\uff09\u3002","title":"typeid\u8fd0\u7b97\u7b26\u4e0eRTTI\u673a\u5236"},{"location":"cplus/cpp_summary/#_25","text":"1 2 3 \u8fd4\u56de\u503c\u7c7b\u578b operator \u8fd0\u7b97\u7b26\u540d\u79f0 ( \u5f62\u53c2\u8868\u5217 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> using namespace std ; class complex { public : complex (); complex ( double real , double imag ); public : //\u58f0\u660e\u8fd0\u7b97\u7b26\u91cd\u8f7d complex operator + ( const complex & A ) const ; void display () const ; private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; complex :: complex () : m_real ( 0.0 ), m_imag ( 0.0 ){ } complex :: complex ( double real , double imag ) : m_real ( real ), m_imag ( imag ){ } //\u5b9e\u73b0\u8fd0\u7b97\u7b26\u91cd\u8f7d complex complex :: operator + ( const complex & A ) const { complex B ; B . m_real = this -> m_real + A . m_real ; B . m_imag = this -> m_imag + A . m_imag ; return B ; } void complex :: display () const { cout << m_real << \" + \" << m_imag << \"i\" << endl ; } int main (){ complex c1 ( 4.3 , 5.8 ); complex c2 ( 2.4 , 3.7 ); complex c3 ; c3 = c1 + c2 ; c3 . display (); return 0 ; } 1 2 c3 = c1 + c2 ; c3 = c1 . operator + ( c2 ); \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570--->\u53cb\u5143\u51fd\u6570\u3002 \u91cd\u8f7d\u4e0d\u80fd\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u6027\u3002 \u91cd\u8f7d\u4e0d\u4f1a\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u7528\u6cd5\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u80fd\u6709\u9ed8\u8ba4\u7684\u53c2\u6570\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570\u3002 \u7bad\u5934\u8fd0\u7b97\u7b26->\u3001\u4e0b\u6807\u8fd0\u7b97\u7b26[ ]\u3001\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26( )\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26=\u53ea\u80fd\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d\u3002","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"cplus/cpp_summary/#_26","text":"\u6a21\u677f\u51fd\u6570 1 2 3 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , ... > \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //\u5728\u51fd\u6570\u4f53\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u53c2\u6570 } \u7c7b\u6a21\u677f 1 2 3 4 5 6 7 8 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > class \u7c7b\u540d{ //TODO: }; template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > \u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d < \u7c7b\u578b\u53c2\u6570 1 , \u7c7b\u578b\u53c2\u6570 2 , ... >:: \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> using namespace std ; template < class T1 , class T2 > //\u8fd9\u91cc\u4e0d\u80fd\u6709\u5206\u53f7 class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const ; //\u83b7\u53d6x\u5750\u6807 void setX ( T1 x ); //\u8bbe\u7f6ex\u5750\u6807 T2 getY () const ; //\u83b7\u53d6y\u5750\u6807 void setY ( T2 y ); //\u8bbe\u7f6ey\u5750\u6807 private : T1 m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < class T1 , class T2 > //\u6a21\u677f\u5934 T1 Point < T1 , T2 >:: getX () const /*\u51fd\u6570\u5934*/ { return m_x ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setX ( T1 x ){ m_x = x ; } template < class T1 , class T2 > T2 Point < T1 , T2 >:: getY () const { return m_y ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setY ( T2 y ){ m_y = y ; } int main (){ Point < int , int > p1 ( 10 , 20 ); cout << \"x=\" << p1 . getX () << \", y=\" << p1 . getY () << endl ; Point < int , char *> p2 ( 10 , \"\u4e1c\u7ecf180\u5ea6\" ); cout << \"x=\" << p2 . getX () << \", y=\" << p2 . getY () << endl ; Point < char * , char *> * p3 = new Point < char * , char *> ( \"\u4e1c\u7ecf180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ); cout << \"x=\" << p3 -> getX () << \", y=\" << p3 -> getY () << endl ; return 0 ; } \u53ef\u8fb9\u957f\u6570\u7ec4\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> #include <cstring> using namespace std ; template < class T > class CArray { int size ; //\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 T * ptr ; //\u6307\u5411\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4 public : CArray ( int s = 0 ); //s\u4ee3\u8868\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 CArray ( CArray & a ); ~ CArray (); void push_back ( const T & v ); //\u7528\u4e8e\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20v CArray & operator = ( const CArray & a ); //\u7528\u4e8e\u6570\u7ec4\u5bf9\u8c61\u95f4\u7684\u8d4b\u503c T length () { return size ; } T & operator []( int i ) { //\u7528\u4ee5\u652f\u6301\u6839\u636e\u4e0b\u6807\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\uff0c\u5982a[i] = 4;\u548cn = a[i]\u8fd9\u6837\u7684\u8bed\u53e5 return ptr [ i ]; } }; template < class T > CArray < T >:: CArray ( int s ) : size ( s ) { if ( s == 0 ) ptr = NULL ; else ptr = new T [ s ]; } template < class T > CArray < T >:: CArray ( CArray & a ) { if ( ! a . ptr ) { ptr = NULL ; size = 0 ; return ; } ptr = new T [ a . size ]; memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; } template < class T > CArray < T >::~ CArray () { if ( ptr ) delete [] ptr ; } template < class T > CArray < T > & CArray < T >:: operator = ( const CArray & a ) { //\u8d4b\u503c\u53f7\u7684\u4f5c\u7528\u662f\u4f7f\"=\"\u5de6\u8fb9\u5bf9\u8c61\u91cc\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u548c\u5185\u5bb9\u90fd\u548c\u53f3\u8fb9\u7684\u5bf9\u8c61\u4e00\u6837 if ( this == & a ) //\u9632\u6b62a=a\u8fd9\u6837\u7684\u8d4b\u503c\u5bfc\u81f4\u51fa\u9519 return * this ; if ( a . ptr == NULL ) { //\u5982\u679ca\u91cc\u9762\u7684\u6570\u7ec4\u662f\u7a7a\u7684 if ( ptr ) delete [] ptr ; ptr = NULL ; size = 0 ; return * this ; } if ( size < a . size ) { //\u5982\u679c\u539f\u6709\u7a7a\u95f4\u591f\u5927\uff0c\u5c31\u4e0d\u7528\u5206\u914d\u65b0\u7684\u7a7a\u95f4 if ( ptr ) delete [] ptr ; ptr = new T [ a . size ]; } memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; return * this ; } template < class T > void CArray < T >:: push_back ( const T & v ) { //\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 if ( ptr ) { T * tmpPtr = new T [ size + 1 ]; //\u91cd\u65b0\u5206\u914d\u7a7a\u95f4 memcpy ( tmpPtr , ptr , sizeof ( T ) * size ); //\u62f7\u8d1d\u539f\u6570\u7ec4\u5185\u5bb9 delete [] ptr ; ptr = tmpPtr ; } else //\u6570\u7ec4\u672c\u6765\u662f\u7a7a\u7684 ptr = new T [ 1 ]; ptr [ size ++ ] = v ; //\u52a0\u5165\u65b0\u7684\u6570\u7ec4\u5143\u7d20 } int main () { CArray < int > a ; for ( int i = 0 ; i < 5 ; ++ i ) a . push_back ( i ); for ( int i = 0 ; i < a . length (); ++ i ) cout << a [ i ] << \" \" ; return 0 ; }","title":"\u6a21\u677f\u548c\u6cdb\u578b"},{"location":"cplus/cpp_summary/#_27","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> using namespace std ; template < class T > void Swap ( T & a , T & b ); //\u6a21\u677f\u2460\uff1a\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c template < typename T > void Swap ( T a [], T b [], int len ); //\u6a21\u677f\u2461\uff1a\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 void printArray ( int arr [], int len ); //\u6253\u5370\u6570\u7ec4\u5143\u7d20 int main (){ //\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c int m = 10 , n = 99 ; Swap ( m , n ); //\u5339\u914d\u6a21\u677f\u2460 cout << m << \", \" << n << endl ; //\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; int b [ 5 ] = { 10 , 20 , 30 , 40 , 50 }; int len = sizeof ( a ) / sizeof ( int ); //\u6570\u7ec4\u957f\u5ea6 Swap ( a , b , len ); //\u5339\u914d\u6a21\u677f\u2461 printArray ( a , len ); printArray ( b , len ); return 0 ; } template < class T > void Swap ( T & a , T & b ){ T temp = a ; a = b ; b = temp ; } template < typename T > void Swap ( T a [], T b [], int len ){ T temp ; for ( int i = 0 ; i < len ; i ++ ){ temp = a [ i ]; a [ i ] = b [ i ]; b [ i ] = temp ; } } void printArray ( int arr [], int len ){ for ( int i = 0 ; i < len ; i ++ ){ if ( i == len - 1 ){ cout << arr [ i ] << endl ; } else { cout << arr [ i ] << \", \" ; } } } \u4e3a\u51fd\u6570\u6a21\u677f\u663e\u5f0f\u5730\u6307\u660e\u5b9e\u53c2","title":"\u91cd\u8f7d\u51fd\u6570\u6a21\u677f"},{"location":"cplus/cpp_summary/#explicit-specialization","text":"\u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> #include <string> using namespace std ; typedef struct { string name ; int age ; float score ; } STU ; //\u51fd\u6570\u6a21\u677f template < class T > const T & Max ( const T & a , const T & b ); //\u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9STU\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> const STU & Max < STU > ( const STU & a , const STU & b ); //\u91cd\u8f7d<< ostream & operator << ( ostream & out , const STU & stu ); int main (){ int a = 10 ; int b = 20 ; cout << Max ( a , b ) << endl ; STU stu1 = { \"\u738b\u660e\" , 16 , 95.5 }; STU stu2 = { \"\u5f90\u4eae\" , 17 , 90.0 }; cout << Max ( stu1 , stu2 ) << endl ; return 0 ; } template < class T > const T & Max ( const T & a , const T & b ){ return a > b ? a : b ; } template <> const STU & Max < STU > ( const STU & a , const STU & b ){ return a . score > b . score ? a : b ; } ostream & operator << ( ostream & out , const STU & stu ){ out << stu . name << \" , \" << stu . age << \" , \" << stu . score ; return out ; } \u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> class Point < char * , char *> { public : Point ( char * x , char * y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } char * getY () const { return m_y ; } void setY ( char * y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 char * m_y ; //y\u5750\u6807 }; //\u8fd9\u91cc\u4e0d\u80fd\u5e26\u6a21\u677f\u5934template<> void Point < char * , char *>:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < int , char *> ( 10 , \"\u4e1c\u4eac180\u5ea6\" ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; } \u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 template < typename T2 > class Point < char * , T2 > { public : Point ( char * x , T2 y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < typename T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < char * , T2 >:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < char * , int > ( \"\u4e1c\u4eac180\u5ea6\" , 10 ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; }","title":"\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08Explicit Specialization\uff09"},{"location":"cplus/cpp_summary/#_28","text":"1 2 template < typename T , int N > class Demo { }; template < class T , int N > void func ( T ( & arr )[ N ]);","title":"\u975e\u7c7b\u578b\u53c2\u6570"},{"location":"cplus/cpp_summary/#_29","text":"\u52a8\u6001\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #include <iostream> #include <cstring> #include <cstdlib> using namespace std ; template < typename T , int N > class Array { public : Array (); ~ Array (); public : T & operator []( int i ); //\u91cd\u8f7d\u4e0b\u6807\u8fd0\u7b97\u7b26[] int length () const { return m_length ; } //\u83b7\u53d6\u6570\u7ec4\u957f\u5ea6 bool capacity ( int n ); //\u6539\u53d8\u6570\u7ec4\u5bb9\u91cf private : int m_length ; //\u6570\u7ec4\u7684\u5f53\u524d\u957f\u5ea6 int m_capacity ; //\u5f53\u524d\u5185\u5b58\u7684\u5bb9\u91cf\uff08\u80fd\u5bb9\u4e43\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff09 T * m_p ; //\u6307\u5411\u6570\u7ec4\u5185\u5b58\u7684\u6307\u9488 }; template < typename T , int N > Array < T , N >:: Array (){ m_p = new T [ N ]; m_capacity = m_length = N ; } template < typename T , int N > Array < T , N >::~ Array (){ delete [] m_p ; } template < typename T , int N > T & Array < T , N >:: operator []( int i ){ if ( i < 0 || i >= m_length ){ cout << \"Exception: Array index out of bounds!\" << endl ; } return m_p [ i ]; } template < typename T , int N > bool Array < T , N >:: capacity ( int n ){ if ( n > 0 ){ //\u589e\u5927\u6570\u7ec4 int len = m_length + n ; //\u589e\u5927\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len <= m_capacity ){ //\u73b0\u6709\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 m_length = len ; return true ; } else { //\u73b0\u6709\u5185\u5b58\u4e0d\u80fd\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 T * pTemp = new T [ m_length + 2 * n * sizeof ( T )]; //\u589e\u52a0\u7684\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3 2*n \u4e2a\u5143\u7d20 if ( pTemp == NULL ){ //\u5185\u5b58\u5206\u914d\u5931\u8d25 cout << \"Exception: Failed to allocate memory!\" << endl ; return false ; } else { //\u5185\u5b58\u5206\u914d\u6210\u529f memcpy ( pTemp , m_p , m_length * sizeof ( T ) ); delete [] m_p ; m_p = pTemp ; m_capacity = m_length = len ; } } } else { //\u6536\u7f29\u6570\u7ec4 int len = m_length - abs ( n ); //\u6536\u7f29\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len < 0 ){ cout << \"Exception: Array length is too small!\" << endl ; return false ; } else { m_length = len ; return true ; } } } int main (){ Array < int , 5 > arr ; //\u4e3a\u6570\u7ec4\u5143\u7d20\u8d4b\u503c for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e00\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6269\u5927\u5bb9\u91cf\u5e76\u4e3a\u589e\u52a0\u7684\u5143\u7d20\u8d4b\u503c arr . capacity ( 8 ); for ( int i = 5 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e8c\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6536\u7f29\u5bb9\u91cf arr . capacity ( - 4 ); //\u7b2c\u4e09\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; return 0 ; } \u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u662f\u7531\u7f16\u8bd1\u5668\u5b8c\u6210\u7684\uff0c\u800c\u4e0d\u662f\u7531\u94fe\u63a5\u5668\u5b8c\u6210\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u94fe\u63a5\u671f\u95f4\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002\u6240\u4ee5\u4e0d\u80fd\u5c06\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u591a\u4e2a\u6587\u4ef6\u4e2d","title":"\u7c7b\u6a21\u677f\u4e2d\u4f7f\u7528\u975e\u7c7b\u578b\u53c2\u6570"},{"location":"cplus/cpp_summary/#note","text":"","title":"Note"},{"location":"cplus/cpp_summary/#_30","text":"","title":"\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316"},{"location":"cplus/cpp_summary/#_31","text":"","title":"\u7c7b\u6a21\u677f\u4e0e\u7ee7\u627f"},{"location":"cplus/cpp_summary/#_32","text":"","title":"\u7c7b\u6a21\u677f\u4e0e\u53cb\u5143"},{"location":"cplus/cpp_summary/#_33","text":"","title":"\u7c7b\u6a21\u677f\u4e2d\u7684\u9759\u6001\u6210\u5458"},{"location":"cplus/cpp_summary/#try-catch","text":"\u5f02\u5e38\u5fc5\u987b\u663e\u5f0f\u5730\u629b\u51fa\uff0c\u624d\u80fd\u88ab\u68c0\u6d4b\u548c\u6355\u83b7\u5230\uff1b\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684\u629b\u51fa\uff0c\u5373\u4f7f\u6709\u5f02\u5e38\u4e5f\u68c0\u6d4b\u4e0d\u5230\u3002 1 \u629b\u51fa\uff08 Throw \uff09 --> \u68c0\u6d4b\uff08 Try \uff09 --> \u6355\u83b7\uff08 Catch \uff09 \u7a0b\u5e8f\u7684\u9519\u8bef\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\u8bed\u6cd5\u9519\u8bef\u3001\u903b\u8f91\u9519\u8bef\u548c\u8fd0\u884c\u65f6\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 try { //\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_1 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_2 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } //\u5176\u4ed6\u7684catch catch ( exception_type_n e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 }","title":"\u5f02\u5e38\u5904\u7406\uff08try catch\uff09"},{"location":"cplus/cpp_summary/#_34","text":"","title":"\u8fdb\u9636"},{"location":"cplus/cpp_summary/#_35","text":"const \u5f15\u7528 \u53ea\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <iostream> #include <string> using namespace std ; class Student { public : Student ( string name = \"\" , int age = 0 , float score = 0.0f ); //\u666e\u901a\u6784\u9020\u51fd\u6570 Student ( const Student & stu ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u58f0\u660e\uff09 public : void display (); private : string m_name ; int m_age ; float m_score ; }; Student :: Student ( string name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u5b9a\u4e49\uff09 Student :: Student ( const Student & stu ){ this -> m_name = stu . m_name ; this -> m_age = stu . m_age ; this -> m_score = stu . m_score ; cout << \"Copy constructor was called.\" << endl ; } void Student :: display (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } int main (){ Student stu1 ( \"\u5c0f\u660e\" , 16 , 90.5 ); Student stu2 = stu1 ; //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Student stu3 ( stu1 ); //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 stu1 . display (); stu2 . display (); stu3 . display (); return 0 ; } \u5728\u5b9a\u4e49\u7684\u540c\u65f6\u8fdb\u884c\u8d4b\u503c\u53eb\u505a\u521d\u59cb\u5316\uff08Initialization\uff09\uff0c\u5b9a\u4e49\u5b8c\u6210\u4ee5\u540e\u518d\u8d4b\u503c\uff08\u4e0d\u7ba1\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u6709\u6ca1\u6709\u8d4b\u503c\uff09\u5c31\u53eb\u505a\u8d4b\u503c\uff08Assignment\uff09\u3002\u521d\u59cb\u5316\u53ea\u80fd\u6709\u4e00\u6b21\uff0c\u8d4b\u503c\u53ef\u4ee5\u6709\u591a\u6b21\u3002 \u5f53\u4ee5\u62f7\u8d1d\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1b\u5f53\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u8d4b\u503c\u65f6\uff0c\u4f1a\u8c03\u7528\u91cd\u8f7d\u8fc7\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 1","title":"\u62f7\u8d1d\u6784\u9020\u51fd\u6570"},{"location":"tools/mkdocs/","text":"mkdocs-material\u90e8\u7f72 \u00b6 \u5b89\u88c5 \u00b6 1 pip install mkdocs mkdocs - material \u521d\u59cb\u5316 \u00b6 1 mkdocs new project \u672c\u5730\u670d\u52a1\u542f\u52a8 \u00b6 1 2 #\u5728project\u76ee\u5f55\u4e0b\u6267\u884c mkdocs server \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/ \u67e5\u770b\u6548\u679c\u3002 \u53d1\u5e03\u81f3GitHub Pages \u00b6 github\u4e0a\u65b0\u5efa\u9879\u76ee\uff0cclone\u81f3\u672c\u5730\uff0c\u5c06mkdocs\u66f4\u76ee\u5f55(project)\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u79fb\u52a8\u5230git clone\u7684\u672c\u5730\u76ee\u5f55\u91cc 1 mkdocs gh-deploy \u53d1\u5e03\u81f3HTTP Server \u00b6 1 mkdocs build \u5c06site\u76ee\u5f55\u4e0b\u6240\u6709\u4e1c\u897f\u540c\u6b65\u81f3http server\u91cc\u3002","title":"\u57fa\u4e8emkdocs\u7684blog\u642d\u5efa"},{"location":"tools/mkdocs/#mkdocs-material","text":"","title":"mkdocs-material\u90e8\u7f72"},{"location":"tools/mkdocs/#_1","text":"1 pip install mkdocs mkdocs - material","title":"\u5b89\u88c5"},{"location":"tools/mkdocs/#_2","text":"1 mkdocs new project","title":"\u521d\u59cb\u5316"},{"location":"tools/mkdocs/#_3","text":"1 2 #\u5728project\u76ee\u5f55\u4e0b\u6267\u884c mkdocs server \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/ \u67e5\u770b\u6548\u679c\u3002","title":"\u672c\u5730\u670d\u52a1\u542f\u52a8"},{"location":"tools/mkdocs/#github-pages","text":"github\u4e0a\u65b0\u5efa\u9879\u76ee\uff0cclone\u81f3\u672c\u5730\uff0c\u5c06mkdocs\u66f4\u76ee\u5f55(project)\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u79fb\u52a8\u5230git clone\u7684\u672c\u5730\u76ee\u5f55\u91cc 1 mkdocs gh-deploy","title":"\u53d1\u5e03\u81f3GitHub Pages"},{"location":"tools/mkdocs/#http-server","text":"1 mkdocs build \u5c06site\u76ee\u5f55\u4e0b\u6240\u6709\u4e1c\u897f\u540c\u6b65\u81f3http server\u91cc\u3002","title":"\u53d1\u5e03\u81f3HTTP Server"},{"location":"tools/tmux/","text":"tmux\u57fa\u672c\u6280\u5de7 \u00b6 \u4f1a\u8bddsession \u00b6 \u521b\u5efa\u4e00\u4e2atmux\u7684\u4f1a\u8bdd \u00b6 1 2 tmux tmux new -s name \u9000\u51fatmux\u4f1a\u8bdd \u00b6 1 2 3 4 5 #\u540e\u53f0\u8fd0\u884c tmux attach ctrl+b d #\u9000\u51fa\u4e0d\u540e\u53f0\u8fd0\u884c exit \u5217\u51fa\u6240\u6709\u7684tmux\u4f1a\u8bdd \u00b6 1 2 tmux ls tmux list-sessions \u88c5\u8f7d\u4e00\u4e2a\u4f1a\u8bdd \u00b6 1 2 tmux attach tmux attach -t name \u9500\u6bc1\u4e00\u4e2a\u4f1a\u8bdd \u00b6 1 tmux kill-session -t name \u7a97\u53e3windows \u00b6 \u521b\u5efa\u4e00\u4e2a\u65b0\u7a97\u53e3 \u00b6 1 crtl+b c \u7a97\u53e3\u95f4\u5207\u6362 \u00b6 1 2 3 ctrl+b n(next\u7684\u610f\u601d) ctrl+b p(previous) ctrl+b 0/1/2... \u5173\u95ed\u7a97\u53e3 \u00b6 1 2 exit ctrl+b & \u9762\u677fpane \u00b6 \uff08\u5747\u5728\u6309\u4e0bctrl+b\u4e4b\u540e\u677e\u5f00\uff0c\u7136\u540e\u6309\u4e0b\u76f8\u5e94\u7684\u6309\u952e\uff09 \u00b6 1 2 3 4 5 6 7 8 ? \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 \" \u7eb5\u5411\u5206\u5272\u7a97\u53e3\uff08\u4e0a\u4e0b\u4e8c\u5206\uff09 % \u6a2a\u5411\u5206\u5272\u7a97\u53e3(\u5de6\u53f3\u4e8c\u5206) o \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 \u4e0a\u4e0b\u65b9\u5411\u952e \u4e0a\u4e00\u4e2a\u53ca\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 crtl+b X(\u5927\u5199) exit crtl+b :\u547d\u4ee4\u6a21\u5f0f","title":"tmux\u57fa\u672c\u6280\u5de7"},{"location":"tools/tmux/#tmux","text":"","title":"tmux\u57fa\u672c\u6280\u5de7"},{"location":"tools/tmux/#session","text":"","title":"\u4f1a\u8bddsession"},{"location":"tools/tmux/#tmux_1","text":"1 2 tmux tmux new -s name","title":"\u521b\u5efa\u4e00\u4e2atmux\u7684\u4f1a\u8bdd"},{"location":"tools/tmux/#tmux_2","text":"1 2 3 4 5 #\u540e\u53f0\u8fd0\u884c tmux attach ctrl+b d #\u9000\u51fa\u4e0d\u540e\u53f0\u8fd0\u884c exit","title":"\u9000\u51fatmux\u4f1a\u8bdd"},{"location":"tools/tmux/#tmux_3","text":"1 2 tmux ls tmux list-sessions","title":"\u5217\u51fa\u6240\u6709\u7684tmux\u4f1a\u8bdd"},{"location":"tools/tmux/#_1","text":"1 2 tmux attach tmux attach -t name","title":"\u88c5\u8f7d\u4e00\u4e2a\u4f1a\u8bdd"},{"location":"tools/tmux/#_2","text":"1 tmux kill-session -t name","title":"\u9500\u6bc1\u4e00\u4e2a\u4f1a\u8bdd"},{"location":"tools/tmux/#windows","text":"","title":"\u7a97\u53e3windows"},{"location":"tools/tmux/#_3","text":"1 crtl+b c","title":"\u521b\u5efa\u4e00\u4e2a\u65b0\u7a97\u53e3"},{"location":"tools/tmux/#_4","text":"1 2 3 ctrl+b n(next\u7684\u610f\u601d) ctrl+b p(previous) ctrl+b 0/1/2...","title":"\u7a97\u53e3\u95f4\u5207\u6362"},{"location":"tools/tmux/#_5","text":"1 2 exit ctrl+b &","title":"\u5173\u95ed\u7a97\u53e3"},{"location":"tools/tmux/#pane","text":"","title":"\u9762\u677fpane"},{"location":"tools/tmux/#ctrlb","text":"1 2 3 4 5 6 7 8 ? \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 \" \u7eb5\u5411\u5206\u5272\u7a97\u53e3\uff08\u4e0a\u4e0b\u4e8c\u5206\uff09 % \u6a2a\u5411\u5206\u5272\u7a97\u53e3(\u5de6\u53f3\u4e8c\u5206) o \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 \u4e0a\u4e0b\u65b9\u5411\u952e \u4e0a\u4e00\u4e2a\u53ca\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 crtl+b X(\u5927\u5199) exit crtl+b :\u547d\u4ee4\u6a21\u5f0f","title":"\uff08\u5747\u5728\u6309\u4e0bctrl+b\u4e4b\u540e\u677e\u5f00\uff0c\u7136\u540e\u6309\u4e0b\u76f8\u5e94\u7684\u6309\u952e\uff09"},{"location":"tools/tools/","text":"Some Tools \u00b6 \u5370\u8c61\u7b14\u8bb0 \u5e55\u5e03 vs code \u756a\u8304\u571f\u8c46","title":"Tool"},{"location":"tools/tools/#some-tools","text":"\u5370\u8c61\u7b14\u8bb0 \u5e55\u5e03 vs code \u756a\u8304\u571f\u8c46","title":"Some Tools"}]}