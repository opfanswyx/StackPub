{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Material color palette \u989c\u8272\u4e3b\u9898 \u00b6 Primary colors \u4e3b\u8272 \u00b6 \u9ed8\u8ba4\u4e3a Indigo \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) Accent colors \u8f85\u52a9\u8272 \u00b6 \u9ed8\u8ba4\u4e3a pink \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) // #758 document.getElementsByClassName('md-nav__title')[1].click() About \u00b6 AS\u60a3\u8005\uff0c\u4e09\u6d41\u7801\u755c\uff0c\u52c3\u5b66\u7ed3\u4e1a\uff0c\u6781\u5ea6\u5931\u8d25\uff0c\u8eba\u5e73\u72b6\u6001\u3002 \u90fd\u662f\u4e9b\u8001\u751f\u5e38\u8c08\u7684\u95ee\u9898\uff0c\u5c1d\u8bd5\u6458\u6284\u603b\u7ed3\u8868\u8fbe\u3002 Contact \u00b6 Email\ud83d\udcee: opfanswyx@outlook.com GitHub: https://github.com/opfanswyx blogroll radaren \u2122 StackHarbor \u2122 iimt \u2122 bye \u6211\u662f\u6211\u4e4b\u6240\u6709\u56e0\u679c\u4e4b\u6307\u5411\u3002\u00ae\u2122","title":"Hello World"},{"location":"#material-color-palette","text":"","title":"Material color palette \u989c\u8272\u4e3b\u9898"},{"location":"#primary-colors","text":"\u9ed8\u8ba4\u4e3a Indigo \u70b9\u51fb\u8272\u5757\u53ef\u66f4\u6362\u4e3b\u9898\u7684\u4e3b\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) })","title":"Primary colors \u4e3b\u8272"},{"location":"#accent-colors","text":"\u9ed8\u8ba4\u4e3a pink \u70b9\u51fb\u8272\u5757\u66f4\u6362\u4e3b\u9898\u7684\u8f85\u52a9\u8272 Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) // #758 document.getElementsByClassName('md-nav__title')[1].click()","title":"Accent colors \u8f85\u52a9\u8272"},{"location":"#about","text":"AS\u60a3\u8005\uff0c\u4e09\u6d41\u7801\u755c\uff0c\u52c3\u5b66\u7ed3\u4e1a\uff0c\u6781\u5ea6\u5931\u8d25\uff0c\u8eba\u5e73\u72b6\u6001\u3002 \u90fd\u662f\u4e9b\u8001\u751f\u5e38\u8c08\u7684\u95ee\u9898\uff0c\u5c1d\u8bd5\u6458\u6284\u603b\u7ed3\u8868\u8fbe\u3002","title":"About"},{"location":"#contact","text":"Email\ud83d\udcee: opfanswyx@outlook.com GitHub: https://github.com/opfanswyx blogroll radaren \u2122 StackHarbor \u2122 iimt \u2122 bye \u6211\u662f\u6211\u4e4b\u6240\u6709\u56e0\u679c\u4e4b\u6307\u5411\u3002\u00ae\u2122","title":"Contact"},{"location":"algorithm/plan/","text":"\u672c\u6a21\u5757\u8ba1\u5212 \u00b6 \u4ee3\u7801\u4ed3\u5e93 \u7ebf\u6027\u8868 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u94fe\u5f0f\u5b58\u50a8 \u53cc\u5411\u94fe\u8868 \u5faa\u73af\u94fe\u8868(\u7ea6\u745f\u592b\u73af) \u9759\u6001\u94fe\u8868 \u53cc\u5411\u5faa\u73af\u94fe\u8868 \u6808 \u00b6 \u987a\u5e8f\u6808 \u94fe\u5f0f\u6808 \u6808\u9012\u5f52 \u961f\u5217 \u00b6 \u987a\u5e8f\u961f\u5217 \u94fe\u5f0f\u961f\u5217 \u5faa\u73af\u961f\u5217 \u4e32 \u00b6 \u4e32\u7ed3\u6784 \u6a21\u5f0f\u5339\u914d \u6734\u7d20\u5339\u914d kmp\u7b97\u6cd5 BF\u7b97\u6cd5 AC\u81ea\u52a8\u673a \u6570\u7ec4\u548c\u5e7f\u4e49\u8868 \u00b6 \u77e9\u9635 \u7279\u6b8a\u77e9\u9635(\u5bf9\u79f0\u77e9\u9635,\u4e09\u89d2\u77e9\u9635,\u5bf9\u89d2\u77e9\u9635) \u7a00\u758f\u77e9\u9635(\u8f6c\u7f6e,\u5341\u5b57\u94fe\u8868) \u5e7f\u4e49\u8868 \u6811 \u00b6 \u4e8c\u53c9\u6811 \u7ebf\u7d22\u4e8c\u53c9\u6811 \u8d6b\u592b\u66fc\u6811 \u56fe \u00b6 \u904d\u5386 \u5e7f\u5ea6\u4f18\u5148BFS \u6df1\u5ea6\u4f18\u5148DFS \u6700\u5c0f\u751f\u6210\u6811 Prim(\u666e\u91cc\u59c6)\u7b97\u6cd5 Kruskal(\u514b\u9c81\u65af\u5361\u5c14)\u7b97\u6cd5 \u6700\u77ed\u8def\u5f84 \u62d3\u6251\u6392\u5e8f \u5173\u952e\u8def\u5f84 \u67e5\u627e \u00b6 \u987a\u5e8f\u8868\u67e5\u627e-\u76d1\u89c6\u54e8\u5175 \u6709\u5e8f\u8868\u67e5\u627e \u6298\u534a\u67e5\u627e \u63d2\u503c\u67e5\u627e \u6590\u6ce2\u90a3\u5951\u67e5\u627e \u7d22\u5f15\u987a\u5e8f\u67e5\u627e \u4e8c\u53c9\u6392\u5e8f\u6811 \u5e73\u8861\u4e8c\u53c9\u6811 \u7ea2\u9ed1\u4e8c\u53c9\u6811 B/B-/B+\u6811 \u5b57\u5178\u6811 \u54c8\u5e0c\u8868 \u6392\u5e8f \u00b6 \u4ea4\u6362\u6392\u5e8f \u5192\u6ce1 \u5feb\u901f\u6392\u5e8f \u63d2\u5165\u6392\u5e8f \u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u6298\u534a\u63d2\u5165\u6392\u5e8f \u5e0c\u5c14\u6392\u5e8f \u9009\u62e9\u6392\u5e8f \u7b80\u5355\u9009\u62e9\u6392\u5e8f \u5806\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u591a\u7ebf\u7a0b\u5f52\u5e76\u6392\u5e8f \u57fa\u6570\u6392\u5e8f \u78c1\u76d8\u5916\u90e8\u6392\u5e8f \u591a\u8def\u5e73\u8861\u5f52\u5e76 \u5176\u4ed6 \u00b6 \u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5 \u8df3\u8dc3\u8868 \u4f4d\u56fe\u6cd5 \u7b97\u6cd5\u590d\u6742\u5ea6 \u5bf9\u6570\u9636O(logn) 1 2 3 4 5 int number = 1 ; while ( number < n ){ number = number * 2 ; ... } \u5e73\u65b9\u9636O(n^2) 1 2 3 4 5 for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < n ; j ++ ){ ... } }","title":"\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u89c4\u5212"},{"location":"algorithm/plan/#_1","text":"\u4ee3\u7801\u4ed3\u5e93","title":"\u672c\u6a21\u5757\u8ba1\u5212"},{"location":"algorithm/plan/#_2","text":"\u987a\u5e8f\u5b58\u50a8 \u94fe\u5f0f\u5b58\u50a8 \u53cc\u5411\u94fe\u8868 \u5faa\u73af\u94fe\u8868(\u7ea6\u745f\u592b\u73af) \u9759\u6001\u94fe\u8868 \u53cc\u5411\u5faa\u73af\u94fe\u8868","title":"\u7ebf\u6027\u8868"},{"location":"algorithm/plan/#_3","text":"\u987a\u5e8f\u6808 \u94fe\u5f0f\u6808 \u6808\u9012\u5f52","title":"\u6808"},{"location":"algorithm/plan/#_4","text":"\u987a\u5e8f\u961f\u5217 \u94fe\u5f0f\u961f\u5217 \u5faa\u73af\u961f\u5217","title":"\u961f\u5217"},{"location":"algorithm/plan/#_5","text":"\u4e32\u7ed3\u6784 \u6a21\u5f0f\u5339\u914d \u6734\u7d20\u5339\u914d kmp\u7b97\u6cd5 BF\u7b97\u6cd5 AC\u81ea\u52a8\u673a","title":"\u4e32"},{"location":"algorithm/plan/#_6","text":"\u77e9\u9635 \u7279\u6b8a\u77e9\u9635(\u5bf9\u79f0\u77e9\u9635,\u4e09\u89d2\u77e9\u9635,\u5bf9\u89d2\u77e9\u9635) \u7a00\u758f\u77e9\u9635(\u8f6c\u7f6e,\u5341\u5b57\u94fe\u8868) \u5e7f\u4e49\u8868","title":"\u6570\u7ec4\u548c\u5e7f\u4e49\u8868"},{"location":"algorithm/plan/#_7","text":"\u4e8c\u53c9\u6811 \u7ebf\u7d22\u4e8c\u53c9\u6811 \u8d6b\u592b\u66fc\u6811","title":"\u6811"},{"location":"algorithm/plan/#_8","text":"\u904d\u5386 \u5e7f\u5ea6\u4f18\u5148BFS \u6df1\u5ea6\u4f18\u5148DFS \u6700\u5c0f\u751f\u6210\u6811 Prim(\u666e\u91cc\u59c6)\u7b97\u6cd5 Kruskal(\u514b\u9c81\u65af\u5361\u5c14)\u7b97\u6cd5 \u6700\u77ed\u8def\u5f84 \u62d3\u6251\u6392\u5e8f \u5173\u952e\u8def\u5f84","title":"\u56fe"},{"location":"algorithm/plan/#_9","text":"\u987a\u5e8f\u8868\u67e5\u627e-\u76d1\u89c6\u54e8\u5175 \u6709\u5e8f\u8868\u67e5\u627e \u6298\u534a\u67e5\u627e \u63d2\u503c\u67e5\u627e \u6590\u6ce2\u90a3\u5951\u67e5\u627e \u7d22\u5f15\u987a\u5e8f\u67e5\u627e \u4e8c\u53c9\u6392\u5e8f\u6811 \u5e73\u8861\u4e8c\u53c9\u6811 \u7ea2\u9ed1\u4e8c\u53c9\u6811 B/B-/B+\u6811 \u5b57\u5178\u6811 \u54c8\u5e0c\u8868","title":"\u67e5\u627e"},{"location":"algorithm/plan/#_10","text":"\u4ea4\u6362\u6392\u5e8f \u5192\u6ce1 \u5feb\u901f\u6392\u5e8f \u63d2\u5165\u6392\u5e8f \u76f4\u63a5\u63d2\u5165\u6392\u5e8f \u6298\u534a\u63d2\u5165\u6392\u5e8f \u5e0c\u5c14\u6392\u5e8f \u9009\u62e9\u6392\u5e8f \u7b80\u5355\u9009\u62e9\u6392\u5e8f \u5806\u6392\u5e8f \u5f52\u5e76\u6392\u5e8f \u591a\u7ebf\u7a0b\u5f52\u5e76\u6392\u5e8f \u57fa\u6570\u6392\u5e8f \u78c1\u76d8\u5916\u90e8\u6392\u5e8f \u591a\u8def\u5e73\u8861\u5f52\u5e76","title":"\u6392\u5e8f"},{"location":"algorithm/plan/#_11","text":"\u7f13\u5b58\u6dd8\u6c70\u7b97\u6cd5 \u8df3\u8dc3\u8868 \u4f4d\u56fe\u6cd5 \u7b97\u6cd5\u590d\u6742\u5ea6 \u5bf9\u6570\u9636O(logn) 1 2 3 4 5 int number = 1 ; while ( number < n ){ number = number * 2 ; ... } \u5e73\u65b9\u9636O(n^2) 1 2 3 4 5 for ( int i = 0 ; i < n ; i ++ ){ for ( int j = 0 ; j < n ; j ++ ){ ... } }","title":"\u5176\u4ed6"},{"location":"algorithm/struct_linkedlist/","text":"\u5355\u5411\u94fe\u8868 \u00b6 \u987a\u5e8f\u5b58\u50a8 \u00b6 \u94fe\u5f0f\u5b58\u50a8 \u00b6 \u53cc\u5411\u94fe\u8868 \u00b6 \u5faa\u73af\u94fe\u8868 \u00b6 \u7ea6\u745f\u592b\u73af \u00b6 \u8df3\u8dc3\u8868(Skip list) \u00b6 \u81ea\u7ec4\u7ec7\u94fe\u8868 \u00b6 \u7a00\u758f\u8868 \u00b6 \u6a21\u677f\u5e93\u4e2d\u7684\u94fe\u8868 \u00b6","title":"\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_1","text":"","title":"\u5355\u5411\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_2","text":"","title":"\u987a\u5e8f\u5b58\u50a8"},{"location":"algorithm/struct_linkedlist/#_3","text":"","title":"\u94fe\u5f0f\u5b58\u50a8"},{"location":"algorithm/struct_linkedlist/#_4","text":"","title":"\u53cc\u5411\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_5","text":"","title":"\u5faa\u73af\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_6","text":"","title":"\u7ea6\u745f\u592b\u73af"},{"location":"algorithm/struct_linkedlist/#skip-list","text":"","title":"\u8df3\u8dc3\u8868(Skip list)"},{"location":"algorithm/struct_linkedlist/#_7","text":"","title":"\u81ea\u7ec4\u7ec7\u94fe\u8868"},{"location":"algorithm/struct_linkedlist/#_8","text":"","title":"\u7a00\u758f\u8868"},{"location":"algorithm/struct_linkedlist/#_9","text":"","title":"\u6a21\u677f\u5e93\u4e2d\u7684\u94fe\u8868"},{"location":"cplus/cpp_base/","text":"C++\u57fa\u7840 \u00b6 \u7f16\u8bd1\u8fd0\u884c \u00b6 1 2 gcc main.cc -lstdc++ g++ main.cc namesapce \u00b6 1 2 3 4 5 namespace name{ //variables, functions, classes } using name::xxx; const \u00b6 C\u8bed\u8a00\u5bf9 const \u7684\u5904\u7406\u548c\u666e\u901a\u53d8\u91cf\u4e00\u6837\uff0c\u4f1a\u5230\u5185\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\uff1bC++ \u5bf9 const \u7684\u5904\u7406\u66f4\u50cf\u662f\u7f16\u8bd1\u65f6\u671f\u7684#define\uff0c\u662f\u4e00\u4e2a\u503c\u66ff\u6362\u7684\u8fc7\u7a0b\u3002 C\u548cC++\u4e2d\u5168\u5c40 const \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u76f8\u540c\uff0c\u90fd\u662f\u5f53\u524d\u6587\u4ef6\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4eec\u7684\u53ef\u89c1\u8303\u56f4\uff1aC\u8bed\u8a00\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u58f0\u660e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\uff1b\u800cC++\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u4ec5\u9650\u4e8e\u5f53\u524d\u6587\u4ef6\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4e0d\u53ef\u89c1\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u591a\u6b21\u5f15\u5165\u540e\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002 inline\u5185\u8054\u51fd\u6570 \u00b6 \u5728\u51fd\u6570\u5b9a\u4e49\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\uff0c\u5728\u51fd\u6570\u58f0\u660e\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\u867d\u7136\u6ca1\u6709\u9519\uff0c\u4f46\u8fd9\u79cd\u505a\u6cd5\u662f\u65e0\u6548\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u51fd\u6570\u58f0\u660e\u5904\u7684 inline \u5173\u952e\u5b57\u3002 \u5728\u591a\u6587\u4ef6\u7f16\u7a0b\u65f6\uff0c\u5efa\u8bae\u5c06\u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u76f4\u63a5\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u7981\u7528\u5185\u8054\u51fd\u6570\u7684\u58f0\u660e\u3002 \u51fd\u6570\u9ed8\u8ba4\u53c2\u6570 \u00b6 C++\u89c4\u5b9a\uff0c\u9ed8\u8ba4\u53c2\u6570\u53ea\u80fd\u653e\u5728\u5f62\u53c2\u5217\u8868\u7684\u6700\u540e\uff0c\u800c\u4e14\u4e00\u65e6\u4e3a\u67d0\u4e2a\u5f62\u53c2\u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u7684\u6240\u6709\u5f62\u53c2\u90fd\u5fc5\u987b\u6709\u9ed8\u8ba4\u503c\u3002 \u8fd9\u662f\u56e0\u4e3aC++ \u89c4\u5b9a\uff0c\u5728\u7ed9\u5b9a\u7684\u4f5c\u7528\u57df\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u6b21\u9ed8\u8ba4\u53c2\u6570\u3002\uff08\u540c\u4e00\u6e90\u6587\u4ef6\u5185\u5b9a\u4e49+\u58f0\u660e\u5e26\u9ed8\u8ba4\u53c2\u6570\u4f1a\u62a5\u9519\uff09 \u91cd\u8f7d \u00b6 \u51fd\u6570\u91cd\u8f7d\uff1a\u51fd\u6570\u540d\u5b57\u76f8\u540c\uff0c\u6570\u5217\u8868\u4e0d\u540c\uff08\u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\uff09\u3002\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u76f8\u540c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u4ec5\u4ec5\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u4e0d\u8db3\u4ee5\u6210\u4e3a\u51fd\u6570\u7684\u91cd\u8f7d\u3002 \u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\u3002 \u6ce8\u610f\u7c7b\u578b\u8f6c\u6362\u4e0e\u4e8c\u4e49\u6027","title":"C++\u57fa\u7840"},{"location":"cplus/cpp_base/#c","text":"","title":"C++\u57fa\u7840"},{"location":"cplus/cpp_base/#_1","text":"1 2 gcc main.cc -lstdc++ g++ main.cc","title":"\u7f16\u8bd1\u8fd0\u884c"},{"location":"cplus/cpp_base/#namesapce","text":"1 2 3 4 5 namespace name{ //variables, functions, classes } using name::xxx;","title":"namesapce"},{"location":"cplus/cpp_base/#const","text":"C\u8bed\u8a00\u5bf9 const \u7684\u5904\u7406\u548c\u666e\u901a\u53d8\u91cf\u4e00\u6837\uff0c\u4f1a\u5230\u5185\u5b58\u4e2d\u8bfb\u53d6\u6570\u636e\uff1bC++ \u5bf9 const \u7684\u5904\u7406\u66f4\u50cf\u662f\u7f16\u8bd1\u65f6\u671f\u7684#define\uff0c\u662f\u4e00\u4e2a\u503c\u66ff\u6362\u7684\u8fc7\u7a0b\u3002 C\u548cC++\u4e2d\u5168\u5c40 const \u53d8\u91cf\u7684\u4f5c\u7528\u57df\u76f8\u540c\uff0c\u90fd\u662f\u5f53\u524d\u6587\u4ef6\uff0c\u4e0d\u540c\u7684\u662f\u5b83\u4eec\u7684\u53ef\u89c1\u8303\u56f4\uff1aC\u8bed\u8a00\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u662f\u6574\u4e2a\u7a0b\u5e8f\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4f7f\u7528 extern \u58f0\u660e\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\uff1b\u800cC++\u4e2d const \u5168\u5c40\u53d8\u91cf\u7684\u53ef\u89c1\u8303\u56f4\u4ec5\u9650\u4e8e\u5f53\u524d\u6587\u4ef6\uff0c\u5728\u5176\u4ed6\u6587\u4ef6\u4e2d\u4e0d\u53ef\u89c1\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u5b9a\u4e49\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u591a\u6b21\u5f15\u5165\u540e\u4e5f\u4e0d\u4f1a\u51fa\u9519\u3002","title":"const"},{"location":"cplus/cpp_base/#inline","text":"\u5728\u51fd\u6570\u5b9a\u4e49\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\uff0c\u5728\u51fd\u6570\u58f0\u660e\u5904\u6dfb\u52a0 inline \u5173\u952e\u5b57\u867d\u7136\u6ca1\u6709\u9519\uff0c\u4f46\u8fd9\u79cd\u505a\u6cd5\u662f\u65e0\u6548\u7684\uff0c\u7f16\u8bd1\u5668\u4f1a\u5ffd\u7565\u51fd\u6570\u58f0\u660e\u5904\u7684 inline \u5173\u952e\u5b57\u3002 \u5728\u591a\u6587\u4ef6\u7f16\u7a0b\u65f6\uff0c\u5efa\u8bae\u5c06\u5185\u8054\u51fd\u6570\u7684\u5b9a\u4e49\u76f4\u63a5\u653e\u5728\u5934\u6587\u4ef6\u4e2d\uff0c\u5e76\u4e14\u7981\u7528\u5185\u8054\u51fd\u6570\u7684\u58f0\u660e\u3002","title":"inline\u5185\u8054\u51fd\u6570"},{"location":"cplus/cpp_base/#_2","text":"C++\u89c4\u5b9a\uff0c\u9ed8\u8ba4\u53c2\u6570\u53ea\u80fd\u653e\u5728\u5f62\u53c2\u5217\u8868\u7684\u6700\u540e\uff0c\u800c\u4e14\u4e00\u65e6\u4e3a\u67d0\u4e2a\u5f62\u53c2\u6307\u5b9a\u4e86\u9ed8\u8ba4\u503c\uff0c\u90a3\u4e48\u5b83\u540e\u9762\u7684\u6240\u6709\u5f62\u53c2\u90fd\u5fc5\u987b\u6709\u9ed8\u8ba4\u503c\u3002 \u8fd9\u662f\u56e0\u4e3aC++ \u89c4\u5b9a\uff0c\u5728\u7ed9\u5b9a\u7684\u4f5c\u7528\u57df\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u6b21\u9ed8\u8ba4\u53c2\u6570\u3002\uff08\u540c\u4e00\u6e90\u6587\u4ef6\u5185\u5b9a\u4e49+\u58f0\u660e\u5e26\u9ed8\u8ba4\u53c2\u6570\u4f1a\u62a5\u9519\uff09","title":"\u51fd\u6570\u9ed8\u8ba4\u53c2\u6570"},{"location":"cplus/cpp_base/#_3","text":"\u51fd\u6570\u91cd\u8f7d\uff1a\u51fd\u6570\u540d\u5b57\u76f8\u540c\uff0c\u6570\u5217\u8868\u4e0d\u540c\uff08\u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\uff09\u3002\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u53ef\u4ee5\u76f8\u540c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u4ec5\u4ec5\u8fd4\u56de\u7c7b\u578b\u4e0d\u540c\u4e0d\u8db3\u4ee5\u6210\u4e3a\u51fd\u6570\u7684\u91cd\u8f7d\u3002 \u53c2\u6570\u5217\u8868\u53c8\u53eb\u53c2\u6570\u7b7e\u540d\uff0c\u5305\u62ec\u53c2\u6570\u7684\u7c7b\u578b\u3001\u53c2\u6570\u7684\u4e2a\u6570\u548c\u53c2\u6570\u7684\u987a\u5e8f\uff0c\u53ea\u8981\u6709\u4e00\u4e2a\u4e0d\u540c\u5c31\u53eb\u505a\u53c2\u6570\u5217\u8868\u4e0d\u540c\u3002 \u6ce8\u610f\u7c7b\u578b\u8f6c\u6362\u4e0e\u4e8c\u4e49\u6027","title":"\u91cd\u8f7d"},{"location":"cplus/cpp_catch/","text":"\u5f02\u5e38\u5904\u7406\uff08try catch\uff09 \u00b6 \u5f02\u5e38\u5fc5\u987b\u663e\u5f0f\u5730\u629b\u51fa\uff0c\u624d\u80fd\u88ab\u68c0\u6d4b\u548c\u6355\u83b7\u5230\uff1b\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684\u629b\u51fa\uff0c\u5373\u4f7f\u6709\u5f02\u5e38\u4e5f\u68c0\u6d4b\u4e0d\u5230\u3002 1 \u629b\u51fa\uff08 Throw \uff09 --> \u68c0\u6d4b\uff08 Try \uff09 --> \u6355\u83b7\uff08 Catch \uff09 \u7a0b\u5e8f\u7684\u9519\u8bef\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\u8bed\u6cd5\u9519\u8bef\u3001\u903b\u8f91\u9519\u8bef\u548c\u8fd0\u884c\u65f6\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 try { //\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_1 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_2 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } //\u5176\u4ed6\u7684catch catch ( exception_type_n e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 }","title":"\u5f02\u5e38"},{"location":"cplus/cpp_catch/#try-catch","text":"\u5f02\u5e38\u5fc5\u987b\u663e\u5f0f\u5730\u629b\u51fa\uff0c\u624d\u80fd\u88ab\u68c0\u6d4b\u548c\u6355\u83b7\u5230\uff1b\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u7684\u629b\u51fa\uff0c\u5373\u4f7f\u6709\u5f02\u5e38\u4e5f\u68c0\u6d4b\u4e0d\u5230\u3002 1 \u629b\u51fa\uff08 Throw \uff09 --> \u68c0\u6d4b\uff08 Try \uff09 --> \u6355\u83b7\uff08 Catch \uff09 \u7a0b\u5e8f\u7684\u9519\u8bef\u5927\u81f4\u53ef\u4ee5\u5206\u4e3a\u4e09\u79cd\uff0c\u5206\u522b\u662f\u8bed\u6cd5\u9519\u8bef\u3001\u903b\u8f91\u9519\u8bef\u548c\u8fd0\u884c\u65f6\u9519\u8bef\u3002 1 2 3 4 5 6 7 8 9 10 11 try { //\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_1 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } catch ( exception_type_2 e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 } //\u5176\u4ed6\u7684catch catch ( exception_type_n e ){ //\u5904\u7406\u5f02\u5e38\u7684\u8bed\u53e5 }","title":"\u5f02\u5e38\u5904\u7406\uff08try catch\uff09"},{"location":"cplus/cpp_inher/","text":"\u7ee7\u627f\u4e0e\u6d3e\u751f \u00b6 1 2 3 class \u6d3e\u751f\u7c7b\u540d:\uff3b\u7ee7\u627f\u65b9\u5f0f\uff3d \u57fa\u7c7b\u540d{ \u6d3e\u751f\u7c7b\u65b0\u589e\u52a0\u7684\u6210\u5458 }; \u7ee7\u627f\u65b9\u5f0f\u57fa\u7c7b\u6210\u5458 public\u6210\u5458 protected\u6210\u5458 private\u6210\u5458 public\u7ee7\u627f public protected \u4e0d\u53ef\u89c1 protected\u7ee7\u627f protected protected \u4e0d\u53ef\u89c1 private\u7ee7\u627f private private \u4e0d\u53ef\u89c1 \u4e0d\u7ba1\u7ee7\u627f\u65b9\u5f0f\u5982\u4f55\uff0c\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u59cb\u7ec8\u4e0d\u80fd\u4f7f\u7528\u3002\u57fa\u7c7b\u7684 private \u6210\u5458\u662f\u80fd\u591f\u88ab\u7ee7\u627f\u7684\uff0c\u5e76\u4e14\uff08\u6210\u5458\u53d8\u91cf\uff09\u4f1a\u5360\u7528\u6d3e\u751f\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u53ea\u662f\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u53ef\u89c1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528\u3002 \u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\u57fa\u7c7b private \u6210\u5458\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u501f\u52a9\u57fa\u7c7b\u7684\u975e private \u6210\u5458\u51fd\u6570\uff0c\u5982\u679c\u57fa\u7c7b\u6ca1\u6709\u975e private \u6210\u5458\u51fd\u6570\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5c06\u65e0\u6cd5\u8bbf\u95ee\u3002 using \u53ea\u80fd\u6539\u53d8\u57fa\u7c7b\u4e2d public \u548c protected \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0d\u80fd\u6539\u53d8 private \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u56e0\u4e3a\u57fa\u7c7b\u4e2d private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6839\u672c\u4e0d\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u8bbf\u95ee\u3002 \u5982\u679c\u6d3e\u751f\u7c7b\u4e2d\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\uff09\u548c\u57fa\u7c7b\u4e2d\u7684\u6210\u5458\u91cd\u540d\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u4ece\u57fa\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684\u6210\u5458\u3002 \u57fa\u7c7b\u6210\u5458\u51fd\u6570\u548c\u6d3e\u751f\u7c7b\u6210\u5458\u51fd\u6570\u4e0d\u4f1a\u6784\u6210\u91cd\u8f7d\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6709\u540c\u540d\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u540c\u540d\u51fd\u6570\uff0c\u4e0d\u7ba1\u5b83\u4eec\u7684\u53c2\u6570\u662f\u5426\u4e00\u6837\u3002 \u53ea\u6709\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u624d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\uff0c\u4e0d\u540c\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u662f\u4f1a\u9020\u6210\u906e\u853d\uff0c\u4f7f\u5f97\u5916\u5c42\u51fd\u6570\u65e0\u6548\u3002\u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u62e5\u6709\u4e0d\u540c\u7684\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u540c\u540d\u51fd\u6570\u4e0d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\u3002 \u7ee7\u627f\u7684\u4f5c\u7528\u57df\u5d4c\u5957 \u00b6 \u6d3e\u751f\u7c7b\u7684\u4f5c\u7528\u57df\u4f4d\u4e8e\u57fa\u7c7b\u4f5c\u7528\u57df\u4e4b\u5185 \u7ee7\u627f\u4e0b\u7684\u5185\u5b58\u6a21\u578b \u00b6 \u6709\u7ee7\u627f\u5173\u7cfb\u65f6\uff0c\u6d3e\u751f\u7c7b\u7684\u5185\u5b58\u6a21\u578b\u53ef\u4ee5\u770b\u6210\u662f\u57fa\u7c7b\u6210\u5458\u53d8\u91cf\u548c\u65b0\u589e\u6210\u5458\u53d8\u91cf\u7684\u603b\u548c\uff0c\u800c\u6240\u6709\u6210\u5458\u51fd\u6570\u4ecd\u7136\u5b58\u50a8\u5728\u53e6\u5916\u4e00\u4e2a\u533a\u57df\u2014\u2014\u4ee3\u7801\u533a\uff0c\u7531\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u6a21\u578b\u4e2d\uff0c\u4f1a\u5305\u542b\u6240\u6709\u57fa\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u6848\u7684\u4f18\u70b9\u662f\u8bbf\u95ee\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u5728\u6d3e\u751f\u7c7b\u5bf9\u8c61\u4e2d\u76f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u53d8\u91cf\uff0c\u65e0\u9700\u7ecf\u8fc7\u597d\u51e0\u5c42\u95f4\u63a5\u8ba1\u7b97\u3002 \u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570 \u00b6 \u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u603b\u662f\u5148\u8c03\u7528\u57fa\u7c7b\u6784\u9020\u51fd\u6570\u518d\u6267\u884c\u5176\u4ed6\u4ee3\u7801\uff08\u5305\u62ec\u53c2\u6570\u521d\u59cb\u5316\u8868\u4ee5\u53ca\u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\uff09 \u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u521b\u5efa\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u540c\uff0c\u5373\u5148\u6267\u884c\u57fa\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u518d\u6267\u884c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u3002 \u800c\u9500\u6bc1\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6267\u884c\u6d3e\u751f\u7c7b\u6790\u6784\u51fd\u6570\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { public : A (){ cout << \"A constructor\" << endl ;} ~ A (){ cout << \"A destructor\" << endl ;} }; class B : public A { public : B (){ cout << \"B constructor\" << endl ;} ~ B (){ cout << \"B destructor\" << endl ;} }; class C : public B { public : C (){ cout << \"C constructor\" << endl ;} ~ C (){ cout << \"C destructor\" << endl ;} }; int main (){ C test ; return 0 ; } \u591a\u7ee7\u627f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class D : public A , private B , protected C { //\u7c7bD\u65b0\u589e\u52a0\u7684\u6210\u5458 } D ( \u5f62\u53c2\u5217\u8868 ) : A ( \u5b9e\u53c2\u5217\u8868 ), B ( \u5b9e\u53c2\u5217\u8868 ), C ( \u5b9e\u53c2\u5217\u8868 ){ //\u5176\u4ed6\u64cd\u4f5c } #include <iostream> using namespace std ; //\u57fa\u7c7b class BaseA { public : BaseA ( int a , int b ); ~ BaseA (); public : void show (); protected : int m_a ; int m_b ; }; BaseA :: BaseA ( int a , int b ) : m_a ( a ), m_b ( b ){ cout << \"BaseA constructor\" << endl ; } BaseA ::~ BaseA (){ cout << \"BaseA destructor\" << endl ; } void BaseA :: show (){ cout << \"m_a = \" << m_a << endl ; cout << \"m_b = \" << m_b << endl ; } //\u57fa\u7c7b class BaseB { public : BaseB ( int c , int d ); ~ BaseB (); void show (); protected : int m_c ; int m_d ; }; BaseB :: BaseB ( int c , int d ) : m_c ( c ), m_d ( d ){ cout << \"BaseB constructor\" << endl ; } BaseB ::~ BaseB (){ cout << \"BaseB destructor\" << endl ; } void BaseB :: show (){ cout << \"m_c = \" << m_c << endl ; cout << \"m_d = \" << m_d << endl ; } //\u6d3e\u751f\u7c7b class Derived : public BaseA , public BaseB { public : Derived ( int a , int b , int c , int d , int e ); ~ Derived (); public : void display (); private : int m_e ; }; Derived :: Derived ( int a , int b , int c , int d , int e ) : BaseA ( a , b ), BaseB ( c , d ), m_e ( e ){ cout << \"Derived constructor\" << endl ; } Derived ::~ Derived (){ cout << \"Derived destructor\" << endl ; } void Derived :: display (){ BaseA :: show (); //\u8c03\u7528BaseA\u7c7b\u7684show()\u51fd\u6570 BaseB :: show (); //\u8c03\u7528BaseB\u7c7b\u7684show()\u51fd\u6570 cout << \"m_e = \" << m_e << endl ; } int main (){ Derived obj ( 1 , 2 , 3 , 4 , 5 ); obj . display (); return 0 ; } \u547d\u540d\u51b2\u7a81\u65f6\u4f7f\u7528\u57df\u89e3\u6790\u7b26\u3002 \u865a\u7ee7\u627f\u548c\u865a\u57fa\u7c7b\u8be6\u89e3 \u00b6 \u83f1\u5f62\u7ee7\u627f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 //\u95f4\u63a5\u57fa\u7c7bA class A { protected : int m_a ; }; //\u76f4\u63a5\u57fa\u7c7bB class B : public A { protected : int m_b ; }; //\u76f4\u63a5\u57fa\u7c7bC class C : public A { protected : int m_c ; }; //\u6d3e\u751f\u7c7bD class D : public B , public C { public : void seta ( int a ){ m_a = a ; } //\u547d\u540d\u51b2\u7a81 void setb ( int b ){ m_b = b ; } //\u6b63\u786e void setc ( int c ){ m_c = c ; } //\u6b63\u786e void setd ( int d ){ m_d = d ; } //\u6b63\u786e private : int m_d ; }; int main (){ D d ; return 0 ; } \u4e3a\u4e86\u89e3\u51b3\u591a\u7ee7\u627f\u65f6\u7684\u547d\u540d\u51b2\u7a81\u548c\u5197\u4f59\u6570\u636e\u95ee\u9898\uff0cC++ \u63d0\u51fa\u4e86\u865a\u7ee7\u627f\uff0c\u4f7f\u5f97\u5728\u6d3e\u751f\u7c7b\u4e2d\u53ea\u4fdd\u7559\u4e00\u4efd\u95f4\u63a5\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u865a\u7ee7\u627f\u7684\u76ee\u7684\u662f\u8ba9\u67d0\u4e2a\u7c7b\u505a\u51fa\u58f0\u660e\uff0c\u627f\u8bfa\u613f\u610f\u5171\u4eab\u5b83\u7684\u57fa\u7c7b\u3002\u5176\u4e2d\uff0c\u8fd9\u4e2a\u88ab\u5171\u4eab\u7684\u57fa\u7c7b\u5c31\u79f0\u4e3a\u865a\u57fa\u7c7b\uff08Virtual Base Class\uff09\uff0c\u672c\u4f8b\u4e2d\u7684 A \u5c31\u662f\u4e00\u4e2a\u865a\u57fa\u7c7b\u3002\u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c\u4e0d\u8bba\u865a\u57fa\u7c7b\u5728\u7ee7\u627f\u4f53\u7cfb\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u90fd\u53ea\u5305\u542b\u4e00\u4efd\u865a\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u5bf9\u6700\u7ec8\u7684\u6d3e\u751f\u7c7b\u6765\u8bf4\uff0c\u865a\u57fa\u7c7b\u662f\u95f4\u63a5\u57fa\u7c7b\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u57fa\u7c7b\u3002\u8fd9\u8ddf\u666e\u901a\u7ee7\u627f\u4e0d\u540c\uff0c\u5728\u666e\u901a\u7ee7\u627f\u4e2d\uff0c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u7c7b\u5176\u5b9e\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u53d1\u751f\u6570\u636e\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u8f6c\u6362\u53ea\u6709\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u624d\u6709\u610f\u4e49\uff0c\u5e76\u4e14\u53ea\u80fd\u5c06\u6d3e\u751f\u7c7b\u8d4b\u503c\u7ed9\u57fa\u7c7b\uff0c\u5305\u62ec\u5c06\u6d3e\u751f\u7c7b\u5bf9\u8c61\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5bf9\u8c61\u3001\u5c06\u6d3e\u751f\u7c7b\u6307\u9488\u8d4b\u503c\u7ed9\u57fa\u7c7b\u6307\u9488\u3001\u5c06\u6d3e\u751f\u7c7b\u5f15\u7528\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5f15\u7528\uff0c\u8fd9\u5728 C++ \u4e2d\u79f0\u4e3a\u5411\u4e0a\u8f6c\u578b\uff08Upcasting\uff09\u3002\u76f8\u5e94\u5730\uff0c\u5c06\u57fa\u7c7b\u8d4b\u503c\u7ed9\u6d3e\u751f\u7c7b\u79f0\u4e3a\u5411\u4e0b\u8f6c\u578b\uff08Downcasting\uff09\u3002 \u8d4b\u503c\u7684\u672c\u8d28\u662f\u5c06\u73b0\u6709\u7684\u6570\u636e\u5199\u5165\u5df2\u5206\u914d\u597d\u7684\u5185\u5b58\u4e2d\uff0c\u5bf9\u8c61\u7684\u5185\u5b58\u53ea\u5305\u542b\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u6240\u4ee5\u5bf9\u8c61\u4e4b\u95f4\u7684\u8d4b\u503c\u662f\u6210\u5458\u53d8\u91cf\u7684\u8d4b\u503c\uff0c\u6210\u5458\u51fd\u6570\u4e0d\u5b58\u5728\u8d4b\u503c\u95ee\u9898\u3002","title":"\u7ee7\u627f\u4e0e\u6d3e\u751f"},{"location":"cplus/cpp_inher/#_1","text":"1 2 3 class \u6d3e\u751f\u7c7b\u540d:\uff3b\u7ee7\u627f\u65b9\u5f0f\uff3d \u57fa\u7c7b\u540d{ \u6d3e\u751f\u7c7b\u65b0\u589e\u52a0\u7684\u6210\u5458 }; \u7ee7\u627f\u65b9\u5f0f\u57fa\u7c7b\u6210\u5458 public\u6210\u5458 protected\u6210\u5458 private\u6210\u5458 public\u7ee7\u627f public protected \u4e0d\u53ef\u89c1 protected\u7ee7\u627f protected protected \u4e0d\u53ef\u89c1 private\u7ee7\u627f private private \u4e0d\u53ef\u89c1 \u4e0d\u7ba1\u7ee7\u627f\u65b9\u5f0f\u5982\u4f55\uff0c\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u59cb\u7ec8\u4e0d\u80fd\u4f7f\u7528\u3002\u57fa\u7c7b\u7684 private \u6210\u5458\u662f\u80fd\u591f\u88ab\u7ee7\u627f\u7684\uff0c\u5e76\u4e14\uff08\u6210\u5458\u53d8\u91cf\uff09\u4f1a\u5360\u7528\u6d3e\u751f\u7c7b\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u53ea\u662f\u5728\u6d3e\u751f\u7c7b\u4e2d\u4e0d\u53ef\u89c1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u4f7f\u7528\u3002 \u5728\u6d3e\u751f\u7c7b\u4e2d\u8bbf\u95ee\u57fa\u7c7b private \u6210\u5458\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u501f\u52a9\u57fa\u7c7b\u7684\u975e private \u6210\u5458\u51fd\u6570\uff0c\u5982\u679c\u57fa\u7c7b\u6ca1\u6709\u975e private \u6210\u5458\u51fd\u6570\uff0c\u90a3\u4e48\u8be5\u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u5c06\u65e0\u6cd5\u8bbf\u95ee\u3002 using \u53ea\u80fd\u6539\u53d8\u57fa\u7c7b\u4e2d public \u548c protected \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0d\u80fd\u6539\u53d8 private \u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u56e0\u4e3a\u57fa\u7c7b\u4e2d private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u6839\u672c\u4e0d\u80fd\u4f7f\u7528\uff0c\u6240\u4ee5\u57fa\u7c7b\u4e2d\u7684 private \u6210\u5458\u5728\u6d3e\u751f\u7c7b\u4e2d\u65e0\u8bba\u5982\u4f55\u90fd\u4e0d\u80fd\u8bbf\u95ee\u3002 \u5982\u679c\u6d3e\u751f\u7c7b\u4e2d\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\uff09\u548c\u57fa\u7c7b\u4e2d\u7684\u6210\u5458\u91cd\u540d\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u4ece\u57fa\u7c7b\u7ee7\u627f\u8fc7\u6765\u7684\u6210\u5458\u3002 \u57fa\u7c7b\u6210\u5458\u51fd\u6570\u548c\u6d3e\u751f\u7c7b\u6210\u5458\u51fd\u6570\u4e0d\u4f1a\u6784\u6210\u91cd\u8f7d\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6709\u540c\u540d\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u906e\u853d\u57fa\u7c7b\u4e2d\u7684\u6240\u6709\u540c\u540d\u51fd\u6570\uff0c\u4e0d\u7ba1\u5b83\u4eec\u7684\u53c2\u6570\u662f\u5426\u4e00\u6837\u3002 \u53ea\u6709\u4e00\u4e2a\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u624d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\uff0c\u4e0d\u540c\u4f5c\u7528\u57df\u5185\u7684\u540c\u540d\u51fd\u6570\u662f\u4f1a\u9020\u6210\u906e\u853d\uff0c\u4f7f\u5f97\u5916\u5c42\u51fd\u6570\u65e0\u6548\u3002\u6d3e\u751f\u7c7b\u548c\u57fa\u7c7b\u62e5\u6709\u4e0d\u540c\u7684\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u540c\u540d\u51fd\u6570\u4e0d\u5177\u6709\u91cd\u8f7d\u5173\u7cfb\u3002","title":"\u7ee7\u627f\u4e0e\u6d3e\u751f"},{"location":"cplus/cpp_inher/#_2","text":"\u6d3e\u751f\u7c7b\u7684\u4f5c\u7528\u57df\u4f4d\u4e8e\u57fa\u7c7b\u4f5c\u7528\u57df\u4e4b\u5185","title":"\u7ee7\u627f\u7684\u4f5c\u7528\u57df\u5d4c\u5957"},{"location":"cplus/cpp_inher/#_3","text":"\u6709\u7ee7\u627f\u5173\u7cfb\u65f6\uff0c\u6d3e\u751f\u7c7b\u7684\u5185\u5b58\u6a21\u578b\u53ef\u4ee5\u770b\u6210\u662f\u57fa\u7c7b\u6210\u5458\u53d8\u91cf\u548c\u65b0\u589e\u6210\u5458\u53d8\u91cf\u7684\u603b\u548c\uff0c\u800c\u6240\u6709\u6210\u5458\u51fd\u6570\u4ecd\u7136\u5b58\u50a8\u5728\u53e6\u5916\u4e00\u4e2a\u533a\u57df\u2014\u2014\u4ee3\u7801\u533a\uff0c\u7531\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u6a21\u578b\u4e2d\uff0c\u4f1a\u5305\u542b\u6240\u6709\u57fa\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u6848\u7684\u4f18\u70b9\u662f\u8bbf\u95ee\u6548\u7387\u9ad8\uff0c\u80fd\u591f\u5728\u6d3e\u751f\u7c7b\u5bf9\u8c61\u4e2d\u76f4\u63a5\u8bbf\u95ee\u57fa\u7c7b\u53d8\u91cf\uff0c\u65e0\u9700\u7ecf\u8fc7\u597d\u51e0\u5c42\u95f4\u63a5\u8ba1\u7b97\u3002","title":"\u7ee7\u627f\u4e0b\u7684\u5185\u5b58\u6a21\u578b"},{"location":"cplus/cpp_inher/#_4","text":"\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 \u5728\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u603b\u662f\u5148\u8c03\u7528\u57fa\u7c7b\u6784\u9020\u51fd\u6570\u518d\u6267\u884c\u5176\u4ed6\u4ee3\u7801\uff08\u5305\u62ec\u53c2\u6570\u521d\u59cb\u5316\u8868\u4ee5\u53ca\u51fd\u6570\u4f53\u4e2d\u7684\u4ee3\u7801\uff09 \u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u521b\u5efa\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u540c\uff0c\u5373\u5148\u6267\u884c\u57fa\u7c7b\u6784\u9020\u51fd\u6570\uff0c\u518d\u6267\u884c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u3002 \u800c\u9500\u6bc1\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u987a\u5e8f\u548c\u7ee7\u627f\u987a\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6267\u884c\u6d3e\u751f\u7c7b\u6790\u6784\u51fd\u6570\uff0c\u518d\u6267\u884c\u57fa\u7c7b\u6790\u6784\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { public : A (){ cout << \"A constructor\" << endl ;} ~ A (){ cout << \"A destructor\" << endl ;} }; class B : public A { public : B (){ cout << \"B constructor\" << endl ;} ~ B (){ cout << \"B destructor\" << endl ;} }; class C : public B { public : C (){ cout << \"C constructor\" << endl ;} ~ C (){ cout << \"C destructor\" << endl ;} }; int main (){ C test ; return 0 ; }","title":"\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u7684\u6790\u6784\u51fd\u6570"},{"location":"cplus/cpp_inher/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class D : public A , private B , protected C { //\u7c7bD\u65b0\u589e\u52a0\u7684\u6210\u5458 } D ( \u5f62\u53c2\u5217\u8868 ) : A ( \u5b9e\u53c2\u5217\u8868 ), B ( \u5b9e\u53c2\u5217\u8868 ), C ( \u5b9e\u53c2\u5217\u8868 ){ //\u5176\u4ed6\u64cd\u4f5c } #include <iostream> using namespace std ; //\u57fa\u7c7b class BaseA { public : BaseA ( int a , int b ); ~ BaseA (); public : void show (); protected : int m_a ; int m_b ; }; BaseA :: BaseA ( int a , int b ) : m_a ( a ), m_b ( b ){ cout << \"BaseA constructor\" << endl ; } BaseA ::~ BaseA (){ cout << \"BaseA destructor\" << endl ; } void BaseA :: show (){ cout << \"m_a = \" << m_a << endl ; cout << \"m_b = \" << m_b << endl ; } //\u57fa\u7c7b class BaseB { public : BaseB ( int c , int d ); ~ BaseB (); void show (); protected : int m_c ; int m_d ; }; BaseB :: BaseB ( int c , int d ) : m_c ( c ), m_d ( d ){ cout << \"BaseB constructor\" << endl ; } BaseB ::~ BaseB (){ cout << \"BaseB destructor\" << endl ; } void BaseB :: show (){ cout << \"m_c = \" << m_c << endl ; cout << \"m_d = \" << m_d << endl ; } //\u6d3e\u751f\u7c7b class Derived : public BaseA , public BaseB { public : Derived ( int a , int b , int c , int d , int e ); ~ Derived (); public : void display (); private : int m_e ; }; Derived :: Derived ( int a , int b , int c , int d , int e ) : BaseA ( a , b ), BaseB ( c , d ), m_e ( e ){ cout << \"Derived constructor\" << endl ; } Derived ::~ Derived (){ cout << \"Derived destructor\" << endl ; } void Derived :: display (){ BaseA :: show (); //\u8c03\u7528BaseA\u7c7b\u7684show()\u51fd\u6570 BaseB :: show (); //\u8c03\u7528BaseB\u7c7b\u7684show()\u51fd\u6570 cout << \"m_e = \" << m_e << endl ; } int main (){ Derived obj ( 1 , 2 , 3 , 4 , 5 ); obj . display (); return 0 ; } \u547d\u540d\u51b2\u7a81\u65f6\u4f7f\u7528\u57df\u89e3\u6790\u7b26\u3002","title":"\u591a\u7ee7\u627f"},{"location":"cplus/cpp_inher/#_6","text":"\u83f1\u5f62\u7ee7\u627f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 //\u95f4\u63a5\u57fa\u7c7bA class A { protected : int m_a ; }; //\u76f4\u63a5\u57fa\u7c7bB class B : public A { protected : int m_b ; }; //\u76f4\u63a5\u57fa\u7c7bC class C : public A { protected : int m_c ; }; //\u6d3e\u751f\u7c7bD class D : public B , public C { public : void seta ( int a ){ m_a = a ; } //\u547d\u540d\u51b2\u7a81 void setb ( int b ){ m_b = b ; } //\u6b63\u786e void setc ( int c ){ m_c = c ; } //\u6b63\u786e void setd ( int d ){ m_d = d ; } //\u6b63\u786e private : int m_d ; }; int main (){ D d ; return 0 ; } \u4e3a\u4e86\u89e3\u51b3\u591a\u7ee7\u627f\u65f6\u7684\u547d\u540d\u51b2\u7a81\u548c\u5197\u4f59\u6570\u636e\u95ee\u9898\uff0cC++ \u63d0\u51fa\u4e86\u865a\u7ee7\u627f\uff0c\u4f7f\u5f97\u5728\u6d3e\u751f\u7c7b\u4e2d\u53ea\u4fdd\u7559\u4e00\u4efd\u95f4\u63a5\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u865a\u7ee7\u627f\u7684\u76ee\u7684\u662f\u8ba9\u67d0\u4e2a\u7c7b\u505a\u51fa\u58f0\u660e\uff0c\u627f\u8bfa\u613f\u610f\u5171\u4eab\u5b83\u7684\u57fa\u7c7b\u3002\u5176\u4e2d\uff0c\u8fd9\u4e2a\u88ab\u5171\u4eab\u7684\u57fa\u7c7b\u5c31\u79f0\u4e3a\u865a\u57fa\u7c7b\uff08Virtual Base Class\uff09\uff0c\u672c\u4f8b\u4e2d\u7684 A \u5c31\u662f\u4e00\u4e2a\u865a\u57fa\u7c7b\u3002\u5728\u8fd9\u79cd\u673a\u5236\u4e0b\uff0c\u4e0d\u8bba\u865a\u57fa\u7c7b\u5728\u7ee7\u627f\u4f53\u7cfb\u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u5728\u6d3e\u751f\u7c7b\u4e2d\u90fd\u53ea\u5305\u542b\u4e00\u4efd\u865a\u57fa\u7c7b\u7684\u6210\u5458\u3002 \u5bf9\u6700\u7ec8\u7684\u6d3e\u751f\u7c7b\u6765\u8bf4\uff0c\u865a\u57fa\u7c7b\u662f\u95f4\u63a5\u57fa\u7c7b\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u57fa\u7c7b\u3002\u8fd9\u8ddf\u666e\u901a\u7ee7\u627f\u4e0d\u540c\uff0c\u5728\u666e\u901a\u7ee7\u627f\u4e2d\uff0c\u6d3e\u751f\u7c7b\u6784\u9020\u51fd\u6570\u4e2d\u53ea\u80fd\u8c03\u7528\u76f4\u63a5\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\uff0c\u4e0d\u80fd\u8c03\u7528\u95f4\u63a5\u57fa\u7c7b\u7684\u3002 \u7c7b\u5176\u5b9e\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u53d1\u751f\u6570\u636e\u7c7b\u578b\u8f6c\u6362\uff0c\u4e0d\u8fc7\u8fd9\u79cd\u8f6c\u6362\u53ea\u6709\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u624d\u6709\u610f\u4e49\uff0c\u5e76\u4e14\u53ea\u80fd\u5c06\u6d3e\u751f\u7c7b\u8d4b\u503c\u7ed9\u57fa\u7c7b\uff0c\u5305\u62ec\u5c06\u6d3e\u751f\u7c7b\u5bf9\u8c61\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5bf9\u8c61\u3001\u5c06\u6d3e\u751f\u7c7b\u6307\u9488\u8d4b\u503c\u7ed9\u57fa\u7c7b\u6307\u9488\u3001\u5c06\u6d3e\u751f\u7c7b\u5f15\u7528\u8d4b\u503c\u7ed9\u57fa\u7c7b\u5f15\u7528\uff0c\u8fd9\u5728 C++ \u4e2d\u79f0\u4e3a\u5411\u4e0a\u8f6c\u578b\uff08Upcasting\uff09\u3002\u76f8\u5e94\u5730\uff0c\u5c06\u57fa\u7c7b\u8d4b\u503c\u7ed9\u6d3e\u751f\u7c7b\u79f0\u4e3a\u5411\u4e0b\u8f6c\u578b\uff08Downcasting\uff09\u3002 \u8d4b\u503c\u7684\u672c\u8d28\u662f\u5c06\u73b0\u6709\u7684\u6570\u636e\u5199\u5165\u5df2\u5206\u914d\u597d\u7684\u5185\u5b58\u4e2d\uff0c\u5bf9\u8c61\u7684\u5185\u5b58\u53ea\u5305\u542b\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u6240\u4ee5\u5bf9\u8c61\u4e4b\u95f4\u7684\u8d4b\u503c\u662f\u6210\u5458\u53d8\u91cf\u7684\u8d4b\u503c\uff0c\u6210\u5458\u51fd\u6570\u4e0d\u5b58\u5728\u8d4b\u503c\u95ee\u9898\u3002","title":"\u865a\u7ee7\u627f\u548c\u865a\u57fa\u7c7b\u8be6\u89e3"},{"location":"cplus/cpp_muban/","text":"\u6a21\u677f\u548c\u6cdb\u578b \u00b6 \u6a21\u677f\u51fd\u6570 \u00b6 1 2 3 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , ... > \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //\u5728\u51fd\u6570\u4f53\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u53c2\u6570 } \u7c7b\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > class \u7c7b\u540d{ //TODO: }; template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > \u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d < \u7c7b\u578b\u53c2\u6570 1 , \u7c7b\u578b\u53c2\u6570 2 , ... >:: \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> using namespace std ; template < class T1 , class T2 > //\u8fd9\u91cc\u4e0d\u80fd\u6709\u5206\u53f7 class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const ; //\u83b7\u53d6x\u5750\u6807 void setX ( T1 x ); //\u8bbe\u7f6ex\u5750\u6807 T2 getY () const ; //\u83b7\u53d6y\u5750\u6807 void setY ( T2 y ); //\u8bbe\u7f6ey\u5750\u6807 private : T1 m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < class T1 , class T2 > //\u6a21\u677f\u5934 T1 Point < T1 , T2 >:: getX () const /*\u51fd\u6570\u5934*/ { return m_x ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setX ( T1 x ){ m_x = x ; } template < class T1 , class T2 > T2 Point < T1 , T2 >:: getY () const { return m_y ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setY ( T2 y ){ m_y = y ; } int main (){ Point < int , int > p1 ( 10 , 20 ); cout << \"x=\" << p1 . getX () << \", y=\" << p1 . getY () << endl ; Point < int , char *> p2 ( 10 , \"\u4e1c\u7ecf180\u5ea6\" ); cout << \"x=\" << p2 . getX () << \", y=\" << p2 . getY () << endl ; Point < char * , char *> * p3 = new Point < char * , char *> ( \"\u4e1c\u7ecf180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ); cout << \"x=\" << p3 -> getX () << \", y=\" << p3 -> getY () << endl ; return 0 ; } \u53ef\u8fb9\u957f\u6570\u7ec4\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> #include <cstring> using namespace std ; template < class T > class CArray { int size ; //\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 T * ptr ; //\u6307\u5411\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4 public : CArray ( int s = 0 ); //s\u4ee3\u8868\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 CArray ( CArray & a ); ~ CArray (); void push_back ( const T & v ); //\u7528\u4e8e\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20v CArray & operator = ( const CArray & a ); //\u7528\u4e8e\u6570\u7ec4\u5bf9\u8c61\u95f4\u7684\u8d4b\u503c T length () { return size ; } T & operator []( int i ) { //\u7528\u4ee5\u652f\u6301\u6839\u636e\u4e0b\u6807\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\uff0c\u5982a[i] = 4;\u548cn = a[i]\u8fd9\u6837\u7684\u8bed\u53e5 return ptr [ i ]; } }; template < class T > CArray < T >:: CArray ( int s ) : size ( s ) { if ( s == 0 ) ptr = NULL ; else ptr = new T [ s ]; } template < class T > CArray < T >:: CArray ( CArray & a ) { if ( ! a . ptr ) { ptr = NULL ; size = 0 ; return ; } ptr = new T [ a . size ]; memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; } template < class T > CArray < T >::~ CArray () { if ( ptr ) delete [] ptr ; } template < class T > CArray < T > & CArray < T >:: operator = ( const CArray & a ) { //\u8d4b\u503c\u53f7\u7684\u4f5c\u7528\u662f\u4f7f\"=\"\u5de6\u8fb9\u5bf9\u8c61\u91cc\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u548c\u5185\u5bb9\u90fd\u548c\u53f3\u8fb9\u7684\u5bf9\u8c61\u4e00\u6837 if ( this == & a ) //\u9632\u6b62a=a\u8fd9\u6837\u7684\u8d4b\u503c\u5bfc\u81f4\u51fa\u9519 return * this ; if ( a . ptr == NULL ) { //\u5982\u679ca\u91cc\u9762\u7684\u6570\u7ec4\u662f\u7a7a\u7684 if ( ptr ) delete [] ptr ; ptr = NULL ; size = 0 ; return * this ; } if ( size < a . size ) { //\u5982\u679c\u539f\u6709\u7a7a\u95f4\u591f\u5927\uff0c\u5c31\u4e0d\u7528\u5206\u914d\u65b0\u7684\u7a7a\u95f4 if ( ptr ) delete [] ptr ; ptr = new T [ a . size ]; } memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; return * this ; } template < class T > void CArray < T >:: push_back ( const T & v ) { //\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 if ( ptr ) { T * tmpPtr = new T [ size + 1 ]; //\u91cd\u65b0\u5206\u914d\u7a7a\u95f4 memcpy ( tmpPtr , ptr , sizeof ( T ) * size ); //\u62f7\u8d1d\u539f\u6570\u7ec4\u5185\u5bb9 delete [] ptr ; ptr = tmpPtr ; } else //\u6570\u7ec4\u672c\u6765\u662f\u7a7a\u7684 ptr = new T [ 1 ]; ptr [ size ++ ] = v ; //\u52a0\u5165\u65b0\u7684\u6570\u7ec4\u5143\u7d20 } int main () { CArray < int > a ; for ( int i = 0 ; i < 5 ; ++ i ) a . push_back ( i ); for ( int i = 0 ; i < a . length (); ++ i ) cout << a [ i ] << \" \" ; return 0 ; } \u91cd\u8f7d\u51fd\u6570\u6a21\u677f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> using namespace std ; template < class T > void Swap ( T & a , T & b ); //\u6a21\u677f\u2460\uff1a\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c template < typename T > void Swap ( T a [], T b [], int len ); //\u6a21\u677f\u2461\uff1a\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 void printArray ( int arr [], int len ); //\u6253\u5370\u6570\u7ec4\u5143\u7d20 int main (){ //\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c int m = 10 , n = 99 ; Swap ( m , n ); //\u5339\u914d\u6a21\u677f\u2460 cout << m << \", \" << n << endl ; //\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; int b [ 5 ] = { 10 , 20 , 30 , 40 , 50 }; int len = sizeof ( a ) / sizeof ( int ); //\u6570\u7ec4\u957f\u5ea6 Swap ( a , b , len ); //\u5339\u914d\u6a21\u677f\u2461 printArray ( a , len ); printArray ( b , len ); return 0 ; } template < class T > void Swap ( T & a , T & b ){ T temp = a ; a = b ; b = temp ; } template < typename T > void Swap ( T a [], T b [], int len ){ T temp ; for ( int i = 0 ; i < len ; i ++ ){ temp = a [ i ]; a [ i ] = b [ i ]; b [ i ] = temp ; } } void printArray ( int arr [], int len ){ for ( int i = 0 ; i < len ; i ++ ){ if ( i == len - 1 ){ cout << arr [ i ] << endl ; } else { cout << arr [ i ] << \", \" ; } } } \u4e3a\u51fd\u6570\u6a21\u677f\u663e\u5f0f\u5730\u6307\u660e\u5b9e\u53c2 \u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08Explicit Specialization\uff09 \u00b6 \u6a21\u677f\u4e2d\u7684\u8bed\u53e5\uff08\u51fd\u6570\u4f53\u6216\u8005\u7c7b\u4f53\uff09\u4e0d\u4e00\u5b9a\u5c31\u80fd\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u53ef\u80fd\u4f1a\u6709\u4e2a\u522b\u7684\u7c7b\u578b\u6ca1\u6709\u610f\u4e49\uff0c\u6216\u8005\u4f1a\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002(\u4f8b\u5982\uff1a>\u80fd\u591f\u7528\u6765\u6bd4\u8f83 int\u3001float\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u6570\u636e\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u5374\u4e0d\u80fd\u7528\u6765\u6bd4\u8f83\u7ed3\u6784\u4f53\u53d8\u91cf\u3001\u5bf9\u8c61\u4ee5\u53ca\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u9488\u5bf9\u7ed3\u6784\u4f53\u3001\u7c7b\u548c\u6570\u7ec4\u91cd\u8f7d>) \u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> #include <string> using namespace std ; typedef struct { string name ; int age ; float score ; } STU ; //\u51fd\u6570\u6a21\u677f template < class T > const T & Max ( const T & a , const T & b ); //\u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9STU\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> const STU & Max < STU > ( const STU & a , const STU & b ); //\u91cd\u8f7d<< ostream & operator << ( ostream & out , const STU & stu ); int main (){ int a = 10 ; int b = 20 ; cout << Max ( a , b ) << endl ; STU stu1 = { \"\u738b\u660e\" , 16 , 95.5 }; STU stu2 = { \"\u5f90\u4eae\" , 17 , 90.0 }; cout << Max ( stu1 , stu2 ) << endl ; return 0 ; } template < class T > const T & Max ( const T & a , const T & b ){ return a > b ? a : b ; } template <> const STU & Max < STU > ( const STU & a , const STU & b ){ return a . score > b . score ? a : b ; } ostream & operator << ( ostream & out , const STU & stu ){ out << stu . name << \" , \" << stu . age << \" , \" << stu . score ; return out ; } \u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> class Point < char * , char *> { public : Point ( char * x , char * y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } char * getY () const { return m_y ; } void setY ( char * y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 char * m_y ; //y\u5750\u6807 }; //\u8fd9\u91cc\u4e0d\u80fd\u5e26\u6a21\u677f\u5934template<> void Point < char * , char *>:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < int , char *> ( 10 , \"\u4e1c\u4eac180\u5ea6\" ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; } \u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 template < typename T2 > class Point < char * , T2 > { public : Point ( char * x , T2 y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < typename T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < char * , T2 >:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < char * , int > ( \"\u4e1c\u4eac180\u5ea6\" , 10 ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; } \u975e\u7c7b\u578b\u53c2\u6570 \u00b6 C++ \u5bf9\u6a21\u677f\u7684\u652f\u6301\u975e\u5e38\u81ea\u7531\uff0c\u6a21\u677f\u4e2d\u9664\u4e86\u53ef\u4ee5\u5305\u542b\u7c7b\u578b\u53c2\u6570\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u975e\u7c7b\u578b\u53c2\u6570\u3002T \u662f\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u901a\u8fc7class\u6216typename\u5173\u952e\u5b57\u6307\u5b9a\u3002N \u662f\u4e00\u4e2a\u975e\u7c7b\u578b\u53c2\u6570\uff0c\u7528\u6765\u4f20\u9012\u6570\u636e\u7684\u503c\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\uff0c\u5b83\u548c\u666e\u901a\u51fd\u6570\u7684\u5f62\u53c2\u4e00\u6837\uff0c\u90fd\u9700\u8981\u6307\u660e\u5177\u4f53\u7684\u7c7b\u578b\u3002 1 2 template < typename T , int N > class Demo { }; template < class T , int N > void func ( T ( & arr )[ N ]); \u7c7b\u6a21\u677f\u4e2d\u4f7f\u7528\u975e\u7c7b\u578b\u53c2\u6570 \u00b6 \u52a8\u6001\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #include <iostream> #include <cstring> #include <cstdlib> using namespace std ; template < typename T , int N > class Array { public : Array (); ~ Array (); public : T & operator []( int i ); //\u91cd\u8f7d\u4e0b\u6807\u8fd0\u7b97\u7b26[] int length () const { return m_length ; } //\u83b7\u53d6\u6570\u7ec4\u957f\u5ea6 bool capacity ( int n ); //\u6539\u53d8\u6570\u7ec4\u5bb9\u91cf private : int m_length ; //\u6570\u7ec4\u7684\u5f53\u524d\u957f\u5ea6 int m_capacity ; //\u5f53\u524d\u5185\u5b58\u7684\u5bb9\u91cf\uff08\u80fd\u5bb9\u4e43\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff09 T * m_p ; //\u6307\u5411\u6570\u7ec4\u5185\u5b58\u7684\u6307\u9488 }; template < typename T , int N > Array < T , N >:: Array (){ m_p = new T [ N ]; m_capacity = m_length = N ; } template < typename T , int N > Array < T , N >::~ Array (){ delete [] m_p ; } template < typename T , int N > T & Array < T , N >:: operator []( int i ){ if ( i < 0 || i >= m_length ){ cout << \"Exception: Array index out of bounds!\" << endl ; } return m_p [ i ]; } template < typename T , int N > bool Array < T , N >:: capacity ( int n ){ if ( n > 0 ){ //\u589e\u5927\u6570\u7ec4 int len = m_length + n ; //\u589e\u5927\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len <= m_capacity ){ //\u73b0\u6709\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 m_length = len ; return true ; } else { //\u73b0\u6709\u5185\u5b58\u4e0d\u80fd\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 T * pTemp = new T [ m_length + 2 * n * sizeof ( T )]; //\u589e\u52a0\u7684\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3 2*n \u4e2a\u5143\u7d20 if ( pTemp == NULL ){ //\u5185\u5b58\u5206\u914d\u5931\u8d25 cout << \"Exception: Failed to allocate memory!\" << endl ; return false ; } else { //\u5185\u5b58\u5206\u914d\u6210\u529f memcpy ( pTemp , m_p , m_length * sizeof ( T ) ); delete [] m_p ; m_p = pTemp ; m_capacity = m_length = len ; } } } else { //\u6536\u7f29\u6570\u7ec4 int len = m_length - abs ( n ); //\u6536\u7f29\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len < 0 ){ cout << \"Exception: Array length is too small!\" << endl ; return false ; } else { m_length = len ; return true ; } } } int main (){ Array < int , 5 > arr ; //\u4e3a\u6570\u7ec4\u5143\u7d20\u8d4b\u503c for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e00\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6269\u5927\u5bb9\u91cf\u5e76\u4e3a\u589e\u52a0\u7684\u5143\u7d20\u8d4b\u503c arr . capacity ( 8 ); for ( int i = 5 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e8c\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6536\u7f29\u5bb9\u91cf arr . capacity ( - 4 ); //\u7b2c\u4e09\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; return 0 ; } \u975e\u7c7b\u578b\u53c2\u6570\u9650\u5236 \u00b6 \u975e\u7c7b\u578b\u53c2\u6570\u7684\u7c7b\u578b\u4e0d\u80fd\u968f\u610f\u6307\u5b9a\uff0c\u5b83\u53d7\u5230\u4e86\u4e25\u683c\u7684\u9650\u5236\uff0c\u53ea\u80fd\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u6307\u5411\u5bf9\u8c61\u6216\u51fd\u6570\u7684\u6307\u9488\uff08\u4e5f\u53ef\u4ee5\u662f\u5f15\u7528\uff09\u3002 \u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u662f\u7531\u7f16\u8bd1\u5668\u5b8c\u6210\uff08\u9690\u5f0f\u5b9e\u4f8b\u5316\uff09\u7684\uff0c\u800c\u4e0d\u662f\u7531\u94fe\u63a5\u5668\u5b8c\u6210\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u94fe\u63a5\u671f\u95f4\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002\u6240\u4ee5\u4e0d\u80fd\u5c06\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u591a\u4e2a\u6587\u4ef6\u4e2d \u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316 \u00b6 \u663e\u5f0f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u7c7b\u6a21\u677f\u65f6\uff0c\u4f1a\u4e00\u6b21\u6027\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u3002 \u6709\u4e86\u7c7b\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316\uff0c\u5c31\u53ef\u4ee5\u5c06\u7c7b\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 1 2 3 4 5 6 template void Swap ( double & a , double & b ); template class Point < char * , char *> ; extern template declaration ; //\u5b9e\u4f8b\u5316\u58f0\u660e template declaration ; //\u5b9e\u4f8b\u5316\u5b9a\u4e49 \u7c7b\u6a21\u677f\u4e0e\u7ee7\u627f \u00b6 \u7c7b\u6a21\u677f\u548c\u7c7b\u6a21\u677f\u4e4b\u95f4\u3001\u7c7b\u6a21\u677f\u548c\u7c7b\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u7ee7\u627f\u3002 \u7c7b\u6a21\u677f\u4ece\u7c7b\u6a21\u677f\u6d3e\u751f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 template < class T1 , class T2 > class A { Tl v1 ; T2 v2 ; }; template < class T1 , class T2 > class B : public A < T2 , T1 > { T1 v3 ; T2 v4 ; }; template < class T > class C : public B < T , T > { T v5 ; }; int main () { B < int , double > obj1 ; C < int > obj2 ; return 0 ; } \u7c7b\u6a21\u677f\u4ece\u6a21\u677f\u7c7b\u6d3e\u751f \u00b6 1 2 3 4 5 template < class T1 , class T2 > class A { T1 v1 ; T2 v2 ; }; template < class T > class B : public A < int , double > { T v ;}; int main () { B < char > obj1 ; return 0 ; } \u7c7b\u6a21\u677f\u4ece\u666e\u901a\u7c7b\u6d3e\u751f \u00b6 1 2 3 4 class A { int v1 ; }; template < class T > class B : public A { T v ; }; int main (){ B < char > obj1 ; return 0 ; } \u666e\u901a\u7c7b\u4ece\u6a21\u677f\u7c7b\u6d3e\u751f \u00b6 1 2 3 4 template < class T > class A { T v1 ; int n ; }; class B : public A < int > { double v ; }; int main () { B obj1 ; return 0 ; } \u7c7b\u6a21\u677f\u4e0e\u53cb\u5143 \u00b6 \u51fd\u6570\u3001\u7c7b\u3001\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void Func1 () { } class A { }; class B { public : void Func () { } }; template < class T > class Tmpl { friend void Func1 (); friend class A ; friend void B :: Func (); }; int main () { Tmpl < int > i ; Tmpl < double > f ; return 0 ; } \u51fd\u6570\u6a21\u677f\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <iostream> #include <string> using namespace std ; template < class T1 , class T2 > class Pair { private : T1 key ; //\u5173\u952e\u5b57 T2 value ; //\u503c public : Pair ( T1 k , T2 v ) : key ( k ), value ( v ) { }; bool operator < ( const Pair < T1 , T2 > & p ) const ; template < class T3 , class T4 > friend ostream & operator << ( ostream & o , const Pair < T3 , T4 > & p ); }; template < class T1 , class T2 > bool Pair < T1 , T2 >:: operator < ( const Pair < T1 , T2 > & p ) const { //\u201c\u5c0f\u201d\u7684\u610f\u601d\u5c31\u662f\u5173\u952e\u5b57\u5c0f return key < p . key ; } template < class Tl , class T2 > ostream & operator << ( ostream & o , const Pair < T1 , T2 > & p ) { o << \"(\" << p . key << \",\" << p . value << \")\" ; return o ; } int main () { Pair < string , int > student ( \"Tom\" , 29 ); Pair < int , double > obj ( 12 , 3.14 ); cout << student << \" \" << obj ; return 0 ; } \u51fd\u6570\u6a21\u677f\u4f5c\u4e3a\u7c7b\u7684\u53cb\u5143 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { int v ; public : A ( int n ) : v ( n ) { } template < class T > friend void Print ( const T & p ); }; template < class T > void Print ( const T & p ) { cout << p . v ; } int main () { A a ( 4 ); Print ( a ); return 0 ; } \u7c7b\u6a21\u677f\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <iostream> using namespace std ; template < class T > class A { public : void Func ( const T & p ) { cout << p . v ; } }; template < class T > class B { private : T v ; public : B ( T n ) : v ( n ) { } template < class T2 > friend class A ; //\u628a\u7c7b\u6a21\u677fA\u58f0\u660e\u4e3a\u53cb\u5143 }; int main () { B < int > b ( 5 ); A < B < int > > a ; //\u7528B<int>\u66ff\u6362A\u6a21\u677f\u4e2d\u7684 T a . Func ( b ); return 0 ; } \u7c7b\u6a21\u677f\u4e2d\u7684\u9759\u6001\u6210\u5458 \u00b6 \u7c7b\u6a21\u677f\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u9759\u6001\u6210\u5458\uff0c\u4ece\u8be5\u7c7b\u6a21\u677f\u5b9e\u4f8b\u5316\u5f97\u5230\u7684\u6240\u6709\u7c7b\u90fd\u5305\u542b\u540c\u6837\u7684\u9759\u6001\u6210\u5458\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> using namespace std ; template < class T > class A { private : static int count ; public : A () { count ++ ; } ~ A () { count -- ; }; A ( A & ) { count ++ ; } static void PrintCount () { cout << count << endl ; } }; template <> int A < int >:: count = 0 ; template <> int A < double >:: count = 0 ; int main () { A < int > ia ; A < double > da ; ia . PrintCount (); da . PrintCount (); return 0 ; }","title":"\u6a21\u677f"},{"location":"cplus/cpp_muban/#_1","text":"","title":"\u6a21\u677f\u548c\u6cdb\u578b"},{"location":"cplus/cpp_muban/#_2","text":"1 2 3 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , ... > \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //\u5728\u51fd\u6570\u4f53\u4e2d\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u53c2\u6570 }","title":"\u6a21\u677f\u51fd\u6570"},{"location":"cplus/cpp_muban/#_3","text":"1 2 3 4 5 6 7 8 template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > class \u7c7b\u540d{ //TODO: }; template < typename \u7c7b\u578b\u53c2\u6570 1 , typename \u7c7b\u578b\u53c2\u6570 2 , \u2026 > \u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d < \u7c7b\u578b\u53c2\u6570 1 , \u7c7b\u578b\u53c2\u6570 2 , ... >:: \u51fd\u6570\u540d ( \u5f62\u53c2\u5217\u8868 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #include <iostream> using namespace std ; template < class T1 , class T2 > //\u8fd9\u91cc\u4e0d\u80fd\u6709\u5206\u53f7 class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const ; //\u83b7\u53d6x\u5750\u6807 void setX ( T1 x ); //\u8bbe\u7f6ex\u5750\u6807 T2 getY () const ; //\u83b7\u53d6y\u5750\u6807 void setY ( T2 y ); //\u8bbe\u7f6ey\u5750\u6807 private : T1 m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < class T1 , class T2 > //\u6a21\u677f\u5934 T1 Point < T1 , T2 >:: getX () const /*\u51fd\u6570\u5934*/ { return m_x ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setX ( T1 x ){ m_x = x ; } template < class T1 , class T2 > T2 Point < T1 , T2 >:: getY () const { return m_y ; } template < class T1 , class T2 > void Point < T1 , T2 >:: setY ( T2 y ){ m_y = y ; } int main (){ Point < int , int > p1 ( 10 , 20 ); cout << \"x=\" << p1 . getX () << \", y=\" << p1 . getY () << endl ; Point < int , char *> p2 ( 10 , \"\u4e1c\u7ecf180\u5ea6\" ); cout << \"x=\" << p2 . getX () << \", y=\" << p2 . getY () << endl ; Point < char * , char *> * p3 = new Point < char * , char *> ( \"\u4e1c\u7ecf180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ); cout << \"x=\" << p3 -> getX () << \", y=\" << p3 -> getY () << endl ; return 0 ; } \u53ef\u8fb9\u957f\u6570\u7ec4\u5b9e\u73b0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 #include <iostream> #include <cstring> using namespace std ; template < class T > class CArray { int size ; //\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 T * ptr ; //\u6307\u5411\u52a8\u6001\u5206\u914d\u7684\u6570\u7ec4 public : CArray ( int s = 0 ); //s\u4ee3\u8868\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570 CArray ( CArray & a ); ~ CArray (); void push_back ( const T & v ); //\u7528\u4e8e\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20v CArray & operator = ( const CArray & a ); //\u7528\u4e8e\u6570\u7ec4\u5bf9\u8c61\u95f4\u7684\u8d4b\u503c T length () { return size ; } T & operator []( int i ) { //\u7528\u4ee5\u652f\u6301\u6839\u636e\u4e0b\u6807\u8bbf\u95ee\u6570\u7ec4\u5143\u7d20\uff0c\u5982a[i] = 4;\u548cn = a[i]\u8fd9\u6837\u7684\u8bed\u53e5 return ptr [ i ]; } }; template < class T > CArray < T >:: CArray ( int s ) : size ( s ) { if ( s == 0 ) ptr = NULL ; else ptr = new T [ s ]; } template < class T > CArray < T >:: CArray ( CArray & a ) { if ( ! a . ptr ) { ptr = NULL ; size = 0 ; return ; } ptr = new T [ a . size ]; memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; } template < class T > CArray < T >::~ CArray () { if ( ptr ) delete [] ptr ; } template < class T > CArray < T > & CArray < T >:: operator = ( const CArray & a ) { //\u8d4b\u503c\u53f7\u7684\u4f5c\u7528\u662f\u4f7f\"=\"\u5de6\u8fb9\u5bf9\u8c61\u91cc\u5b58\u653e\u7684\u6570\u7ec4\uff0c\u5927\u5c0f\u548c\u5185\u5bb9\u90fd\u548c\u53f3\u8fb9\u7684\u5bf9\u8c61\u4e00\u6837 if ( this == & a ) //\u9632\u6b62a=a\u8fd9\u6837\u7684\u8d4b\u503c\u5bfc\u81f4\u51fa\u9519 return * this ; if ( a . ptr == NULL ) { //\u5982\u679ca\u91cc\u9762\u7684\u6570\u7ec4\u662f\u7a7a\u7684 if ( ptr ) delete [] ptr ; ptr = NULL ; size = 0 ; return * this ; } if ( size < a . size ) { //\u5982\u679c\u539f\u6709\u7a7a\u95f4\u591f\u5927\uff0c\u5c31\u4e0d\u7528\u5206\u914d\u65b0\u7684\u7a7a\u95f4 if ( ptr ) delete [] ptr ; ptr = new T [ a . size ]; } memcpy ( ptr , a . ptr , sizeof ( T ) * a . size ); size = a . size ; return * this ; } template < class T > void CArray < T >:: push_back ( const T & v ) { //\u5728\u6570\u7ec4\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 if ( ptr ) { T * tmpPtr = new T [ size + 1 ]; //\u91cd\u65b0\u5206\u914d\u7a7a\u95f4 memcpy ( tmpPtr , ptr , sizeof ( T ) * size ); //\u62f7\u8d1d\u539f\u6570\u7ec4\u5185\u5bb9 delete [] ptr ; ptr = tmpPtr ; } else //\u6570\u7ec4\u672c\u6765\u662f\u7a7a\u7684 ptr = new T [ 1 ]; ptr [ size ++ ] = v ; //\u52a0\u5165\u65b0\u7684\u6570\u7ec4\u5143\u7d20 } int main () { CArray < int > a ; for ( int i = 0 ; i < 5 ; ++ i ) a . push_back ( i ); for ( int i = 0 ; i < a . length (); ++ i ) cout << a [ i ] << \" \" ; return 0 ; }","title":"\u7c7b\u6a21\u677f"},{"location":"cplus/cpp_muban/#_4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> using namespace std ; template < class T > void Swap ( T & a , T & b ); //\u6a21\u677f\u2460\uff1a\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c template < typename T > void Swap ( T a [], T b [], int len ); //\u6a21\u677f\u2461\uff1a\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 void printArray ( int arr [], int len ); //\u6253\u5370\u6570\u7ec4\u5143\u7d20 int main (){ //\u4ea4\u6362\u57fa\u672c\u7c7b\u578b\u7684\u503c int m = 10 , n = 99 ; Swap ( m , n ); //\u5339\u914d\u6a21\u677f\u2460 cout << m << \", \" << n << endl ; //\u4ea4\u6362\u4e24\u4e2a\u6570\u7ec4 int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; int b [ 5 ] = { 10 , 20 , 30 , 40 , 50 }; int len = sizeof ( a ) / sizeof ( int ); //\u6570\u7ec4\u957f\u5ea6 Swap ( a , b , len ); //\u5339\u914d\u6a21\u677f\u2461 printArray ( a , len ); printArray ( b , len ); return 0 ; } template < class T > void Swap ( T & a , T & b ){ T temp = a ; a = b ; b = temp ; } template < typename T > void Swap ( T a [], T b [], int len ){ T temp ; for ( int i = 0 ; i < len ; i ++ ){ temp = a [ i ]; a [ i ] = b [ i ]; b [ i ] = temp ; } } void printArray ( int arr [], int len ){ for ( int i = 0 ; i < len ; i ++ ){ if ( i == len - 1 ){ cout << arr [ i ] << endl ; } else { cout << arr [ i ] << \", \" ; } } } \u4e3a\u51fd\u6570\u6a21\u677f\u663e\u5f0f\u5730\u6307\u660e\u5b9e\u53c2","title":"\u91cd\u8f7d\u51fd\u6570\u6a21\u677f"},{"location":"cplus/cpp_muban/#explicit-specialization","text":"\u6a21\u677f\u4e2d\u7684\u8bed\u53e5\uff08\u51fd\u6570\u4f53\u6216\u8005\u7c7b\u4f53\uff09\u4e0d\u4e00\u5b9a\u5c31\u80fd\u9002\u5e94\u6240\u6709\u7684\u7c7b\u578b\uff0c\u53ef\u80fd\u4f1a\u6709\u4e2a\u522b\u7684\u7c7b\u578b\u6ca1\u6709\u610f\u4e49\uff0c\u6216\u8005\u4f1a\u5bfc\u81f4\u8bed\u6cd5\u9519\u8bef\u3002(\u4f8b\u5982\uff1a>\u80fd\u591f\u7528\u6765\u6bd4\u8f83 int\u3001float\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u6570\u636e\u7684\u5927\u5c0f\uff0c\u4f46\u662f\u5374\u4e0d\u80fd\u7528\u6765\u6bd4\u8f83\u7ed3\u6784\u4f53\u53d8\u91cf\u3001\u5bf9\u8c61\u4ee5\u53ca\u6570\u7ec4\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709\u9488\u5bf9\u7ed3\u6784\u4f53\u3001\u7c7b\u548c\u6570\u7ec4\u91cd\u8f7d>) \u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> #include <string> using namespace std ; typedef struct { string name ; int age ; float score ; } STU ; //\u51fd\u6570\u6a21\u677f template < class T > const T & Max ( const T & a , const T & b ); //\u51fd\u6570\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9STU\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> const STU & Max < STU > ( const STU & a , const STU & b ); //\u91cd\u8f7d<< ostream & operator << ( ostream & out , const STU & stu ); int main (){ int a = 10 ; int b = 20 ; cout << Max ( a , b ) << endl ; STU stu1 = { \"\u738b\u660e\" , 16 , 95.5 }; STU stu2 = { \"\u5f90\u4eae\" , 17 , 90.0 }; cout << Max ( stu1 , stu2 ) << endl ; return 0 ; } template < class T > const T & Max ( const T & a , const T & b ){ return a > b ? a : b ; } template <> const STU & Max < STU > ( const STU & a , const STU & b ){ return a . score > b . score ? a : b ; } ostream & operator << ( ostream & out , const STU & stu ){ out << stu . name << \" , \" << stu . age << \" , \" << stu . score ; return out ; }","title":"\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08Explicit Specialization\uff09"},{"location":"cplus/cpp_muban/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316\uff08\u9488\u5bf9\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u663e\u793a\u5177\u4f53\u5316\uff09 template <> class Point < char * , char *> { public : Point ( char * x , char * y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } char * getY () const { return m_y ; } void setY ( char * y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 char * m_y ; //y\u5750\u6807 }; //\u8fd9\u91cc\u4e0d\u80fd\u5e26\u6a21\u677f\u5934template<> void Point < char * , char *>:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < int , char *> ( 10 , \"\u4e1c\u4eac180\u5ea6\" ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; }","title":"\u7c7b\u6a21\u677f\u7684\u663e\u793a\u5177\u4f53\u5316"},{"location":"cplus/cpp_muban/#_6","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include <iostream> using namespace std ; //\u7c7b\u6a21\u677f template < class T1 , class T2 > class Point { public : Point ( T1 x , T2 y ) : m_x ( x ), m_y ( y ){ } public : T1 getX () const { return m_x ; } void setX ( T1 x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : T1 m_x ; T2 m_y ; }; template < class T1 , class T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < T1 , T2 >:: display () const { cout << \"x=\" << m_x << \", y=\" << m_y << endl ; } //\u7c7b\u6a21\u677f\u7684\u90e8\u5206\u663e\u793a\u5177\u4f53\u5316 template < typename T2 > class Point < char * , T2 > { public : Point ( char * x , T2 y ) : m_x ( x ), m_y ( y ){ } public : char * getX () const { return m_x ; } void setX ( char * x ){ m_x = x ; } T2 getY () const { return m_y ; } void setY ( T2 y ){ m_y = y ; } void display () const ; private : char * m_x ; //x\u5750\u6807 T2 m_y ; //y\u5750\u6807 }; template < typename T2 > //\u8fd9\u91cc\u9700\u8981\u5e26\u4e0a\u6a21\u677f\u5934 void Point < char * , T2 >:: display () const { cout << \"x=\" << m_x << \" | y=\" << m_y << endl ; } int main (){ ( new Point < int , int > ( 10 , 20 ) ) -> display (); ( new Point < char * , int > ( \"\u4e1c\u4eac180\u5ea6\" , 10 ) ) -> display (); ( new Point < char * , char *> ( \"\u4e1c\u4eac180\u5ea6\" , \"\u5317\u7eac210\u5ea6\" ) ) -> display (); return 0 ; }","title":"\u90e8\u5206\u663e\u793a\u5177\u4f53\u5316"},{"location":"cplus/cpp_muban/#_7","text":"C++ \u5bf9\u6a21\u677f\u7684\u652f\u6301\u975e\u5e38\u81ea\u7531\uff0c\u6a21\u677f\u4e2d\u9664\u4e86\u53ef\u4ee5\u5305\u542b\u7c7b\u578b\u53c2\u6570\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u975e\u7c7b\u578b\u53c2\u6570\u3002T \u662f\u4e00\u4e2a\u7c7b\u578b\u53c2\u6570\uff0c\u5b83\u901a\u8fc7class\u6216typename\u5173\u952e\u5b57\u6307\u5b9a\u3002N \u662f\u4e00\u4e2a\u975e\u7c7b\u578b\u53c2\u6570\uff0c\u7528\u6765\u4f20\u9012\u6570\u636e\u7684\u503c\uff0c\u800c\u4e0d\u662f\u7c7b\u578b\uff0c\u5b83\u548c\u666e\u901a\u51fd\u6570\u7684\u5f62\u53c2\u4e00\u6837\uff0c\u90fd\u9700\u8981\u6307\u660e\u5177\u4f53\u7684\u7c7b\u578b\u3002 1 2 template < typename T , int N > class Demo { }; template < class T , int N > void func ( T ( & arr )[ N ]);","title":"\u975e\u7c7b\u578b\u53c2\u6570"},{"location":"cplus/cpp_muban/#_8","text":"\u52a8\u6001\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 #include <iostream> #include <cstring> #include <cstdlib> using namespace std ; template < typename T , int N > class Array { public : Array (); ~ Array (); public : T & operator []( int i ); //\u91cd\u8f7d\u4e0b\u6807\u8fd0\u7b97\u7b26[] int length () const { return m_length ; } //\u83b7\u53d6\u6570\u7ec4\u957f\u5ea6 bool capacity ( int n ); //\u6539\u53d8\u6570\u7ec4\u5bb9\u91cf private : int m_length ; //\u6570\u7ec4\u7684\u5f53\u524d\u957f\u5ea6 int m_capacity ; //\u5f53\u524d\u5185\u5b58\u7684\u5bb9\u91cf\uff08\u80fd\u5bb9\u4e43\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff09 T * m_p ; //\u6307\u5411\u6570\u7ec4\u5185\u5b58\u7684\u6307\u9488 }; template < typename T , int N > Array < T , N >:: Array (){ m_p = new T [ N ]; m_capacity = m_length = N ; } template < typename T , int N > Array < T , N >::~ Array (){ delete [] m_p ; } template < typename T , int N > T & Array < T , N >:: operator []( int i ){ if ( i < 0 || i >= m_length ){ cout << \"Exception: Array index out of bounds!\" << endl ; } return m_p [ i ]; } template < typename T , int N > bool Array < T , N >:: capacity ( int n ){ if ( n > 0 ){ //\u589e\u5927\u6570\u7ec4 int len = m_length + n ; //\u589e\u5927\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len <= m_capacity ){ //\u73b0\u6709\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 m_length = len ; return true ; } else { //\u73b0\u6709\u5185\u5b58\u4e0d\u80fd\u5bb9\u7eb3\u589e\u5927\u540e\u7684\u6570\u7ec4 T * pTemp = new T [ m_length + 2 * n * sizeof ( T )]; //\u589e\u52a0\u7684\u5185\u5b58\u8db3\u4ee5\u5bb9\u7eb3 2*n \u4e2a\u5143\u7d20 if ( pTemp == NULL ){ //\u5185\u5b58\u5206\u914d\u5931\u8d25 cout << \"Exception: Failed to allocate memory!\" << endl ; return false ; } else { //\u5185\u5b58\u5206\u914d\u6210\u529f memcpy ( pTemp , m_p , m_length * sizeof ( T ) ); delete [] m_p ; m_p = pTemp ; m_capacity = m_length = len ; } } } else { //\u6536\u7f29\u6570\u7ec4 int len = m_length - abs ( n ); //\u6536\u7f29\u540e\u7684\u6570\u7ec4\u957f\u5ea6 if ( len < 0 ){ cout << \"Exception: Array length is too small!\" << endl ; return false ; } else { m_length = len ; return true ; } } } int main (){ Array < int , 5 > arr ; //\u4e3a\u6570\u7ec4\u5143\u7d20\u8d4b\u503c for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e00\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6269\u5927\u5bb9\u91cf\u5e76\u4e3a\u589e\u52a0\u7684\u5143\u7d20\u8d4b\u503c arr . capacity ( 8 ); for ( int i = 5 , len = arr . length (); i < len ; i ++ ){ arr [ i ] = 2 * i ; } //\u7b2c\u4e8c\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; //\u6536\u7f29\u5bb9\u91cf arr . capacity ( - 4 ); //\u7b2c\u4e09\u6b21\u6253\u5370\u6570\u7ec4 for ( int i = 0 , len = arr . length (); i < len ; i ++ ){ cout << arr [ i ] << \" \" ; } cout << endl ; return 0 ; }","title":"\u7c7b\u6a21\u677f\u4e2d\u4f7f\u7528\u975e\u7c7b\u578b\u53c2\u6570"},{"location":"cplus/cpp_muban/#_9","text":"\u975e\u7c7b\u578b\u53c2\u6570\u7684\u7c7b\u578b\u4e0d\u80fd\u968f\u610f\u6307\u5b9a\uff0c\u5b83\u53d7\u5230\u4e86\u4e25\u683c\u7684\u9650\u5236\uff0c\u53ea\u80fd\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u6307\u5411\u5bf9\u8c61\u6216\u51fd\u6570\u7684\u6307\u9488\uff08\u4e5f\u53ef\u4ee5\u662f\u5f15\u7528\uff09\u3002 \u6a21\u677f\u7684\u5b9e\u4f8b\u5316\u662f\u7531\u7f16\u8bd1\u5668\u5b8c\u6210\uff08\u9690\u5f0f\u5b9e\u4f8b\u5316\uff09\u7684\uff0c\u800c\u4e0d\u662f\u7531\u94fe\u63a5\u5668\u5b8c\u6210\u7684\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u94fe\u63a5\u671f\u95f4\u627e\u4e0d\u5230\u5bf9\u5e94\u7684\u5b9e\u4f8b\u3002\u6240\u4ee5\u4e0d\u80fd\u5c06\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u591a\u4e2a\u6587\u4ef6\u4e2d","title":"\u975e\u7c7b\u578b\u53c2\u6570\u9650\u5236"},{"location":"cplus/cpp_muban/#_10","text":"\u663e\u5f0f\u5b9e\u4f8b\u5316\u4e00\u4e2a\u7c7b\u6a21\u677f\u65f6\uff0c\u4f1a\u4e00\u6b21\u6027\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u3002 \u6709\u4e86\u7c7b\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316\uff0c\u5c31\u53ef\u4ee5\u5c06\u7c7b\u6a21\u677f\u7684\u58f0\u660e\u548c\u5b9a\u4e49\u5206\u6563\u5230\u4e0d\u540c\u7684\u6587\u4ef6\u4e2d\u3002 1 2 3 4 5 6 template void Swap ( double & a , double & b ); template class Point < char * , char *> ; extern template declaration ; //\u5b9e\u4f8b\u5316\u58f0\u660e template declaration ; //\u5b9e\u4f8b\u5316\u5b9a\u4e49","title":"\u6a21\u677f\u7684\u663e\u5f0f\u5b9e\u4f8b\u5316"},{"location":"cplus/cpp_muban/#_11","text":"\u7c7b\u6a21\u677f\u548c\u7c7b\u6a21\u677f\u4e4b\u95f4\u3001\u7c7b\u6a21\u677f\u548c\u7c7b\u4e4b\u95f4\u53ef\u4ee5\u4e92\u76f8\u7ee7\u627f\u3002","title":"\u7c7b\u6a21\u677f\u4e0e\u7ee7\u627f"},{"location":"cplus/cpp_muban/#_12","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 template < class T1 , class T2 > class A { Tl v1 ; T2 v2 ; }; template < class T1 , class T2 > class B : public A < T2 , T1 > { T1 v3 ; T2 v4 ; }; template < class T > class C : public B < T , T > { T v5 ; }; int main () { B < int , double > obj1 ; C < int > obj2 ; return 0 ; }","title":"\u7c7b\u6a21\u677f\u4ece\u7c7b\u6a21\u677f\u6d3e\u751f"},{"location":"cplus/cpp_muban/#_13","text":"1 2 3 4 5 template < class T1 , class T2 > class A { T1 v1 ; T2 v2 ; }; template < class T > class B : public A < int , double > { T v ;}; int main () { B < char > obj1 ; return 0 ; }","title":"\u7c7b\u6a21\u677f\u4ece\u6a21\u677f\u7c7b\u6d3e\u751f"},{"location":"cplus/cpp_muban/#_14","text":"1 2 3 4 class A { int v1 ; }; template < class T > class B : public A { T v ; }; int main (){ B < char > obj1 ; return 0 ; }","title":"\u7c7b\u6a21\u677f\u4ece\u666e\u901a\u7c7b\u6d3e\u751f"},{"location":"cplus/cpp_muban/#_15","text":"1 2 3 4 template < class T > class A { T v1 ; int n ; }; class B : public A < int > { double v ; }; int main () { B obj1 ; return 0 ; }","title":"\u666e\u901a\u7c7b\u4ece\u6a21\u677f\u7c7b\u6d3e\u751f"},{"location":"cplus/cpp_muban/#_16","text":"","title":"\u7c7b\u6a21\u677f\u4e0e\u53cb\u5143"},{"location":"cplus/cpp_muban/#_17","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 void Func1 () { } class A { }; class B { public : void Func () { } }; template < class T > class Tmpl { friend void Func1 (); friend class A ; friend void B :: Func (); }; int main () { Tmpl < int > i ; Tmpl < double > f ; return 0 ; }","title":"\u51fd\u6570\u3001\u7c7b\u3001\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143"},{"location":"cplus/cpp_muban/#_18","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 #include <iostream> #include <string> using namespace std ; template < class T1 , class T2 > class Pair { private : T1 key ; //\u5173\u952e\u5b57 T2 value ; //\u503c public : Pair ( T1 k , T2 v ) : key ( k ), value ( v ) { }; bool operator < ( const Pair < T1 , T2 > & p ) const ; template < class T3 , class T4 > friend ostream & operator << ( ostream & o , const Pair < T3 , T4 > & p ); }; template < class T1 , class T2 > bool Pair < T1 , T2 >:: operator < ( const Pair < T1 , T2 > & p ) const { //\u201c\u5c0f\u201d\u7684\u610f\u601d\u5c31\u662f\u5173\u952e\u5b57\u5c0f return key < p . key ; } template < class Tl , class T2 > ostream & operator << ( ostream & o , const Pair < T1 , T2 > & p ) { o << \"(\" << p . key << \",\" << p . value << \")\" ; return o ; } int main () { Pair < string , int > student ( \"Tom\" , 29 ); Pair < int , double > obj ( 12 , 3.14 ); cout << student << \" \" << obj ; return 0 ; }","title":"\u51fd\u6570\u6a21\u677f\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143"},{"location":"cplus/cpp_muban/#_19","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #include <iostream> using namespace std ; class A { int v ; public : A ( int n ) : v ( n ) { } template < class T > friend void Print ( const T & p ); }; template < class T > void Print ( const T & p ) { cout << p . v ; } int main () { A a ( 4 ); Print ( a ); return 0 ; }","title":"\u51fd\u6570\u6a21\u677f\u4f5c\u4e3a\u7c7b\u7684\u53cb\u5143"},{"location":"cplus/cpp_muban/#_20","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <iostream> using namespace std ; template < class T > class A { public : void Func ( const T & p ) { cout << p . v ; } }; template < class T > class B { private : T v ; public : B ( T n ) : v ( n ) { } template < class T2 > friend class A ; //\u628a\u7c7b\u6a21\u677fA\u58f0\u660e\u4e3a\u53cb\u5143 }; int main () { B < int > b ( 5 ); A < B < int > > a ; //\u7528B<int>\u66ff\u6362A\u6a21\u677f\u4e2d\u7684 T a . Func ( b ); return 0 ; }","title":"\u7c7b\u6a21\u677f\u4f5c\u4e3a\u7c7b\u6a21\u677f\u7684\u53cb\u5143"},{"location":"cplus/cpp_muban/#_21","text":"\u7c7b\u6a21\u677f\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u9759\u6001\u6210\u5458\uff0c\u4ece\u8be5\u7c7b\u6a21\u677f\u5b9e\u4f8b\u5316\u5f97\u5230\u7684\u6240\u6709\u7c7b\u90fd\u5305\u542b\u540c\u6837\u7684\u9759\u6001\u6210\u5458\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #include <iostream> using namespace std ; template < class T > class A { private : static int count ; public : A () { count ++ ; } ~ A () { count -- ; }; A ( A & ) { count ++ ; } static void PrintCount () { cout << count << endl ; } }; template <> int A < int >:: count = 0 ; template <> int A < double >:: count = 0 ; int main () { A < int > ia ; A < double > da ; ia . PrintCount (); da . PrintCount (); return 0 ; }","title":"\u7c7b\u6a21\u677f\u4e2d\u7684\u9759\u6001\u6210\u5458"},{"location":"cplus/cpp_object/","text":"\u7c7b\u548c\u5bf9\u8c61 \u00b6 \u7c7b\u662f\u4e00\u4e2a\u6a21\u677f\uff08Template\uff09\uff0c\u7f16\u8bd1\u540e\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\u4e0d\u80fd\u5bf9\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002\u53ea\u6709\u5728\u521b\u5efa\u5bf9\u8c61\u540e\u624d\u7ed9\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u8fd9\u4e2a\u65f6\u5019\u8d4b\u503c\u4e86\u3002 \u4f7f\u7528new\u5728\u5806\u4e0a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u662f\u533f\u540d\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u5fc5\u987b\u8981\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5b83\uff0c\u518d\u501f\u52a9\u6307\u9488\u6765\u8bbf\u95ee\u5b83\u7684\u6210\u5458\u53d8\u91cf\u6216\u6210\u5458\u51fd\u6570\u3002 ::\u88ab\u79f0\u4e3a\u57df\u89e3\u6790\u7b26\uff08\u4e5f\u79f0\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u6216\u4f5c\u7528\u57df\u9650\u5b9a\u7b26\uff09\uff0c\u7528\u6765\u8fde\u63a5\u7c7b\u540d\u548c\u51fd\u6570\u540d\uff0c\u6307\u660e\u5f53\u524d\u51fd\u6570\u5c5e\u4e8e\u54ea\u4e2a\u7c7b \u6210\u5458\u5bf9\u8c61\u4e0e\u6210\u5458\u51fd\u6570 \u00b6 \u5728\u7c7b\u4f53\u4e2d\u548c\u7c7b\u4f53\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u662f\u6709\u533a\u522b\u7684\uff1a\u5728\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u4f1a\u81ea\u52a8\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5728\u7c7b\u4f53\u5916\u5b9a\u4e49\u7684\u4e0d\u4f1a \u6210\u5458\u53d8\u91cf\u5927\u90fd\u4ee5m_\u5f00\u5934\uff0c\u8fd9\u662f\u7ea6\u5b9a\u6210\u4fd7\u7684\u5199\u6cd5\uff0c\u4e0d\u662f\u8bed\u6cd5\u89c4\u5b9a\u7684\u5185\u5bb9\u3002\u4ee5m_\u5f00\u5934\u65e2\u53ef\u4ee5\u4e00\u773c\u770b\u51fa\u8fd9\u662f\u6210\u5458\u53d8\u91cf\uff0c\u53c8\u53ef\u4ee5\u548c\u6210\u5458\u51fd\u6570\u4e2d\u7684\u5f62\u53c2\u540d\u5b57\u533a\u5206\u5f00\u3002 \u7f16\u8bd1\u5668\u4f1a\u5c06\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u5206\u5f00\u5b58\u50a8\uff1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u6240\u6709\u5bf9\u8c61\u90fd\u5171\u4eab\u540c\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801 \u6784\u9020\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570\u5fc5\u987b\u662fpublic\u5c5e\u6027\u7684\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\uff0c\u51fd\u6570\u540d\u524d\u9762\u90fd\u4e0d\u80fd\u51fa\u73b0\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5373\u4f7f\u662f void \u4e5f\u4e0d\u5141\u8bb8\uff1b \u51fd\u6570\u4f53\u4e2d\u4e0d\u80fd\u6709 return \u8bed\u53e5\u3002 \u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868 \u00b6 \u521d\u59cb\u5316const\u6210\u5458\u53d8\u91cf\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u3002 \u6210\u5458\u53d8\u91cf\u7684\u521d\u59cb\u5316\u987a\u5e8f\u4e0e\u521d\u59cb\u5316\u5217\u8868\u4e2d\u5217\u51fa\u7684\u53d8\u91cf\u7684\u987a\u5e8f\u65e0\u5173\uff0c\u5b83\u53ea\u4e0e\u6210\u5458\u53d8\u91cf\u5728\u7c7b\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u6709\u5173\u3002 1 2 3 4 5 6 7 8 9 10 11 class VLA { private : const int m_len ; int * m_arr ; public : VLA ( int len ); }; //\u5fc5\u987b\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316 m_len VLA :: VLA ( int len ) : m_len ( len ){ m_arr = new int [ len ]; } \u5bf9\u8c61\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6784\u9020\u521d\u59cb\u5316 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <iostream> using namespace std ; class CSample { public : CSample (){ //\u6784\u9020\u51fd\u6570 1 cout << \"Constructor 1 Called\" << endl ; } CSample ( int n ){ //\u6784\u9020\u51fd\u6570 2 cout << \"Constructor 2 Called\" << endl ; } }; int main (){ cout << \"stepl\" << endl ; CSample arrayl [ 2 ]; cout << \"step2\" << endl ; CSample array2 [ 2 ] = { 4 , 5 }; cout << \"step3\" << endl ; CSample array3 [ 2 ] = { 3 }; cout << \"step4\" << endl ; CSample * array4 = new CSample [ 2 ]; delete [] array4 ; return 0 ; } //\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6 class CTest { public : CTest ( int n ){ } //\u6784\u9020\u51fd\u6570(1) CTest ( int n , int m ){ } //\u6784\u9020\u51fd\u6570(2) CTest (){ } //\u6784\u9020\u51fd\u6570(3) }; int main (){ //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u3001(3) \u521d\u59cb\u5316 CTest arrayl [ 3 ] = { 1 , CTest ( 1 , 2 ) }; //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(2)\u3001(2)\u3001(1)\u521d\u59cb\u5316 CTest array2 [ 3 ] = { CTest ( 2 , 3 ), CTest ( 1 , 2 ), 1 }; //\u4e24\u4e2a\u5143\u7d20\u6307\u5411\u7684\u5bf9\u8c61\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u521d\u59cb\u5316 CTest * pArray [ 3 ] = { new CTest ( 4 ), new CTest ( 1 , 2 ) }; //pArray[2] \u6ca1\u6709\u521d\u59cb\u5316\uff0c\u5176\u503c\u662f\u968f\u673a\u7684\uff0c\u4e0d\u77e5\u9053\u6307\u5411\u54ea\u91cc\u3002 return 0 ; } \u6790\u6784\u51fd\u6570 \u00b6 \u6784\u9020\u51fd\u6570\u7684\u540d\u5b57\u548c\u7c7b\u540d\u76f8\u540c\uff0c\u800c\u6790\u6784\u51fd\u6570\u7684\u540d\u5b57\u662f\u5728\u7c7b\u540d\u524d\u9762\u52a0\u4e00\u4e2a~\u7b26\u53f7\u3002\u6790\u6784\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u4e0d\u80fd\u88ab\u91cd\u8f7d\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002 \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u5b83\u548c\u5168\u5c40\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u5b83\u548c\u5c40\u90e8\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u6267\u884c\u65f6\u673a \u00b6 \u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u8c03\u7528\uff0c\u5bf9\u8c61\u7684\u9500\u6bc1\u65f6\u673a\u4e0e\u5b83\u6240\u5728\u7684\u5185\u5b58\u533a\u57df\u6709\u5173\uff1a \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 new\u521b\u5efa\u7684\u5bf9\u8c61\u4f4d\u4e8e\u5806\u533a\uff0c\u901a\u8fc7delete\u5220\u9664\u65f6\u624d\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709delete\uff0c\u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u6210\u5458\u5bf9\u8c61\u548c\u5c01\u95ed\u7c7b \u00b6 \u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u5982\u679c\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5c31\u79f0\u4e4b\u4e3a\u201c\u6210\u5458\u5bf9\u8c61\u201d\u3002\u5305\u542b\u6210\u5458\u5bf9\u8c61\u7684\u7c7b\u53eb\u5c01\u95ed\u7c7b\uff08enclosed class\uff09\u3002 \u521b\u5efa\u5c01\u95ed\u7c7b\u7684\u5bf9\u8c61\u65f6\uff0c\u5176\u6210\u5458\u5bf9\u8c61\u4e5f\u9700\u8981\u88ab\u521b\u5efa\uff0c\u6210\u5458\u5bf9\u8c61\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\uff1f\u9700\u8981\u501f\u52a9\u5c01\u95ed\u7c7b\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <iostream> using namespace std ; //\u8f6e\u80ce\u7c7b class Tyre { public : Tyre ( int radius , int width ); void show () const ; private : int m_radius ; //\u534a\u5f84 int m_width ; //\u5bbd\u5ea6 }; Tyre :: Tyre ( int radius , int width ) : m_radius ( radius ), m_width ( width ){ } void Tyre :: show () const { cout << \"\u8f6e\u6bc2\u534a\u5f84\uff1a\" << this -> m_radius << \"\u540b\" << endl ; cout << \"\u8f6e\u80ce\u5bbd\u5ea6\uff1a\" << this -> m_width << \"mm\" << endl ; } //\u5f15\u64ce\u7c7b class Engine { public : Engine ( float displacement = 2.0 ); void show () const ; private : float m_displacement ; }; Engine :: Engine ( float displacement ) : m_displacement ( displacement ) {} void Engine :: show () const { cout << \"\u6392\u91cf\uff1a\" << this -> m_displacement << \"L\" << endl ; } //\u6c7d\u8f66\u7c7b class Car { public : Car ( int price , int radius , int width ); void show () const ; private : int m_price ; //\u4ef7\u683c Tyre m_tyre ; Engine m_engine ; }; Car :: Car ( int price , int radius , int width ) : m_price ( price ), m_tyre ( radius , width ) /*\u6307\u660em_tyre\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65b9\u5f0f*/ { }; //\u8fd9\u91cc\u5e76\u6ca1\u6709\u8bf4\u660e m_engine \u8be5\u5982\u4f55\u5904\u7406,\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\u3002 void Car :: show () const { cout << \"\u4ef7\u683c\uff1a\" << this -> m_price << \"\uffe5\" << endl ; this -> m_tyre . show (); this -> m_engine . show (); } int main () { Car car ( 200000 , 19 , 245 ); car . show (); return 0 ; } \u5c01\u95ed\u7c7b\u5bf9\u8c61\u751f\u6210\u65f6\uff0c\u5148\u6267\u884c\u6240\u6709\u6210\u5458\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u624d\u6267\u884c\u5c01\u95ed\u7c7b\u81ea\u5df1\u7684\u6784\u9020\u51fd\u6570\u3002\u6210\u5458\u5bf9\u8c61\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6210\u5458\u5bf9\u8c61\u5728\u7c7b\u5b9a\u4e49\u4e2d\u7684\u6b21\u5e8f\u4e00\u81f4\uff0c\u4e0e\u5b83\u4eec\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u5e8f\u65e0\u5173\u3002 \u5f53\u5c01\u95ed\u7c7b\u5bf9\u8c61\u6d88\u4ea1\u65f6\uff0c\u5148\u6267\u884c\u5c01\u95ed\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u6267\u884c\u6210\u5458\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u6210\u5458\u5bf9\u8c61\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6784\u9020\u7684\u540e\u6790\u6784\u3002 C++ this\u6307\u9488 \u00b6 this \u5b9e\u9645\u4e0a\u662f\u6210\u5458\u51fd\u6570\u7684\u4e00\u4e2a\u5f62\u53c2\uff0c\u5728\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\u5c06\u5bf9\u8c61\u7684\u5730\u5740\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9 this\u3002\u4e0d\u8fc7 this \u8fd9\u4e2a\u5f62\u53c2\u662f\u9690\u5f0f\u7684\uff0c\u5b83\u5e76\u4e0d\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u7531\u7f16\u8bd1\u5668\u9ed8\u9ed8\u5730\u5c06\u5b83\u6dfb\u52a0\u5230\u53c2\u6570\u5217\u8868\u4e2d\u3002 \u6210\u5458\u51fd\u6570\u6700\u7ec8\u88ab\u7f16\u8bd1\u6210\u4e0e\u5bf9\u8c61\u65e0\u5173\u7684\u666e\u901a\u51fd\u6570\uff0c\u9664\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u4f1a\u4e22\u5931\u6240\u6709\u4fe1\u606f\uff0c\u6240\u4ee5\u7f16\u8bd1\u65f6\u8981\u5728\u6210\u5458\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u628a\u5f53\u524d\u5bf9\u8c61\u7684\u9996\u5730\u5740\u4f20\u5165\uff0c\u4ee5\u6b64\u6765\u5173\u8054\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f this\uff0c\u5b83\u662f\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u5173\u8054\u7684\u6865\u6881\u3002 this \u662f const \u6307\u9488\uff0c\u5b83\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff0c\u4e00\u5207\u4f01\u56fe\u4fee\u6539\u8be5\u6307\u9488\u7684\u64cd\u4f5c\uff0c\u5982\u8d4b\u503c\u3001\u9012\u589e\u3001\u9012\u51cf\u7b49\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\u3002 this \u53ea\u80fd\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u7528\u5728\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u610f\u4e49\uff0c\u4e5f\u662f\u975e\u6cd5\u7684\u3002 \u53ea\u6709\u5f53\u5bf9\u8c61\u88ab\u521b\u5efa\u540e this \u624d\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728 static \u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528\uff08\u540e\u7eed\u4f1a\u8bb2\u5230 static \u6210\u5458\uff09\u3002 static\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570 \u00b6 static\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u5728\u7c7b\u58f0\u660e\u7684\u5916\u90e8\u521d\u59cb\u5316\uff1a 1 2 type class :: name = value ; int Student :: m_total = 0 ; //\u9759\u6001\u6210\u5458\u53d8\u91cf\u5728\u521d\u59cb\u5316\u65f6\u4e0d\u80fd\u518d\u52a0 static static \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\u65e2\u4e0d\u662f\u5728\u58f0\u660e\u7c7b\u65f6\u5206\u914d\uff0c\u4e5f\u4e0d\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5206\u914d\uff0c\u800c\u662f\u5728\uff08\u7c7b\u5916\uff09\u521d\u59cb\u5316\u65f6\u5206\u914d\u3002\u53cd\u8fc7\u6765\u8bf4\uff0c\u6ca1\u6709\u5728\u7c7b\u5916\u521d\u59cb\u5316\u7684 static \u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u3002 static\u6210\u5458\u53d8\u91cf\u548c\u666e\u901astatic\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u5728\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\u65f6\u624d\u91ca\u653e\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0cstatic \u6210\u5458\u53d8\u91cf\u4e0d\u5360\u7528\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u4e0d\u968f\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5206\u914d\u5185\u5b58\uff0c\u4e5f\u4e0d\u968f\u5bf9\u8c61\u7684\u9500\u6bc1\u800c\u91ca\u653e\u5185\u5b58\uff0c\u5373\u4f7f\u4e0d\u521b\u5efa\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u3002\u800c\u666e\u901a\u6210\u5458\u53d8\u91cf\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u91ca\u653e\u5185\u5b58\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u666e\u901a\u6210\u5458\u51fd\u6570\u7684\u6839\u672c\u533a\u522b\u5728\u4e8e\uff1a\u666e\u901a\u6210\u5458\u51fd\u6570\u6709 this \u6307\u9488\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2d\u7684\u4efb\u610f\u6210\u5458\uff1b\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff08\u5305\u62ec\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\uff09\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8bbf\u95ee\u9759\u6001\u6210\u5458\u3002\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u5728\u58f0\u660e\u65f6\u8981\u52a0 static\uff0c\u5728\u5b9a\u4e49\u65f6\u4e0d\u80fd\u52a0 static\u3002 const\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570 \u00b6 \u521d\u59cb\u5316 const \u6210\u5458\u53d8\u91cf\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 const \u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u4fee\u6539\u5b83\u4eec\u7684\u503c\uff0c\u8fd9\u79cd\u63aa\u65bd\u4e3b\u8981\u8fd8\u662f\u4e3a\u4e86\u4fdd\u62a4\u6570\u636e\u800c\u8bbe\u7f6e\u7684\u3002const \u6210\u5458\u51fd\u6570\u4e5f\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002 \u5e38\u6210\u5458\u51fd\u6570\u9700\u8981\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u7684\u65f6\u5019\u5728\u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u5173\u952e\u5b57\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Student { public : Student ( char * name , int age , float score ); void show (); //\u58f0\u660e\u5e38\u6210\u5458\u51fd\u6570 char * getname () const ; int getage () const ; float getscore () const ; private : char * m_name ; int m_age ; float m_score ; }; Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } //\u5b9a\u4e49\u5e38\u6210\u5458\u51fd\u6570 char * Student :: getname () const { return m_name ; } int Student :: getage () const { return m_age ; } float Student :: getscore () const { return m_score ; } \u51fd\u6570\u5f00\u5934\u7684 const \u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8868\u793a\u8fd4\u56de\u503c\u662f const \u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f8b\u5982const char * getname()\u3002 \u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u8868\u793a\u5e38\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u79cd\u51fd\u6570\u53ea\u80fd\u8bfb\u53d6\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u80fd\u4fee\u6539\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u4f8b\u5982char * getname() const\u3002 const\u5bf9\u8c61 \u00b6 const\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u5bf9\u8c61\uff0c\u79f0\u4e3a\u5e38\u5bf9\u8c61\u3002\u53ea\u80fd\u8c03\u7528\u7c7b\u7684 const\u6210\u5458\uff08\u5305\u62ecconst\u6210\u5458\u53d8\u91cf\u548cconst\u6210\u5458\u51fd\u6570\uff09\u4e86\u3002 1 2 3 4 5 const class object ( params ); class const object ( params ); const class * p = new class ( params ); class const * p = new class ( params ); friend\u53cb\u5143\u51fd\u6570\u4e0e\u53cb\u5143\u7c7b \u00b6 \u53cb\u5143\u7684\u5173\u7cfb\u662f\u5355\u5411\u7684\u800c\u4e0d\u662f\u53cc\u5411\u7684\u3002 \u53cb\u5143\u7684\u5173\u7cfb\u4e0d\u80fd\u4f20\u9012\u3002 \u4e00\u822c\u4e0d\u5efa\u8bae\u628a\u6574\u4e2a\u7c7b\u58f0\u660e\u4e3a\u53cb\u5143\u7c7b\uff0c\u800c\u53ea\u5c06\u67d0\u4e9b\u6210\u5458\u51fd\u6570\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\u3002 \u53cb\u5143\u51fd\u6570 \u00b6 \u5f53\u524d\u7c7b\u4ee5\u5916\u5b9a\u4e49\u7684\u3001\u4e0d\u5c5e\u4e8e\u5f53\u524d\u7c7b\u7684\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u7c7b\u4e2d\u58f0\u660e\uff0c\u4f46\u8981\u5728\u524d\u9762\u52a0friend\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u53cb\u5143\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u662f\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u7684\u975e\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec public\u3001protected\u3001private \u5c5e\u6027\u7684\u3002 \u53cb\u5143\u51fd\u6570\u4e0d\u540c\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6210\u5458\u51fd\u6570\u5728\u8c03\u7528\u65f6\u4f1a\u9690\u5f0f\u5730\u589e\u52a0 this\u6307\u9488\uff0c\u6307\u5411\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\uff0c\u5728\u53cb\u5143\u51fd\u6570\u4e2d\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u5fc5\u987b\u8981\u501f\u52a9\u5bf9\u8c61\u3002 \u53cb\u5143\u51fd\u6570\uff1a\u6709\u65f6\u5019\u7c7b\u9700\u8981\u63d0\u524d\u58f0\u660e\uff0c\u7c7b\u7684\u63d0\u524d\u58f0\u660e\u7684\u4f7f\u7528\u8303\u56f4\u662f\u6709\u9650\u7684\uff0c\u53ea\u6709\u5728\u6b63\u5f0f\u58f0\u660e\u4e00\u4e2a\u7c7b\u4ee5\u540e\u624d\u80fd\u7528\u5b83\u53bb\u521b\u5efa\u5bf9\u8c61\u3002 \u53cb\u5143\u7c7b \u00b6 \u53cb\u5143\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u90fd\u662f\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <iostream> using namespace std ; class Address ; //\u63d0\u524d\u58f0\u660eAddress\u7c7b //\u58f0\u660eStudent\u7c7b class Student { public : Student ( char * name , int age , float score ); public : void show ( Address * addr ); private : char * m_name ; int m_age ; float m_score ; }; //\u58f0\u660eAddress\u7c7b class Address { public : Address ( char * province , char * city , char * district ); public : //\u5c06Student\u7c7b\u58f0\u660e\u4e3aAddress\u7c7b\u7684\u53cb\u5143\u7c7b friend class Student ; private : char * m_province ; //\u7701\u4efd char * m_city ; //\u57ce\u5e02 char * m_district ; //\u533a\uff08\u5e02\u533a\uff09 }; //\u5b9e\u73b0Student\u7c7b Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show ( Address * addr ){ cout << m_name << \"\u7684\u5e74\u9f84\u662f \" << m_age << \"\uff0c\u6210\u7ee9\u662f \" << m_score << endl ; cout << \"\u5bb6\u5ead\u4f4f\u5740\uff1a\" << addr -> m_province << \"\u7701\" << addr -> m_city << \"\u5e02\" << addr -> m_district << \"\u533a\" << endl ; } //\u5b9e\u73b0Address\u7c7b Address :: Address ( char * province , char * city , char * district ){ m_province = province ; m_city = city ; m_district = district ; } int main (){ Student stu ( \"\u5c0f\u660e\" , 16 , 95.5f ); Address addr ( \"\u9655\u897f\" , \"\u897f\u5b89\" , \"\u96c1\u5854\" ); stu . show ( & addr ); Student * pstu = new Student ( \"\u674e\u78ca\" , 16 , 80.5 ); Address * paddr = new Address ( \"\u6cb3\u5317\" , \"\u8861\u6c34\" , \"\u6843\u57ce\" ); pstu -> show ( paddr ); return 0 ; } string\u7c7b \u00b6 string\u7c7b\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f6c\u6362\u51fd\u6570c_str()\uff0c\u8be5\u51fd\u6570\u80fd\u591f\u5c06 string\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aC\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002 1 2 string path = \"D: \\\\ demo.txt\" ; FILE * fp = fopen ( path . c_str (), \"rt\" );","title":"\u7c7b\u548c\u5bf9\u8c61"},{"location":"cplus/cpp_object/#_1","text":"\u7c7b\u662f\u4e00\u4e2a\u6a21\u677f\uff08Template\uff09\uff0c\u7f16\u8bd1\u540e\u4e0d\u5360\u7528\u5185\u5b58\u7a7a\u95f4\uff0c\u5728\u5b9a\u4e49\u7c7b\u65f6\u4e0d\u80fd\u5bf9\u6210\u5458\u53d8\u91cf\u8fdb\u884c\u521d\u59cb\u5316\u3002\u53ea\u6709\u5728\u521b\u5efa\u5bf9\u8c61\u540e\u624d\u7ed9\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u8fd9\u4e2a\u65f6\u5019\u8d4b\u503c\u4e86\u3002 \u4f7f\u7528new\u5728\u5806\u4e0a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u662f\u533f\u540d\u7684\uff0c\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528\uff0c\u5fc5\u987b\u8981\u7528\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5b83\uff0c\u518d\u501f\u52a9\u6307\u9488\u6765\u8bbf\u95ee\u5b83\u7684\u6210\u5458\u53d8\u91cf\u6216\u6210\u5458\u51fd\u6570\u3002 ::\u88ab\u79f0\u4e3a\u57df\u89e3\u6790\u7b26\uff08\u4e5f\u79f0\u4f5c\u7528\u57df\u8fd0\u7b97\u7b26\u6216\u4f5c\u7528\u57df\u9650\u5b9a\u7b26\uff09\uff0c\u7528\u6765\u8fde\u63a5\u7c7b\u540d\u548c\u51fd\u6570\u540d\uff0c\u6307\u660e\u5f53\u524d\u51fd\u6570\u5c5e\u4e8e\u54ea\u4e2a\u7c7b","title":"\u7c7b\u548c\u5bf9\u8c61"},{"location":"cplus/cpp_object/#_2","text":"\u5728\u7c7b\u4f53\u4e2d\u548c\u7c7b\u4f53\u5916\u5b9a\u4e49\u6210\u5458\u51fd\u6570\u662f\u6709\u533a\u522b\u7684\uff1a\u5728\u7c7b\u4f53\u4e2d\u5b9a\u4e49\u7684\u6210\u5458\u51fd\u6570\u4f1a\u81ea\u52a8\u6210\u4e3a\u5185\u8054\u51fd\u6570\uff0c\u5728\u7c7b\u4f53\u5916\u5b9a\u4e49\u7684\u4e0d\u4f1a \u6210\u5458\u53d8\u91cf\u5927\u90fd\u4ee5m_\u5f00\u5934\uff0c\u8fd9\u662f\u7ea6\u5b9a\u6210\u4fd7\u7684\u5199\u6cd5\uff0c\u4e0d\u662f\u8bed\u6cd5\u89c4\u5b9a\u7684\u5185\u5bb9\u3002\u4ee5m_\u5f00\u5934\u65e2\u53ef\u4ee5\u4e00\u773c\u770b\u51fa\u8fd9\u662f\u6210\u5458\u53d8\u91cf\uff0c\u53c8\u53ef\u4ee5\u548c\u6210\u5458\u51fd\u6570\u4e2d\u7684\u5f62\u53c2\u540d\u5b57\u533a\u5206\u5f00\u3002 \u7f16\u8bd1\u5668\u4f1a\u5c06\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u5206\u5f00\u5b58\u50a8\uff1a\u5206\u522b\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u7684\u6210\u5458\u53d8\u91cf\u5206\u914d\u5185\u5b58\uff0c\u4f46\u662f\u6240\u6709\u5bf9\u8c61\u90fd\u5171\u4eab\u540c\u4e00\u6bb5\u51fd\u6570\u4ee3\u7801","title":"\u6210\u5458\u5bf9\u8c61\u4e0e\u6210\u5458\u51fd\u6570"},{"location":"cplus/cpp_object/#_3","text":"\u6784\u9020\u51fd\u6570\u5fc5\u987b\u662fpublic\u5c5e\u6027\u7684\uff0c\u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u4e0d\u7ba1\u662f\u58f0\u660e\u8fd8\u662f\u5b9a\u4e49\uff0c\u51fd\u6570\u540d\u524d\u9762\u90fd\u4e0d\u80fd\u51fa\u73b0\u8fd4\u56de\u503c\u7c7b\u578b\uff0c\u5373\u4f7f\u662f void \u4e5f\u4e0d\u5141\u8bb8\uff1b \u51fd\u6570\u4f53\u4e2d\u4e0d\u80fd\u6709 return \u8bed\u53e5\u3002","title":"\u6784\u9020\u51fd\u6570"},{"location":"cplus/cpp_object/#_4","text":"\u521d\u59cb\u5316const\u6210\u5458\u53d8\u91cf\u7684\u552f\u4e00\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u3002 \u6210\u5458\u53d8\u91cf\u7684\u521d\u59cb\u5316\u987a\u5e8f\u4e0e\u521d\u59cb\u5316\u5217\u8868\u4e2d\u5217\u51fa\u7684\u53d8\u91cf\u7684\u987a\u5e8f\u65e0\u5173\uff0c\u5b83\u53ea\u4e0e\u6210\u5458\u53d8\u91cf\u5728\u7c7b\u4e2d\u58f0\u660e\u7684\u987a\u5e8f\u6709\u5173\u3002 1 2 3 4 5 6 7 8 9 10 11 class VLA { private : const int m_len ; int * m_arr ; public : VLA ( int len ); }; //\u5fc5\u987b\u4f7f\u7528\u521d\u59cb\u5316\u5217\u8868\u6765\u521d\u59cb\u5316 m_len VLA :: VLA ( int len ) : m_len ( len ){ m_arr = new int [ len ]; }","title":"\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868"},{"location":"cplus/cpp_object/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <iostream> using namespace std ; class CSample { public : CSample (){ //\u6784\u9020\u51fd\u6570 1 cout << \"Constructor 1 Called\" << endl ; } CSample ( int n ){ //\u6784\u9020\u51fd\u6570 2 cout << \"Constructor 2 Called\" << endl ; } }; int main (){ cout << \"stepl\" << endl ; CSample arrayl [ 2 ]; cout << \"step2\" << endl ; CSample array2 [ 2 ] = { 4 , 5 }; cout << \"step3\" << endl ; CSample array3 [ 2 ] = { 3 }; cout << \"step4\" << endl ; CSample * array4 = new CSample [ 2 ]; delete [] array4 ; return 0 ; } //\u6784\u9020\u51fd\u6570\u6709\u591a\u4e2a\u53c2\u6570\u65f6 class CTest { public : CTest ( int n ){ } //\u6784\u9020\u51fd\u6570(1) CTest ( int n , int m ){ } //\u6784\u9020\u51fd\u6570(2) CTest (){ } //\u6784\u9020\u51fd\u6570(3) }; int main (){ //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u3001(3) \u521d\u59cb\u5316 CTest arrayl [ 3 ] = { 1 , CTest ( 1 , 2 ) }; //\u4e09\u4e2a\u5143\u7d20\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(2)\u3001(2)\u3001(1)\u521d\u59cb\u5316 CTest array2 [ 3 ] = { CTest ( 2 , 3 ), CTest ( 1 , 2 ), 1 }; //\u4e24\u4e2a\u5143\u7d20\u6307\u5411\u7684\u5bf9\u8c61\u5206\u522b\u7528\u6784\u9020\u51fd\u6570(1)\u3001(2)\u521d\u59cb\u5316 CTest * pArray [ 3 ] = { new CTest ( 4 ), new CTest ( 1 , 2 ) }; //pArray[2] \u6ca1\u6709\u521d\u59cb\u5316\uff0c\u5176\u503c\u662f\u968f\u673a\u7684\uff0c\u4e0d\u77e5\u9053\u6307\u5411\u54ea\u91cc\u3002 return 0 ; }","title":"\u5bf9\u8c61\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6784\u9020\u521d\u59cb\u5316"},{"location":"cplus/cpp_object/#_6","text":"\u6784\u9020\u51fd\u6570\u7684\u540d\u5b57\u548c\u7c7b\u540d\u76f8\u540c\uff0c\u800c\u6790\u6784\u51fd\u6570\u7684\u540d\u5b57\u662f\u5728\u7c7b\u540d\u524d\u9762\u52a0\u4e00\u4e2a~\u7b26\u53f7\u3002\u6790\u6784\u51fd\u6570\u6ca1\u6709\u53c2\u6570\uff0c\u4e0d\u80fd\u88ab\u91cd\u8f7d\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u6709\u4e00\u4e2a\u6790\u6784\u51fd\u6570\u3002 \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u5b83\u548c\u5168\u5c40\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u5b83\u548c\u5c40\u90e8\u53d8\u91cf\u7c7b\u4f3c\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002","title":"\u6790\u6784\u51fd\u6570"},{"location":"cplus/cpp_object/#_7","text":"\u6790\u6784\u51fd\u6570\u5728\u5bf9\u8c61\u88ab\u9500\u6bc1\u65f6\u8c03\u7528\uff0c\u5bf9\u8c61\u7684\u9500\u6bc1\u65f6\u673a\u4e0e\u5b83\u6240\u5728\u7684\u5185\u5b58\u533a\u57df\u6709\u5173\uff1a \u5728\u6240\u6709\u51fd\u6570\u4e4b\u5916\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5168\u5c40\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\uff0c\u7a0b\u5e8f\u5728\u7ed3\u675f\u6267\u884c\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 \u5728\u51fd\u6570\u5185\u90e8\u521b\u5efa\u7684\u5bf9\u8c61\u662f\u5c40\u90e8\u5bf9\u8c61\uff0c\u4f4d\u4e8e\u6808\u533a\uff0c\u51fd\u6570\u6267\u884c\u7ed3\u675f\u65f6\u4f1a\u8c03\u7528\u8fd9\u4e9b\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u3002 new\u521b\u5efa\u7684\u5bf9\u8c61\u4f4d\u4e8e\u5806\u533a\uff0c\u901a\u8fc7delete\u5220\u9664\u65f6\u624d\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709delete\uff0c\u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c\u3002","title":"\u6790\u6784\u51fd\u6570\u6267\u884c\u65f6\u673a"},{"location":"cplus/cpp_object/#_8","text":"\u4e00\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u5982\u679c\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u5c31\u79f0\u4e4b\u4e3a\u201c\u6210\u5458\u5bf9\u8c61\u201d\u3002\u5305\u542b\u6210\u5458\u5bf9\u8c61\u7684\u7c7b\u53eb\u5c01\u95ed\u7c7b\uff08enclosed class\uff09\u3002 \u521b\u5efa\u5c01\u95ed\u7c7b\u7684\u5bf9\u8c61\u65f6\uff0c\u5176\u6210\u5458\u5bf9\u8c61\u4e5f\u9700\u8981\u88ab\u521b\u5efa\uff0c\u6210\u5458\u5bf9\u8c61\u8c03\u7528\u54ea\u4e2a\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\uff1f\u9700\u8981\u501f\u52a9\u5c01\u95ed\u7c7b\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 #include <iostream> using namespace std ; //\u8f6e\u80ce\u7c7b class Tyre { public : Tyre ( int radius , int width ); void show () const ; private : int m_radius ; //\u534a\u5f84 int m_width ; //\u5bbd\u5ea6 }; Tyre :: Tyre ( int radius , int width ) : m_radius ( radius ), m_width ( width ){ } void Tyre :: show () const { cout << \"\u8f6e\u6bc2\u534a\u5f84\uff1a\" << this -> m_radius << \"\u540b\" << endl ; cout << \"\u8f6e\u80ce\u5bbd\u5ea6\uff1a\" << this -> m_width << \"mm\" << endl ; } //\u5f15\u64ce\u7c7b class Engine { public : Engine ( float displacement = 2.0 ); void show () const ; private : float m_displacement ; }; Engine :: Engine ( float displacement ) : m_displacement ( displacement ) {} void Engine :: show () const { cout << \"\u6392\u91cf\uff1a\" << this -> m_displacement << \"L\" << endl ; } //\u6c7d\u8f66\u7c7b class Car { public : Car ( int price , int radius , int width ); void show () const ; private : int m_price ; //\u4ef7\u683c Tyre m_tyre ; Engine m_engine ; }; Car :: Car ( int price , int radius , int width ) : m_price ( price ), m_tyre ( radius , width ) /*\u6307\u660em_tyre\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u65b9\u5f0f*/ { }; //\u8fd9\u91cc\u5e76\u6ca1\u6709\u8bf4\u660e m_engine \u8be5\u5982\u4f55\u5904\u7406,\u6709\u4e00\u4e2a\u65e0\u53c2\u6784\u9020\u51fd\u6570\u3002 void Car :: show () const { cout << \"\u4ef7\u683c\uff1a\" << this -> m_price << \"\uffe5\" << endl ; this -> m_tyre . show (); this -> m_engine . show (); } int main () { Car car ( 200000 , 19 , 245 ); car . show (); return 0 ; } \u5c01\u95ed\u7c7b\u5bf9\u8c61\u751f\u6210\u65f6\uff0c\u5148\u6267\u884c\u6240\u6709\u6210\u5458\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\uff0c\u7136\u540e\u624d\u6267\u884c\u5c01\u95ed\u7c7b\u81ea\u5df1\u7684\u6784\u9020\u51fd\u6570\u3002\u6210\u5458\u5bf9\u8c61\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6210\u5458\u5bf9\u8c61\u5728\u7c7b\u5b9a\u4e49\u4e2d\u7684\u6b21\u5e8f\u4e00\u81f4\uff0c\u4e0e\u5b83\u4eec\u5728\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u5e8f\u65e0\u5173\u3002 \u5f53\u5c01\u95ed\u7c7b\u5bf9\u8c61\u6d88\u4ea1\u65f6\uff0c\u5148\u6267\u884c\u5c01\u95ed\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u7136\u540e\u518d\u6267\u884c\u6210\u5458\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u6210\u5458\u5bf9\u8c61\u6790\u6784\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u548c\u6784\u9020\u51fd\u6570\u7684\u6267\u884c\u6b21\u5e8f\u76f8\u53cd\uff0c\u5373\u5148\u6784\u9020\u7684\u540e\u6790\u6784\u3002","title":"\u6210\u5458\u5bf9\u8c61\u548c\u5c01\u95ed\u7c7b"},{"location":"cplus/cpp_object/#c-this","text":"this \u5b9e\u9645\u4e0a\u662f\u6210\u5458\u51fd\u6570\u7684\u4e00\u4e2a\u5f62\u53c2\uff0c\u5728\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\u5c06\u5bf9\u8c61\u7684\u5730\u5740\u4f5c\u4e3a\u5b9e\u53c2\u4f20\u9012\u7ed9 this\u3002\u4e0d\u8fc7 this \u8fd9\u4e2a\u5f62\u53c2\u662f\u9690\u5f0f\u7684\uff0c\u5b83\u5e76\u4e0d\u51fa\u73b0\u5728\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u7f16\u8bd1\u9636\u6bb5\u7531\u7f16\u8bd1\u5668\u9ed8\u9ed8\u5730\u5c06\u5b83\u6dfb\u52a0\u5230\u53c2\u6570\u5217\u8868\u4e2d\u3002 \u6210\u5458\u51fd\u6570\u6700\u7ec8\u88ab\u7f16\u8bd1\u6210\u4e0e\u5bf9\u8c61\u65e0\u5173\u7684\u666e\u901a\u51fd\u6570\uff0c\u9664\u4e86\u6210\u5458\u53d8\u91cf\uff0c\u4f1a\u4e22\u5931\u6240\u6709\u4fe1\u606f\uff0c\u6240\u4ee5\u7f16\u8bd1\u65f6\u8981\u5728\u6210\u5458\u51fd\u6570\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u628a\u5f53\u524d\u5bf9\u8c61\u7684\u9996\u5730\u5740\u4f20\u5165\uff0c\u4ee5\u6b64\u6765\u5173\u8054\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u3002\u8fd9\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f this\uff0c\u5b83\u662f\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\u5173\u8054\u7684\u6865\u6881\u3002 this \u662f const \u6307\u9488\uff0c\u5b83\u7684\u503c\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\u7684\uff0c\u4e00\u5207\u4f01\u56fe\u4fee\u6539\u8be5\u6307\u9488\u7684\u64cd\u4f5c\uff0c\u5982\u8d4b\u503c\u3001\u9012\u589e\u3001\u9012\u51cf\u7b49\u90fd\u662f\u4e0d\u5141\u8bb8\u7684\u3002 this \u53ea\u80fd\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\u4f7f\u7528\uff0c\u7528\u5728\u5176\u4ed6\u5730\u65b9\u6ca1\u6709\u610f\u4e49\uff0c\u4e5f\u662f\u975e\u6cd5\u7684\u3002 \u53ea\u6709\u5f53\u5bf9\u8c61\u88ab\u521b\u5efa\u540e this \u624d\u6709\u610f\u4e49\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728 static \u6210\u5458\u51fd\u6570\u4e2d\u4f7f\u7528\uff08\u540e\u7eed\u4f1a\u8bb2\u5230 static \u6210\u5458\uff09\u3002","title":"C++ this\u6307\u9488"},{"location":"cplus/cpp_object/#static","text":"static\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u5728\u7c7b\u58f0\u660e\u7684\u5916\u90e8\u521d\u59cb\u5316\uff1a 1 2 type class :: name = value ; int Student :: m_total = 0 ; //\u9759\u6001\u6210\u5458\u53d8\u91cf\u5728\u521d\u59cb\u5316\u65f6\u4e0d\u80fd\u518d\u52a0 static static \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\u65e2\u4e0d\u662f\u5728\u58f0\u660e\u7c7b\u65f6\u5206\u914d\uff0c\u4e5f\u4e0d\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5206\u914d\uff0c\u800c\u662f\u5728\uff08\u7c7b\u5916\uff09\u521d\u59cb\u5316\u65f6\u5206\u914d\u3002\u53cd\u8fc7\u6765\u8bf4\uff0c\u6ca1\u6709\u5728\u7c7b\u5916\u521d\u59cb\u5316\u7684 static \u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u4f7f\u7528\u3002 static\u6210\u5458\u53d8\u91cf\u548c\u666e\u901astatic\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u5728\u5185\u5b58\u5206\u533a\u4e2d\u7684\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\u65f6\u624d\u91ca\u653e\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0cstatic \u6210\u5458\u53d8\u91cf\u4e0d\u5360\u7528\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u4e0d\u968f\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5206\u914d\u5185\u5b58\uff0c\u4e5f\u4e0d\u968f\u5bf9\u8c61\u7684\u9500\u6bc1\u800c\u91ca\u653e\u5185\u5b58\uff0c\u5373\u4f7f\u4e0d\u521b\u5efa\u5bf9\u8c61\u4e5f\u53ef\u4ee5\u8bbf\u95ee\u3002\u800c\u666e\u901a\u6210\u5458\u53d8\u91cf\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u91ca\u653e\u5185\u5b58\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u666e\u901a\u6210\u5458\u51fd\u6570\u7684\u6839\u672c\u533a\u522b\u5728\u4e8e\uff1a\u666e\u901a\u6210\u5458\u51fd\u6570\u6709 this \u6307\u9488\uff0c\u53ef\u4ee5\u8bbf\u95ee\u7c7b\u4e2d\u7684\u4efb\u610f\u6210\u5458\uff1b\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458\uff08\u5305\u62ec\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570\uff09\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u4e3b\u8981\u76ee\u7684\u662f\u8bbf\u95ee\u9759\u6001\u6210\u5458\u3002\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u5728\u58f0\u660e\u65f6\u8981\u52a0 static\uff0c\u5728\u5b9a\u4e49\u65f6\u4e0d\u80fd\u52a0 static\u3002","title":"static\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u9759\u6001\u6210\u5458\u51fd\u6570"},{"location":"cplus/cpp_object/#const","text":"\u521d\u59cb\u5316 const \u6210\u5458\u53d8\u91cf\u53ea\u6709\u4e00\u79cd\u65b9\u6cd5\uff0c\u5c31\u662f\u901a\u8fc7\u6784\u9020\u51fd\u6570\u7684\u521d\u59cb\u5316\u5217\u8868\u3002 const \u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u4fee\u6539\u5b83\u4eec\u7684\u503c\uff0c\u8fd9\u79cd\u63aa\u65bd\u4e3b\u8981\u8fd8\u662f\u4e3a\u4e86\u4fdd\u62a4\u6570\u636e\u800c\u8bbe\u7f6e\u7684\u3002const \u6210\u5458\u51fd\u6570\u4e5f\u79f0\u4e3a\u5e38\u6210\u5458\u51fd\u6570\u3002 \u5e38\u6210\u5458\u51fd\u6570\u9700\u8981\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u7684\u65f6\u5019\u5728\u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u5173\u952e\u5b57\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Student { public : Student ( char * name , int age , float score ); void show (); //\u58f0\u660e\u5e38\u6210\u5458\u51fd\u6570 char * getname () const ; int getage () const ; float getscore () const ; private : char * m_name ; int m_age ; float m_score ; }; Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } //\u5b9a\u4e49\u5e38\u6210\u5458\u51fd\u6570 char * Student :: getname () const { return m_name ; } int Student :: getage () const { return m_age ; } float Student :: getscore () const { return m_score ; } \u51fd\u6570\u5f00\u5934\u7684 const \u7528\u6765\u4fee\u9970\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u8868\u793a\u8fd4\u56de\u503c\u662f const \u7c7b\u578b\uff0c\u4e5f\u5c31\u662f\u4e0d\u80fd\u88ab\u4fee\u6539\uff0c\u4f8b\u5982const char * getname()\u3002 \u51fd\u6570\u5934\u90e8\u7684\u7ed3\u5c3e\u52a0\u4e0a const \u8868\u793a\u5e38\u6210\u5458\u51fd\u6570\uff0c\u8fd9\u79cd\u51fd\u6570\u53ea\u80fd\u8bfb\u53d6\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u800c\u4e0d\u80fd\u4fee\u6539\u6210\u5458\u53d8\u91cf\u7684\u503c\uff0c\u4f8b\u5982char * getname() const\u3002","title":"const\u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570"},{"location":"cplus/cpp_object/#const_1","text":"const\u4e5f\u53ef\u4ee5\u7528\u6765\u4fee\u9970\u5bf9\u8c61\uff0c\u79f0\u4e3a\u5e38\u5bf9\u8c61\u3002\u53ea\u80fd\u8c03\u7528\u7c7b\u7684 const\u6210\u5458\uff08\u5305\u62ecconst\u6210\u5458\u53d8\u91cf\u548cconst\u6210\u5458\u51fd\u6570\uff09\u4e86\u3002 1 2 3 4 5 const class object ( params ); class const object ( params ); const class * p = new class ( params ); class const * p = new class ( params );","title":"const\u5bf9\u8c61"},{"location":"cplus/cpp_object/#friend","text":"\u53cb\u5143\u7684\u5173\u7cfb\u662f\u5355\u5411\u7684\u800c\u4e0d\u662f\u53cc\u5411\u7684\u3002 \u53cb\u5143\u7684\u5173\u7cfb\u4e0d\u80fd\u4f20\u9012\u3002 \u4e00\u822c\u4e0d\u5efa\u8bae\u628a\u6574\u4e2a\u7c7b\u58f0\u660e\u4e3a\u53cb\u5143\u7c7b\uff0c\u800c\u53ea\u5c06\u67d0\u4e9b\u6210\u5458\u51fd\u6570\u58f0\u660e\u4e3a\u53cb\u5143\u51fd\u6570\u3002","title":"friend\u53cb\u5143\u51fd\u6570\u4e0e\u53cb\u5143\u7c7b"},{"location":"cplus/cpp_object/#_9","text":"\u5f53\u524d\u7c7b\u4ee5\u5916\u5b9a\u4e49\u7684\u3001\u4e0d\u5c5e\u4e8e\u5f53\u524d\u7c7b\u7684\u51fd\u6570\u4e5f\u53ef\u4ee5\u5728\u7c7b\u4e2d\u58f0\u660e\uff0c\u4f46\u8981\u5728\u524d\u9762\u52a0friend\u5173\u952e\u5b57\uff0c\u8fd9\u6837\u5c31\u6784\u6210\u4e86\u53cb\u5143\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u662f\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u7c7b\u7684\u975e\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u5176\u4ed6\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\uff0c\u5305\u62ec public\u3001protected\u3001private \u5c5e\u6027\u7684\u3002 \u53cb\u5143\u51fd\u6570\u4e0d\u540c\u4e8e\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u6210\u5458\u51fd\u6570\u5728\u8c03\u7528\u65f6\u4f1a\u9690\u5f0f\u5730\u589e\u52a0 this\u6307\u9488\uff0c\u6307\u5411\u8c03\u7528\u5b83\u7684\u5bf9\u8c61\uff0c\u5728\u53cb\u5143\u51fd\u6570\u4e2d\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u7c7b\u7684\u6210\u5458\uff0c\u5fc5\u987b\u8981\u501f\u52a9\u5bf9\u8c61\u3002 \u53cb\u5143\u51fd\u6570\uff1a\u6709\u65f6\u5019\u7c7b\u9700\u8981\u63d0\u524d\u58f0\u660e\uff0c\u7c7b\u7684\u63d0\u524d\u58f0\u660e\u7684\u4f7f\u7528\u8303\u56f4\u662f\u6709\u9650\u7684\uff0c\u53ea\u6709\u5728\u6b63\u5f0f\u58f0\u660e\u4e00\u4e2a\u7c7b\u4ee5\u540e\u624d\u80fd\u7528\u5b83\u53bb\u521b\u5efa\u5bf9\u8c61\u3002","title":"\u53cb\u5143\u51fd\u6570"},{"location":"cplus/cpp_object/#_10","text":"\u53cb\u5143\u7c7b\u4e2d\u7684\u6240\u6709\u6210\u5458\u51fd\u6570\u90fd\u662f\u53e6\u5916\u4e00\u4e2a\u7c7b\u7684\u53cb\u5143\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 #include <iostream> using namespace std ; class Address ; //\u63d0\u524d\u58f0\u660eAddress\u7c7b //\u58f0\u660eStudent\u7c7b class Student { public : Student ( char * name , int age , float score ); public : void show ( Address * addr ); private : char * m_name ; int m_age ; float m_score ; }; //\u58f0\u660eAddress\u7c7b class Address { public : Address ( char * province , char * city , char * district ); public : //\u5c06Student\u7c7b\u58f0\u660e\u4e3aAddress\u7c7b\u7684\u53cb\u5143\u7c7b friend class Student ; private : char * m_province ; //\u7701\u4efd char * m_city ; //\u57ce\u5e02 char * m_district ; //\u533a\uff08\u5e02\u533a\uff09 }; //\u5b9e\u73b0Student\u7c7b Student :: Student ( char * name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } void Student :: show ( Address * addr ){ cout << m_name << \"\u7684\u5e74\u9f84\u662f \" << m_age << \"\uff0c\u6210\u7ee9\u662f \" << m_score << endl ; cout << \"\u5bb6\u5ead\u4f4f\u5740\uff1a\" << addr -> m_province << \"\u7701\" << addr -> m_city << \"\u5e02\" << addr -> m_district << \"\u533a\" << endl ; } //\u5b9e\u73b0Address\u7c7b Address :: Address ( char * province , char * city , char * district ){ m_province = province ; m_city = city ; m_district = district ; } int main (){ Student stu ( \"\u5c0f\u660e\" , 16 , 95.5f ); Address addr ( \"\u9655\u897f\" , \"\u897f\u5b89\" , \"\u96c1\u5854\" ); stu . show ( & addr ); Student * pstu = new Student ( \"\u674e\u78ca\" , 16 , 80.5 ); Address * paddr = new Address ( \"\u6cb3\u5317\" , \"\u8861\u6c34\" , \"\u6843\u57ce\" ); pstu -> show ( paddr ); return 0 ; }","title":"\u53cb\u5143\u7c7b"},{"location":"cplus/cpp_object/#string","text":"string\u7c7b\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8f6c\u6362\u51fd\u6570c_str()\uff0c\u8be5\u51fd\u6570\u80fd\u591f\u5c06 string\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aC\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002 1 2 string path = \"D: \\\\ demo.txt\" ; FILE * fp = fopen ( path . c_str (), \"rt\" );","title":"string\u7c7b"},{"location":"cplus/cpp_polym/","text":"\u591a\u6001\u4e0e\u865a\u51fd\u6570 \u00b6 \u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u53ea\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002 \u8ba9\u57fa\u7c7b\u6307\u9488\u80fd\u591f\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0cC++ \u589e\u52a0\u4e86\u865a\u51fd\u6570\uff08Virtual Function\uff09\u3002\u4f7f\u7528\u865a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u58f0\u660e\u524d\u9762\u589e\u52a0 virtual \u5173\u952e\u5b57\u3002 \u6709\u4e86\u865a\u51fd\u6570\uff0c\u57fa\u7c7b\u6307\u9488\u6307\u5411\u57fa\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u57fa\u7c7b\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\uff09\uff0c\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u6309\u7167\u57fa\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u6d3e\u751f\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u5b83\u6709\u591a\u79cd\u5f62\u6001\uff0c\u6216\u8005\u8bf4\u6709\u591a\u79cd\u8868\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u591a\u6001\uff08Polymorphism\uff09\u3002 \u865a\u51fd\u6570\u7684\u6ce8\u610f\u4e8b\u9879 1. \u53ea\u9700\u8981\u5728\u865a\u51fd\u6570\u7684\u58f0\u660e\u5904\u52a0\u4e0a virtual \u5173\u952e\u5b57\uff0c\u51fd\u6570\u5b9a\u4e49\u5904\u53ef\u4ee5\u52a0\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u3002 \u53ef\u4ee5\u53ea\u5c06\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u8fd9\u6837\u6240\u6709\u6d3e\u751f\u7c7b\u4e2d\u5177\u6709\u906e\u853d\u5173\u7cfb\u7684\u540c\u540d\u51fd\u6570\u90fd\u5c06\u81ea\u52a8\u6210\u4e3a\u865a\u51fd\u6570\u3002 \u5f53\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u865a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u5b9a\u4e49\u65b0\u7684\u51fd\u6570\u6765\u906e\u853d\u6b64\u51fd\u6570\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u3002 \u53ea\u6709\u6d3e\u751f\u7c7b\u7684\u865a\u51fd\u6570\u8986\u76d6\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u624d\u80fd\u6784\u6210\u591a\u6001\uff08\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u8bbf\u95ee\u6d3e\u751f\u7c7b\u51fd\u6570\uff09\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u800c\u4e14\u6709\u65f6\u5019\u5fc5\u987b\u8981\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u6784\u6210\u591a\u6001\u7684\u6761\u4ef6 1. \u5fc5\u987b\u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff1b 2. \u7ee7\u627f\u5173\u7cfb\u4e2d\u5fc5\u987b\u6709\u540c\u540d\u7684\u865a\u51fd\u6570\uff0c\u5e76\u4e14\u5b83\u4eec\u662f\u8986\u76d6\u5173\u7cfb\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u3002 3. \u5b58\u5728\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u901a\u8fc7\u8be5\u6307\u9488\u8c03\u7528\u865a\u51fd\u6570\u3002 \u865a\u6790\u6784\u51fd\u6570\u7684\u5fc5\u8981\u6027 \u00b6 \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 1 2 3 4 5 6 7 class Base { public : Base (); virtual ~ Base (); protected : char * str ; }; \u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u8be6\u89e3 \u00b6 1 virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) = 0 ; \u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u53ea\u6709\u51fd\u6570\u58f0\u660e\uff0c\u5728\u865a\u51fd\u6570\u58f0\u660e\u7684\u7ed3\u5c3e\u52a0\u4e0a=0\uff0c\u8868\u660e\u6b64\u51fd\u6570\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08Abstract Class\uff09\u3002\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u65e0\u6cd5\u5b9e\u4f8b\u5316\u3002\u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u624d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u62bd\u8c61\u57fa\u7c7b\u9664\u4e86\u7ea6\u675f\u6d3e\u751f\u7c7b\u7684\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u591a\u6001\u3002 \u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7c7b\u6210\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u4f46\u662f\u62bd\u8c61\u57fa\u7c7b\u4e2d\u9664\u4e86\u5305\u542b\u7eaf\u865a\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u5176\u5b83\u7684\u6210\u5458\u51fd\u6570\uff08\u865a\u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\uff09\u548c\u6210\u5458\u53d8\u91cf\u3002 \u53ea\u6709\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\u624d\u80fd\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u666e\u901a\u6210\u5458\u51fd\u6570\u548c\u9876\u5c42\u51fd\u6570\u5747\u4e0d\u80fd\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u865a\u51fd\u6570\u8868 \u00b6 \u7f16\u8bd1\u5668\u4e4b\u6240\u4ee5\u80fd\u901a\u8fc7\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u627e\u5230\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u989d\u5916\u5730\u589e\u52a0\u4e86\u865a\u51fd\u6570\u8868\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5305\u542b\u4e86\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u5728\u521b\u5efa\u8be5\u7c7b\u7684\u5bf9\u8c61\u65f6\u5c31\u4f1a\u989d\u5916\u5730\u589e\u52a0\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u865a\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\u3002\u4e0d\u8fc7\u6570\u7ec4\u548c\u5bf9\u8c61\u662f\u5206\u5f00\u5b58\u50a8\u7684\uff0c\u4e3a\u4e86\u5c06\u5bf9\u8c61\u548c\u6570\u7ec4\u5173\u8054\u8d77\u6765\uff0c\u7f16\u8bd1\u5668\u8fd8\u8981\u5728\u5bf9\u8c61\u4e2d\u5b89\u63d2\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u6570\u7ec4\u5c31\u662f\u865a\u51fd\u6570\u8868\uff08Virtual function table\uff09\uff0c\u7b80\u5199\u4e3avtable\u3002 typeid\u8fd0\u7b97\u7b26\u4e0eRTTI\u673a\u5236 \u00b6 typeid \u8fd0\u7b97\u7b26\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u7c7b\u578b\u4fe1\u606f\u662f\u521b\u5efa\u6570\u636e\u7684\u6a21\u677f\uff0c\u6570\u636e\u5360\u7528\u591a\u5927\u5185\u5b58\u3001\u80fd\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c\u3001\u8be5\u5982\u4f55\u64cd\u4f5c\u7b49\uff0c\u8fd9\u4e9b\u90fd\u7531\u5b83\u7684\u7c7b\u578b\u4fe1\u606f\u51b3\u5b9a\u3002 \u8fd9\u79cd\u5728\u7a0b\u5e8f\u8fd0\u884c\u540e\u786e\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u4fe1\u606f\u7684\u673a\u5236\u79f0\u4e3a\u8fd0\u884c\u65f6\u7c7b\u578b\u8bc6\u522b\uff08Run-Time Type Identification\uff0cRTTI\uff09\u3002\u5728 C++ \u4e2d\uff0c\u53ea\u6709\u7c7b\u4e2d\u5305\u542b\u4e86\u865a\u51fd\u6570\u65f6\u624d\u4f1a\u542f\u7528 RTTI \u673a\u5236\uff0c\u5176\u4ed6\u6240\u6709\u60c5\u51b5\u90fd\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u786e\u5b9a\u7c7b\u578b\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> using namespace std ; //\u57fa\u7c7b class People { public : virtual void func (){ } }; //\u6d3e\u751f\u7c7b class Student : public People { }; int main (){ People * p ; int n ; cin >> n ; if ( n <= 100 ){ p = new People (); } else { p = new Student (); } //\u6839\u636e\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c if ( typeid ( * p ) == typeid ( People )){ cout << \"I am human.\" << endl ; } else { cout << \"I am a student.\" << endl ; } return 0 ; } \u9664\u4e86 typeid \u8fd0\u7b97\u7b26\uff0cdynamic_cast \u8fd0\u7b97\u7b26\u548c\u5f02\u5e38\u5904\u7406\u4e5f\u4f9d\u8d56\u4e8e RTTI \u673a\u5236\uff0c\u5e76\u4e14\u8981\u80fd\u591f\u901a\u8fc7\u6d3e\u751f\u7c7b\u83b7\u53d6\u57fa\u7c7b\u7684\u4fe1\u606f\uff0c\u6216\u8005\u8bf4\u8981\u80fd\u591f\u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\uff0c\u8981\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u518d\u589e\u52a0\u4e00\u6761\u7ef3\u7d22\u3002\u79f0\u6b64\u4e3a\u7ee7\u627f\u94fe\uff08Inheritance Chain\uff09\u3002","title":"\u591a\u6001\u4e0e\u865a\u51fd\u6570"},{"location":"cplus/cpp_polym/#_1","text":"\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u53ea\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4f46\u662f\u4e0d\u80fd\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\u3002 \u8ba9\u57fa\u7c7b\u6307\u9488\u80fd\u591f\u8bbf\u95ee\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0cC++ \u589e\u52a0\u4e86\u865a\u51fd\u6570\uff08Virtual Function\uff09\u3002\u4f7f\u7528\u865a\u51fd\u6570\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u51fd\u6570\u58f0\u660e\u524d\u9762\u589e\u52a0 virtual \u5173\u952e\u5b57\u3002 \u6709\u4e86\u865a\u51fd\u6570\uff0c\u57fa\u7c7b\u6307\u9488\u6307\u5411\u57fa\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u57fa\u7c7b\u7684\u6210\u5458\uff08\u5305\u62ec\u6210\u5458\u51fd\u6570\u548c\u6210\u5458\u53d8\u91cf\uff09\uff0c\u6307\u5411\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\u5c31\u4f7f\u7528\u6d3e\u751f\u7c7b\u7684\u6210\u5458\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u57fa\u7c7b\u6307\u9488\u53ef\u4ee5\u6309\u7167\u57fa\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u4e5f\u53ef\u4ee5\u6309\u7167\u6d3e\u751f\u7c7b\u7684\u65b9\u5f0f\u6765\u505a\u4e8b\uff0c\u5b83\u6709\u591a\u79cd\u5f62\u6001\uff0c\u6216\u8005\u8bf4\u6709\u591a\u79cd\u8868\u73b0\u65b9\u5f0f\uff0c\u6211\u4eec\u5c06\u8fd9\u79cd\u73b0\u8c61\u79f0\u4e3a\u591a\u6001\uff08Polymorphism\uff09\u3002 \u865a\u51fd\u6570\u7684\u6ce8\u610f\u4e8b\u9879 1. \u53ea\u9700\u8981\u5728\u865a\u51fd\u6570\u7684\u58f0\u660e\u5904\u52a0\u4e0a virtual \u5173\u952e\u5b57\uff0c\u51fd\u6570\u5b9a\u4e49\u5904\u53ef\u4ee5\u52a0\u4e5f\u53ef\u4ee5\u4e0d\u52a0\u3002 \u53ef\u4ee5\u53ea\u5c06\u57fa\u7c7b\u4e2d\u7684\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u8fd9\u6837\u6240\u6709\u6d3e\u751f\u7c7b\u4e2d\u5177\u6709\u906e\u853d\u5173\u7cfb\u7684\u540c\u540d\u51fd\u6570\u90fd\u5c06\u81ea\u52a8\u6210\u4e3a\u865a\u51fd\u6570\u3002 \u5f53\u5728\u57fa\u7c7b\u4e2d\u5b9a\u4e49\u4e86\u865a\u51fd\u6570\u65f6\uff0c\u5982\u679c\u6d3e\u751f\u7c7b\u6ca1\u6709\u5b9a\u4e49\u65b0\u7684\u51fd\u6570\u6765\u906e\u853d\u6b64\u51fd\u6570\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528\u57fa\u7c7b\u7684\u865a\u51fd\u6570\u3002 \u53ea\u6709\u6d3e\u751f\u7c7b\u7684\u865a\u51fd\u6570\u8986\u76d6\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u624d\u80fd\u6784\u6210\u591a\u6001\uff08\u901a\u8fc7\u57fa\u7c7b\u6307\u9488\u8bbf\u95ee\u6d3e\u751f\u7c7b\u51fd\u6570\uff09\u3002 \u6784\u9020\u51fd\u6570\u4e0d\u80fd\u662f\u865a\u51fd\u6570\u3002 \u6790\u6784\u51fd\u6570\u53ef\u4ee5\u58f0\u660e\u4e3a\u865a\u51fd\u6570\uff0c\u800c\u4e14\u6709\u65f6\u5019\u5fc5\u987b\u8981\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 \u6784\u6210\u591a\u6001\u7684\u6761\u4ef6 1. \u5fc5\u987b\u5b58\u5728\u7ee7\u627f\u5173\u7cfb\uff1b 2. \u7ee7\u627f\u5173\u7cfb\u4e2d\u5fc5\u987b\u6709\u540c\u540d\u7684\u865a\u51fd\u6570\uff0c\u5e76\u4e14\u5b83\u4eec\u662f\u8986\u76d6\u5173\u7cfb\uff08\u51fd\u6570\u539f\u578b\u76f8\u540c\uff09\u3002 3. \u5b58\u5728\u57fa\u7c7b\u7684\u6307\u9488\uff0c\u901a\u8fc7\u8be5\u6307\u9488\u8c03\u7528\u865a\u51fd\u6570\u3002","title":"\u591a\u6001\u4e0e\u865a\u51fd\u6570"},{"location":"cplus/cpp_polym/#_2","text":"\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u90fd\u5e94\u8be5\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002 1 2 3 4 5 6 7 class Base { public : Base (); virtual ~ Base (); protected : char * str ; };","title":"\u865a\u6790\u6784\u51fd\u6570\u7684\u5fc5\u8981\u6027"},{"location":"cplus/cpp_polym/#_3","text":"1 virtual \u8fd4\u56de\u503c\u7c7b\u578b \u51fd\u6570\u540d ( \u51fd\u6570\u53c2\u6570 ) = 0 ; \u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u53ea\u6709\u51fd\u6570\u58f0\u660e\uff0c\u5728\u865a\u51fd\u6570\u58f0\u660e\u7684\u7ed3\u5c3e\u52a0\u4e0a=0\uff0c\u8868\u660e\u6b64\u51fd\u6570\u4e3a\u7eaf\u865a\u51fd\u6570\u3002 \u5305\u542b\u7eaf\u865a\u51fd\u6570\u7684\u7c7b\u79f0\u4e3a\u62bd\u8c61\u7c7b\uff08Abstract Class\uff09\u3002\u7eaf\u865a\u51fd\u6570\u6ca1\u6709\u51fd\u6570\u4f53\uff0c\u65e0\u6cd5\u5b9e\u4f8b\u5316\u3002\u6d3e\u751f\u7c7b\u5fc5\u987b\u5b9e\u73b0\u7eaf\u865a\u51fd\u6570\u624d\u80fd\u88ab\u5b9e\u4f8b\u5316\u3002 \u62bd\u8c61\u57fa\u7c7b\u9664\u4e86\u7ea6\u675f\u6d3e\u751f\u7c7b\u7684\u529f\u80fd\uff0c\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u591a\u6001\u3002 \u4e00\u4e2a\u7eaf\u865a\u51fd\u6570\u5c31\u53ef\u4ee5\u4f7f\u7c7b\u6210\u4e3a\u62bd\u8c61\u57fa\u7c7b\uff0c\u4f46\u662f\u62bd\u8c61\u57fa\u7c7b\u4e2d\u9664\u4e86\u5305\u542b\u7eaf\u865a\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u5305\u542b\u5176\u5b83\u7684\u6210\u5458\u51fd\u6570\uff08\u865a\u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\uff09\u548c\u6210\u5458\u53d8\u91cf\u3002 \u53ea\u6709\u7c7b\u4e2d\u7684\u865a\u51fd\u6570\u624d\u80fd\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u666e\u901a\u6210\u5458\u51fd\u6570\u548c\u9876\u5c42\u51fd\u6570\u5747\u4e0d\u80fd\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\u3002","title":"\u7eaf\u865a\u51fd\u6570\u548c\u62bd\u8c61\u7c7b\u8be6\u89e3"},{"location":"cplus/cpp_polym/#_4","text":"\u7f16\u8bd1\u5668\u4e4b\u6240\u4ee5\u80fd\u901a\u8fc7\u6307\u9488\u6307\u5411\u7684\u5bf9\u8c61\u627e\u5230\u865a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u989d\u5916\u5730\u589e\u52a0\u4e86\u865a\u51fd\u6570\u8868\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u5305\u542b\u4e86\u865a\u51fd\u6570\uff0c\u90a3\u4e48\u5728\u521b\u5efa\u8be5\u7c7b\u7684\u5bf9\u8c61\u65f6\u5c31\u4f1a\u989d\u5916\u5730\u589e\u52a0\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u662f\u865a\u51fd\u6570\u7684\u5165\u53e3\u5730\u5740\u3002\u4e0d\u8fc7\u6570\u7ec4\u548c\u5bf9\u8c61\u662f\u5206\u5f00\u5b58\u50a8\u7684\uff0c\u4e3a\u4e86\u5c06\u5bf9\u8c61\u548c\u6570\u7ec4\u5173\u8054\u8d77\u6765\uff0c\u7f16\u8bd1\u5668\u8fd8\u8981\u5728\u5bf9\u8c61\u4e2d\u5b89\u63d2\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\u6570\u7ec4\u5c31\u662f\u865a\u51fd\u6570\u8868\uff08Virtual function table\uff09\uff0c\u7b80\u5199\u4e3avtable\u3002","title":"\u865a\u51fd\u6570\u8868"},{"location":"cplus/cpp_polym/#typeidrtti","text":"typeid \u8fd0\u7b97\u7b26\u7528\u6765\u83b7\u53d6\u4e00\u4e2a\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u4fe1\u606f\u3002\u7c7b\u578b\u4fe1\u606f\u662f\u521b\u5efa\u6570\u636e\u7684\u6a21\u677f\uff0c\u6570\u636e\u5360\u7528\u591a\u5927\u5185\u5b58\u3001\u80fd\u8fdb\u884c\u4ec0\u4e48\u6837\u7684\u64cd\u4f5c\u3001\u8be5\u5982\u4f55\u64cd\u4f5c\u7b49\uff0c\u8fd9\u4e9b\u90fd\u7531\u5b83\u7684\u7c7b\u578b\u4fe1\u606f\u51b3\u5b9a\u3002 \u8fd9\u79cd\u5728\u7a0b\u5e8f\u8fd0\u884c\u540e\u786e\u5b9a\u5bf9\u8c61\u7684\u7c7b\u578b\u4fe1\u606f\u7684\u673a\u5236\u79f0\u4e3a\u8fd0\u884c\u65f6\u7c7b\u578b\u8bc6\u522b\uff08Run-Time Type Identification\uff0cRTTI\uff09\u3002\u5728 C++ \u4e2d\uff0c\u53ea\u6709\u7c7b\u4e2d\u5305\u542b\u4e86\u865a\u51fd\u6570\u65f6\u624d\u4f1a\u542f\u7528 RTTI \u673a\u5236\uff0c\u5176\u4ed6\u6240\u6709\u60c5\u51b5\u90fd\u53ef\u4ee5\u5728\u7f16\u8bd1\u9636\u6bb5\u786e\u5b9a\u7c7b\u578b\u4fe1\u606f\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 #include <iostream> using namespace std ; //\u57fa\u7c7b class People { public : virtual void func (){ } }; //\u6d3e\u751f\u7c7b class Student : public People { }; int main (){ People * p ; int n ; cin >> n ; if ( n <= 100 ){ p = new People (); } else { p = new Student (); } //\u6839\u636e\u4e0d\u540c\u7684\u7c7b\u578b\u8fdb\u884c\u4e0d\u540c\u7684\u64cd\u4f5c if ( typeid ( * p ) == typeid ( People )){ cout << \"I am human.\" << endl ; } else { cout << \"I am a student.\" << endl ; } return 0 ; } \u9664\u4e86 typeid \u8fd0\u7b97\u7b26\uff0cdynamic_cast \u8fd0\u7b97\u7b26\u548c\u5f02\u5e38\u5904\u7406\u4e5f\u4f9d\u8d56\u4e8e RTTI \u673a\u5236\uff0c\u5e76\u4e14\u8981\u80fd\u591f\u901a\u8fc7\u6d3e\u751f\u7c7b\u83b7\u53d6\u57fa\u7c7b\u7684\u4fe1\u606f\uff0c\u6216\u8005\u8bf4\u8981\u80fd\u591f\u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u7c7b\u7684\u57fa\u7c7b\uff0c\u8981\u5728\u57fa\u7c7b\u548c\u6d3e\u751f\u7c7b\u4e4b\u95f4\u518d\u589e\u52a0\u4e00\u6761\u7ef3\u7d22\u3002\u79f0\u6b64\u4e3a\u7ee7\u627f\u94fe\uff08Inheritance Chain\uff09\u3002","title":"typeid\u8fd0\u7b97\u7b26\u4e0eRTTI\u673a\u5236"},{"location":"cplus/cpp_quote/","text":"C++\u5f15\u7528 \u00b6 \u5f15\u7528\u5728\u5b9a\u4e49\u65f6\u9700\u8981\u6dfb\u52a0&\uff0c\u5728\u4f7f\u7528\u65f6\u4e0d\u80fd\u6dfb\u52a0&\uff0c\u4f7f\u7528\u65f6\u6dfb\u52a0&\u8868\u793a\u53d6\u5730\u5740\u3002\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u7684\u540c\u65f6\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u4ee5\u540e\u4e5f\u8981\u4ece\u4e00\u800c\u7ec8\uff0c\u4e0d\u80fd\u518d\u5f15\u7528\u5176\u5b83\u6570\u636e\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5e38\u91cf\uff08const \u53d8\u91cf\uff09\u3002 \u5f15\u7528\u53ea\u662f\u5bf9\u6307\u9488\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u5b83\u7684\u5e95\u5c42\u4f9d\u7136\u662f\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u5f15\u7528\u5360\u7528\u7684\u5185\u5b58\u548c\u6307\u9488\u5360\u7528\u7684\u5185\u5b58\u957f\u5ea6\u4e00\u6837\uff0c\u5728 32 \u4f4d\u73af\u5883\u4e0b\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5728 64 \u4f4d\u73af\u5883\u4e0b\u662f 8 \u4e2a\u5b57\u8282\uff0c\u4e4b\u6240\u4ee5\u4e0d\u80fd\u83b7\u53d6\u5f15\u7528\u7684\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fdb\u884c\u4e86\u5185\u90e8\u8f6c\u6362\u3002 \u6307\u9488\u548c\u5f15\u7528\u7684\u533a\u522b \u00b6 \u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u65f6\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u6570\u636e\uff1b\u6307\u9488\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u6307\u9488\u5728\u5b9a\u4e49\u65f6\u4e0d\u5fc5\u8d4b\u503c\uff0c\u4e5f\u80fd\u6307\u5411\u4efb\u610f\u6570\u636e\u3002 \u6709 const \u6307\u9488\uff0c\u4f46\u662f\u6ca1\u6709 const \u5f15\u7528\u3002 \u6307\u9488\u53ef\u4ee5\u6709\u591a\u7ea7\uff0c\u4f46\u662f\u5f15\u7528\u53ea\u80fd\u6709\u4e00\u7ea7\u3002 \u6307\u9488\u548c\u5f15\u7528\u7684\u81ea\u589e\uff08++\uff09\u81ea\u51cf\uff08--\uff09\u8fd0\u7b97\u610f\u4e49\u4e0d\u4e00\u6837\u3002\u5bf9\u6307\u9488\u4f7f\u7528 ++ \u8868\u793a\u6307\u5411\u4e0b\u4e00\u4efd\u6570\u636e\uff0c\u5bf9\u5f15\u7528\u4f7f\u7528 ++ \u8868\u793a\u5b83\u6240\u6307\u4ee3\u7684\u6570\u636e\u672c\u8eab\u52a0 1\u3002 const\u548c\u5f15\u7528\u7684\u5947\u5999\u53cd\u5e94 \u00b6 \u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e \u00b6 \u6307\u9488\u5c31\u662f\u6570\u636e\u6216\u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u6216\u4ee3\u7801\u3002\u6307\u9488\u53ea\u80fd\u6307\u5411\u5185\u5b58\uff0c\u4e0d\u80fd\u6307\u5411\u5bc4\u5b58\u5668\u6216\u8005\u786c\u76d8\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u548c\u786c\u76d8\u6ca1\u6cd5\u5bfb\u5740\u3002 int\u3001double\u3001bool\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e\u5f80\u5f80\u4e0d\u8d85\u8fc7 8 \u4e2a\u5b57\u8282\uff0c\u7528\u4e00\u4e24\u4e2a\u5bc4\u5b58\u5668\u5c31\u80fd\u5b58\u50a8\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\uff1b\u800c\u5bf9\u8c61\u3001\u7ed3\u6784\u4f53\u53d8\u91cf\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5927\u5c0f\u4e0d\u53ef\u9884\u6d4b\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5185\u5b58\u4e2d\u3002 \u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u867d\u7136\u5728\u5185\u5b58\u4e2d\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u5bfb\u5740\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u4f7f\u7528&\u6765\u83b7\u53d6\u5b83\u7684\u5730\u5740\uff0c\u66f4\u4e0d\u80fd\u7528\u6307\u9488\u6307\u5411\u5b83\u3002 \u5f15\u7528\u4e0d\u80fd\u6307\u4ee3\u4e34\u65f6\u6570\u636e\u5982\u51fd\u6570\u53c2\u6570\u7b49\u3002 \u4e34\u65f6\u6570\u636e\uff0c\u4f8b\u5982\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3001\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u4e5f\u53ef\u80fd\u4f1a\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u4e00\u65e6\u5b83\u4eec\u88ab\u653e\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5c31\u6ca1\u6cd5\u7528&\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\u4e86\uff0c\u4e5f\u5c31\u6ca1\u6cd5\u7528\u6307\u9488\u6307\u5411\u5b83\u4eec\u3002 \u7f16\u8bd1\u5668\u4f1a\u4e3a\u4e34\u65f6\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u65e0\u540d\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u5e76\u5c06\u4e34\u65f6\u6570\u636e\u653e\u5165\u8be5\u4e34\u65f6\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u518d\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u8be5\u4e34\u65f6\u53d8\u91cf\u3002 \u7ed9\u5f15\u7528\u6dfb\u52a0 const \u9650\u5b9a\u540e\uff0c\u4e0d\u4f46\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u7c7b\u578b\u76f8\u8fd1\u7684\u6570\u636e(const\u5f15\u7528\u4e0e\u8f6c\u6362\u7c7b\u578b)\uff0c\u5b83\u4eec\u80cc\u540e\u7684\u673a\u5236\u90fd\u662f\u4e34\u65f6\u53d8\u91cf\u3002 \u5f15\u7528\u7c7b\u578b\u7684\u51fd\u6570\u5f62\u53c2\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528const\u3002","title":"\u5f15\u7528"},{"location":"cplus/cpp_quote/#c","text":"\u5f15\u7528\u5728\u5b9a\u4e49\u65f6\u9700\u8981\u6dfb\u52a0&\uff0c\u5728\u4f7f\u7528\u65f6\u4e0d\u80fd\u6dfb\u52a0&\uff0c\u4f7f\u7528\u65f6\u6dfb\u52a0&\u8868\u793a\u53d6\u5730\u5740\u3002\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u7684\u540c\u65f6\u521d\u59cb\u5316\uff0c\u5e76\u4e14\u4ee5\u540e\u4e5f\u8981\u4ece\u4e00\u800c\u7ec8\uff0c\u4e0d\u80fd\u518d\u5f15\u7528\u5176\u5b83\u6570\u636e\uff0c\u8fd9\u6709\u70b9\u7c7b\u4f3c\u4e8e\u5e38\u91cf\uff08const \u53d8\u91cf\uff09\u3002 \u5f15\u7528\u53ea\u662f\u5bf9\u6307\u9488\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5c01\u88c5\uff0c\u5b83\u7684\u5e95\u5c42\u4f9d\u7136\u662f\u901a\u8fc7\u6307\u9488\u5b9e\u73b0\u7684\uff0c\u5f15\u7528\u5360\u7528\u7684\u5185\u5b58\u548c\u6307\u9488\u5360\u7528\u7684\u5185\u5b58\u957f\u5ea6\u4e00\u6837\uff0c\u5728 32 \u4f4d\u73af\u5883\u4e0b\u662f 4 \u4e2a\u5b57\u8282\uff0c\u5728 64 \u4f4d\u73af\u5883\u4e0b\u662f 8 \u4e2a\u5b57\u8282\uff0c\u4e4b\u6240\u4ee5\u4e0d\u80fd\u83b7\u53d6\u5f15\u7528\u7684\u5730\u5740\uff0c\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u8fdb\u884c\u4e86\u5185\u90e8\u8f6c\u6362\u3002","title":"C++\u5f15\u7528"},{"location":"cplus/cpp_quote/#_1","text":"\u5f15\u7528\u5fc5\u987b\u5728\u5b9a\u4e49\u65f6\u521d\u59cb\u5316\uff0c\u4e0d\u80fd\u518d\u6307\u5411\u5176\u4ed6\u6570\u636e\uff1b\u6307\u9488\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\uff0c\u6307\u9488\u5728\u5b9a\u4e49\u65f6\u4e0d\u5fc5\u8d4b\u503c\uff0c\u4e5f\u80fd\u6307\u5411\u4efb\u610f\u6570\u636e\u3002 \u6709 const \u6307\u9488\uff0c\u4f46\u662f\u6ca1\u6709 const \u5f15\u7528\u3002 \u6307\u9488\u53ef\u4ee5\u6709\u591a\u7ea7\uff0c\u4f46\u662f\u5f15\u7528\u53ea\u80fd\u6709\u4e00\u7ea7\u3002 \u6307\u9488\u548c\u5f15\u7528\u7684\u81ea\u589e\uff08++\uff09\u81ea\u51cf\uff08--\uff09\u8fd0\u7b97\u610f\u4e49\u4e0d\u4e00\u6837\u3002\u5bf9\u6307\u9488\u4f7f\u7528 ++ \u8868\u793a\u6307\u5411\u4e0b\u4e00\u4efd\u6570\u636e\uff0c\u5bf9\u5f15\u7528\u4f7f\u7528 ++ \u8868\u793a\u5b83\u6240\u6307\u4ee3\u7684\u6570\u636e\u672c\u8eab\u52a0 1\u3002","title":"\u6307\u9488\u548c\u5f15\u7528\u7684\u533a\u522b"},{"location":"cplus/cpp_quote/#const","text":"","title":"const\u548c\u5f15\u7528\u7684\u5947\u5999\u53cd\u5e94"},{"location":"cplus/cpp_quote/#_2","text":"\u6307\u9488\u5c31\u662f\u6570\u636e\u6216\u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u7684\u5730\u5740\uff0c\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u6570\u636e\u6216\u4ee3\u7801\u3002\u6307\u9488\u53ea\u80fd\u6307\u5411\u5185\u5b58\uff0c\u4e0d\u80fd\u6307\u5411\u5bc4\u5b58\u5668\u6216\u8005\u786c\u76d8\uff0c\u56e0\u4e3a\u5bc4\u5b58\u5668\u548c\u786c\u76d8\u6ca1\u6cd5\u5bfb\u5740\u3002 int\u3001double\u3001bool\u3001char \u7b49\u57fa\u672c\u7c7b\u578b\u7684\u6570\u636e\u5f80\u5f80\u4e0d\u8d85\u8fc7 8 \u4e2a\u5b57\u8282\uff0c\u7528\u4e00\u4e24\u4e2a\u5bc4\u5b58\u5668\u5c31\u80fd\u5b58\u50a8\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5bc4\u5b58\u5668\u4e2d\uff1b\u800c\u5bf9\u8c61\u3001\u7ed3\u6784\u4f53\u53d8\u91cf\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u7684\u6570\u636e\uff0c\u5927\u5c0f\u4e0d\u53ef\u9884\u6d4b\uff0c\u6240\u4ee5\u8fd9\u4e9b\u7c7b\u578b\u7684\u4e34\u65f6\u6570\u636e\u901a\u5e38\u4f1a\u653e\u5230\u5185\u5b58\u4e2d\u3002 \u5e38\u91cf\u8868\u8fbe\u5f0f\u7684\u503c\u867d\u7136\u5728\u5185\u5b58\u4e2d\uff0c\u4f46\u662f\u6ca1\u6709\u529e\u6cd5\u5bfb\u5740\uff0c\u6240\u4ee5\u4e5f\u4e0d\u80fd\u4f7f\u7528&\u6765\u83b7\u53d6\u5b83\u7684\u5730\u5740\uff0c\u66f4\u4e0d\u80fd\u7528\u6307\u9488\u6307\u5411\u5b83\u3002 \u5f15\u7528\u4e0d\u80fd\u6307\u4ee3\u4e34\u65f6\u6570\u636e\u5982\u51fd\u6570\u53c2\u6570\u7b49\u3002 \u4e34\u65f6\u6570\u636e\uff0c\u4f8b\u5982\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3001\u51fd\u6570\u7684\u8fd4\u56de\u503c\u7b49\uff0c\u5b83\u4eec\u53ef\u80fd\u4f1a\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u4e5f\u53ef\u80fd\u4f1a\u653e\u5728\u5bc4\u5b58\u5668\u4e2d\u3002\u4e00\u65e6\u5b83\u4eec\u88ab\u653e\u5230\u4e86\u5bc4\u5b58\u5668\u4e2d\uff0c\u5c31\u6ca1\u6cd5\u7528&\u83b7\u53d6\u5b83\u4eec\u7684\u5730\u5740\u4e86\uff0c\u4e5f\u5c31\u6ca1\u6cd5\u7528\u6307\u9488\u6307\u5411\u5b83\u4eec\u3002 \u7f16\u8bd1\u5668\u4f1a\u4e3a\u4e34\u65f6\u6570\u636e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u65e0\u540d\u7684\u4e34\u65f6\u53d8\u91cf\uff0c\u5e76\u5c06\u4e34\u65f6\u6570\u636e\u653e\u5165\u8be5\u4e34\u65f6\u53d8\u91cf\u4e2d\uff0c\u7136\u540e\u518d\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u8be5\u4e34\u65f6\u53d8\u91cf\u3002 \u7ed9\u5f15\u7528\u6dfb\u52a0 const \u9650\u5b9a\u540e\uff0c\u4e0d\u4f46\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u5c06\u5f15\u7528\u7ed1\u5b9a\u5230\u7c7b\u578b\u76f8\u8fd1\u7684\u6570\u636e(const\u5f15\u7528\u4e0e\u8f6c\u6362\u7c7b\u578b)\uff0c\u5b83\u4eec\u80cc\u540e\u7684\u673a\u5236\u90fd\u662f\u4e34\u65f6\u53d8\u91cf\u3002 \u5f15\u7528\u7c7b\u578b\u7684\u51fd\u6570\u5f62\u53c2\u8bf7\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528const\u3002","title":"\u5f15\u7528\u4e0d\u80fd\u7ed1\u5b9a\u5230\u4e34\u65f6\u6570\u636e"},{"location":"cplus/cpp_stl/","text":"STL\u5bb9\u5668 \u00b6 \u987a\u5e8f\u5bb9\u5668\uff1a\u5143\u7d20\u5728\u5bb9\u5668\u4e2d\u7684\u4f4d\u7f6e\u540c\u5143\u7d20\u7684\u503c\u65e0\u5173\uff0c\u5373\u4e0d\u662f\u6392\u5e8f\u3002\u53ef\u53d8\u957f\u6570\u7ec4vector\uff0c\u53cc\u7aef\u961f\u5217deque\uff0c\u53cc\u5411\u94fe\u8868list\u3002\u987a\u5e8f\u5bb9\u5668\u6709\u4ee5\u4e0b\u5e38\u7528\u6210\u5458\u51fd\u6570\uff1a front()\uff1a\u8fd4\u56de\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 back()\uff1a\u8fd4\u56de\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 push_back()\uff1a\u5728\u5bb9\u5668\u672b\u5c3e\u589e\u52a0\u65b0\u5143\u7d20\u3002 pop_back()\uff1a\u5220\u9664\u5bb9\u5668\u672b\u5c3e\u7684\u5143\u7d20\u3002 insert(...)\uff1a\u63d2\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002\u8be5\u51fd\u6570\u53c2\u6570\u8f83\u590d\u6742\uff0c\u6b64\u5904\u7701\u7565\u3002 \u5173\u8054\u5bb9\u5668\uff1a\u5143\u7d20\u5728\u5bb9\u5668\u7c7b\u662f\u6392\u5e8f\u7684\u3002set\uff0cmultiset\uff0cmap\uff0cmultimap\u3002 \u5bb9\u5668\u9002\u914d\u5668\uff1a\u6808stack\uff0c\u961f\u5217queue\uff0c\u4f18\u5148\u7ea7\u961f\u5217priority_queue\u3002 \u6240\u6709\u5bb9\u5668\u90fd\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6210\u5458\u51fd\u6570\uff1a int size()\uff1a\u8fd4\u56de\u5bb9\u5668\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 bool empty()\uff1a\u5224\u65ad\u5bb9\u5668\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\u3002 \u987a\u5e8f\u5bb9\u5668\u548c\u5173\u8054\u5bb9\u5668\u8fd8\u6709\u4ee5\u4e0b\u6210\u5458\u51fd\u6570\uff1a begin()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 end()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u9762\u7684\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002 rbegin()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002 rend()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u524d\u9762\u7684\u4f4d\u7f6e\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002 erase(...)\uff1a\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u6216\u51e0\u4e2a\u5143\u7d20\u3002\u8be5\u51fd\u6570\u53c2\u6570\u8f83\u590d\u6742\uff0c\u6b64\u5904\u7701\u7565\u3002 clear()\uff1a\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20\u3002 STL\u8fed\u4ee3\u5668iterator \u00b6 \u8981\u8bbf\u95ee\u987a\u5e8f\u5bb9\u5668\u548c\u5173\u8054\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u9700\u8981\u901a\u8fc7\u201c\u8fed\u4ee3\u5668\uff08iterator\uff09\u201d\u8fdb\u884c\u3002\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u53d8\u91cf\u3002\u8fed\u4ee3\u5668\u53ef\u4ee5\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff0c\u901a\u8fc7\u8fed\u4ee3\u5668\u5c31\u53ef\u4ee5\u8bfb\u5199\u5b83\u6307\u5411\u7684\u5143\u7d20\uff0c\u8fed\u4ee3\u5668\u548c\u6307\u9488\u7c7b\u4f3c\u3002 \u8fed\u4ee3\u5668\u6309\u7167\u5b9a\u4e49\u65b9\u5f0f\u5206\u6210\u4ee5\u4e0b\u56db\u79cd: \u6b63\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: iterator \u8fed\u4ee3\u5668\u540d ; \u5e38\u91cf\u6b63\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: const_iterator \u8fed\u4ee3\u5668\u540d ; \u53cd\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: reverse_iterator \u8fed\u4ee3\u5668\u540d ; \u5e38\u91cf\u53cd\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: const_reverse_iterator \u8fed\u4ee3\u5668\u540d ; \u901a\u8fc7\u8fed\u4ee3\u5668\u53ef\u4ee5\u8bfb\u53d6\u5b83\u6307\u5411\u7684\u5143\u7d20\uff0c*\u8fed\u4ee3\u5668\u540d\u5c31\u8868\u793a\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u3002\u901a\u8fc7\u975e\u5e38\u91cf\u8fed\u4ee3\u5668\u8fd8\u80fd\u4fee\u6539\u5176\u6307\u5411\u7684\u5143\u7d20\u3002 \u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u8fdb\u884c++\u64cd\u4f5c\u3002\u53cd\u5411\u8fed\u4ee3\u5668\u548c\u6b63\u5411\u8fed\u4ee3\u5668\u7684\u533a\u522b\u5728\u4e8e\uff1a 1. \u5bf9\u6b63\u5411\u8fed\u4ee3\u5668\u8fdb\u884c++\u64cd\u4f5c\u65f6\uff0c\u8fed\u4ee3\u5668\u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u540e\u4e00\u4e2a\u5143\u7d20\uff1b \u800c\u5bf9\u53cd\u5411\u8fed\u4ee3\u5668\u8fdb\u884c++\u64cd\u4f5c\u65f6\uff0c\u8fed\u4ee3\u5668\u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> #include <vector> using namespace std ; int main () { vector < int > v ; //v\u662f\u5b58\u653eint\u7c7b\u578b\u53d8\u91cf\u7684\u53ef\u53d8\u957f\u6570\u7ec4\uff0c\u5f00\u59cb\u65f6\u6ca1\u6709\u5143\u7d20 for ( int n = 0 ; n < 5 ; ++ n ) v . push_back ( n ); //push_back\u6210\u5458\u51fd\u6570\u5728vector\u5bb9\u5668\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 vector < int >:: iterator i ; //\u5b9a\u4e49\u6b63\u5411\u8fed\u4ee3\u5668 for ( i = v . begin (); i != v . end (); ++ i ) { //\u7528\u8fed\u4ee3\u5668\u904d\u5386\u5bb9\u5668 cout << * i << \" \" ; //*i \u5c31\u662f\u8fed\u4ee3\u5668i\u6307\u5411\u7684\u5143\u7d20 * i *= 2 ; //\u6bcf\u4e2a\u5143\u7d20\u53d8\u4e3a\u539f\u6765\u76842\u500d } cout << endl ; //\u7528\u53cd\u5411\u8fed\u4ee3\u5668\u904d\u5386\u5bb9\u5668 for ( vector < int >:: reverse_iterator j = v . rbegin (); j != v . rend (); ++ j ) cout << * j << \" \" ; return 0 ; } \u8fed\u4ee3\u5668\u529f\u80fd\u5206\u7c7b \u00b6 \u6b63\u5411\u8fed\u4ee3\u5668\u3002\u5047\u8bbe p \u662f\u4e00\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\uff0c\u5219 p \u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a++p\uff0cp++\uff0c*p\u3002\u6b64\u5916\uff0c\u4e24\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\u53ef\u4ee5\u4e92\u76f8\u8d4b\u503c\uff0c\u8fd8\u53ef\u4ee5\u7528==\u548c!=\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 \u53cc\u5411\u8fed\u4ee3\u5668\u3002\u53cc\u5411\u8fed\u4ee3\u5668\u5177\u6709\u6b63\u5411\u8fed\u4ee3\u5668\u7684\u5168\u90e8\u529f\u80fd\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u82e5 p \u662f\u4e00\u4e2a\u53cc\u5411\u8fed\u4ee3\u5668\uff0c\u5219--p\u548cp--\u90fd\u662f\u6709\u5b9a\u4e49\u7684\u3002--p\u4f7f\u5f97 p \u671d\u548c++p\u76f8\u53cd\u7684\u65b9\u5411\u79fb\u52a8\u3002 \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u3002\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u5177\u6709\u53cc\u5411\u8fed\u4ee3\u5668\u7684\u5168\u90e8\u529f\u80fd\u3002\u82e5 p \u662f\u4e00\u4e2a\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff0ci \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u6216\u5e38\u91cf\uff0c\u5219 p \u8fd8\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a p+=i\uff1a\u4f7f\u5f97 p \u5f80\u540e\u79fb\u52a8 i \u4e2a\u5143\u7d20\u3002 p-=i\uff1a\u4f7f\u5f97 p \u5f80\u524d\u79fb\u52a8 i \u4e2a\u5143\u7d20\u3002 p+i\uff1a\u8fd4\u56de p \u540e\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 p-i\uff1a\u8fd4\u56de p \u524d\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 p[i]\uff1a\u8fd4\u56de p \u540e\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 \u6b64\u5916\uff0c\u4e24\u4e2a\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 p1\u3001p2 \u8fd8\u53ef\u4ee5\u7528 <\u3001>\u3001<=\u3001>= \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002p1<p2\u7684\u542b\u4e49\u662f\uff1ap1 \u7ecf\u8fc7\u82e5\u5e72\u6b21\uff08\u81f3\u5c11\u4e00\u6b21\uff09++\u64cd\u4f5c\u540e\uff0c\u5c31\u4f1a\u7b49\u4e8e p2\u3002\u5176\u4ed6\u6bd4\u8f83\u65b9\u5f0f\u7684\u542b\u4e49\u4e0e\u6b64\u7c7b\u4f3c\u3002 \u5bb9\u5668 \u8fed\u4ee3\u5668\u529f\u80fd vector \u968f\u673a\u8bbf\u95ee deque \u968f\u673a\u8bbf\u95ee list \u53cc\u5411 set/multiset \u53cc\u5411 map/multimap \u53cc\u5411 stack \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 queue \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 priority_queue \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 \u8fed\u4ee3\u5668\u7684\u8f85\u52a9\u51fd\u6570 \u00b6 STL \u4e2d\u6709\u7528\u4e8e\u64cd\u4f5c\u8fed\u4ee3\u5668\u7684\u4e09\u4e2a\u51fd\u6570\u6a21\u677f\uff0c\u5b83\u4eec\u662f\uff1a advance(p, n)\uff1a\u4f7f\u8fed\u4ee3\u5668 p \u5411\u524d\u6216\u5411\u540e\u79fb\u52a8 n \u4e2a\u5143\u7d20\u3002 distance(p, q)\uff1a\u8ba1\u7b97\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5373\u8fed\u4ee3\u5668 p \u7ecf\u8fc7\u591a\u5c11\u6b21 + + \u64cd\u4f5c\u540e\u548c\u8fed\u4ee3\u5668 q \u76f8\u7b49\u3002\u5982\u679c\u8c03\u7528\u65f6 p \u5df2\u7ecf\u6307\u5411 q \u7684\u540e\u9762\uff0c\u5219\u8fd9\u4e2a\u51fd\u6570\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\u3002 iter_swap(p, q)\uff1a\u7528\u4e8e\u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668 p\u3001q \u6307\u5411\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <list> #include <iostream> #include <algorithm> //\u8981\u4f7f\u7528\u64cd\u4f5c\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u6a21\u677f\uff0c\u9700\u8981\u5305\u542b\u6b64\u6587\u4ef6 using namespace std ; int main () { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; list < int > lst ( a , a + 5 ); list < int >:: iterator p = lst . begin (); advance ( p , 2 ); //p\u5411\u540e\u79fb\u52a8\u4e24\u4e2a\u5143\u7d20\uff0c\u6307\u54113 cout << \"1)\" << * p << endl ; //\u8f93\u51fa 1)3 advance ( p , - 1 ); //p\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u54112 cout << \"2)\" << * p << endl ; //\u8f93\u51fa 2)2 list < int >:: iterator q = lst . end (); q -- ; //q \u6307\u5411 5 cout << \"3)\" << distance ( p , q ) << endl ; //\u8f93\u51fa 3)3 iter_swap ( p , q ); //\u4ea4\u6362 2 \u548c 5 cout << \"4)\" ; for ( p = lst . begin (); p != lst . end (); ++ p ) cout << * p << \" \" ; return 0 ; } STL\u7b97\u6cd5 \u00b6 \u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u5904\u7406\u666e\u901a\u7684\u6570\u7ec4\u3002 \u6709\u7684\u7b97\u6cd5\u4f1a\u6539\u53d8\u5176\u6240\u4f5c\u7528\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a 1. copy\uff1a\u5c06\u4e00\u4e2a\u5bb9\u5668\u7684\u5185\u5bb9\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5bb9\u5668\u3002 2. remove\uff1a\u5728\u5bb9\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 3. random_shuffle\uff1a\u968f\u673a\u6253\u4e71\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 4. fill\uff1a\u7528\u67d0\u4e2a\u503c\u586b\u5145\u5bb9\u5668\u3002 \u6709\u7684\u7b97\u6cd5\u4e0d\u4f1a\u6539\u53d8\u5176\u6240\u4f5c\u7528\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a 1. find\uff1a\u5728\u5bb9\u5668\u4e2d\u67e5\u627e\u5143\u7d20\u3002 2. count_if\uff1a\u7edf\u8ba1\u5bb9\u5668\u4e2d\u7b26\u5408\u67d0\u79cd\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 find \u6a21\u677f\u7684\u539f\u578b\u5982\u4e0b\uff1a 1 2 template < class InIt , class T > InIt find ( InIt first , InIt last , const T & val ); sort\uff0c\u7528\u4e8e\u5bf9\u5bb9\u5668\u6392\u5e8f\uff0c\u5176\u539f\u578b\u4e3a\uff1a 1 2 template < class_RandIt > void sort ( _RandIt first , _RandIt last );","title":"STL\u57fa\u7840"},{"location":"cplus/cpp_stl/#stl","text":"\u987a\u5e8f\u5bb9\u5668\uff1a\u5143\u7d20\u5728\u5bb9\u5668\u4e2d\u7684\u4f4d\u7f6e\u540c\u5143\u7d20\u7684\u503c\u65e0\u5173\uff0c\u5373\u4e0d\u662f\u6392\u5e8f\u3002\u53ef\u53d8\u957f\u6570\u7ec4vector\uff0c\u53cc\u7aef\u961f\u5217deque\uff0c\u53cc\u5411\u94fe\u8868list\u3002\u987a\u5e8f\u5bb9\u5668\u6709\u4ee5\u4e0b\u5e38\u7528\u6210\u5458\u51fd\u6570\uff1a front()\uff1a\u8fd4\u56de\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 back()\uff1a\u8fd4\u56de\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 push_back()\uff1a\u5728\u5bb9\u5668\u672b\u5c3e\u589e\u52a0\u65b0\u5143\u7d20\u3002 pop_back()\uff1a\u5220\u9664\u5bb9\u5668\u672b\u5c3e\u7684\u5143\u7d20\u3002 insert(...)\uff1a\u63d2\u5165\u4e00\u4e2a\u6216\u591a\u4e2a\u5143\u7d20\u3002\u8be5\u51fd\u6570\u53c2\u6570\u8f83\u590d\u6742\uff0c\u6b64\u5904\u7701\u7565\u3002 \u5173\u8054\u5bb9\u5668\uff1a\u5143\u7d20\u5728\u5bb9\u5668\u7c7b\u662f\u6392\u5e8f\u7684\u3002set\uff0cmultiset\uff0cmap\uff0cmultimap\u3002 \u5bb9\u5668\u9002\u914d\u5668\uff1a\u6808stack\uff0c\u961f\u5217queue\uff0c\u4f18\u5148\u7ea7\u961f\u5217priority_queue\u3002 \u6240\u6709\u5bb9\u5668\u90fd\u6709\u4ee5\u4e0b\u4e24\u4e2a\u6210\u5458\u51fd\u6570\uff1a int size()\uff1a\u8fd4\u56de\u5bb9\u5668\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002 bool empty()\uff1a\u5224\u65ad\u5bb9\u5668\u5bf9\u8c61\u662f\u5426\u4e3a\u7a7a\u3002 \u987a\u5e8f\u5bb9\u5668\u548c\u5173\u8054\u5bb9\u5668\u8fd8\u6709\u4ee5\u4e0b\u6210\u5458\u51fd\u6570\uff1a begin()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 end()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u540e\u9762\u7684\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\u3002 rbegin()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002 rend()\uff1a\u8fd4\u56de\u6307\u5411\u5bb9\u5668\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u524d\u9762\u7684\u4f4d\u7f6e\u7684\u53cd\u5411\u8fed\u4ee3\u5668\u3002 erase(...)\uff1a\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u6216\u51e0\u4e2a\u5143\u7d20\u3002\u8be5\u51fd\u6570\u53c2\u6570\u8f83\u590d\u6742\uff0c\u6b64\u5904\u7701\u7565\u3002 clear()\uff1a\u4ece\u5bb9\u5668\u4e2d\u5220\u9664\u6240\u6709\u5143\u7d20\u3002","title":"STL\u5bb9\u5668"},{"location":"cplus/cpp_stl/#stliterator","text":"\u8981\u8bbf\u95ee\u987a\u5e8f\u5bb9\u5668\u548c\u5173\u8054\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\uff0c\u9700\u8981\u901a\u8fc7\u201c\u8fed\u4ee3\u5668\uff08iterator\uff09\u201d\u8fdb\u884c\u3002\u8fed\u4ee3\u5668\u662f\u4e00\u4e2a\u53d8\u91cf\u3002\u8fed\u4ee3\u5668\u53ef\u4ee5\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20\uff0c\u901a\u8fc7\u8fed\u4ee3\u5668\u5c31\u53ef\u4ee5\u8bfb\u5199\u5b83\u6307\u5411\u7684\u5143\u7d20\uff0c\u8fed\u4ee3\u5668\u548c\u6307\u9488\u7c7b\u4f3c\u3002 \u8fed\u4ee3\u5668\u6309\u7167\u5b9a\u4e49\u65b9\u5f0f\u5206\u6210\u4ee5\u4e0b\u56db\u79cd: \u6b63\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: iterator \u8fed\u4ee3\u5668\u540d ; \u5e38\u91cf\u6b63\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: const_iterator \u8fed\u4ee3\u5668\u540d ; \u53cd\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: reverse_iterator \u8fed\u4ee3\u5668\u540d ; \u5e38\u91cf\u53cd\u5411\u8fed\u4ee3\u5668 1 \u5bb9\u5668\u7c7b\u540d :: const_reverse_iterator \u8fed\u4ee3\u5668\u540d ; \u901a\u8fc7\u8fed\u4ee3\u5668\u53ef\u4ee5\u8bfb\u53d6\u5b83\u6307\u5411\u7684\u5143\u7d20\uff0c*\u8fed\u4ee3\u5668\u540d\u5c31\u8868\u793a\u8fed\u4ee3\u5668\u6307\u5411\u7684\u5143\u7d20\u3002\u901a\u8fc7\u975e\u5e38\u91cf\u8fed\u4ee3\u5668\u8fd8\u80fd\u4fee\u6539\u5176\u6307\u5411\u7684\u5143\u7d20\u3002 \u8fed\u4ee3\u5668\u90fd\u53ef\u4ee5\u8fdb\u884c++\u64cd\u4f5c\u3002\u53cd\u5411\u8fed\u4ee3\u5668\u548c\u6b63\u5411\u8fed\u4ee3\u5668\u7684\u533a\u522b\u5728\u4e8e\uff1a 1. \u5bf9\u6b63\u5411\u8fed\u4ee3\u5668\u8fdb\u884c++\u64cd\u4f5c\u65f6\uff0c\u8fed\u4ee3\u5668\u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u540e\u4e00\u4e2a\u5143\u7d20\uff1b \u800c\u5bf9\u53cd\u5411\u8fed\u4ee3\u5668\u8fdb\u884c++\u64cd\u4f5c\u65f6\uff0c\u8fed\u4ee3\u5668\u4f1a\u6307\u5411\u5bb9\u5668\u4e2d\u7684\u524d\u4e00\u4e2a\u5143\u7d20\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include <iostream> #include <vector> using namespace std ; int main () { vector < int > v ; //v\u662f\u5b58\u653eint\u7c7b\u578b\u53d8\u91cf\u7684\u53ef\u53d8\u957f\u6570\u7ec4\uff0c\u5f00\u59cb\u65f6\u6ca1\u6709\u5143\u7d20 for ( int n = 0 ; n < 5 ; ++ n ) v . push_back ( n ); //push_back\u6210\u5458\u51fd\u6570\u5728vector\u5bb9\u5668\u5c3e\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 vector < int >:: iterator i ; //\u5b9a\u4e49\u6b63\u5411\u8fed\u4ee3\u5668 for ( i = v . begin (); i != v . end (); ++ i ) { //\u7528\u8fed\u4ee3\u5668\u904d\u5386\u5bb9\u5668 cout << * i << \" \" ; //*i \u5c31\u662f\u8fed\u4ee3\u5668i\u6307\u5411\u7684\u5143\u7d20 * i *= 2 ; //\u6bcf\u4e2a\u5143\u7d20\u53d8\u4e3a\u539f\u6765\u76842\u500d } cout << endl ; //\u7528\u53cd\u5411\u8fed\u4ee3\u5668\u904d\u5386\u5bb9\u5668 for ( vector < int >:: reverse_iterator j = v . rbegin (); j != v . rend (); ++ j ) cout << * j << \" \" ; return 0 ; }","title":"STL\u8fed\u4ee3\u5668iterator"},{"location":"cplus/cpp_stl/#_1","text":"\u6b63\u5411\u8fed\u4ee3\u5668\u3002\u5047\u8bbe p \u662f\u4e00\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\uff0c\u5219 p \u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a++p\uff0cp++\uff0c*p\u3002\u6b64\u5916\uff0c\u4e24\u4e2a\u6b63\u5411\u8fed\u4ee3\u5668\u53ef\u4ee5\u4e92\u76f8\u8d4b\u503c\uff0c\u8fd8\u53ef\u4ee5\u7528==\u548c!=\u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002 \u53cc\u5411\u8fed\u4ee3\u5668\u3002\u53cc\u5411\u8fed\u4ee3\u5668\u5177\u6709\u6b63\u5411\u8fed\u4ee3\u5668\u7684\u5168\u90e8\u529f\u80fd\u3002\u9664\u6b64\u4e4b\u5916\uff0c\u82e5 p \u662f\u4e00\u4e2a\u53cc\u5411\u8fed\u4ee3\u5668\uff0c\u5219--p\u548cp--\u90fd\u662f\u6709\u5b9a\u4e49\u7684\u3002--p\u4f7f\u5f97 p \u671d\u548c++p\u76f8\u53cd\u7684\u65b9\u5411\u79fb\u52a8\u3002 \u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u3002\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\u5177\u6709\u53cc\u5411\u8fed\u4ee3\u5668\u7684\u5168\u90e8\u529f\u80fd\u3002\u82e5 p \u662f\u4e00\u4e2a\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668\uff0ci \u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\u6216\u5e38\u91cf\uff0c\u5219 p \u8fd8\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c\uff1a p+=i\uff1a\u4f7f\u5f97 p \u5f80\u540e\u79fb\u52a8 i \u4e2a\u5143\u7d20\u3002 p-=i\uff1a\u4f7f\u5f97 p \u5f80\u524d\u79fb\u52a8 i \u4e2a\u5143\u7d20\u3002 p+i\uff1a\u8fd4\u56de p \u540e\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 p-i\uff1a\u8fd4\u56de p \u524d\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002 p[i]\uff1a\u8fd4\u56de p \u540e\u9762\u7b2c i \u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 \u6b64\u5916\uff0c\u4e24\u4e2a\u968f\u673a\u8bbf\u95ee\u8fed\u4ee3\u5668 p1\u3001p2 \u8fd8\u53ef\u4ee5\u7528 <\u3001>\u3001<=\u3001>= \u8fd0\u7b97\u7b26\u8fdb\u884c\u6bd4\u8f83\u3002p1<p2\u7684\u542b\u4e49\u662f\uff1ap1 \u7ecf\u8fc7\u82e5\u5e72\u6b21\uff08\u81f3\u5c11\u4e00\u6b21\uff09++\u64cd\u4f5c\u540e\uff0c\u5c31\u4f1a\u7b49\u4e8e p2\u3002\u5176\u4ed6\u6bd4\u8f83\u65b9\u5f0f\u7684\u542b\u4e49\u4e0e\u6b64\u7c7b\u4f3c\u3002 \u5bb9\u5668 \u8fed\u4ee3\u5668\u529f\u80fd vector \u968f\u673a\u8bbf\u95ee deque \u968f\u673a\u8bbf\u95ee list \u53cc\u5411 set/multiset \u53cc\u5411 map/multimap \u53cc\u5411 stack \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 queue \u4e0d\u652f\u6301\u8fed\u4ee3\u5668 priority_queue \u4e0d\u652f\u6301\u8fed\u4ee3\u5668","title":"\u8fed\u4ee3\u5668\u529f\u80fd\u5206\u7c7b"},{"location":"cplus/cpp_stl/#_2","text":"STL \u4e2d\u6709\u7528\u4e8e\u64cd\u4f5c\u8fed\u4ee3\u5668\u7684\u4e09\u4e2a\u51fd\u6570\u6a21\u677f\uff0c\u5b83\u4eec\u662f\uff1a advance(p, n)\uff1a\u4f7f\u8fed\u4ee3\u5668 p \u5411\u524d\u6216\u5411\u540e\u79fb\u52a8 n \u4e2a\u5143\u7d20\u3002 distance(p, q)\uff1a\u8ba1\u7b97\u4e24\u4e2a\u8fed\u4ee3\u5668\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5373\u8fed\u4ee3\u5668 p \u7ecf\u8fc7\u591a\u5c11\u6b21 + + \u64cd\u4f5c\u540e\u548c\u8fed\u4ee3\u5668 q \u76f8\u7b49\u3002\u5982\u679c\u8c03\u7528\u65f6 p \u5df2\u7ecf\u6307\u5411 q \u7684\u540e\u9762\uff0c\u5219\u8fd9\u4e2a\u51fd\u6570\u4f1a\u9677\u5165\u6b7b\u5faa\u73af\u3002 iter_swap(p, q)\uff1a\u7528\u4e8e\u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668 p\u3001q \u6307\u5411\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include <list> #include <iostream> #include <algorithm> //\u8981\u4f7f\u7528\u64cd\u4f5c\u8fed\u4ee3\u5668\u7684\u51fd\u6570\u6a21\u677f\uff0c\u9700\u8981\u5305\u542b\u6b64\u6587\u4ef6 using namespace std ; int main () { int a [ 5 ] = { 1 , 2 , 3 , 4 , 5 }; list < int > lst ( a , a + 5 ); list < int >:: iterator p = lst . begin (); advance ( p , 2 ); //p\u5411\u540e\u79fb\u52a8\u4e24\u4e2a\u5143\u7d20\uff0c\u6307\u54113 cout << \"1)\" << * p << endl ; //\u8f93\u51fa 1)3 advance ( p , - 1 ); //p\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u5143\u7d20\uff0c\u6307\u54112 cout << \"2)\" << * p << endl ; //\u8f93\u51fa 2)2 list < int >:: iterator q = lst . end (); q -- ; //q \u6307\u5411 5 cout << \"3)\" << distance ( p , q ) << endl ; //\u8f93\u51fa 3)3 iter_swap ( p , q ); //\u4ea4\u6362 2 \u548c 5 cout << \"4)\" ; for ( p = lst . begin (); p != lst . end (); ++ p ) cout << * p << \" \" ; return 0 ; }","title":"\u8fed\u4ee3\u5668\u7684\u8f85\u52a9\u51fd\u6570"},{"location":"cplus/cpp_stl/#stl_1","text":"\u7b97\u6cd5\u53ef\u4ee5\u5904\u7406\u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u5904\u7406\u666e\u901a\u7684\u6570\u7ec4\u3002 \u6709\u7684\u7b97\u6cd5\u4f1a\u6539\u53d8\u5176\u6240\u4f5c\u7528\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a 1. copy\uff1a\u5c06\u4e00\u4e2a\u5bb9\u5668\u7684\u5185\u5bb9\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5bb9\u5668\u3002 2. remove\uff1a\u5728\u5bb9\u5668\u4e2d\u5220\u9664\u4e00\u4e2a\u5143\u7d20\u3002 3. random_shuffle\uff1a\u968f\u673a\u6253\u4e71\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\u3002 4. fill\uff1a\u7528\u67d0\u4e2a\u503c\u586b\u5145\u5bb9\u5668\u3002 \u6709\u7684\u7b97\u6cd5\u4e0d\u4f1a\u6539\u53d8\u5176\u6240\u4f5c\u7528\u7684\u5bb9\u5668\u3002\u4f8b\u5982\uff1a 1. find\uff1a\u5728\u5bb9\u5668\u4e2d\u67e5\u627e\u5143\u7d20\u3002 2. count_if\uff1a\u7edf\u8ba1\u5bb9\u5668\u4e2d\u7b26\u5408\u67d0\u79cd\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002 find \u6a21\u677f\u7684\u539f\u578b\u5982\u4e0b\uff1a 1 2 template < class InIt , class T > InIt find ( InIt first , InIt last , const T & val ); sort\uff0c\u7528\u4e8e\u5bf9\u5bb9\u5668\u6392\u5e8f\uff0c\u5176\u539f\u578b\u4e3a\uff1a 1 2 template < class_RandIt > void sort ( _RandIt first , _RandIt last );","title":"STL\u7b97\u6cd5"},{"location":"cplus/cpp_stl_vector/","text":"vector \u00b6","title":"bitset\u7c7b"},{"location":"cplus/cpp_stl_vector/#vector","text":"","title":"vector"},{"location":"cplus/cpp_summary/","text":"\u8fdb\u9636 \u00b6 \u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u00b6 const \u5f15\u7528 \u53ea\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <iostream> #include <string> using namespace std ; class Student { public : Student ( string name = \"\" , int age = 0 , float score = 0.0f ); //\u666e\u901a\u6784\u9020\u51fd\u6570 Student ( const Student & stu ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u58f0\u660e\uff09 public : void display (); private : string m_name ; int m_age ; float m_score ; }; Student :: Student ( string name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u5b9a\u4e49\uff09 Student :: Student ( const Student & stu ){ this -> m_name = stu . m_name ; this -> m_age = stu . m_age ; this -> m_score = stu . m_score ; cout << \"Copy constructor was called.\" << endl ; } void Student :: display (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } int main (){ Student stu1 ( \"\u5c0f\u660e\" , 16 , 90.5 ); Student stu2 = stu1 ; //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Student stu3 ( stu1 ); //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 stu1 . display (); stu2 . display (); stu3 . display (); return 0 ; } \u5728\u5b9a\u4e49\u7684\u540c\u65f6\u8fdb\u884c\u8d4b\u503c\u53eb\u505a\u521d\u59cb\u5316\uff08Initialization\uff09\uff0c\u5b9a\u4e49\u5b8c\u6210\u4ee5\u540e\u518d\u8d4b\u503c\uff08\u4e0d\u7ba1\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u6709\u6ca1\u6709\u8d4b\u503c\uff09\u5c31\u53eb\u505a\u8d4b\u503c\uff08Assignment\uff09\u3002\u521d\u59cb\u5316\u53ea\u80fd\u6709\u4e00\u6b21\uff0c\u8d4b\u503c\u53ef\u4ee5\u6709\u591a\u6b21\u3002 \u5f53\u4ee5\u62f7\u8d1d\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1b\u5f53\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u8d4b\u503c\u65f6\uff0c\u4f1a\u8c03\u7528\u91cd\u8f7d\u8fc7\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 1","title":"\u9ad8\u7ea7\u4e3b\u9898"},{"location":"cplus/cpp_summary/#_1","text":"","title":"\u8fdb\u9636"},{"location":"cplus/cpp_summary/#_2","text":"const \u5f15\u7528 \u53ea\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5c31\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <iostream> #include <string> using namespace std ; class Student { public : Student ( string name = \"\" , int age = 0 , float score = 0.0f ); //\u666e\u901a\u6784\u9020\u51fd\u6570 Student ( const Student & stu ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u58f0\u660e\uff09 public : void display (); private : string m_name ; int m_age ; float m_score ; }; Student :: Student ( string name , int age , float score ) : m_name ( name ), m_age ( age ), m_score ( score ){ } //\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff08\u5b9a\u4e49\uff09 Student :: Student ( const Student & stu ){ this -> m_name = stu . m_name ; this -> m_age = stu . m_age ; this -> m_score = stu . m_score ; cout << \"Copy constructor was called.\" << endl ; } void Student :: display (){ cout << m_name << \"\u7684\u5e74\u9f84\u662f\" << m_age << \"\uff0c\u6210\u7ee9\u662f\" << m_score << endl ; } int main (){ Student stu1 ( \"\u5c0f\u660e\" , 16 , 90.5 ); Student stu2 = stu1 ; //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Student stu3 ( stu1 ); //\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570 stu1 . display (); stu2 . display (); stu3 . display (); return 0 ; } \u5728\u5b9a\u4e49\u7684\u540c\u65f6\u8fdb\u884c\u8d4b\u503c\u53eb\u505a\u521d\u59cb\u5316\uff08Initialization\uff09\uff0c\u5b9a\u4e49\u5b8c\u6210\u4ee5\u540e\u518d\u8d4b\u503c\uff08\u4e0d\u7ba1\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u6709\u6ca1\u6709\u8d4b\u503c\uff09\u5c31\u53eb\u505a\u8d4b\u503c\uff08Assignment\uff09\u3002\u521d\u59cb\u5316\u53ea\u80fd\u6709\u4e00\u6b21\uff0c\u8d4b\u503c\u53ef\u4ee5\u6709\u591a\u6b21\u3002 \u5f53\u4ee5\u62f7\u8d1d\u7684\u65b9\u5f0f\u521d\u59cb\u5316\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff1b\u5f53\u7ed9\u4e00\u4e2a\u5bf9\u8c61\u8d4b\u503c\u65f6\uff0c\u4f1a\u8c03\u7528\u91cd\u8f7d\u8fc7\u7684\u8d4b\u503c\u8fd0\u7b97\u7b26\u3002 1","title":"\u62f7\u8d1d\u6784\u9020\u51fd\u6570"},{"location":"cplus/cpp_ysfcz/","text":"\u8fd0\u7b97\u7b26\u91cd\u8f7d \u00b6 1 2 3 \u8fd4\u56de\u503c\u7c7b\u578b operator \u8fd0\u7b97\u7b26\u540d\u79f0 ( \u5f62\u53c2\u8868\u5217 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> using namespace std ; class complex { public : complex (); complex ( double real , double imag ); public : //\u58f0\u660e\u8fd0\u7b97\u7b26\u91cd\u8f7d complex operator + ( const complex & A ) const ; void display () const ; private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; complex :: complex () : m_real ( 0.0 ), m_imag ( 0.0 ){ } complex :: complex ( double real , double imag ) : m_real ( real ), m_imag ( imag ){ } //\u5b9e\u73b0\u8fd0\u7b97\u7b26\u91cd\u8f7d complex complex :: operator + ( const complex & A ) const { complex B ; B . m_real = this -> m_real + A . m_real ; B . m_imag = this -> m_imag + A . m_imag ; return B ; } void complex :: display () const { cout << m_real << \" + \" << m_imag << \"i\" << endl ; } int main (){ complex c1 ( 4.3 , 5.8 ); complex c2 ( 2.4 , 3.7 ); complex c3 ; c3 = c1 + c2 ; c3 . display (); return 0 ; } 1 2 c3 = c1 + c2 ; c3 = c1 . operator + ( c2 ); \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570--->\u53cb\u5143\u51fd\u6570\u3002 \u5e76\u4e0d\u662f\u6240\u6709\u7684\u8fd0\u7b97\u7b26\u90fd\u53ef\u4ee5\u91cd\u8f7d\u3002\u80fd\u591f\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u5305\u62ec\uff1a + - * / % ^ & | ~ ! = < > += -= = /= %= ^= &= |= << >> <<= >>= == != <= >= && || ++ -- , -> -> () [] new new[] delete delete[] \u4e0a\u8ff0\u8fd0\u7b97\u7b26\u4e2d\uff0c[]\u662f\u4e0b\u6807\u8fd0\u7b97\u7b26\uff0c()\u662f\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u3002\u81ea\u589e\u81ea\u51cf\u8fd0\u7b97\u7b26\u7684\u524d\u7f6e\u548c\u540e\u7f6e\u5f62\u5f0f\u90fd\u53ef\u4ee5\u91cd\u8f7d\u3002\u957f\u5ea6\u8fd0\u7b97\u7b26sizeof\u3001\u6761\u4ef6\u8fd0\u7b97\u7b26: ?\u3001\u6210\u5458\u9009\u62e9\u7b26.\u548c\u57df\u89e3\u6790\u8fd0\u7b97\u7b26::\u4e0d\u80fd\u88ab\u91cd\u8f7d\u3002 \u91cd\u8f7d\u4e0d\u80fd\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u6027\u3002 \u91cd\u8f7d\u4e0d\u4f1a\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u7528\u6cd5\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u80fd\u6709\u9ed8\u8ba4\u7684\u53c2\u6570\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570\u3002 \u7bad\u5934\u8fd0\u7b97\u7b26->\u3001\u4e0b\u6807\u8fd0\u7b97\u7b26[ ]\u3001\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26( )\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26=\u53ea\u80fd\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 #include <iostream> #include <cmath> using namespace std ; //\u590d\u6570\u7c7b class Complex { public : //\u6784\u9020\u51fd\u6570 Complex ( double real = 0.0 , double imag = 0.0 ) : m_real ( real ), m_imag ( imag ){ } public : //\u8fd0\u7b97\u7b26\u91cd\u8f7d //\u4ee5\u5168\u5c40\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d friend Complex operator + ( const Complex & c1 , const Complex & c2 ); friend Complex operator - ( const Complex & c1 , const Complex & c2 ); friend Complex operator * ( const Complex & c1 , const Complex & c2 ); friend Complex operator / ( const Complex & c1 , const Complex & c2 ); friend bool operator == ( const Complex & c1 , const Complex & c2 ); friend bool operator != ( const Complex & c1 , const Complex & c2 ); //\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d Complex & operator += ( const Complex & c ); Complex & operator -= ( const Complex & c ); Complex & operator *= ( const Complex & c ); Complex & operator /= ( const Complex & c ); public : //\u6210\u5458\u51fd\u6570 double real () const { return m_real ; } double imag () const { return m_imag ; } private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; //\u91cd\u8f7d+\u8fd0\u7b97\u7b26 Complex operator + ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real + c2 . m_real ; c . m_imag = c1 . m_imag + c2 . m_imag ; return c ; } //\u91cd\u8f7d-\u8fd0\u7b97\u7b26 Complex operator - ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real - c2 . m_real ; c . m_imag = c1 . m_imag - c2 . m_imag ; return c ; } //\u91cd\u8f7d*\u8fd0\u7b97\u7b26 (a+bi) * (c+di) = (ac-bd) + (bc+ad)i Complex operator * ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real * c2 . m_real - c1 . m_imag * c2 . m_imag ; c . m_imag = c1 . m_imag * c2 . m_real + c1 . m_real * c2 . m_imag ; return c ; } //\u91cd\u8f7d/\u8fd0\u7b97\u7b26 (a+bi) / (c+di) = [(ac+bd) / (c\u00b2+d\u00b2)] + [(bc-ad) / (c\u00b2+d\u00b2)]i Complex operator / ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = ( c1 . m_real * c2 . m_real + c1 . m_imag * c2 . m_imag ) / ( pow ( c2 . m_real , 2 ) + pow ( c2 . m_imag , 2 )); c . m_imag = ( c1 . m_imag * c2 . m_real - c1 . m_real * c2 . m_imag ) / ( pow ( c2 . m_real , 2 ) + pow ( c2 . m_imag , 2 )); return c ; } //\u91cd\u8f7d==\u8fd0\u7b97\u7b26 bool operator == ( const Complex & c1 , const Complex & c2 ){ if ( c1 . m_real == c2 . m_real && c1 . m_imag == c2 . m_imag ){ return true ; } else { return false ; } } //\u91cd\u8f7d!=\u8fd0\u7b97\u7b26 bool operator != ( const Complex & c1 , const Complex & c2 ){ if ( c1 . m_real != c2 . m_real || c1 . m_imag != c2 . m_imag ){ return true ; } else { return false ; } } //\u91cd\u8f7d+=\u8fd0\u7b97\u7b26 Complex & Complex :: operator += ( const Complex & c ){ this -> m_real += c . m_real ; this -> m_imag += c . m_imag ; return * this ; } //\u91cd\u8f7d-=\u8fd0\u7b97\u7b26 Complex & Complex :: operator -= ( const Complex & c ){ this -> m_real -= c . m_real ; this -> m_imag -= c . m_imag ; return * this ; } //\u91cd\u8f7d*=\u8fd0\u7b97\u7b26 Complex & Complex :: operator *= ( const Complex & c ){ this -> m_real = this -> m_real * c . m_real - this -> m_imag * c . m_imag ; this -> m_imag = this -> m_imag * c . m_real + this -> m_real * c . m_imag ; return * this ; } //\u91cd\u8f7d/=\u8fd0\u7b97\u7b26 Complex & Complex :: operator /= ( const Complex & c ){ this -> m_real = ( this -> m_real * c . m_real + this -> m_imag * c . m_imag ) / ( pow ( c . m_real , 2 ) + pow ( c . m_imag , 2 )); this -> m_imag = ( this -> m_imag * c . m_real - this -> m_real * c . m_imag ) / ( pow ( c . m_real , 2 ) + pow ( c . m_imag , 2 )); return * this ; } int main (){ Complex c1 ( 25 , 35 ); Complex c2 ( 10 , 20 ); Complex c3 ( 1 , 2 ); Complex c4 ( 4 , 9 ); Complex c5 ( 34 , 6 ); Complex c6 ( 80 , 90 ); Complex c7 = c1 + c2 ; Complex c8 = c1 - c2 ; Complex c9 = c1 * c2 ; Complex c10 = c1 / c2 ; cout << \"c7 = \" << c7 . real () << \" + \" << c7 . imag () << \"i\" << endl ; cout << \"c8 = \" << c8 . real () << \" + \" << c8 . imag () << \"i\" << endl ; cout << \"c9 = \" << c9 . real () << \" + \" << c9 . imag () << \"i\" << endl ; cout << \"c10 = \" << c10 . real () << \" + \" << c10 . imag () << \"i\" << endl ; c3 += c1 ; c4 -= c2 ; c5 *= c2 ; c6 /= c2 ; cout << \"c3 = \" << c3 . real () << \" + \" << c3 . imag () << \"i\" << endl ; cout << \"c4 = \" << c4 . real () << \" + \" << c4 . imag () << \"i\" << endl ; cout << \"c5 = \" << c5 . real () << \" + \" << c5 . imag () << \"i\" << endl ; cout << \"c6 = \" << c6 . real () << \" + \" << c6 . imag () << \"i\" << endl ; if ( c1 == c2 ){ cout << \"c1 == c2\" << endl ; } if ( c1 != c2 ){ cout << \"c1 != c2\" << endl ; } return 0 ; }","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"cplus/cpp_ysfcz/#_1","text":"1 2 3 \u8fd4\u56de\u503c\u7c7b\u578b operator \u8fd0\u7b97\u7b26\u540d\u79f0 ( \u5f62\u53c2\u8868\u5217 ){ //TODO: } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> using namespace std ; class complex { public : complex (); complex ( double real , double imag ); public : //\u58f0\u660e\u8fd0\u7b97\u7b26\u91cd\u8f7d complex operator + ( const complex & A ) const ; void display () const ; private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; complex :: complex () : m_real ( 0.0 ), m_imag ( 0.0 ){ } complex :: complex ( double real , double imag ) : m_real ( real ), m_imag ( imag ){ } //\u5b9e\u73b0\u8fd0\u7b97\u7b26\u91cd\u8f7d complex complex :: operator + ( const complex & A ) const { complex B ; B . m_real = this -> m_real + A . m_real ; B . m_imag = this -> m_imag + A . m_imag ; return B ; } void complex :: display () const { cout << m_real << \" + \" << m_imag << \"i\" << endl ; } int main (){ complex c1 ( 4.3 , 5.8 ); complex c2 ( 2.4 , 3.7 ); complex c3 ; c3 = c1 + c2 ; c3 . display (); return 0 ; } 1 2 c3 = c1 + c2 ; c3 = c1 . operator + ( c2 ); \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u4ec5\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u8fd8\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570--->\u53cb\u5143\u51fd\u6570\u3002 \u5e76\u4e0d\u662f\u6240\u6709\u7684\u8fd0\u7b97\u7b26\u90fd\u53ef\u4ee5\u91cd\u8f7d\u3002\u80fd\u591f\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u5305\u62ec\uff1a + - * / % ^ & | ~ ! = < > += -= = /= %= ^= &= |= << >> <<= >>= == != <= >= && || ++ -- , -> -> () [] new new[] delete delete[] \u4e0a\u8ff0\u8fd0\u7b97\u7b26\u4e2d\uff0c[]\u662f\u4e0b\u6807\u8fd0\u7b97\u7b26\uff0c()\u662f\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26\u3002\u81ea\u589e\u81ea\u51cf\u8fd0\u7b97\u7b26\u7684\u524d\u7f6e\u548c\u540e\u7f6e\u5f62\u5f0f\u90fd\u53ef\u4ee5\u91cd\u8f7d\u3002\u957f\u5ea6\u8fd0\u7b97\u7b26sizeof\u3001\u6761\u4ef6\u8fd0\u7b97\u7b26: ?\u3001\u6210\u5458\u9009\u62e9\u7b26.\u548c\u57df\u89e3\u6790\u8fd0\u7b97\u7b26::\u4e0d\u80fd\u88ab\u91cd\u8f7d\u3002 \u91cd\u8f7d\u4e0d\u80fd\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u548c\u7ed3\u5408\u6027\u3002 \u91cd\u8f7d\u4e0d\u4f1a\u6539\u53d8\u8fd0\u7b97\u7b26\u7684\u7528\u6cd5\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u4e0d\u80fd\u6709\u9ed8\u8ba4\u7684\u53c2\u6570\u3002 \u8fd0\u7b97\u7b26\u91cd\u8f7d\u51fd\u6570\u65e2\u53ef\u4ee5\u4f5c\u4e3a\u7c7b\u7684\u6210\u5458\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5168\u5c40\u51fd\u6570\u3002 \u7bad\u5934\u8fd0\u7b97\u7b26->\u3001\u4e0b\u6807\u8fd0\u7b97\u7b26[ ]\u3001\u51fd\u6570\u8c03\u7528\u8fd0\u7b97\u7b26( )\u3001\u8d4b\u503c\u8fd0\u7b97\u7b26=\u53ea\u80fd\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 #include <iostream> #include <cmath> using namespace std ; //\u590d\u6570\u7c7b class Complex { public : //\u6784\u9020\u51fd\u6570 Complex ( double real = 0.0 , double imag = 0.0 ) : m_real ( real ), m_imag ( imag ){ } public : //\u8fd0\u7b97\u7b26\u91cd\u8f7d //\u4ee5\u5168\u5c40\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d friend Complex operator + ( const Complex & c1 , const Complex & c2 ); friend Complex operator - ( const Complex & c1 , const Complex & c2 ); friend Complex operator * ( const Complex & c1 , const Complex & c2 ); friend Complex operator / ( const Complex & c1 , const Complex & c2 ); friend bool operator == ( const Complex & c1 , const Complex & c2 ); friend bool operator != ( const Complex & c1 , const Complex & c2 ); //\u4ee5\u6210\u5458\u51fd\u6570\u7684\u5f62\u5f0f\u91cd\u8f7d Complex & operator += ( const Complex & c ); Complex & operator -= ( const Complex & c ); Complex & operator *= ( const Complex & c ); Complex & operator /= ( const Complex & c ); public : //\u6210\u5458\u51fd\u6570 double real () const { return m_real ; } double imag () const { return m_imag ; } private : double m_real ; //\u5b9e\u90e8 double m_imag ; //\u865a\u90e8 }; //\u91cd\u8f7d+\u8fd0\u7b97\u7b26 Complex operator + ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real + c2 . m_real ; c . m_imag = c1 . m_imag + c2 . m_imag ; return c ; } //\u91cd\u8f7d-\u8fd0\u7b97\u7b26 Complex operator - ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real - c2 . m_real ; c . m_imag = c1 . m_imag - c2 . m_imag ; return c ; } //\u91cd\u8f7d*\u8fd0\u7b97\u7b26 (a+bi) * (c+di) = (ac-bd) + (bc+ad)i Complex operator * ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = c1 . m_real * c2 . m_real - c1 . m_imag * c2 . m_imag ; c . m_imag = c1 . m_imag * c2 . m_real + c1 . m_real * c2 . m_imag ; return c ; } //\u91cd\u8f7d/\u8fd0\u7b97\u7b26 (a+bi) / (c+di) = [(ac+bd) / (c\u00b2+d\u00b2)] + [(bc-ad) / (c\u00b2+d\u00b2)]i Complex operator / ( const Complex & c1 , const Complex & c2 ){ Complex c ; c . m_real = ( c1 . m_real * c2 . m_real + c1 . m_imag * c2 . m_imag ) / ( pow ( c2 . m_real , 2 ) + pow ( c2 . m_imag , 2 )); c . m_imag = ( c1 . m_imag * c2 . m_real - c1 . m_real * c2 . m_imag ) / ( pow ( c2 . m_real , 2 ) + pow ( c2 . m_imag , 2 )); return c ; } //\u91cd\u8f7d==\u8fd0\u7b97\u7b26 bool operator == ( const Complex & c1 , const Complex & c2 ){ if ( c1 . m_real == c2 . m_real && c1 . m_imag == c2 . m_imag ){ return true ; } else { return false ; } } //\u91cd\u8f7d!=\u8fd0\u7b97\u7b26 bool operator != ( const Complex & c1 , const Complex & c2 ){ if ( c1 . m_real != c2 . m_real || c1 . m_imag != c2 . m_imag ){ return true ; } else { return false ; } } //\u91cd\u8f7d+=\u8fd0\u7b97\u7b26 Complex & Complex :: operator += ( const Complex & c ){ this -> m_real += c . m_real ; this -> m_imag += c . m_imag ; return * this ; } //\u91cd\u8f7d-=\u8fd0\u7b97\u7b26 Complex & Complex :: operator -= ( const Complex & c ){ this -> m_real -= c . m_real ; this -> m_imag -= c . m_imag ; return * this ; } //\u91cd\u8f7d*=\u8fd0\u7b97\u7b26 Complex & Complex :: operator *= ( const Complex & c ){ this -> m_real = this -> m_real * c . m_real - this -> m_imag * c . m_imag ; this -> m_imag = this -> m_imag * c . m_real + this -> m_real * c . m_imag ; return * this ; } //\u91cd\u8f7d/=\u8fd0\u7b97\u7b26 Complex & Complex :: operator /= ( const Complex & c ){ this -> m_real = ( this -> m_real * c . m_real + this -> m_imag * c . m_imag ) / ( pow ( c . m_real , 2 ) + pow ( c . m_imag , 2 )); this -> m_imag = ( this -> m_imag * c . m_real - this -> m_real * c . m_imag ) / ( pow ( c . m_real , 2 ) + pow ( c . m_imag , 2 )); return * this ; } int main (){ Complex c1 ( 25 , 35 ); Complex c2 ( 10 , 20 ); Complex c3 ( 1 , 2 ); Complex c4 ( 4 , 9 ); Complex c5 ( 34 , 6 ); Complex c6 ( 80 , 90 ); Complex c7 = c1 + c2 ; Complex c8 = c1 - c2 ; Complex c9 = c1 * c2 ; Complex c10 = c1 / c2 ; cout << \"c7 = \" << c7 . real () << \" + \" << c7 . imag () << \"i\" << endl ; cout << \"c8 = \" << c8 . real () << \" + \" << c8 . imag () << \"i\" << endl ; cout << \"c9 = \" << c9 . real () << \" + \" << c9 . imag () << \"i\" << endl ; cout << \"c10 = \" << c10 . real () << \" + \" << c10 . imag () << \"i\" << endl ; c3 += c1 ; c4 -= c2 ; c5 *= c2 ; c6 /= c2 ; cout << \"c3 = \" << c3 . real () << \" + \" << c3 . imag () << \"i\" << endl ; cout << \"c4 = \" << c4 . real () << \" + \" << c4 . imag () << \"i\" << endl ; cout << \"c5 = \" << c5 . real () << \" + \" << c5 . imag () << \"i\" << endl ; cout << \"c6 = \" << c6 . real () << \" + \" << c6 . imag () << \"i\" << endl ; if ( c1 == c2 ){ cout << \"c1 == c2\" << endl ; } if ( c1 != c2 ){ cout << \"c1 != c2\" << endl ; } return 0 ; }","title":"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},{"location":"cprogram/c_base/","text":"\u57fa\u672c\u6982\u5ff5 \u00b6 \u4f4d\u4e0e\u5b57\u8282 \u00b6 \u4f4d(bit,b)\uff0c\u5b57\u8282(byte,Byte,B) 1 2 3 4 5 1byte = 8 bit \u200b\u200b1KB = 1024B 1MB = 1024KB 1GB = 1024MB 1TB = 1024MB \u4f4d\u8fd0\u7b97 \u00b6 \u5f02\u6216(^) \u5f02\u8005\u6216 \u5de6\u79fb\u8fd0\u7b97\uff1am<<n\u8868\u793a\u628am\u5de6\u79fbn\u4f4d\uff0c\u6700\u5de6\u8fb9\u7684n\u4f4d\u88ab\u4e22\u5f03\uff0c\u53f3\u8fb9\u8865\u4e0an\u4e2a0\u300200001010<<2=00101000 \u53f3\u79fb\u8fd0\u7b97\uff1am>>n\u8868\u793a\u628am\u53f3\u79fbn\u4f4d\uff0c\u6700\u53f3\u8fb9\u7684n\u4f4d\u88ab\u4e22\u5f03\uff0c\u5de6\u8fb9\u7684\u60c5\u51b5\u5206\u4e24\u79cd\uff1a \u5982\u679c\u6570\u5b57\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6570\u503c\uff0c\u5219\u75280\u586b\u8865\u6700\u5de6\u8fb9\u7684n\u4f4d\u300200001010>>2=00000010 \u5982\u679c\u6570\u5b57\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u6570\u503c\uff0c\u5219\u7528\u6570\u5b57\u7684\u7b26\u53f7\u4f4d\u586b\u8865 \u6700\u5de6\u8fb9\u7684n\u4f4d\u3002(\u5982\u679c\u6570\u5b57\u662f\u6b63\u6570\uff0c\u53f3\u79fb\u4e4b\u540e\u5de6\u8fb9\u88650\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u5de6\u8fb9\u88651)\u300210001010>>3=11110001 typedef & #define \u00b6 typedef\u5141\u8bb8\u4e3a\u5404\u79cd\u6570\u636e\u8d77\u65b0\u7684\u540d\u5b57\u3002 1 2 typedef char * ptr_to_char ptr_to_char a ; //\u58f0\u660ea\u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488 \u5e94\u8be5\u7528typedef\u800c\u4e0d\u662f#define\u6765\u521b\u5efa\u65b0\u7684\u7c7b\u578b\u540d\uff0c\u56e0\u4e3a#define\u4e0d\u80fd\u6b63\u786e\u5904\u7406\u6307\u9488\u7c7b\u578b\u3002 1 2 #define d_ptr_to_char char * d_ptr_to_char a , b ; //b\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a\u5b57\u7b26\u800c\u4e0d\u662f\u6307\u9488 define\u6307\u4ee4\u662f\u53e6\u4e00\u79cd\u521b\u5efa\u540d\u5b57\u5e38\u91cf\u7684\u673a\u5236\u3002 1 2 3 4 #define MAX_ELEMENTS 50 int const max_elements = 50 char hello [ MAX_ELEMENTS ]; //const\u53d8\u91cf\u53ea\u80fd\u4f7f\u7528\u4e8e\u5141\u8bb8\u4f7f\u7528\u53d8\u91cf\u7684\u5730\u65b9 const\u5173\u952e\u5b57 \u00b6 \u4ee5\u4e0b2\u6761\u8bed\u53e5\u90fd\u628aa\u58f0\u660e\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u5b83\u7684\u503c\u4e0d\u80fd\u88ab\u4fee\u6539\u3002(\u9009\u62e9\u4e00\u79cd\u597d\u7406\u89e3\u7684\u5e76\u4e00\u76f4\u575a\u6301\u4e0b\u53bb) 1 2 int const a = 15 ; const int a = 15 ; \u7531\u4e8ea\u7684\u503c\u65e0\u6cd5\u88ab\u4fee\u6539\uff0c\u4e5f\u65e0\u6cd5\u88ab\u4efb\u4f55\u4e1c\u897f\u8d4b\u503c\uff0c\u67092\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5b83\u83b7\u5f97\u503c\uff1a \u5728\u58f0\u660e\u7684\u65f6\u5019\u5bf9\u5b83\u521d\u59cb\u5316 \u5728\u51fd\u6570\u4e2d\u58f0\u660econst\u7684\u5f62\u53c2\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u4f1a\u5f97\u5230\u5b9e\u53c2\u7684\u503c const\u4e0e\u6307\u9488\u7684\u7ed3\u5408\u4f1a\u5f71\u54cd \u6307\u9488\u53d8\u91cf \u6216\u8005 \u5b83\u6240\u6307\u5411\u7684\u5b9e\u4f53 \u3002 1 2 3 4 int * pi ; //\u666e\u901a\u6307\u9488 int const * pci ; //\u6307\u5411\u6574\u578b\u5e38\u91cf\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u4fee\u6539\u6307\u9488\u7684\u503c\uff0c\u4f46\u4e0d\u53ef\u4ee5\u4fee\u6539\u5b83\u6240\u6307\u5411\u7684\u503c int * const cpi ; //\u6307\u5411\u6574\u578b\u7684\u5e38\u91cf\u6307\u9488\uff0c\u6307\u9488\u662f\u5e38\u91cf\u4e0d\u53ef\u4fee\u6539\uff0c\u5b83\u6240\u6307\u5411\u7684\u6574\u578b\u503c\u53ef\u4fee\u6539 int const * const cpci ; //\u6307\u9488\u672c\u8eab\u4e0e\u5b83\u6240\u6307\u5411\u7684\u503c\u90fd\u4e0d\u53ef\u88ab\u4fee\u6539 \u4f5c\u7528\u57df \u00b6 \u7f16\u8bd1\u5668\u53ef\u4ee5\u786e\u8ba44\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u2013\u6587\u4ef6\u4f5c\u7528\u57df\u3001\u51fd\u6570\u4f5c\u7528\u57df\u3001\u4ee3\u7801\u5757\u4f5c\u7528\u57df\u548c\u51fd\u6570\u539f\u578b\u4f5c\u7528\u57df\u3002 \u94fe\u63a5\u5c5e\u6027 \u00b6 \u94fe\u63a5\u5c5e\u6027\uff1aexternal(\u5916\u90e8)\u3001internal(\u5185\u90e8)\u3001node(\u65e0)\u3002 \u5173\u952e\u5b57extern\u548cstatic\u7528\u4e8e\u5728\u58f0\u660e\u4e2d\u4fee\u6539\u6807\u8bc6\u7b26\u7684\u94fe\u63a5\u5c5e\u6027\u3002 \u5f53extern\u5173\u952e\u5b57\u7528\u4e8e\u6e90\u6587\u4ef6\u4e2d\u4e00\u4e2a\u6807\u8bc6\u7b26\u7684\u7b2c\u4e00\u6b21\u58f0\u660e\u65f6\uff0c\u5b83\u6307\u5b9a\u8be5\u6807\u8bc6\u7b26\u5177\u6709external\u94fe\u63a5\u5c5e\u6027\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u7528\u4e8e\u8be5\u6807\u8bc6\u7b26\u7684\u7b2c2\u6b21\u6216\u4ee5\u540e\u7684\u58f0\u660e\u65f6\uff0c\u5b83\u5e76\u4e0d\u4f1a\u66f4\u6539\u7531\u7b2c\u4e00\u6b21\u58f0\u660e\u6240\u6307\u5b9a\u7684\u94fe\u63a5\u5c5e\u6027\u3002 1 2 3 4 5 6 7 8 static int i ; //----1 int func () { int j ; extern int k ; extern int i ; //----2 } //\u58f0\u660e2\u5e76\u4e0d\u4fee\u6539\u58f0\u660e1\u6240\u6307\u5b9a\u7684\u53d8\u91cfi\u7684\u94fe\u63a5\u5c5e\u6027 \u5b58\u50a8\u7c7b\u578b \u00b6 \u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b(storage class)\u662f\u6307\u5b58\u50a8\u53d8\u91cf\u503c\u5f97\u5185\u5b58\u7c7b\u578b\u3002\u51b3\u5b9a\u53d8\u91cf\u4f55\u65f6\u521b\u5efa\u3001\u4f55\u65f6\u9500\u6bc1\u4ee5\u53ca\u5b83\u7684\u503c\u5c06\u4fdd\u6301\u591a\u4e45\u3002 \u5b58\u50a8\u53d8\u91cf\u7684\u4e09\u4e2a\u5730\u65b9\uff1a\u666e\u901a\u5185\u5b58\u3001\u8fd0\u884c\u65f6\u5806\u6808\u3001\u786c\u4ef6\u5bc4\u5b58\u5668\u3002 \u53d8\u91cf\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u578b\u53d6\u51b3\u4e8e\u5b83\u7684\u58f0\u660e\u4f4d\u7f6e\u3002 \u51e1\u662f\u5728\u4efb\u4f55\u4ee3\u7801\u5757\u4e4b\u5916\u58f0\u660e\u7684\u53d8\u91cf\u603b\u662f\u5b58\u50a8\u4e8e\u9759\u6001\u5185\u5b58\u4e2d\uff0c\u8fd9\u7c7b\u53d8\u91cf\u79f0\u4e3a\u9759\u6001(static)\u53d8\u91cf(main\u51fd\u6570\u91cc\u58f0\u660e\u7684\u53d8\u91cf\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf)\u3002 \u5728\u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u578b\u662f\u81ea\u52a8\u7684(automatic)\uff0c\u5b58\u50a8\u5728\u5806\u6808\u4e2d\uff0c\u79f0\u4e3a\u81ea\u52a8(auto)\u53d8\u91cf\u3002 \u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\u52a0\u4e0astatic\u5173\u952e\u5b57\uff0c\u5219\u4f7f\u5b83\u7684\u5b58\u50a8\u7c7b\u578b\u4ece\u81ea\u52a8\u53d8\u4e3a\u9759\u6001\u3002\u6ce8\u610f\uff1a\u4fee\u6539\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\u5e76\u4e0d\u8868\u793a\u4fee\u6539\u8be5\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u3002 \u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u4e0d\u80fd\u58f0\u660e\u4e3a\u9759\u6001\uff0c\u56e0\u4e3a\u5b9e\u53c2\u603b\u662f\u5728\u5806\u6808\u4e2d\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u7528\u4e8e\u652f\u6301\u9012\u5f52\u3002 static\u5173\u952e\u5b57 \u00b6 \u5f53static\u5173\u952e\u5b57\u7528\u4e8e\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u6216\u7528\u4e8e\u4ee3\u7801\u5757\u4e4b\u5916\u7684\u53d8\u91cf\u58f0\u660e\u65f6\uff0cstatic\u5173\u952e\u5b57\u7528\u4e8e\u4fee\u6539\u6807\u8bc6\u7b26\u7684\u94fe\u63a5\u5c5e\u6027\uff0c\u4eceexternal\u6539\u4e3ainternal,\u4f46\u6807\u8bc6\u7b26\u7684\u5b58\u50a8\u7c7b\u578b\u548c\u4f5c\u7528\u57df\u4e0d\u53d7\u5f71\u54cd\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u51fd\u6570\u6216\u53d8\u91cf\u53ea\u80fd\u5728\u58f0\u660e\u5b83\u4eec\u7684\u6e90\u6587\u4ef6\u4e2d\u8bbf\u95ee\u3002 \u5f53static\u5173\u952e\u5b57\u7528\u4e8e\u4ee3\u7801\u5757\u5185\u90e8\u7684\u53d8\u91cf\u58f0\u660e\u65f6\uff0cstatic\u5173\u952e\u5b57\u7528\u4e8e\u4fee\u6539\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\uff0c\u4ece\u81ea\u52a8\u53d8\u91cf\u4fee\u6539\u4e3a\u9759\u6001\u53d8\u91cf\uff0c\u4f46\u53d8\u91cf\u7684\u94fe\u63a5\u5c5e\u6027\u548c\u4f5c\u7528\u57df\u4e0d\u53d7\u5f71\u54cd\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u53d8\u91cf\u5728\u7a0b\u5e8f\u6267\u884c\u4e4b\u524d\u521b\u5efa\uff0c\u5e76\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u6267\u884c\u671f\u95f4\u4e00\u76f4\u5b58\u5728\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u5728\u4ee3\u7801\u5757\u5f00\u59cb\u6267\u884c\u65f6\u521b\u5efa\uff0c\u5728\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\u540e\u9500\u6bc1 \u64cd\u4f5c\u7b26\u4e0e\u8868\u8fbe\u5f0f \u00b6 ++&\u2013\u64cd\u4f5c\u7b26 \u00b6 ++&\u2013\u64cd\u4f5c\u7b26\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u800c\u4e0d\u662f\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5b83\u7684\u64cd\u4f5c\u6570\u3002\u64cd\u4f5c\u7b26\u5b9e\u9645\u53ea\u8981\u6c42\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u2018\u5de6\u503c\u2019\uff0c\u53ea\u80fd\u4f5c\u7528\u4e8e\u53ef\u4ee5\u4f4d\u4e8e\u8d4b\u503c\u7b26\u53f7\u5de6\u8fb9\u7684\u8868\u8fbe\u5f0f\u3002 \u524d\u7f00\u548c\u540e\u7f00\u7684\u589e\u503c\u64cd\u4f5c\u7b26\u90fd\u590d\u5236\u4e00\u4efd\u53d8\u91cf\u503c\u5f97\u62f7\u8d1d\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u7ed3\u679c\u4e0d\u662f\u88ab\u5b83\u4eec\u6240\u4fee\u6539\u7684\u53d8\u91cf\uff0c\u800c\u662f\u53d8\u91cf\u503c\u7684\u62f7\u8d1d\u3002 1 ++ a = 10 ; ++a\u7684\u7ed3\u679c\u662fa\u503c\u5f97\u62f7\u8d1d\uff0c\u5e76\u4e0d\u662f\u53d8\u91cf\u672c\u8eab\uff0c\u65e0\u6cd5\u5411\u4e00\u4e2a\u503c\u8fdb\u884c\u8d4b\u503c\u3002 \u903b\u8f91\u64cd\u4f5c\u7b26\u4e3a\u201c\u77ed\u8def\u6c42\u503c\u201d\u3002 \u5de6\u503c&\u53f3\u503c \u00b6 \u5de6\u503c\uff1a\u53ef\u4ee5\u5b58\u50a8\u7ed3\u679c\u503c\u7684\u5730\u70b9 \u53f3\u503c\uff1a\u6307\u5b9a\u4e00\u4e2a\u503c 1 2 3 int a , * pi ; pi =& a ; * pi = 20 ; \u7b2c\u4e8c\u6761\u8bed\u53e5\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5de6\u503c\uff0c\u6307\u9488pi\u7684\u503c\u662f*\u5185\u5b58\u4e2d\u67d0\u4e2a\u7279\u5b9a\u4f4d\u7f6e\u7684\u5730\u5740\uff0c\u64cd\u4f5c\u7b26\u4f7f\u673a\u5668\u6307\u5411\u90a3\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5b83\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\u65f6\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6307\u5b9a\u9700\u8981\u8fdb\u884c\u4fee\u6539\u7684\u4f4d\u7f6e\u3002\u5f53\u5b83\u4f5c\u4e3a\u53f3\u503c\u4f7f\u7528\u65f6\uff0c\u5b83\u5c31\u63d0\u53d6\u5f53\u524d\u5b58\u50a8\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002 \u8bed\u53e5 \u00b6 C\u6700\u7b80\u5355\u7684\u8bed\u53e5\u662f\u7a7a\u8bed\u53e5\uff0c\u4ed6\u672c\u8eab\u53ea\u542b\u6709\u4e00\u4e2a\u5206\u53f7\u3002 1 for (;;) \u5f53\u4f60\u9700\u8981\u5faa\u73af\u4f53\u81f3\u5c11\u6267\u884c\u4e00\u6b21\u65f6\uff0c\u9009\u62e9do\u3002 1 2 3 4 5 6 do { func (); break ; ... } while ( 0 ); \u6307\u9488 \u00b6 \u540d\u5b57\u4e0e\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5173\u8054\u5e76\u4e0d\u662f\u786c\u4ef6\u63d0\u4f9b\u7684\uff0c\u5b83\u662f\u7531\u7f16\u8bd1\u5668\u4e3a\u6211\u4eec\u5b9e\u73b0\u7684\u3002 \u53d8\u91cf\u7684\u503c\u5c31\u662f\u5206\u914d\u7ed9\u8be5\u53d8\u91cf\u7684\u5185\u5b58\u4f4d\u7f6e\u6240\u5b58\u50a8\u7684\u6570\u503c\uff0c\u5373\u4f7f\u662f\u6307\u9488\u53d8\u91cf\u4e5f\u4e0d\u4f8b\u5916\u3002 1 2 int * a ; * a = 12 ; //\u6307\u9488\u672a\u521d\u59cb\u5316 \u5982\u679c\u4e0d\u77e5\u9053\u6307\u9488\u5c06\u88ab\u521d\u59cb\u5316\u4e3a\u4ec0\u4e48\u5730\u5740\uff0c\u5c31\u628a\u5b83\u521d\u59cb\u5316\u4e3aNULL; 1 2 3 4 int a ; int * d =& a ; * d = 10 -* d ; //-----------1\u5408\u6cd5 d = 10 -* d ; //-----------2\u975e\u6cd5 \u53f3\u8fb9\u7684\u95f4\u63a5\u8bbf\u95ee\u4f5c\u4e3a\u53f3\u503c\u4f7f\u7528\uff0c\u5b83\u7684\u503c\u662fd\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u6240\u5b58\u50a8\u7684\u503c\u3002 \u5de6\u8fb9\u7684\u95f4\u63a5\u8bbf\u95ee\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\uff0c\u6240\u6709d\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u628a\u8d4b\u503c\u7b26\u53f3\u4fa7\u7684\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u5b83\u7684\u65b0\u503c\u3002 \u548c\u4efb\u4f55\u53d8\u91cf\u4e00\u6837\uff0c\u6307\u9488\u53d8\u91cf\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\u3002\u5bf9\u6307\u9488\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u6240\u4ea7\u751f\u7684\u503c\u4e5f\u662f\u4e2a\u5de6\u503c\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8868\u8fbe\u5f0f\u6807\u8bc6\u4e00\u4e2a\u7279\u5b9a\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 char ch = 'a' ; char * p =& a ; /*--------------*/ ch //\u53f3\u503c\uff1a\u8868\u8fbe\u5f0f\u7684\u503c'a' //\u5de6\u503c\uff1a\u6240\u4ee3\u8868\u7684\u5185\u5b58\u7684\u5730\u5740\u800c\u4e0d\u662f\u8be5\u5730\u5740\u7684\u503c /*--------------*/ & ch //\u53f3\u503c\uff1a\u662f\u53d8\u91cfch\u7684\u5730\u5740 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ cp //\u53f3\u503c\uff1acp\u7684\u503c(cp\u7684\u5185\u5b58\u4e2d\u7684\u5730\u5740) //\u5de6\u503c\uff1acp\u6240\u5728\u7684\u5185\u5b58\u4f4d\u7f6e /*--------------*/ & cp //\u53f3\u503c\uff1a\u6307\u9488\u53d8\u91cf\u7684\u5730\u5740 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ * cp //\u53f3\u503c\uff1a\u503c //\u5de6\u503c\uff1a\u5730\u5740 /*--------------*/ * cp + 1 //\u53f3\u503c\uff1a\u503c\u7684\u62f7\u8d1d\u5e76\u628a\u5b83+1 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ * ( cp + 1 ) //\u53f3\u503c\uff1ach\u4e4b\u540e\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c //\u5de6\u503c\uff1a\u4f4d\u7f6e\u672c\u8eab /*--------------*/ ++ cp //\u53f3\u503c\uff1a\u589e\u503c\u540e\u7684\u6307\u9488\u7684\u4e00\u4efd\u62f7\u8d1d\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ cp ++ //\u53f3\u503c\uff1a\u5148\u8fd4\u56decp\u503c\u7684\u4e00\u4efd\u62f7\u8d1d\u7136\u540e\u5728\u589e\u52a0cp\u7684\u503c //\u5de6\u503c\uff1a\u975e\u6cd5\u5730\u5740 /*--------------*/ *++ cp //\u53f3\u503c\uff1a\u589e\u503c\u540e\u7684\u6307\u9488\u7684\u62f7\u8d1d\u4e0a\uff0c\u53f3\u503c\u662fch\u540e\u9762\u90a3\u4e2a\u5185\u5b58\u5730\u5740\u7684\u503c //\u5de6\u503c\uff1a\u90a3\u4e2a\u4f4d\u7f6e\u672c\u8eab /*--------------*/ * cp ++ //\u540e\u7f00++\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e*\u64cd\u4f5c\u7b26 //1) ++\u64cd\u4f5c\u7b26\u4ea7\u751fcp\u7684\u4e00\u4efd\u62f7\u8d1d //2) ++\u64cd\u4f5c\u7b26\u589e\u52a0cp\u7684\u503c //3) \u5728cp\u7684\u62f7\u8d1d\u4e0a\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c //\u53f3\u503c\uff1ach\u7684\u503c //\u5de6\u503c\uff1ach\u7684\u5185\u5b58\u4f4d\u7f6e /*--------------*/ ++* cp //\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u662f\u4ece\u53f3\u5411\u5de6 //1) \u5148\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c //2) cp\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u7684\u503c\u589e\u52a01 //3) \u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u662f\u8fd9\u4e2a\u589e\u503c\u540e\u7684\u503c\u7684\u4e00\u4efd\u62f7\u8d1d //\u53f3\u503c\uff1a\u589e\u503c\u540e\u503c\u7684\u62f7\u8d1d //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ( * cp ) ++ //\u53f3\u503c\uff1a\u4e0e\u4e0a\u9762\u76f8\u540c //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ++*++ cp /* 1. \u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u4ece\u53f3\u5411\u5de6 2. \u9996\u5148\u6267\u884c++cp\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e 3. \u5bf9\u62f7\u8d1d\u7684\u503c\u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee\uff0c\u8bbf\u95eech\u540e\u9762\u7684\u4f4d\u7f6e(\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u64cd\u4f5c\u6570\u628a\u5b83\u5f53\u5de6\u503c\u4f7f\u7528) 4. \u5728\u8fd9\u4e2a\u4f4d\u7f6e\u8fdb\u884c++\u64cd\u4f5c\uff0c\u589e\u52a0\u4ed6\u7684\u503c */ //\u53f3\u503c\uff1a\u5982\u4e0a\u6240\u8ff0 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ++* cp ++ //\u53f3\u503c\uff1a\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26\u8bbf\u95ee\u7684\u662fcp\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u800c\u4e0d\u662fcp\u6240\u6307\u5411\u4f4d\u7f6e\u7684\u540e\u9762\u7684\u90a3\u4e2a\u4f4d\u7f6e //\u5de6\u503c\uff1a\u975e\u6cd5 \u51fd\u6570 \u00b6 C\u51fd\u6570\u7684\u6240\u6709\u53c2\u6570\u5747\u4ee5\u201c\u4f20\u503c\u8c03\u7528\u201d\u65b9\u5f0f\u8fdb\u884c\u4f20\u9012\uff0c\u8fd9\u610f\u5473\u7740\u51fd\u6570\u5c06\u83b7\u5f97\u53c2\u6570\u503c\u7684\u4e00\u4efd\u62f7\u8d1d\u3002 \u201c\u4f20\u5740\u8c03\u7528\u201d\u6570\u7ec4\u540d\u7684\u503c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u662f\u8fd9\u4e2a\u6307\u9488\u7684\u4e00\u4efd\u62f7\u8d1d\u3002 \u5c3e\u90e8\u9012\u5f52\uff1a\u9012\u5f52\u51fd\u6570\u5185\u90e8\u6240\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\u5c31\u662f\u8c03\u7528\u81ea\u8eab\u3002 \u6570\u7ec4 \u00b6 \u5728C\u4e2d\uff0c\u5728\u51e0\u4e4e\u6240\u6709\u4f7f\u7528\u6570\u7ec4\u540d\u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6570\u7ec4\u540d\u7684\u503c\u662f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7b2c1\u4e2a\u5143\u7d20\u7684\u5730\u5740\u3002 \u5b83\u7684\u7c7b\u578b\u53d6\u51b3\u4e8e\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u3002 \u53ea\u6709\u5f53\u6570\u7ec4\u540d\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u5668 \u624d\u4f1a\u4e3a\u5b83\u4ea7\u751f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf(\u4e0d\u662f\u6307\u9488\u53d8\u91cf)\u3002 \u53ea\u67092\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4\u540d\u5e76\u4e0d\u7528\u6307\u9488\u5e38\u91cf\u6765\u8868\u793a\uff1a \u6570\u7ec4\u540d\u4f5c\u4e3asizeof\u64cd\u4f5c\u7b26 \u5355\u76ee\u64cd\u4f5c\u7b26&\u7684\u64cd\u4f5c\u6570 \u4e0b\u6807\u7edd\u4e0d\u4f1a\u6bd4\u6307\u9488\u66f4\u6709\u6548\u7387\uff0c\u4f46\u6307\u9488\u6709\u65f6\u4f1a\u6bd4\u4e0b\u6807\u66f4\u6709\u6548\u3002 \u6307\u9488\u548c\u6570\u7ec4\u5e76\u4e0d\u662f\u76f8\u7b49\u7684 \u00b6 1 2 3 4 5 6 7 8 int a [ 5 ]; /*\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u6839\u636e\u58f0\u660e\u6240\u6307\u5b9a\u7684\u5143\u7d20\u6570\u91cf\u4e3a\u6570\u7ec4\u4fdd\u7559\u5185\u5b58\u7a7a\u95f4\uff0c\u7136\u540e\u518d\u521b\u5efa\u6570\u7ec4\u540d\uff0c\u5b83\u7684\u503c\u65f6\u4e00\u4e2a\u5e38\u91cf\uff0c\u6307\u5411\u8fd9\u6bb5\u7a7a\u95f4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002*/ //*a \u5408\u6cd5 //a++ a\u7684\u503c\u662f\u4e00\u4e2a\u5e38\u91cf int * b /*\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u53ea\u4e3a\u6307\u9488\u672c\u8eab\u4fdd\u7559\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u4e0d\u4e3a\u4efb\u4f55\u6574\u578b\u503c\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002*/ //*b \u4e0d\u5408\u6cd5\uff0c\u6ca1\u6709\u521d\u59cb\u5316 //b++ \u53ef\u7f16\u8bd1\u901a\u8fc7 \u5b57\u7b26\u4e32 \u00b6 1 2 3 4 5 char * strncpy ( char * dst , char const * src , size_t len ); //\u5982\u679cstrlen(src)\u7684\u503c\u5927\u4e8e\u7b49\u4e8elen\uff0c\u90a3\u4e48\u53ea\u6709len\u4e2a\u5b57\u7b26\u88ab\u590d\u5236\u5230dst\u4e2d\u3002\u6ce8\u610f\uff01\uff01\u5b83\u7684\u7ed3\u679c\u4e0d\u4f1a\u4ee5NUL\u5b57\u8282\u7ed3\u5c3e\uff0c\u5b83\u7684\u7ed3\u679c\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 char buffer [ BSIZE ]; strncpy ( buffer , name , BSIZE ); buffer [ BSIZE - 1 ] = '' ; strncat\u603b\u662f\u5728\u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u6dfb\u52a0\u4e00\u4e2aNUL\u5b57\u8282\uff0c\u800c\u4e14\u5b83\u4e0d\u4f1a\u50cfstrncpy\u90a3\u6837\u5bf9\u76ee\u6807\u6570\u7ec4\u7528NUL\u5b57\u8282\u8fdb\u884c\u586b\u5145\u3002 \u7ed3\u6784\u548c\u8054\u5408 \u00b6 \u58f0\u660e\u7ed3\u6784\u65f6\u7684\u4e00\u79cd\u826f\u597d\u6280\u5de7\uff1a 1 2 3 4 5 6 typedef struct { xx xx } Simple ; Simple x ; Simple y [ 20 ], * z ; \u70b9\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u65f6\u4ece\u5de6\u5411\u53f3\u3002 \u6ce8\u610f\u5982\u4e0b\u9677\u9631\uff1a 1 2 3 4 5 6 7 8 9 10 11 typedef struct { int a ; SELF_REF3 * b ; int c ; } SELF_REF3 ; //\u7c7b\u578b\u540d\u76f4\u5230\u58f0\u660e\u7684\u672b\u5c3e\u624d\u5b9a\u4e49\uff0c\u6240\u4ee5\u5728\u7ed3\u6784\u58f0\u660e\u7684\u5185\u90e8\u5b83\u5c1a\u672a\u5b9a\u4e49\u3002 typedef struct SELF_REF3_TAG { int a ; struct SELF_REF3_TAG * b ; int c ; } SELF_REF3 ; \u6240\u6709\u7ed3\u6784\u7684\u8d77\u59cb\u5b58\u50a8\u4f4d\u7f6e\u5fc5\u987b\u662f\u7ed3\u6784\u4e2d\u8fb9\u754c\u8981\u6c42\u6700\u4e25\u683c\u7684\u6570\u636e\u7c7b\u578b\u6240\u8981\u6c42\u7684\u4f4d\u7f6e\u3002 \u5411\u51fd\u6570\u4f20\u9012\u7ed3\u6784\u53c2\u6570\u662f\u4f4e\u6548\u7684\uff0c\u5c3d\u91cf\u4f20\u9012\u7ed3\u6784\u6307\u9488\uff0c\u63d0\u5347\u6548\u7387\u3002 \u5206\u914d\u7ed9\u8054\u5408\u7684\u5185\u5b58\u6570\u91cf\u53d6\u51b3\u4e0e\u5b83\u7684\u6700\u957f\u6210\u5458\u7684\u957f\u5ea6\u3002 \u9ad8\u7ea7\u6307\u9488\u8bdd\u9898 \u00b6 1 2 int f ; /*\u4e00\u4e2a\u6574\u5f62\u53d8\u91cf*/ int * f ; /*\u4e00\u4e2a\u6307\u5411\u6574\u5f62\u7684\u6307\u9488*/ 1 int f (); \u5b83\u628af\u58f0\u660e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u6570\u3002 1 int * f (); \u9996\u5148\u6267\u884c\u7684\u662f\u51fd\u6570\u8c03\u7528\u64cd\u4f5c\u7b26()\uff0c\u5e94\u4e3a\u5b83\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26\u3002\u56e0\u6b64\uff0cf\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u4e00\u4e2a\u6307\u5411\u6574\u578b\u7684\u6307\u9488\u3002 1 int ( * f )(); \u7b2c\u4e00\u5bf9\u62ec\u53f7\u53ea\u8d77\u805a\u5408\u4f5c\u7528\uff0c\u5b83\u8feb\u4f7f\u95f4\u63a5\u8bbf\u95ee\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8fdb\u884c\uff0c\u7b2c\u4e8c\u5bf9\u62ec\u53f7\u662f\u51fd\u6570\u8c03\u7528\u64cd\u4f5c\u7b26\u3002\u6240\u4ee5\uff0cf\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u5b83\u6240\u6307\u5411\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\u3002 1 int * ( * f )(); f\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u53ea\u662f\u6240\u6307\u5411\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u578b\u6307\u9488\u3002 1 2 3 int f []; /*f\u662f\u4e00\u4e2a\u6574\u578b\u6570\u7ec4*/ int * f []; /*\u4e0b\u6807\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0cf\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f\u6307\u5411\u6574\u578b\u7684\u6307\u9488*/ int ( * f )[]; /*\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6574\u578b*/ 1 int f ()[]; \u975e\u6cd5\u58f0\u660e\u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u6807\u91cf\u503c\uff0c\u8fd9\u4e2af\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u3002 1 int f [](); \u975e\u6cd5\u58f0\u660ef\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f\u8fd4\u56de\u503c\u4e3a\u6574\u578b\u7684\u51fd\u6570\u3002\u4f46\u662f\u6570\u7ec4\u5143\u7d20\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4f46\u4e0d\u540c\u7684\u51fd\u6570\u663e\u7136\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u957f\u5ea6\u3002 1 int ( * f [])(); f\u662f\u4e00\u4e2a\u5143\u7d20\u4e3a\u67d0\u79cd\u7c7b\u578b\u7684\u6307\u9488\u7684\u6570\u7ec4\u3002\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u662f\u51fd\u6570\u6307\u9488\uff0c\u5b83\u6240\u6307\u5411\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a \u6574\u578b\u503c\u3002 1 int * ( * f [])(); \u8fd9\u662f\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u6307\u9488\u6240\u6307\u5411\u7684\u7c7b\u578b\u662f\u8fd4\u56de\u503c\u4e3a\u6574\u578b\u6307\u9488\u7684\u51fd\u6570\u3002 \u56de\u8c03\u51fd\u6570\u4e0e\u8f6c\u6362\u8868 \u00b6 \u56de\u8c03\u51fd\u6570\u5b9e\u4f8b \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <stdio.h> #include \"node.h\" Node * search_list ( Node * node , void const * value , int ( * compare )( void const * , void const * )) { while ( node != NULL ) { if ( compare ( & node -> value , value ) == 0 ) { break ; } node = node -> link ; } return node ; } int compare_ints ( void const * a , void const * b ) { if ( * ( int * ) a ==* ( int * ) b ) { return 0 ; } else { return 1 ; } } desired_node = search_list ( root , & desired_value , compare_ints ); \u8f6c\u79fb\u8868jump table \u00b6 1 2 3 4 5 6 7 8 9 10 double add ( double , double ); double sub ( double , double ); double mul ( double , double ); double div ( double , double ); \u00b7\u00b7\u00b7 double ( * oper_func [])( double , double ) = { add , sub , mul , div ,... }; result = oper_func [ oper ]( op1 , op2 ); \u9884\u5904\u7406\u5668 \u00b6 \u9884\u5904\u7406(preprocessing)\u9636\u6bb5\uff1a\u5220\u9664\u6ce8\u91ca\u3001\u63d2\u5165\u88ab#include\u6307\u4ee4\u5305\u542b\u7684\u6587\u4ef6\u5185\u5bb9\u3001\u5b9a\u4e49\u548c\u66ff\u6362\u7531#define\u6307\u4ee4\u5b9a\u4e49\u7684\u7b26\u53f7\u4ee5\u53ca\u786e\u5b9a\u4ee3\u7801\u7684\u90e8\u5206\u5185\u5bb9\u662f\u5426\u5e94\u8be5\u6839\u636e\u4e00\u4e9b\u6761\u4ef6\u7f16\u8bd1\u6307\u4ee4\u8fdb\u884c\u7f16\u8bd1\u3002 \u9884\u5b9a\u4e49\u7b26\u53f7 \u00b6 1 2 3 4 5 __FILE__ \u8fdb\u884c\u7f16\u8bd1\u7684\u6e90\u6587\u4ef6\u540d __LINE__ \u6587\u4ef6\u5f53\u524d\u7684\u884c\u53f7 __DATE__ \u6587\u4ef6\u88ab\u7f16\u8bd1\u7684\u65e5\u671f __TIME__ \u6587\u4ef6\u88ab\u7f16\u8bd1\u7684\u65f6\u95f4 __STDC__ \u9075\u5faa ANSI C , \u5176\u503c\u4e3a 1 \u547d\u4ee4\u884c\u5b9a\u4e49 \u00b6 1 2 3 4 int array [ ARRAY_SIZE ] //-Dname \u503c\u4e3a1 //-Dname=stuff \u503c\u4e3astuff cc - DARRAY_SIZE = 100 prog . c \u6587\u4ef6\u5305\u542b \u00b6 1 2 3 4 5 6 #ifndef _HELLO_ #define _HELLO_ /* **All the stuff that you want in the header file */ #endif \u8f93\u5165&\u8f93\u51fa\u51fd\u6570 \u00b6 \u6587\u672c\u6d41&\u4e8c\u8fdb\u5236\u6d41 \u00b6 \u6587\u672c\u6d41\uff1a\u6807\u51c6\u89c4\u5b9a\u6587\u672c\u884c\u81f3\u5c11\u8fd0\u884c254\u4e2a\u5b57\u7b26\u3002\u5728MS-DOS\u7cfb\u7edf\u4e2d\uff0c\u6587\u672c\u884c\u7684\u7ed3\u675f\u65b9\u5f0f\u4ee5\u4e00\u4e2a\u56de\u8f66\u7b26\u548c\u4e00\u4e2a\u6362\u884c\u7b26\u7ed3\u5c3e\u3002UNIX\u7cfb\u7edf\u4e2d\u53ea\u4f7f\u7528\u4e00\u4e2a\u6362\u884c\u7b26\u7ed3\u5c3e\u3002 \u4e8c\u8fdb\u5236\u6d41\uff1a\u4e8c\u8fdb\u5236\u6d41\u4e2d\u7684\u5b57\u8282\u5c06\u5b8c\u5168\u6839\u636e\u7a0b\u5e8f\u7f16\u5199\u5b83\u4eec\u7684\u5f62\u5f0f\u5199\u5165\u5230\u6587\u4ef6\u6216\u8bbe\u5907\u4e2d\uff0c\u800c\u4e14\u5b8c\u5168\u6839\u636e\u5b83\u4eec\u4ece\u6587\u4ef6\u6216\u8bbe\u5907\u8bfb\u53d6\u7684\u5f62\u5f0f\u8bfb\u5165\u5230\u7a0b\u5e8f\u4e2d\u3002\u5e76\u672a\u505a\u4efb\u4f55\u6539\u53d8\u3002 FILE\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8bbf\u95ee\u4e00\u4e2a\u6d41\u3002stdin,stdout,stderr\u90fd\u662f\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u3002 I/O\u51fd\u6570\u4ee5\u4e09\u79cd\u57fa\u672c\u7684\u5f62\u5f0f\u5904\u7406\u6570\u636e\uff1a\u5355\u4e2a\u5b57\u7b26\u3001\u6587\u672c\u884c\u548c\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u6570\u636e\u7c7b\u578b \u8f93\u5165 \u8f93\u51fa \u63cf\u8ff0 \u5b57\u7b26 getchar putchar \u8bfb\u53d6(\u5199\u5165)\u5355\u4e2a\u5b57\u7b26 \u6587\u672c\u884c gets/scanf puts/printf \u6587\u672c\u884c\u7684\u8f93\u5165\u8f93\u51fa(\u672a\u683c\u5f0f\u5316/\u683c\u5f0f\u5316) \u4e8c\u8fdb\u5236 fread fwrite \u8bfb\u53d6(\u5199\u5165)\u4e8c\u8fdb\u5236\u6570\u636e \u6807\u51c6\u51fd\u6570\u5e93 \u00b6 \u968f\u673a\u6570 \u00b6 1 2 3 int rand ( void ); void srand ( unsigned int seed ); srand (( unsigned int ) time ( 0 )); \u65e5\u671f\u4e0e\u65f6\u95f4 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u5904\u7406\u5668\u65f6\u95f4 clock_t clock ( void ); //\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u8d77\u5904\u7406\u5668\u6240\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u4e24\u4e2a\u65f6\u95f4\u76f8\u51cf\u83b7\u53d6\u7cbe\u786e\u65f6\u95f4\u3002 //\u8fd4\u56de\u65f6\u949f\u6ef4\u7b54\u6b21\u6570\uff0c\u8f6c\u6362\u79d2\uff0c\u9664\u4ee5CLOCKS_PER_SEC //\u5f53\u5929\u65f6\u95f4 time_t time ( time_t * returned_value ); //time\u51fd\u6570\u8fd4\u56de\u5f53\u524d\u7684\u65e5\u671f\u548c\u65f6\u95f4 //\u65e5\u671f\u4e0e\u65f6\u95f4\u8f6c\u6362 char * ctime ( time_t const * time_value ); //\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32,asctime(localtime(time_value)); double difftime ( time_t time1 , time_t time2 ); //\u8ba1\u7b97time1-time2\u7684\u5dee\uff0c\u7ed3\u679c\u8f6c\u6362\u4e3a\u79d2 struct tm * gmtime ( time_t const * time_value ); //UTC\u65f6\u95f4 struct tm * localtime ( time_t const * time_value ); //\u5f53\u5730\u65f6\u95f4 char * asctime ( struct tm const * tm_ptr ); //tm\u7ed3\u6784\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 size_t strftime ( char * string , size_t maxsize , char const * format , struct tm const * tm_ptr ); //tm\u7ed3\u6784\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6839\u636e\u67d0\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u800c\u5b9a\u7684\u5b57\u7b26\u4e32 time_t mktime ( struct tm * tm_ptr ); //\u628a\u4e00\u4e2atm\u7ed3\u6784\u8f6c\u6362\u4e3a\u4e00\u4e2atime_t\u503c","title":"C\u8bed\u8a00\u57fa\u7840"},{"location":"cprogram/c_base/#_1","text":"","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"cprogram/c_base/#_2","text":"\u4f4d(bit,b)\uff0c\u5b57\u8282(byte,Byte,B) 1 2 3 4 5 1byte = 8 bit \u200b\u200b1KB = 1024B 1MB = 1024KB 1GB = 1024MB 1TB = 1024MB","title":"\u4f4d\u4e0e\u5b57\u8282"},{"location":"cprogram/c_base/#_3","text":"\u5f02\u6216(^) \u5f02\u8005\u6216 \u5de6\u79fb\u8fd0\u7b97\uff1am<<n\u8868\u793a\u628am\u5de6\u79fbn\u4f4d\uff0c\u6700\u5de6\u8fb9\u7684n\u4f4d\u88ab\u4e22\u5f03\uff0c\u53f3\u8fb9\u8865\u4e0an\u4e2a0\u300200001010<<2=00101000 \u53f3\u79fb\u8fd0\u7b97\uff1am>>n\u8868\u793a\u628am\u53f3\u79fbn\u4f4d\uff0c\u6700\u53f3\u8fb9\u7684n\u4f4d\u88ab\u4e22\u5f03\uff0c\u5de6\u8fb9\u7684\u60c5\u51b5\u5206\u4e24\u79cd\uff1a \u5982\u679c\u6570\u5b57\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6570\u503c\uff0c\u5219\u75280\u586b\u8865\u6700\u5de6\u8fb9\u7684n\u4f4d\u300200001010>>2=00000010 \u5982\u679c\u6570\u5b57\u662f\u4e00\u4e2a\u6709\u7b26\u53f7\u6570\u503c\uff0c\u5219\u7528\u6570\u5b57\u7684\u7b26\u53f7\u4f4d\u586b\u8865 \u6700\u5de6\u8fb9\u7684n\u4f4d\u3002(\u5982\u679c\u6570\u5b57\u662f\u6b63\u6570\uff0c\u53f3\u79fb\u4e4b\u540e\u5de6\u8fb9\u88650\uff0c\u5982\u679c\u662f\u8d1f\u6570\uff0c\u5de6\u8fb9\u88651)\u300210001010>>3=11110001","title":"\u4f4d\u8fd0\u7b97"},{"location":"cprogram/c_base/#typedef-define","text":"typedef\u5141\u8bb8\u4e3a\u5404\u79cd\u6570\u636e\u8d77\u65b0\u7684\u540d\u5b57\u3002 1 2 typedef char * ptr_to_char ptr_to_char a ; //\u58f0\u660ea\u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488 \u5e94\u8be5\u7528typedef\u800c\u4e0d\u662f#define\u6765\u521b\u5efa\u65b0\u7684\u7c7b\u578b\u540d\uff0c\u56e0\u4e3a#define\u4e0d\u80fd\u6b63\u786e\u5904\u7406\u6307\u9488\u7c7b\u578b\u3002 1 2 #define d_ptr_to_char char * d_ptr_to_char a , b ; //b\u88ab\u58f0\u660e\u4e3a\u4e00\u4e2a\u5b57\u7b26\u800c\u4e0d\u662f\u6307\u9488 define\u6307\u4ee4\u662f\u53e6\u4e00\u79cd\u521b\u5efa\u540d\u5b57\u5e38\u91cf\u7684\u673a\u5236\u3002 1 2 3 4 #define MAX_ELEMENTS 50 int const max_elements = 50 char hello [ MAX_ELEMENTS ]; //const\u53d8\u91cf\u53ea\u80fd\u4f7f\u7528\u4e8e\u5141\u8bb8\u4f7f\u7528\u53d8\u91cf\u7684\u5730\u65b9","title":"typedef &amp; #define"},{"location":"cprogram/c_base/#const","text":"\u4ee5\u4e0b2\u6761\u8bed\u53e5\u90fd\u628aa\u58f0\u660e\u4e3a\u4e00\u4e2a\u6574\u6570\uff0c\u5b83\u7684\u503c\u4e0d\u80fd\u88ab\u4fee\u6539\u3002(\u9009\u62e9\u4e00\u79cd\u597d\u7406\u89e3\u7684\u5e76\u4e00\u76f4\u575a\u6301\u4e0b\u53bb) 1 2 int const a = 15 ; const int a = 15 ; \u7531\u4e8ea\u7684\u503c\u65e0\u6cd5\u88ab\u4fee\u6539\uff0c\u4e5f\u65e0\u6cd5\u88ab\u4efb\u4f55\u4e1c\u897f\u8d4b\u503c\uff0c\u67092\u79cd\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5b83\u83b7\u5f97\u503c\uff1a \u5728\u58f0\u660e\u7684\u65f6\u5019\u5bf9\u5b83\u521d\u59cb\u5316 \u5728\u51fd\u6570\u4e2d\u58f0\u660econst\u7684\u5f62\u53c2\u5728\u51fd\u6570\u88ab\u8c03\u7528\u65f6\u4f1a\u5f97\u5230\u5b9e\u53c2\u7684\u503c const\u4e0e\u6307\u9488\u7684\u7ed3\u5408\u4f1a\u5f71\u54cd \u6307\u9488\u53d8\u91cf \u6216\u8005 \u5b83\u6240\u6307\u5411\u7684\u5b9e\u4f53 \u3002 1 2 3 4 int * pi ; //\u666e\u901a\u6307\u9488 int const * pci ; //\u6307\u5411\u6574\u578b\u5e38\u91cf\u7684\u6307\u9488\uff0c\u53ef\u4ee5\u4fee\u6539\u6307\u9488\u7684\u503c\uff0c\u4f46\u4e0d\u53ef\u4ee5\u4fee\u6539\u5b83\u6240\u6307\u5411\u7684\u503c int * const cpi ; //\u6307\u5411\u6574\u578b\u7684\u5e38\u91cf\u6307\u9488\uff0c\u6307\u9488\u662f\u5e38\u91cf\u4e0d\u53ef\u4fee\u6539\uff0c\u5b83\u6240\u6307\u5411\u7684\u6574\u578b\u503c\u53ef\u4fee\u6539 int const * const cpci ; //\u6307\u9488\u672c\u8eab\u4e0e\u5b83\u6240\u6307\u5411\u7684\u503c\u90fd\u4e0d\u53ef\u88ab\u4fee\u6539","title":"const\u5173\u952e\u5b57"},{"location":"cprogram/c_base/#_4","text":"\u7f16\u8bd1\u5668\u53ef\u4ee5\u786e\u8ba44\u79cd\u4e0d\u540c\u7c7b\u578b\u7684\u4f5c\u7528\u57df\u2013\u6587\u4ef6\u4f5c\u7528\u57df\u3001\u51fd\u6570\u4f5c\u7528\u57df\u3001\u4ee3\u7801\u5757\u4f5c\u7528\u57df\u548c\u51fd\u6570\u539f\u578b\u4f5c\u7528\u57df\u3002","title":"\u4f5c\u7528\u57df"},{"location":"cprogram/c_base/#_5","text":"\u94fe\u63a5\u5c5e\u6027\uff1aexternal(\u5916\u90e8)\u3001internal(\u5185\u90e8)\u3001node(\u65e0)\u3002 \u5173\u952e\u5b57extern\u548cstatic\u7528\u4e8e\u5728\u58f0\u660e\u4e2d\u4fee\u6539\u6807\u8bc6\u7b26\u7684\u94fe\u63a5\u5c5e\u6027\u3002 \u5f53extern\u5173\u952e\u5b57\u7528\u4e8e\u6e90\u6587\u4ef6\u4e2d\u4e00\u4e2a\u6807\u8bc6\u7b26\u7684\u7b2c\u4e00\u6b21\u58f0\u660e\u65f6\uff0c\u5b83\u6307\u5b9a\u8be5\u6807\u8bc6\u7b26\u5177\u6709external\u94fe\u63a5\u5c5e\u6027\u3002\u4f46\u662f\uff0c\u5982\u679c\u5b83\u7528\u4e8e\u8be5\u6807\u8bc6\u7b26\u7684\u7b2c2\u6b21\u6216\u4ee5\u540e\u7684\u58f0\u660e\u65f6\uff0c\u5b83\u5e76\u4e0d\u4f1a\u66f4\u6539\u7531\u7b2c\u4e00\u6b21\u58f0\u660e\u6240\u6307\u5b9a\u7684\u94fe\u63a5\u5c5e\u6027\u3002 1 2 3 4 5 6 7 8 static int i ; //----1 int func () { int j ; extern int k ; extern int i ; //----2 } //\u58f0\u660e2\u5e76\u4e0d\u4fee\u6539\u58f0\u660e1\u6240\u6307\u5b9a\u7684\u53d8\u91cfi\u7684\u94fe\u63a5\u5c5e\u6027","title":"\u94fe\u63a5\u5c5e\u6027"},{"location":"cprogram/c_base/#_6","text":"\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b(storage class)\u662f\u6307\u5b58\u50a8\u53d8\u91cf\u503c\u5f97\u5185\u5b58\u7c7b\u578b\u3002\u51b3\u5b9a\u53d8\u91cf\u4f55\u65f6\u521b\u5efa\u3001\u4f55\u65f6\u9500\u6bc1\u4ee5\u53ca\u5b83\u7684\u503c\u5c06\u4fdd\u6301\u591a\u4e45\u3002 \u5b58\u50a8\u53d8\u91cf\u7684\u4e09\u4e2a\u5730\u65b9\uff1a\u666e\u901a\u5185\u5b58\u3001\u8fd0\u884c\u65f6\u5806\u6808\u3001\u786c\u4ef6\u5bc4\u5b58\u5668\u3002 \u53d8\u91cf\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u578b\u53d6\u51b3\u4e8e\u5b83\u7684\u58f0\u660e\u4f4d\u7f6e\u3002 \u51e1\u662f\u5728\u4efb\u4f55\u4ee3\u7801\u5757\u4e4b\u5916\u58f0\u660e\u7684\u53d8\u91cf\u603b\u662f\u5b58\u50a8\u4e8e\u9759\u6001\u5185\u5b58\u4e2d\uff0c\u8fd9\u7c7b\u53d8\u91cf\u79f0\u4e3a\u9759\u6001(static)\u53d8\u91cf(main\u51fd\u6570\u91cc\u58f0\u660e\u7684\u53d8\u91cf\u4e5f\u662f\u5c40\u90e8\u53d8\u91cf)\u3002 \u5728\u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\u7684\u7f3a\u7701\u5b58\u50a8\u7c7b\u578b\u662f\u81ea\u52a8\u7684(automatic)\uff0c\u5b58\u50a8\u5728\u5806\u6808\u4e2d\uff0c\u79f0\u4e3a\u81ea\u52a8(auto)\u53d8\u91cf\u3002 \u4ee3\u7801\u5757\u5185\u90e8\u58f0\u660e\u7684\u53d8\u91cf\u52a0\u4e0astatic\u5173\u952e\u5b57\uff0c\u5219\u4f7f\u5b83\u7684\u5b58\u50a8\u7c7b\u578b\u4ece\u81ea\u52a8\u53d8\u4e3a\u9759\u6001\u3002\u6ce8\u610f\uff1a\u4fee\u6539\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\u5e76\u4e0d\u8868\u793a\u4fee\u6539\u8be5\u53d8\u91cf\u7684\u4f5c\u7528\u57df\u3002 \u51fd\u6570\u7684\u5f62\u5f0f\u53c2\u6570\u4e0d\u80fd\u58f0\u660e\u4e3a\u9759\u6001\uff0c\u56e0\u4e3a\u5b9e\u53c2\u603b\u662f\u5728\u5806\u6808\u4e2d\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u7528\u4e8e\u652f\u6301\u9012\u5f52\u3002","title":"\u5b58\u50a8\u7c7b\u578b"},{"location":"cprogram/c_base/#static","text":"\u5f53static\u5173\u952e\u5b57\u7528\u4e8e\u51fd\u6570\u5b9a\u4e49\u65f6\uff0c\u6216\u7528\u4e8e\u4ee3\u7801\u5757\u4e4b\u5916\u7684\u53d8\u91cf\u58f0\u660e\u65f6\uff0cstatic\u5173\u952e\u5b57\u7528\u4e8e\u4fee\u6539\u6807\u8bc6\u7b26\u7684\u94fe\u63a5\u5c5e\u6027\uff0c\u4eceexternal\u6539\u4e3ainternal,\u4f46\u6807\u8bc6\u7b26\u7684\u5b58\u50a8\u7c7b\u578b\u548c\u4f5c\u7528\u57df\u4e0d\u53d7\u5f71\u54cd\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u51fd\u6570\u6216\u53d8\u91cf\u53ea\u80fd\u5728\u58f0\u660e\u5b83\u4eec\u7684\u6e90\u6587\u4ef6\u4e2d\u8bbf\u95ee\u3002 \u5f53static\u5173\u952e\u5b57\u7528\u4e8e\u4ee3\u7801\u5757\u5185\u90e8\u7684\u53d8\u91cf\u58f0\u660e\u65f6\uff0cstatic\u5173\u952e\u5b57\u7528\u4e8e\u4fee\u6539\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\uff0c\u4ece\u81ea\u52a8\u53d8\u91cf\u4fee\u6539\u4e3a\u9759\u6001\u53d8\u91cf\uff0c\u4f46\u53d8\u91cf\u7684\u94fe\u63a5\u5c5e\u6027\u548c\u4f5c\u7528\u57df\u4e0d\u53d7\u5f71\u54cd\u3002\u7528\u8fd9\u79cd\u65b9\u5f0f\u58f0\u660e\u7684\u53d8\u91cf\u5728\u7a0b\u5e8f\u6267\u884c\u4e4b\u524d\u521b\u5efa\uff0c\u5e76\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u6267\u884c\u671f\u95f4\u4e00\u76f4\u5b58\u5728\uff0c\u800c\u4e0d\u662f\u6bcf\u6b21\u5728\u4ee3\u7801\u5757\u5f00\u59cb\u6267\u884c\u65f6\u521b\u5efa\uff0c\u5728\u4ee3\u7801\u5757\u6267\u884c\u5b8c\u6bd5\u540e\u9500\u6bc1","title":"static\u5173\u952e\u5b57"},{"location":"cprogram/c_base/#_7","text":"","title":"\u64cd\u4f5c\u7b26\u4e0e\u8868\u8fbe\u5f0f"},{"location":"cprogram/c_base/#_8","text":"++&\u2013\u64cd\u4f5c\u7b26\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u800c\u4e0d\u662f\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5b83\u7684\u64cd\u4f5c\u6570\u3002\u64cd\u4f5c\u7b26\u5b9e\u9645\u53ea\u8981\u6c42\u64cd\u4f5c\u6570\u5fc5\u987b\u662f\u4e00\u4e2a\u2018\u5de6\u503c\u2019\uff0c\u53ea\u80fd\u4f5c\u7528\u4e8e\u53ef\u4ee5\u4f4d\u4e8e\u8d4b\u503c\u7b26\u53f7\u5de6\u8fb9\u7684\u8868\u8fbe\u5f0f\u3002 \u524d\u7f00\u548c\u540e\u7f00\u7684\u589e\u503c\u64cd\u4f5c\u7b26\u90fd\u590d\u5236\u4e00\u4efd\u53d8\u91cf\u503c\u5f97\u62f7\u8d1d\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u7ed3\u679c\u4e0d\u662f\u88ab\u5b83\u4eec\u6240\u4fee\u6539\u7684\u53d8\u91cf\uff0c\u800c\u662f\u53d8\u91cf\u503c\u7684\u62f7\u8d1d\u3002 1 ++ a = 10 ; ++a\u7684\u7ed3\u679c\u662fa\u503c\u5f97\u62f7\u8d1d\uff0c\u5e76\u4e0d\u662f\u53d8\u91cf\u672c\u8eab\uff0c\u65e0\u6cd5\u5411\u4e00\u4e2a\u503c\u8fdb\u884c\u8d4b\u503c\u3002 \u903b\u8f91\u64cd\u4f5c\u7b26\u4e3a\u201c\u77ed\u8def\u6c42\u503c\u201d\u3002","title":"++&amp;\u2013\u64cd\u4f5c\u7b26"},{"location":"cprogram/c_base/#_9","text":"\u5de6\u503c\uff1a\u53ef\u4ee5\u5b58\u50a8\u7ed3\u679c\u503c\u7684\u5730\u70b9 \u53f3\u503c\uff1a\u6307\u5b9a\u4e00\u4e2a\u503c 1 2 3 int a , * pi ; pi =& a ; * pi = 20 ; \u7b2c\u4e8c\u6761\u8bed\u53e5\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u5de6\u503c\uff0c\u6307\u9488pi\u7684\u503c\u662f*\u5185\u5b58\u4e2d\u67d0\u4e2a\u7279\u5b9a\u4f4d\u7f6e\u7684\u5730\u5740\uff0c\u64cd\u4f5c\u7b26\u4f7f\u673a\u5668\u6307\u5411\u90a3\u4e2a\u4f4d\u7f6e\u3002\u5f53\u5b83\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\u65f6\uff0c\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u6307\u5b9a\u9700\u8981\u8fdb\u884c\u4fee\u6539\u7684\u4f4d\u7f6e\u3002\u5f53\u5b83\u4f5c\u4e3a\u53f3\u503c\u4f7f\u7528\u65f6\uff0c\u5b83\u5c31\u63d0\u53d6\u5f53\u524d\u5b58\u50a8\u4e8e\u8fd9\u4e2a\u4f4d\u7f6e\u7684\u503c\u3002","title":"\u5de6\u503c&amp;\u53f3\u503c"},{"location":"cprogram/c_base/#_10","text":"C\u6700\u7b80\u5355\u7684\u8bed\u53e5\u662f\u7a7a\u8bed\u53e5\uff0c\u4ed6\u672c\u8eab\u53ea\u542b\u6709\u4e00\u4e2a\u5206\u53f7\u3002 1 for (;;) \u5f53\u4f60\u9700\u8981\u5faa\u73af\u4f53\u81f3\u5c11\u6267\u884c\u4e00\u6b21\u65f6\uff0c\u9009\u62e9do\u3002 1 2 3 4 5 6 do { func (); break ; ... } while ( 0 );","title":"\u8bed\u53e5"},{"location":"cprogram/c_base/#_11","text":"\u540d\u5b57\u4e0e\u5185\u5b58\u4f4d\u7f6e\u4e4b\u95f4\u7684\u5173\u8054\u5e76\u4e0d\u662f\u786c\u4ef6\u63d0\u4f9b\u7684\uff0c\u5b83\u662f\u7531\u7f16\u8bd1\u5668\u4e3a\u6211\u4eec\u5b9e\u73b0\u7684\u3002 \u53d8\u91cf\u7684\u503c\u5c31\u662f\u5206\u914d\u7ed9\u8be5\u53d8\u91cf\u7684\u5185\u5b58\u4f4d\u7f6e\u6240\u5b58\u50a8\u7684\u6570\u503c\uff0c\u5373\u4f7f\u662f\u6307\u9488\u53d8\u91cf\u4e5f\u4e0d\u4f8b\u5916\u3002 1 2 int * a ; * a = 12 ; //\u6307\u9488\u672a\u521d\u59cb\u5316 \u5982\u679c\u4e0d\u77e5\u9053\u6307\u9488\u5c06\u88ab\u521d\u59cb\u5316\u4e3a\u4ec0\u4e48\u5730\u5740\uff0c\u5c31\u628a\u5b83\u521d\u59cb\u5316\u4e3aNULL; 1 2 3 4 int a ; int * d =& a ; * d = 10 -* d ; //-----------1\u5408\u6cd5 d = 10 -* d ; //-----------2\u975e\u6cd5 \u53f3\u8fb9\u7684\u95f4\u63a5\u8bbf\u95ee\u4f5c\u4e3a\u53f3\u503c\u4f7f\u7528\uff0c\u5b83\u7684\u503c\u662fd\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u6240\u5b58\u50a8\u7684\u503c\u3002 \u5de6\u8fb9\u7684\u95f4\u63a5\u8bbf\u95ee\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\uff0c\u6240\u6709d\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u628a\u8d4b\u503c\u7b26\u53f3\u4fa7\u7684\u8868\u8fbe\u5f0f\u7684\u8ba1\u7b97\u7ed3\u679c\u4f5c\u4e3a\u5b83\u7684\u65b0\u503c\u3002 \u548c\u4efb\u4f55\u53d8\u91cf\u4e00\u6837\uff0c\u6307\u9488\u53d8\u91cf\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u5de6\u503c\u4f7f\u7528\u3002\u5bf9\u6307\u9488\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u6240\u4ea7\u751f\u7684\u503c\u4e5f\u662f\u4e2a\u5de6\u503c\uff0c\u56e0\u4e3a\u8fd9\u79cd\u8868\u8fbe\u5f0f\u6807\u8bc6\u4e00\u4e2a\u7279\u5b9a\u7684\u5185\u5b58\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 char ch = 'a' ; char * p =& a ; /*--------------*/ ch //\u53f3\u503c\uff1a\u8868\u8fbe\u5f0f\u7684\u503c'a' //\u5de6\u503c\uff1a\u6240\u4ee3\u8868\u7684\u5185\u5b58\u7684\u5730\u5740\u800c\u4e0d\u662f\u8be5\u5730\u5740\u7684\u503c /*--------------*/ & ch //\u53f3\u503c\uff1a\u662f\u53d8\u91cfch\u7684\u5730\u5740 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ cp //\u53f3\u503c\uff1acp\u7684\u503c(cp\u7684\u5185\u5b58\u4e2d\u7684\u5730\u5740) //\u5de6\u503c\uff1acp\u6240\u5728\u7684\u5185\u5b58\u4f4d\u7f6e /*--------------*/ & cp //\u53f3\u503c\uff1a\u6307\u9488\u53d8\u91cf\u7684\u5730\u5740 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ * cp //\u53f3\u503c\uff1a\u503c //\u5de6\u503c\uff1a\u5730\u5740 /*--------------*/ * cp + 1 //\u53f3\u503c\uff1a\u503c\u7684\u62f7\u8d1d\u5e76\u628a\u5b83+1 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ * ( cp + 1 ) //\u53f3\u503c\uff1ach\u4e4b\u540e\u7684\u5185\u5b58\u4f4d\u7f6e\u7684\u503c //\u5de6\u503c\uff1a\u4f4d\u7f6e\u672c\u8eab /*--------------*/ ++ cp //\u53f3\u503c\uff1a\u589e\u503c\u540e\u7684\u6307\u9488\u7684\u4e00\u4efd\u62f7\u8d1d\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ cp ++ //\u53f3\u503c\uff1a\u5148\u8fd4\u56decp\u503c\u7684\u4e00\u4efd\u62f7\u8d1d\u7136\u540e\u5728\u589e\u52a0cp\u7684\u503c //\u5de6\u503c\uff1a\u975e\u6cd5\u5730\u5740 /*--------------*/ *++ cp //\u53f3\u503c\uff1a\u589e\u503c\u540e\u7684\u6307\u9488\u7684\u62f7\u8d1d\u4e0a\uff0c\u53f3\u503c\u662fch\u540e\u9762\u90a3\u4e2a\u5185\u5b58\u5730\u5740\u7684\u503c //\u5de6\u503c\uff1a\u90a3\u4e2a\u4f4d\u7f6e\u672c\u8eab /*--------------*/ * cp ++ //\u540e\u7f00++\u64cd\u4f5c\u7b26\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e*\u64cd\u4f5c\u7b26 //1) ++\u64cd\u4f5c\u7b26\u4ea7\u751fcp\u7684\u4e00\u4efd\u62f7\u8d1d //2) ++\u64cd\u4f5c\u7b26\u589e\u52a0cp\u7684\u503c //3) \u5728cp\u7684\u62f7\u8d1d\u4e0a\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c //\u53f3\u503c\uff1ach\u7684\u503c //\u5de6\u503c\uff1ach\u7684\u5185\u5b58\u4f4d\u7f6e /*--------------*/ ++* cp //\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u662f\u4ece\u53f3\u5411\u5de6 //1) \u5148\u6267\u884c\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c //2) cp\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u7684\u503c\u589e\u52a01 //3) \u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u662f\u8fd9\u4e2a\u589e\u503c\u540e\u7684\u503c\u7684\u4e00\u4efd\u62f7\u8d1d //\u53f3\u503c\uff1a\u589e\u503c\u540e\u503c\u7684\u62f7\u8d1d //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ( * cp ) ++ //\u53f3\u503c\uff1a\u4e0e\u4e0a\u9762\u76f8\u540c //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ++*++ cp /* 1. \u8fd9\u4e9b\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u4ece\u53f3\u5411\u5de6 2. \u9996\u5148\u6267\u884c++cp\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e 3. \u5bf9\u62f7\u8d1d\u7684\u503c\u8fdb\u884c\u95f4\u63a5\u8bbf\u95ee\uff0c\u8bbf\u95eech\u540e\u9762\u7684\u4f4d\u7f6e(\u56e0\u4e3a\u4e0b\u4e00\u4e2a\u64cd\u4f5c\u6570\u628a\u5b83\u5f53\u5de6\u503c\u4f7f\u7528) 4. \u5728\u8fd9\u4e2a\u4f4d\u7f6e\u8fdb\u884c++\u64cd\u4f5c\uff0c\u589e\u52a0\u4ed6\u7684\u503c */ //\u53f3\u503c\uff1a\u5982\u4e0a\u6240\u8ff0 //\u5de6\u503c\uff1a\u975e\u6cd5 /*--------------*/ ++* cp ++ //\u53f3\u503c\uff1a\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26\u8bbf\u95ee\u7684\u662fcp\u6240\u6307\u5411\u7684\u4f4d\u7f6e\u800c\u4e0d\u662fcp\u6240\u6307\u5411\u4f4d\u7f6e\u7684\u540e\u9762\u7684\u90a3\u4e2a\u4f4d\u7f6e //\u5de6\u503c\uff1a\u975e\u6cd5","title":"\u6307\u9488"},{"location":"cprogram/c_base/#_12","text":"C\u51fd\u6570\u7684\u6240\u6709\u53c2\u6570\u5747\u4ee5\u201c\u4f20\u503c\u8c03\u7528\u201d\u65b9\u5f0f\u8fdb\u884c\u4f20\u9012\uff0c\u8fd9\u610f\u5473\u7740\u51fd\u6570\u5c06\u83b7\u5f97\u53c2\u6570\u503c\u7684\u4e00\u4efd\u62f7\u8d1d\u3002 \u201c\u4f20\u5740\u8c03\u7528\u201d\u6570\u7ec4\u540d\u7684\u503c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u662f\u8fd9\u4e2a\u6307\u9488\u7684\u4e00\u4efd\u62f7\u8d1d\u3002 \u5c3e\u90e8\u9012\u5f52\uff1a\u9012\u5f52\u51fd\u6570\u5185\u90e8\u6240\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\u5c31\u662f\u8c03\u7528\u81ea\u8eab\u3002","title":"\u51fd\u6570"},{"location":"cprogram/c_base/#_13","text":"\u5728C\u4e2d\uff0c\u5728\u51e0\u4e4e\u6240\u6709\u4f7f\u7528\u6570\u7ec4\u540d\u7684\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6570\u7ec4\u540d\u7684\u503c\u662f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf\uff0c\u4e5f\u5c31\u662f\u6570\u7ec4\u7b2c1\u4e2a\u5143\u7d20\u7684\u5730\u5740\u3002 \u5b83\u7684\u7c7b\u578b\u53d6\u51b3\u4e8e\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u3002 \u53ea\u6709\u5f53\u6570\u7ec4\u540d\u5728\u8868\u8fbe\u5f0f\u4e2d\u4f7f\u7528\u65f6\uff0c\u7f16\u8bd1\u5668 \u624d\u4f1a\u4e3a\u5b83\u4ea7\u751f\u4e00\u4e2a\u6307\u9488\u5e38\u91cf(\u4e0d\u662f\u6307\u9488\u53d8\u91cf)\u3002 \u53ea\u67092\u79cd\u60c5\u51b5\u4e0b\uff0c\u6570\u7ec4\u540d\u5e76\u4e0d\u7528\u6307\u9488\u5e38\u91cf\u6765\u8868\u793a\uff1a \u6570\u7ec4\u540d\u4f5c\u4e3asizeof\u64cd\u4f5c\u7b26 \u5355\u76ee\u64cd\u4f5c\u7b26&\u7684\u64cd\u4f5c\u6570 \u4e0b\u6807\u7edd\u4e0d\u4f1a\u6bd4\u6307\u9488\u66f4\u6709\u6548\u7387\uff0c\u4f46\u6307\u9488\u6709\u65f6\u4f1a\u6bd4\u4e0b\u6807\u66f4\u6709\u6548\u3002","title":"\u6570\u7ec4"},{"location":"cprogram/c_base/#_14","text":"1 2 3 4 5 6 7 8 int a [ 5 ]; /*\u58f0\u660e\u4e00\u4e2a\u6570\u7ec4\u65f6\uff0c\u7f16\u8bd1\u5668\u5c06\u6839\u636e\u58f0\u660e\u6240\u6307\u5b9a\u7684\u5143\u7d20\u6570\u91cf\u4e3a\u6570\u7ec4\u4fdd\u7559\u5185\u5b58\u7a7a\u95f4\uff0c\u7136\u540e\u518d\u521b\u5efa\u6570\u7ec4\u540d\uff0c\u5b83\u7684\u503c\u65f6\u4e00\u4e2a\u5e38\u91cf\uff0c\u6307\u5411\u8fd9\u6bb5\u7a7a\u95f4\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002*/ //*a \u5408\u6cd5 //a++ a\u7684\u503c\u662f\u4e00\u4e2a\u5e38\u91cf int * b /*\u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u65f6\uff0c\u7f16\u8bd1\u5668\u53ea\u4e3a\u6307\u9488\u672c\u8eab\u4fdd\u7559\u5b58\u50a8\u7a7a\u95f4\uff0c\u5e76\u4e0d\u4e3a\u4efb\u4f55\u6574\u578b\u503c\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u3002*/ //*b \u4e0d\u5408\u6cd5\uff0c\u6ca1\u6709\u521d\u59cb\u5316 //b++ \u53ef\u7f16\u8bd1\u901a\u8fc7","title":"\u6307\u9488\u548c\u6570\u7ec4\u5e76\u4e0d\u662f\u76f8\u7b49\u7684"},{"location":"cprogram/c_base/#_15","text":"1 2 3 4 5 char * strncpy ( char * dst , char const * src , size_t len ); //\u5982\u679cstrlen(src)\u7684\u503c\u5927\u4e8e\u7b49\u4e8elen\uff0c\u90a3\u4e48\u53ea\u6709len\u4e2a\u5b57\u7b26\u88ab\u590d\u5236\u5230dst\u4e2d\u3002\u6ce8\u610f\uff01\uff01\u5b83\u7684\u7ed3\u679c\u4e0d\u4f1a\u4ee5NUL\u5b57\u8282\u7ed3\u5c3e\uff0c\u5b83\u7684\u7ed3\u679c\u53ef\u80fd\u4e0d\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 char buffer [ BSIZE ]; strncpy ( buffer , name , BSIZE ); buffer [ BSIZE - 1 ] = '' ; strncat\u603b\u662f\u5728\u7ed3\u679c\u5b57\u7b26\u4e32\u540e\u9762\u6dfb\u52a0\u4e00\u4e2aNUL\u5b57\u8282\uff0c\u800c\u4e14\u5b83\u4e0d\u4f1a\u50cfstrncpy\u90a3\u6837\u5bf9\u76ee\u6807\u6570\u7ec4\u7528NUL\u5b57\u8282\u8fdb\u884c\u586b\u5145\u3002","title":"\u5b57\u7b26\u4e32"},{"location":"cprogram/c_base/#_16","text":"\u58f0\u660e\u7ed3\u6784\u65f6\u7684\u4e00\u79cd\u826f\u597d\u6280\u5de7\uff1a 1 2 3 4 5 6 typedef struct { xx xx } Simple ; Simple x ; Simple y [ 20 ], * z ; \u70b9\u64cd\u4f5c\u7b26\u7684\u7ed3\u5408\u6027\u65f6\u4ece\u5de6\u5411\u53f3\u3002 \u6ce8\u610f\u5982\u4e0b\u9677\u9631\uff1a 1 2 3 4 5 6 7 8 9 10 11 typedef struct { int a ; SELF_REF3 * b ; int c ; } SELF_REF3 ; //\u7c7b\u578b\u540d\u76f4\u5230\u58f0\u660e\u7684\u672b\u5c3e\u624d\u5b9a\u4e49\uff0c\u6240\u4ee5\u5728\u7ed3\u6784\u58f0\u660e\u7684\u5185\u90e8\u5b83\u5c1a\u672a\u5b9a\u4e49\u3002 typedef struct SELF_REF3_TAG { int a ; struct SELF_REF3_TAG * b ; int c ; } SELF_REF3 ; \u6240\u6709\u7ed3\u6784\u7684\u8d77\u59cb\u5b58\u50a8\u4f4d\u7f6e\u5fc5\u987b\u662f\u7ed3\u6784\u4e2d\u8fb9\u754c\u8981\u6c42\u6700\u4e25\u683c\u7684\u6570\u636e\u7c7b\u578b\u6240\u8981\u6c42\u7684\u4f4d\u7f6e\u3002 \u5411\u51fd\u6570\u4f20\u9012\u7ed3\u6784\u53c2\u6570\u662f\u4f4e\u6548\u7684\uff0c\u5c3d\u91cf\u4f20\u9012\u7ed3\u6784\u6307\u9488\uff0c\u63d0\u5347\u6548\u7387\u3002 \u5206\u914d\u7ed9\u8054\u5408\u7684\u5185\u5b58\u6570\u91cf\u53d6\u51b3\u4e0e\u5b83\u7684\u6700\u957f\u6210\u5458\u7684\u957f\u5ea6\u3002","title":"\u7ed3\u6784\u548c\u8054\u5408"},{"location":"cprogram/c_base/#_17","text":"1 2 int f ; /*\u4e00\u4e2a\u6574\u5f62\u53d8\u91cf*/ int * f ; /*\u4e00\u4e2a\u6307\u5411\u6574\u5f62\u7684\u6307\u9488*/ 1 int f (); \u5b83\u628af\u58f0\u660e\u4e3a\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u6570\u3002 1 int * f (); \u9996\u5148\u6267\u884c\u7684\u662f\u51fd\u6570\u8c03\u7528\u64cd\u4f5c\u7b26()\uff0c\u5e94\u4e3a\u5b83\u7684\u4f18\u5148\u7ea7\u9ad8\u4e8e\u95f4\u63a5\u8bbf\u95ee\u64cd\u4f5c\u7b26\u3002\u56e0\u6b64\uff0cf\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\u4e00\u4e2a\u6307\u5411\u6574\u578b\u7684\u6307\u9488\u3002 1 int ( * f )(); \u7b2c\u4e00\u5bf9\u62ec\u53f7\u53ea\u8d77\u805a\u5408\u4f5c\u7528\uff0c\u5b83\u8feb\u4f7f\u95f4\u63a5\u8bbf\u95ee\u5728\u51fd\u6570\u8c03\u7528\u4e4b\u524d\u8fdb\u884c\uff0c\u7b2c\u4e8c\u5bf9\u62ec\u53f7\u662f\u51fd\u6570\u8c03\u7528\u64cd\u4f5c\u7b26\u3002\u6240\u4ee5\uff0cf\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u5b83\u6240\u6307\u5411\u7684\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u503c\u3002 1 int * ( * f )(); f\u662f\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u53ea\u662f\u6240\u6307\u5411\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u578b\u6307\u9488\u3002 1 2 3 int f []; /*f\u662f\u4e00\u4e2a\u6574\u578b\u6570\u7ec4*/ int * f []; /*\u4e0b\u6807\u4f18\u5148\u7ea7\u66f4\u9ad8\uff0cf\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f\u6307\u5411\u6574\u578b\u7684\u6307\u9488*/ int ( * f )[]; /*\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\uff0c\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u6574\u578b*/ 1 int f ()[]; \u975e\u6cd5\u58f0\u660e\u51fd\u6570\u53ea\u80fd\u8fd4\u56de\u6807\u91cf\u503c\uff0c\u8fd9\u4e2af\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u3002 1 int f [](); \u975e\u6cd5\u58f0\u660ef\u4f3c\u4e4e\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u5143\u7d20\u7c7b\u578b\u662f\u8fd4\u56de\u503c\u4e3a\u6574\u578b\u7684\u51fd\u6570\u3002\u4f46\u662f\u6570\u7ec4\u5143\u7d20\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\uff0c\u4f46\u4e0d\u540c\u7684\u51fd\u6570\u663e\u7136\u53ef\u80fd\u5177\u6709\u4e0d\u540c\u7684\u957f\u5ea6\u3002 1 int ( * f [])(); f\u662f\u4e00\u4e2a\u5143\u7d20\u4e3a\u67d0\u79cd\u7c7b\u578b\u7684\u6307\u9488\u7684\u6570\u7ec4\u3002\u6570\u7ec4\u5143\u7d20\u7684\u7c7b\u578b\u662f\u51fd\u6570\u6307\u9488\uff0c\u5b83\u6240\u6307\u5411\u7684\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a \u6574\u578b\u503c\u3002 1 int * ( * f [])(); \u8fd9\u662f\u4e00\u4e2a\u6307\u9488\u6570\u7ec4\uff0c\u6307\u9488\u6240\u6307\u5411\u7684\u7c7b\u578b\u662f\u8fd4\u56de\u503c\u4e3a\u6574\u578b\u6307\u9488\u7684\u51fd\u6570\u3002","title":"\u9ad8\u7ea7\u6307\u9488\u8bdd\u9898"},{"location":"cprogram/c_base/#_18","text":"","title":"\u56de\u8c03\u51fd\u6570\u4e0e\u8f6c\u6362\u8868"},{"location":"cprogram/c_base/#_19","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include <stdio.h> #include \"node.h\" Node * search_list ( Node * node , void const * value , int ( * compare )( void const * , void const * )) { while ( node != NULL ) { if ( compare ( & node -> value , value ) == 0 ) { break ; } node = node -> link ; } return node ; } int compare_ints ( void const * a , void const * b ) { if ( * ( int * ) a ==* ( int * ) b ) { return 0 ; } else { return 1 ; } } desired_node = search_list ( root , & desired_value , compare_ints );","title":"\u56de\u8c03\u51fd\u6570\u5b9e\u4f8b"},{"location":"cprogram/c_base/#jump-table","text":"1 2 3 4 5 6 7 8 9 10 double add ( double , double ); double sub ( double , double ); double mul ( double , double ); double div ( double , double ); \u00b7\u00b7\u00b7 double ( * oper_func [])( double , double ) = { add , sub , mul , div ,... }; result = oper_func [ oper ]( op1 , op2 );","title":"\u8f6c\u79fb\u8868jump table"},{"location":"cprogram/c_base/#_20","text":"\u9884\u5904\u7406(preprocessing)\u9636\u6bb5\uff1a\u5220\u9664\u6ce8\u91ca\u3001\u63d2\u5165\u88ab#include\u6307\u4ee4\u5305\u542b\u7684\u6587\u4ef6\u5185\u5bb9\u3001\u5b9a\u4e49\u548c\u66ff\u6362\u7531#define\u6307\u4ee4\u5b9a\u4e49\u7684\u7b26\u53f7\u4ee5\u53ca\u786e\u5b9a\u4ee3\u7801\u7684\u90e8\u5206\u5185\u5bb9\u662f\u5426\u5e94\u8be5\u6839\u636e\u4e00\u4e9b\u6761\u4ef6\u7f16\u8bd1\u6307\u4ee4\u8fdb\u884c\u7f16\u8bd1\u3002","title":"\u9884\u5904\u7406\u5668"},{"location":"cprogram/c_base/#_21","text":"1 2 3 4 5 __FILE__ \u8fdb\u884c\u7f16\u8bd1\u7684\u6e90\u6587\u4ef6\u540d __LINE__ \u6587\u4ef6\u5f53\u524d\u7684\u884c\u53f7 __DATE__ \u6587\u4ef6\u88ab\u7f16\u8bd1\u7684\u65e5\u671f __TIME__ \u6587\u4ef6\u88ab\u7f16\u8bd1\u7684\u65f6\u95f4 __STDC__ \u9075\u5faa ANSI C , \u5176\u503c\u4e3a 1","title":"\u9884\u5b9a\u4e49\u7b26\u53f7"},{"location":"cprogram/c_base/#_22","text":"1 2 3 4 int array [ ARRAY_SIZE ] //-Dname \u503c\u4e3a1 //-Dname=stuff \u503c\u4e3astuff cc - DARRAY_SIZE = 100 prog . c","title":"\u547d\u4ee4\u884c\u5b9a\u4e49"},{"location":"cprogram/c_base/#_23","text":"1 2 3 4 5 6 #ifndef _HELLO_ #define _HELLO_ /* **All the stuff that you want in the header file */ #endif","title":"\u6587\u4ef6\u5305\u542b"},{"location":"cprogram/c_base/#_24","text":"","title":"\u8f93\u5165&amp;\u8f93\u51fa\u51fd\u6570"},{"location":"cprogram/c_base/#_25","text":"\u6587\u672c\u6d41\uff1a\u6807\u51c6\u89c4\u5b9a\u6587\u672c\u884c\u81f3\u5c11\u8fd0\u884c254\u4e2a\u5b57\u7b26\u3002\u5728MS-DOS\u7cfb\u7edf\u4e2d\uff0c\u6587\u672c\u884c\u7684\u7ed3\u675f\u65b9\u5f0f\u4ee5\u4e00\u4e2a\u56de\u8f66\u7b26\u548c\u4e00\u4e2a\u6362\u884c\u7b26\u7ed3\u5c3e\u3002UNIX\u7cfb\u7edf\u4e2d\u53ea\u4f7f\u7528\u4e00\u4e2a\u6362\u884c\u7b26\u7ed3\u5c3e\u3002 \u4e8c\u8fdb\u5236\u6d41\uff1a\u4e8c\u8fdb\u5236\u6d41\u4e2d\u7684\u5b57\u8282\u5c06\u5b8c\u5168\u6839\u636e\u7a0b\u5e8f\u7f16\u5199\u5b83\u4eec\u7684\u5f62\u5f0f\u5199\u5165\u5230\u6587\u4ef6\u6216\u8bbe\u5907\u4e2d\uff0c\u800c\u4e14\u5b8c\u5168\u6839\u636e\u5b83\u4eec\u4ece\u6587\u4ef6\u6216\u8bbe\u5907\u8bfb\u53d6\u7684\u5f62\u5f0f\u8bfb\u5165\u5230\u7a0b\u5e8f\u4e2d\u3002\u5e76\u672a\u505a\u4efb\u4f55\u6539\u53d8\u3002 FILE\u662f\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u8bbf\u95ee\u4e00\u4e2a\u6d41\u3002stdin,stdout,stderr\u90fd\u662f\u4e00\u4e2a\u6307\u5411FILE\u7ed3\u6784\u7684\u6307\u9488\u3002 I/O\u51fd\u6570\u4ee5\u4e09\u79cd\u57fa\u672c\u7684\u5f62\u5f0f\u5904\u7406\u6570\u636e\uff1a\u5355\u4e2a\u5b57\u7b26\u3001\u6587\u672c\u884c\u548c\u4e8c\u8fdb\u5236\u6570\u636e\u3002 \u6570\u636e\u7c7b\u578b \u8f93\u5165 \u8f93\u51fa \u63cf\u8ff0 \u5b57\u7b26 getchar putchar \u8bfb\u53d6(\u5199\u5165)\u5355\u4e2a\u5b57\u7b26 \u6587\u672c\u884c gets/scanf puts/printf \u6587\u672c\u884c\u7684\u8f93\u5165\u8f93\u51fa(\u672a\u683c\u5f0f\u5316/\u683c\u5f0f\u5316) \u4e8c\u8fdb\u5236 fread fwrite \u8bfb\u53d6(\u5199\u5165)\u4e8c\u8fdb\u5236\u6570\u636e","title":"\u6587\u672c\u6d41&amp;\u4e8c\u8fdb\u5236\u6d41"},{"location":"cprogram/c_base/#_26","text":"","title":"\u6807\u51c6\u51fd\u6570\u5e93"},{"location":"cprogram/c_base/#_27","text":"1 2 3 int rand ( void ); void srand ( unsigned int seed ); srand (( unsigned int ) time ( 0 ));","title":"\u968f\u673a\u6570"},{"location":"cprogram/c_base/#_28","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // \u5904\u7406\u5668\u65f6\u95f4 clock_t clock ( void ); //\u7a0b\u5e8f\u5f00\u59cb\u6267\u884c\u8d77\u5904\u7406\u5668\u6240\u6d88\u8017\u7684\u65f6\u95f4\uff0c\u53ef\u4ee5\u4e24\u4e2a\u65f6\u95f4\u76f8\u51cf\u83b7\u53d6\u7cbe\u786e\u65f6\u95f4\u3002 //\u8fd4\u56de\u65f6\u949f\u6ef4\u7b54\u6b21\u6570\uff0c\u8f6c\u6362\u79d2\uff0c\u9664\u4ee5CLOCKS_PER_SEC //\u5f53\u5929\u65f6\u95f4 time_t time ( time_t * returned_value ); //time\u51fd\u6570\u8fd4\u56de\u5f53\u524d\u7684\u65e5\u671f\u548c\u65f6\u95f4 //\u65e5\u671f\u4e0e\u65f6\u95f4\u8f6c\u6362 char * ctime ( time_t const * time_value ); //\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32,asctime(localtime(time_value)); double difftime ( time_t time1 , time_t time2 ); //\u8ba1\u7b97time1-time2\u7684\u5dee\uff0c\u7ed3\u679c\u8f6c\u6362\u4e3a\u79d2 struct tm * gmtime ( time_t const * time_value ); //UTC\u65f6\u95f4 struct tm * localtime ( time_t const * time_value ); //\u5f53\u5730\u65f6\u95f4 char * asctime ( struct tm const * tm_ptr ); //tm\u7ed3\u6784\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 size_t strftime ( char * string , size_t maxsize , char const * format , struct tm const * tm_ptr ); //tm\u7ed3\u6784\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6839\u636e\u67d0\u4e2a\u683c\u5f0f\u5b57\u7b26\u4e32\u800c\u5b9a\u7684\u5b57\u7b26\u4e32 time_t mktime ( struct tm * tm_ptr ); //\u628a\u4e00\u4e2atm\u7ed3\u6784\u8f6c\u6362\u4e3a\u4e00\u4e2atime_t\u503c","title":"\u65e5\u671f\u4e0e\u65f6\u95f4"},{"location":"cprogram/c_design/","text":"\u72b6\u6001\u6a21\u5f0f \u00b6 \u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f \u00b6 \u89c2\u5bdf\u8005\u6a21\u5f0f \u00b6 \u804c\u8d23\u94fe\u6a21\u5f0f \u00b6 \u8bbf\u95ee\u8005\u6a21\u5f0f \u00b6","title":"C\u8bed\u8a00\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"cprogram/c_design/#_1","text":"","title":"\u72b6\u6001\u6a21\u5f0f"},{"location":"cprogram/c_design/#_2","text":"","title":"\u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f"},{"location":"cprogram/c_design/#_3","text":"","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"cprogram/c_design/#_4","text":"","title":"\u804c\u8d23\u94fe\u6a21\u5f0f"},{"location":"cprogram/c_design/#_5","text":"","title":"\u8bbf\u95ee\u8005\u6a21\u5f0f"},{"location":"cprogram/c_object/","text":"\u6a21\u5757\u5316 \u00b6 \u4f7f\u7528\u7ed3\u6784\u4f53\u5c06\u6570\u636e\u7ed3\u6784\u4e0e\u4ee3\u7801\u5757\u5206\u79bb \u00b6 C\u4e0e\u9762\u5411\u5bf9\u8c61 \u00b6 \u9762\u5411\u5bf9\u8c61\u4e0e\u591a\u6001\u6027 \u00b6 \u7ee7\u627f \u00b6 \u5c01\u88c5 \u00b6 \u865a\u51fd\u6570\u8868 \u00b6 \u975e\u865a\u51fd\u6570 \u00b6","title":"C\u8bed\u8a00\u4e0e\u9762\u5411\u5bf9\u8c61"},{"location":"cprogram/c_object/#_1","text":"","title":"\u6a21\u5757\u5316"},{"location":"cprogram/c_object/#_2","text":"","title":"\u4f7f\u7528\u7ed3\u6784\u4f53\u5c06\u6570\u636e\u7ed3\u6784\u4e0e\u4ee3\u7801\u5757\u5206\u79bb"},{"location":"cprogram/c_object/#c","text":"","title":"C\u4e0e\u9762\u5411\u5bf9\u8c61"},{"location":"cprogram/c_object/#_3","text":"","title":"\u9762\u5411\u5bf9\u8c61\u4e0e\u591a\u6001\u6027"},{"location":"cprogram/c_object/#_4","text":"","title":"\u7ee7\u627f"},{"location":"cprogram/c_object/#_5","text":"","title":"\u5c01\u88c5"},{"location":"cprogram/c_object/#_6","text":"","title":"\u865a\u51fd\u6570\u8868"},{"location":"cprogram/c_object/#_7","text":"","title":"\u975e\u865a\u51fd\u6570"},{"location":"database/plan/","text":"\u672c\u6a21\u5757\u89c4\u5212 \u00b6 Sql\u8bed\u53e5 \u00b6 Mysql\u76f8\u5173 \u00b6","title":"\u89c4\u5212"},{"location":"database/plan/#_1","text":"","title":"\u672c\u6a21\u5757\u89c4\u5212"},{"location":"database/plan/#sql","text":"","title":"Sql\u8bed\u53e5"},{"location":"database/plan/#mysql","text":"","title":"Mysql\u76f8\u5173"},{"location":"goprogram/plan/","text":"\u7b80\u4ecb \u00b6 \u57fa\u672c\u8bed\u6cd5 \u00b6 \u5bb9\u5668 \u00b6 \u6d41\u7a0b\u63a7\u5236 \u00b6 \u51fd\u6570 \u00b6 \u7ed3\u6784\u4f53 \u00b6 \u501f\u53e3 \u00b6 \u5305(package) \u00b6 \u5e76\u53d1 \u00b6 \u53cd\u5c04 \u00b6 \u7f51\u7edc\u7f16\u7a0b \u00b6 \u6587\u4ef6\u5904\u7406 \u00b6 \u722c\u866b \u00b6 \u7f16\u8bd1\ud83d\udd27 \u00b6 Other \u00b6","title":"\u89c4\u5212"},{"location":"goprogram/plan/#_1","text":"","title":"\u7b80\u4ecb"},{"location":"goprogram/plan/#_2","text":"","title":"\u57fa\u672c\u8bed\u6cd5"},{"location":"goprogram/plan/#_3","text":"","title":"\u5bb9\u5668"},{"location":"goprogram/plan/#_4","text":"","title":"\u6d41\u7a0b\u63a7\u5236"},{"location":"goprogram/plan/#_5","text":"","title":"\u51fd\u6570"},{"location":"goprogram/plan/#_6","text":"","title":"\u7ed3\u6784\u4f53"},{"location":"goprogram/plan/#_7","text":"","title":"\u501f\u53e3"},{"location":"goprogram/plan/#package","text":"","title":"\u5305(package)"},{"location":"goprogram/plan/#_8","text":"","title":"\u5e76\u53d1"},{"location":"goprogram/plan/#_9","text":"","title":"\u53cd\u5c04"},{"location":"goprogram/plan/#_10","text":"","title":"\u7f51\u7edc\u7f16\u7a0b"},{"location":"goprogram/plan/#_11","text":"","title":"\u6587\u4ef6\u5904\u7406"},{"location":"goprogram/plan/#_12","text":"","title":"\u722c\u866b"},{"location":"goprogram/plan/#_13","text":"","title":"\u7f16\u8bd1\ud83d\udd27"},{"location":"goprogram/plan/#other","text":"","title":"Other"},{"location":"linux/plan/","text":"\u672c\u6a21\u5757\u89c4\u5212 \u00b6 \u4e00\u4e9b\u5e38\u7528\u7684linux\u547d\u4ee4 \u00b6 \u670d\u52a1\u5668\u5f00\u53d1 \u00b6 unix\u7cfb\u7edf/\u7f51\u7edc\u7f16\u7a0b \u00b6 \u64cd\u4f5c\u7cfb\u7edf\u4e0e\u7f16\u8bd1\u539f\u7406\u57fa\u7840 \u00b6","title":"\u89c4\u5212"},{"location":"linux/plan/#_1","text":"","title":"\u672c\u6a21\u5757\u89c4\u5212"},{"location":"linux/plan/#linux","text":"","title":"\u4e00\u4e9b\u5e38\u7528\u7684linux\u547d\u4ee4"},{"location":"linux/plan/#_2","text":"","title":"\u670d\u52a1\u5668\u5f00\u53d1"},{"location":"linux/plan/#unix","text":"","title":"unix\u7cfb\u7edf/\u7f51\u7edc\u7f16\u7a0b"},{"location":"linux/plan/#_3","text":"","title":"\u64cd\u4f5c\u7cfb\u7edf\u4e0e\u7f16\u8bd1\u539f\u7406\u57fa\u7840"},{"location":"math/plan/","text":"\u672c\u6a21\u5757\u89c4\u5212 \u00b6 \u7b80\u5355\u7b97\u6cd5\u6570\u5b66 \u00b6 \u56fe\u5f62\u5b66\u6570\u5b66 \u00b6 \u77e2\u91cf \u00b6 \u77e9\u9635 \u00b6","title":"\u89c4\u5212"},{"location":"math/plan/#_1","text":"","title":"\u672c\u6a21\u5757\u89c4\u5212"},{"location":"math/plan/#_2","text":"","title":"\u7b80\u5355\u7b97\u6cd5\u6570\u5b66"},{"location":"math/plan/#_3","text":"","title":"\u56fe\u5f62\u5b66\u6570\u5b66"},{"location":"math/plan/#_4","text":"","title":"\u77e2\u91cf"},{"location":"math/plan/#_5","text":"","title":"\u77e9\u9635"},{"location":"network/plan/","text":"1 \u00b6","title":"\u89c4\u5212"},{"location":"network/plan/#1","text":"","title":"1"},{"location":"source/plan/","text":"\u672c\u6a21\u5757\u89c4\u5212 \u00b6 (\u5305\u62ec\u5355\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u89c4\u5212) Nginx \u00b6 Redis \u00b6 libevent \u00b6","title":"\u89c4\u5212"},{"location":"source/plan/#_1","text":"(\u5305\u62ec\u5355\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u89c4\u5212)","title":"\u672c\u6a21\u5757\u89c4\u5212"},{"location":"source/plan/#nginx","text":"","title":"Nginx"},{"location":"source/plan/#redis","text":"","title":"Redis"},{"location":"source/plan/#libevent","text":"","title":"libevent"},{"location":"source/tinyhttpd/","text":"TinyHttpd\u6e90\u7801 \u00b6 Tinyhttpd \u662fJ. David Blackstone\u57281999\u5e74\u5199\u7684\u4e00\u4e2a\u4e0d\u5230 500 \u884c\u7684\u8d85\u8f7b\u91cf\u578b Http Server\uff0c\u7528\u6765\u5b66\u4e60\u975e\u5e38\u4e0d\u9519\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u771f\u6b63\u7406\u89e3\u670d\u52a1\u5668\u7a0b\u5e8f\u7684\u672c\u8d28\u3002\u5b98\u7f51: http://tinyhttpd.sourceforge.net \u6e90\u7801&\u6ce8\u91ca \u00bavid's webserver */ /* This is a simple webserver. * Created November 1999 by J. David Blackstone. * CSE 4344 (Network concepts), Prof. Zeigler * University of Texas at Arlington */ /* This program compiles for Sparc Solaris 2.6. * To compile for Linux: * 1) Comment out the #include <pthread.h> line. * 2) Comment out the line that defines the variable newthread. * 3) Comment out the two lines that run pthread_create(). * 4) Uncomment the line that runs accept_request(). * 5) Remove -lsocket from the Makefile. */ #include <stdio.h> #include <sys/socket.h> #include <sys/types.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <ctype.h> #include <strings.h> #include <string.h> #include <sys/stat.h> #include <pthread.h> #include <sys/wait.h> #include <stdlib.h> #include <stdint.h> /***************************** * \u68c0\u67e5\u53c2\u6570c\u662f\u5426\u4e3a\u7a7a\u683c\u5b57\u7b26 * \u4e5f\u5c31\u662f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u683c('')\u3001\u5b9a\u4f4d\u5b57\u7b26('\\t')\u3001CR('\\r')\u3001\u6362\u884c('\\n')\u3001\u5782\u76f4\u5b9a\u4f4d\u5b57\u7b26('\\v')\u3001\u6216\u7ffb\u9875('\\f')\u7684\u60c5\u51b5\u3002 * \u53c2\u6570\u4e3a\u7a7a\u767d\u5b57\u7b26\u8fd4\u56de\u975e0\uff0c\u5426\u5219\u8fd4\u56de0\u3002 * ***************************/ #define ISspace(x) isspace((int)(x)) #define SERVER_STRING \"Server: jdbhttpd/0.1.0\\r\\n\" /* \u5b9a\u4e49server\u540d\u79f0 */ #define STDIN 0 #define STDOUT 1 #define STDERR 2 void accept_request ( void * ); void bad_request ( int ); void cat ( int , FILE * ); void cannot_execute ( int ); void error_die ( const char * ); void execute_cgi ( int , const char * , const char * , const char * ); int get_line ( int , char * , int ); void headers ( int , const char * ); void not_found ( int ); void serve_file ( int , const char * ); int startup ( u_short * ); void unimplemented ( int ); // Http\u8bf7\u6c42\uff0c\u540e\u7eed\u4e3b\u8981\u662f\u5904\u7406\u8fd9\u4e2a\u5934 // GET / HTTP/1.1 // Host: 192.168.0.23:47310 // Connection: keep-alive // Upgrade-Insecure-Requests: 1 // User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 // Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*; q = 0.8 // Accept - Encoding: gzip, deflate, sdch // Accept - Language : zh - CN, zh; q = 0.8 // Cookie: __guid = 179317988.1576506943281708800.1510107225903.8862; monitor_count = 5 // POST / color1.cgi HTTP / 1.1 // Host: 192.168.0.23 : 47310 // Connection : keep - alive // Content - Length : 10 // Cache - Control : max - age = 0 // Origin : http ://192.168.0.23:40786 // Upgrade - Insecure - Requests : 1 // User - Agent : Mozilla / 5.0 (Windows NT 6.1; WOW64) AppleWebKit / 537.36 (KHTML, like Gecko) Chrome / 55.0.2883.87 Safari / 537.36 // Content - Type : application / x - www - form - urlencoded // Accept : text / html, application / xhtml + xml, application / xml; q = 0.9, image / webp, */*;q=0.8 // Referer: http://192.168.0.23:47310/ // Accept-Encoding: gzip, deflate // Accept-Language: zh-CN,zh;q=0.8 // Cookie: __guid=179317988.1576506943281708800.1510107225903.8862; monitor_count=281 // Form Data // color=gray /********************************************************************** * A request has caused a call to accept() on the server port to return. * Process the request appropriately. * Parameters: the socket connected to the client(\u8fde\u63a5\u5230\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57) ***********************************************************************/ void accept_request ( void * arg ) { int client = ( intptr_t ) arg ; /* intptr_t\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u59cb\u7ec8\u4e0e\u5730\u5740\u4f4d\u6570\u76f8\u540c */ char buf [ 1024 ]; size_t numchars ; char method [ 255 ]; char url [ 255 ]; char path [ 512 ]; size_t i , j ; struct stat st ; /* \u6587\u4ef6\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6shux */ int cgi = 0 ; /* becomes true if server decides this is a CGI program */ char * query_string = NULL ; /**************************** * \u63a5\u6536\u6570\u636e\u653e\u5165buff\u7f13\u51b2\u533a * \u8fd4\u56de\u5b57\u8282\u6570 * **************************/ numchars = get_line ( client , buf , sizeof ( buf )); i = 0 ; j = 0 ; /************************************ * \u4e3e\u4f8b:\"GET / HTTP/1.1\\n\" * \u63d0\u53d6\u5b57\u7b26\u4e32GET * ISspace\u53c2\u6570\u4e3a\u7a7a\u767d\u5b57\u7b26\u8fd4\u56de\u975e0\uff0c\u5426\u5219\u8fd4\u56de0\u3002 * **********************************/ while ( ! ISspace ( buf [ i ]) && ( i < sizeof ( method ) - 1 )) { method [ i ] = buf [ i ]; i ++ ; } j = i ; method [ i ] = '\\0' ; printf ( \"LINE[%d] \\t function[%s] \\t method=[%s] \\n \" , __LINE__ , __FUNCTION__ , method ); /************************************ * \u51fd\u6570\u8bf4\u660e\uff1astrcasecmp()\u7528\u6765\u6bd4\u8f83\u53c2\u6570s1 \u548cs2 \u5b57\u7b26\u4e32\uff0c\u6bd4\u8f83\u65f6\u4f1a\u81ea\u52a8\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5dee\u5f02\u3002 * \u8fd4\u56de\u503c\uff1a\u82e5\u53c2\u6570s1 \u548cs2 \u5b57\u7b26\u4e32\u76f8\u540c\u5219\u8fd4\u56de0\u3002 * s1 \u957f\u5ea6\u5927\u4e8es2 \u957f\u5ea6\u5219\u8fd4\u56de\u5927\u4e8e0 \u7684\u503c\uff0c * s1 \u957f\u5ea6\u82e5\u5c0f\u4e8es2 \u957f\u5ea6\u5219\u8fd4\u56de\u5c0f\u4e8e0 \u7684\u503c\u3002 * *********************************/ if ( strcasecmp ( method , \"GET\" ) && strcasecmp ( method , \"POST\" )) { unimplemented ( client ); /* \u5982\u679c\u63a5\u6536\u5230\u7684\u6570\u636e\u4e2d\u65e2\u6709GET\u65b9\u6cd5\u4e0ePOST\u65b9\u6cd5\uff0c\u5219\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u8be5web\u65b9\u6cd5\u5c1a\u672a\u5b9e\u73b0 */ return ; } if ( strcasecmp ( method , \"POST\" ) == 0 ) cgi = 1 ; /* cgi\u4e3a\u6807\u5fd7\u4f4d\uff0c\u7f6e1\u8bf4\u660e\u5f00\u542fcgi\u89e3\u6790 */ i = 0 ; while ( ISspace ( buf [ j ]) && ( j < numchars )) /* \u5982\u679c\u4e3a\u7a7a\u767d\u5b57\u7b26\u5219\u8df3\u8fc7 */ j ++ ; /********************************* * //\u5f97\u5230 \"/\" * \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u7684http\u7684\u7f51\u5740\u4e3ahttp://x.x.x.x:8888/index.html * \u90a3\u4e48\u4f60\u5f97\u5230\u7684\u7b2c\u4e00\u6761http\u4fe1\u606f\u4e3aGET /index.html HTTP/1.1\uff0c\u90a3\u4e48 * \u89e3\u6790\u5f97\u5230\u7684\u5c31\u662f/index.html **********************************/ while ( ! ISspace ( buf [ j ]) && ( i < sizeof ( url ) - 1 ) && ( j < numchars )) { url [ i ] = buf [ j ]; i ++ ; j ++ ; } url [ i ] = '\\0' ; if ( strcasecmp ( method , \"GET\" ) == 0 ) { query_string = url ; while (( * query_string != '?' ) && ( * query_string != '\\0' )) /* \u5982\u679c\u662fGET\u8bf7\u6c42\uff0curl\u53ef\u80fd\u4f1a\u5e26\u6709?,\u6709\u67e5\u8be2\u53c2\u6570 */ query_string ++ ; if ( * query_string == '?' ) { cgi = 1 ; * query_string = '\\0' ; /* \u5c06\u89e3\u6790\u53c2\u6570\u622a\u53d6\u4e0b\u6765 */ query_string ++ ; } } sprintf ( path , \"htdocs%s\" , url ); /* url\u4e2d\u7684\u8def\u5f84\u683c\u5f0f\u5316\u5230path */ if ( path [ strlen ( path ) - 1 ] == '/' ) /* \u5982\u679cpath\u53ea\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u9996\u9875index.html */ strcat ( path , \"index.html\" ); /************************************** * \u51fd\u6570\u5b9a\u4e49: int stat(const char *file_name, struct stat *buf); * \u51fd\u6570\u8bf4\u660e: \u901a\u8fc7\u6587\u4ef6\u540dfilename\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5e76\u4fdd\u5b58\u5728buf\u6240\u6307\u7684\u7ed3\u6784\u4f53stat\u4e2d * \u8fd4\u56de\u503c: \u6267\u884c\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1\uff0c\u9519\u8bef\u4ee3\u7801\u5b58\u4e8eerrno\uff08\u9700\u8981include <errno.h>\uff09 * ***********************************/ if ( stat ( path , & st ) == - 1 ) { /* \u5047\u5982\u8bbf\u95ee\u7684\u7f51\u9875\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u65ad\u7684\u8bfb\u53d6\u5269\u4e0b\u7684\u8bf7\u6c42\u5934\u4fe1\u606f\uff0c\u5e76\u4e22\u5f03\u5373\u53ef */ while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); not_found ( client ); /* \u6700\u540e\u8fd4\u56de\u7f51\u9875\u4e0d\u5b58\u5728 */ } else { /*************************************** * st_mode\u662f\u7528\u7279\u5f81\u4f4d\u6765\u8868\u793a\u6587\u4ef6\u7c7b\u578b\u7684 * S_IFMT 0170000 \u6587\u4ef6\u7c7b\u578b\u7684\u4f4d\u906e\u7f69 * \u5982\u679c\u8def\u5f84\u662f\u4e2a\u76ee\u5f55\uff0c\u90a3\u5c31\u5c06\u4e3b\u9875\u8fdb\u884c\u663e\u793a ***************************************/ if (( st . st_mode & S_IFMT ) == S_IFDIR ) /* \u76ee\u5f55 */ strcat ( path , \"/index.html\" ); /* \u5982\u679c\u4f60\u7684\u6587\u4ef6\u9ed8\u8ba4\u662f\u6709\u6267\u884c\u6743\u9650\u7684\uff0c\u81ea\u52a8\u89e3\u6790\u6210cgi\u7a0b\u5e8f\uff0c\u5982\u679c\u6709\u6267\u884c\u6743\u9650\u4f46\u662f\u4e0d\u80fd\u6267\u884c\uff0c\u4f1a\u63a5\u53d7\u5230\u62a5\u9519\u4fe1\u53f7 */ if (( st . st_mode & S_IXUSR ) || /* S_IXUSR:\u6587\u4ef6\u6240\u6709\u8005\u5177\u53ef\u6267\u884c\u6743\u9650 */ ( st . st_mode & S_IXGRP ) || /* S_IXGRP:\u7528\u6237\u7ec4\u5177\u53ef\u6267\u884c\u6743\u9650 */ ( st . st_mode & S_IXOTH ) ) /* S_IXOTH:\u5176\u4ed6\u7528\u6237\u5177\u53ef\u8bfb\u53d6\u6743\u9650 */ cgi = 1 ; if ( ! cgi ) serve_file ( client , path ); /* \u8bfb\u53d6\u9759\u6001\u6587\u4ef6\u8fd4\u56de\u7ed9\u8bf7\u6c42\u7684http\u5ba2\u6237\u7aef */ else execute_cgi ( client , path , method , query_string ); /* \u6267\u884ccgi\u52a8\u6001\u89e3\u6790 */ } close ( client ); /* \u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5173\u95edsocket */ } /**********************************************************************/ /* Inform the client that a request it has made has a problem. * Parameters: client socket */ /**********************************************************************/ void bad_request ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 400 BAD REQUEST \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"Content-type: text/html \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"<P>Your browser sent a bad request, \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"such as a POST without a Content-Length. \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); } /**********************************************************************/ /* Put the entire contents of a file out on a socket. This function * is named after the UNIX \"cat\" command, because it might have been * easier just to do something like pipe, fork, and exec(\"cat\"). * Parameters: the client socket descriptor * FILE pointer for the file to cat */ /**********************************************************************/ void cat ( int client , FILE * resource ) { char buf [ 1024 ]; fgets ( buf , sizeof ( buf ), resource ); while ( ! feof ( resource )) /* \u5faa\u73af\u8bfb\u53d6 */ { send ( client , buf , strlen ( buf ), 0 ); fgets ( buf , sizeof ( buf ), resource ); } } /**********************************************************************/ /* Inform the client that a CGI script could not be executed. * Parameter: the client socket descriptor. */ /**********************************************************************/ void cannot_execute ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 500 Internal Server Error \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<P>Error prohibited CGI execution. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Print out an error message with perror() (for system errors; based * on value of errno, which indicates system call errors) and exit the * program indicating an error. */ /**********************************************************************/ void error_die ( const char * sc ) { perror ( sc ); exit ( 1 ); } /**********************************************************************/ /* Execute a CGI script. Will need to set environment variables as * appropriate. (\u6267\u884ccgi\u52a8\u6001\u89e3\u6790) * Parameters: client socket descriptor * path to the CGI script */ /**********************************************************************/ void execute_cgi ( int client , const char * path , const char * method , const char * query_string ) { char buf [ 1024 ]; int cgi_output [ 2 ]; /* \u8bfb\u5199\u7ba1\u9053\u7684\u58f0\u660e */ int cgi_input [ 2 ]; pid_t pid ; int status ; int i ; char c ; int numchars = 1 ; int content_length = - 1 ; buf [ 0 ] = 'A' ; buf [ 1 ] = '\\0' ; if ( strcasecmp ( method , \"GET\" ) == 0 ) /* \u5982\u679c\u662fGET\u8bf7\u6c42,\u8bfb\u53d6\u5e76\u4e14\u4e22\u5f03\u5934\u4fe1\u606f */ while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); else if ( strcasecmp ( method , \"POST\" ) == 0 ) /*POST*/ { numchars = get_line ( client , buf , sizeof ( buf )); while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* \u5faa\u73af\u8bfb\u53d6\u5934\u4fe1\u606f\u627e\u5230Content-Length\u5b57\u6bb5\u7684\u503c */ { buf [ 15 ] = '\\0' ; /* \"Content-Length: 15\" */ if ( strcasecmp ( buf , \"Content-Length:\" ) == 0 ) content_length = atoi ( & ( buf [ 16 ])); numchars = get_line ( client , buf , sizeof ( buf )); } if ( content_length == - 1 ) { bad_request ( client ); /* \u9519\u8bef\u8bf7\u6c42 */ return ; } } else /*HEAD or other*/ { } /**************************************** * #include<unistd.h> * int pipe(int filedes[2]); * \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff0c\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 * \u53c2\u6570\u6570\u7ec4\u5305\u542bpipe\u4f7f\u7528\u7684\u4e24\u4e2a\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u3002fd[0]:\u8bfb\u7ba1\u9053\uff0cfd[1]:\u5199\u7ba1\u9053\u3002 * \u5fc5\u987b\u5728fork()\u4e2d\u8c03\u7528pipe()\uff0c\u5426\u5219\u5b50\u8fdb\u7a0b\u4e0d\u4f1a\u7ee7\u627f\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 * \u4e24\u4e2a\u8fdb\u7a0b\u4e0d\u5171\u4eab\u7956\u5148\u8fdb\u7a0b\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528pipe\u3002\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u547d\u540d\u7ba1\u9053\u3002 * pipe(cgi_output)\u6267\u884c\u6210\u529f\u540e\uff0ccgi_output[0]:\u8bfb\u901a\u9053 cgi_output[1]:\u5199\u901a\u9053 * **************************************/ if ( pipe ( cgi_output ) < 0 ) { cannot_execute ( client ); return ; } if ( pipe ( cgi_input ) < 0 ) { cannot_execute ( client ); return ; } if ( ( pid = fork ()) < 0 ) { cannot_execute ( client ); return ; } sprintf ( buf , \"HTTP/1.0 200 OK \\r\\n \" ); /* \u8fd4\u56de\u6b63\u786e\u54cd\u5e94\u7801200 */ send ( client , buf , strlen ( buf ), 0 ); if ( pid == 0 ) /* child: CGI script */ { char meth_env [ 255 ]; char query_env [ 255 ]; char length_env [ 255 ]; dup2 ( cgi_output [ 1 ], STDOUT ); /* 1\u4ee3\u8868\u7740stdout\uff0c0\u4ee3\u8868\u7740stdin\uff0c\u5c06\u7cfb\u7edf\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u4e3acgi_output[1] */ dup2 ( cgi_input [ 0 ], STDIN ); /* \u5c06\u7cfb\u7edf\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u4e3acgi_input[0]\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u5173\u952e\uff0ccgi\u7a0b\u5e8f\u4e2d\u7528\u7684\u662f\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8fdb\u884c\u4ea4\u4e92 */ close ( cgi_output [ 0 ]); /* \u5173\u95ed\u4e86cgi_output\u4e2d\u7684\u8bfb\u901a\u9053 */ close ( cgi_input [ 1 ]); /* \u5173\u95ed\u4e86cgi_input\u4e2d\u7684\u5199\u901a\u9053 */ sprintf ( meth_env , \"REQUEST_METHOD=%s\" , method ); putenv ( meth_env ); if ( strcasecmp ( method , \"GET\" ) == 0 ) { sprintf ( query_env , \"QUERY_STRING=%s\" , query_string ); putenv ( query_env ); } else { /* POST */ sprintf ( length_env , \"CONTENT_LENGTH=%d\" , content_length ); putenv ( length_env ); } /************************************************** * #include<unistd.h> * int execl(const char * path,const char * arg,....); * execl()\u7528\u6765\u6267\u884c\u53c2\u6570path\u5b57\u7b26\u4e32\u6240\u4ee3\u8868\u7684\u6587\u4ef6\u8def\u5f84\uff0c * \u63a5\u4e0b\u6765\u7684\u53c2\u6570\u4ee3\u8868\u6267\u884c\u8be5\u6587\u4ef6\u65f6\u4f20\u9012\u8fc7\u53bb\u7684argv(0)\u3001argv[1]\u2026\u2026\uff0c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u7528\u7a7a\u6307\u9488(NULL)\u4f5c\u7ed3\u675f\u3002 * \u5982\u679c\u6267\u884c\u6210\u529f\u5219\u51fd\u6570\u4e0d\u4f1a\u8fd4\u56de\uff0c\u6267\u884c\u5931\u8d25\u5219\u76f4\u63a5\u8fd4\u56de-1\uff0c\u5931\u8d25\u539f\u56e0\u5b58\u4e8eerrno\u4e2d\u3002 * ***********************************************/ execl ( path , NULL ); exit ( 0 ); } else { /* parent */ close ( cgi_output [ 1 ]); /* \u5173\u95ed\u4e86cgi_output\u4e2d\u7684\u5199\u901a\u9053\uff0c\u6ce8\u610f\u8fd9\u662f\u7236\u8fdb\u7a0b\u4e2dcgi_output\u53d8\u91cf\u548c\u5b50\u8fdb\u7a0b\u8981\u533a\u5206\u5f00 */ close ( cgi_input [ 0 ]); /* \u5173\u95ed\u4e86cgi_input\u4e2d\u7684\u8bfb\u901a\u9053 */ if ( strcasecmp ( method , \"POST\" ) == 0 ) for ( i = 0 ; i < content_length ; i ++ ) { recv ( client , & c , 1 , 0 ); write ( cgi_input [ 1 ], & c , 1 ); } while ( read ( cgi_output [ 0 ], & c , 1 ) > 0 ) send ( client , & c , 1 , 0 ); close ( cgi_output [ 0 ]); close ( cgi_input [ 1 ]); /*************************************** * pid_t waitpid(pid_t pid, int * status, int options); * waitpid()\u4f1a\u6682\u65f6\u505c\u6b62\u76ee\u524d\u8fdb\u7a0b\u7684\u6267\u884c, \u76f4\u5230\u6709\u4fe1\u53f7\u6765\u5230\u6216\u5b50\u8fdb\u7a0b\u7ed3\u675f. * \u5982\u679c\u5728\u8c03\u7528wait()\u65f6\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u7ed3\u675f, \u5219wait()\u4f1a\u7acb\u5373\u8fd4\u56de\u5b50\u8fdb\u7a0b\u7ed3\u675f\u72b6\u6001\u503c. \u5b50\u8fdb\u7a0b\u7684\u7ed3\u675f\u72b6\u6001\u503c\u4f1a\u7531\u53c2\u6570status * \u8fd4\u56de,\u800c\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u8bc6\u522b\u7801\u4e5f\u4f1a\u4e00\u5feb\u8fd4\u56de. * \u5982\u679c\u4e0d\u5728\u610f\u7ed3\u675f\u72b6\u6001\u503c, \u5219\u53c2\u6570status \u53ef\u4ee5\u8bbe\u6210NULL. \u53c2\u6570pid \u4e3a\u6b32\u7b49\u5f85\u7684\u5b50\u8fdb\u7a0b\u8bc6\u522b\u7801, \u5176\u4ed6\u6570\u503c\u610f\u4e49\u5982\u4e0b\uff1a * 1\u3001pid<-1 \u7b49\u5f85\u8fdb\u7a0b\u7ec4\u8bc6\u522b\u7801\u4e3apid \u7edd\u5bf9\u503c\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b. * 2\u3001pid=-1 \u7b49\u5f85\u4efb\u4f55\u5b50\u8fdb\u7a0b, \u76f8\u5f53\u4e8ewait(). * 3\u3001pid=0 \u7b49\u5f85\u8fdb\u7a0b\u7ec4\u8bc6\u522b\u7801\u4e0e\u76ee\u524d\u8fdb\u7a0b\u76f8\u540c\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b. * 4\u3001pid>0 \u7b49\u5f85\u4efb\u4f55\u5b50\u8fdb\u7a0b\u8bc6\u522b\u7801\u4e3apid \u7684\u5b50\u8fdb\u7a0b. * ************************************/ waitpid ( pid , & status , 0 ); } } /**********************************************************************/ /* Get a line from a socket, whether the line ends in a newline, * carriage return, or a CRLF combination. Terminates the string read * with a null character. If no newline indicator is found before the * end of the buffer, the string is terminated with a null. If any of * the above three line terminators is read, the last character of the * string will be a linefeed and the string will be terminated with a * null character. * Parameters: the socket descriptor * the buffer to save the data in * the size of the buffer * Returns: the number of bytes stored (excluding null) */ /**********************************************************************/ int get_line ( int sock , char * buf , int size ) { int i = 0 ; char c = '\\0' ; int n ; while (( i < size - 1 ) && ( c != '\\n' )) { n = recv ( sock , & c , 1 , 0 ); /* DEBUG printf(\"%02X\\n\", c); */ if ( n > 0 ) { if ( c == '\\r' ) { n = recv ( sock , & c , 1 , MSG_PEEK ); /* DEBUG printf(\"%02X\\n\", c); */ if (( n > 0 ) && ( c == '\\n' )) recv ( sock , & c , 1 , 0 ); else c = '\\n' ; } buf [ i ] = c ; i ++ ; } else c = '\\n' ; } buf [ i ] = '\\0' ; return ( i ); } /**********************************************************************/ /* Return the informational HTTP headers about a file. */ /* Parameters: the socket to print the headers on * the name of the file */ /**********************************************************************/ void headers ( int client , const char * filename ) { char buf [ 1024 ]; ( void ) filename ; /* could use filename to determine file type */ strcpy ( buf , \"HTTP/1.0 200 OK \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); strcpy ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); strcpy ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Give a client a 404 not found status message. */ /**********************************************************************/ void not_found ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 404 NOT FOUND \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<HTML><TITLE>Not Found</TITLE> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<BODY><P>The server could not fulfill \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"your request because the resource specified \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"is unavailable or nonexistent. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</BODY></HTML> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Send a regular file to the client. Use headers, and report * errors to client if they occur. * Parameters: a pointer to a file structure produced from the socket * file descriptor * the name of the file to serve */ /**********************************************************************/ void serve_file ( int client , const char * filename ) { FILE * resource = NULL ; int numchars = 1 ; char buf [ 1024 ]; buf [ 0 ] = 'A' ; buf [ 1 ] = '\\0' ; while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); resource = fopen ( filename , \"r\" ); if ( resource == NULL ) not_found ( client ); else { headers ( client , filename ); cat ( client , resource ); } fclose ( resource ); } /**********************************************************************/ /* This function starts the process of listening for web connections * on a specified port. If the port is 0, then dynamically allocate a * port and modify the original port variable to reflect the actual * port. * Parameters: pointer to variable containing the port to connect on * Returns: the socket * \u6b64\u51fd\u6570\u542f\u52a8\u5728\u6307\u5b9a\u7aef\u53e3\u4e0a\u4fa6\u542cWeb\u8fde\u63a5\u7684\u8fc7\u7a0b\u3002 * \u5982\u679c\u7aef\u53e3\u4e3a0\uff0c\u5219\u52a8\u6001\u5206\u914d\u7aef\u53e3\u5e76\u4fee\u6539\u539f\u59cb\u7aef\u53e3\u53d8\u91cf\u4ee5\u53cd\u6620\u5b9e\u9645\u7aef\u53e3\u3002 * \u53c2\u6570\uff1a\u6307\u5411\u5305\u542b\u8fde\u63a5\u7aef\u53e3\u7684\u53d8\u91cf\u7684\u6307\u9488 * \u8fd4\u56de\uff1a\u5957\u63a5\u5b57 * */ /**********************************************************************/ int startup ( u_short * port ) { int httpd = 0 ; int on = 1 ; struct sockaddr_in name ; /********************************** * socket\u7cfb\u7edf\u8c03\u7528\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57 * \u8fd4\u56de\uff1a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8be5\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u8be5\u5957\u63a5\u5b57 * int socket(int domain, int type, int protocol); * domain\u6307\u5b9a\u534f\u8bae\u65cf\uff0c\u6700\u5e38\u7528\u7684\u662fAF_UNIX(unix\u548clinux\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u7684\u672c\u5730\u5957\u63a5\u5b57)\u548cAF_INET(UNIX\u7f51\u7edc\u5957\u63a5\u5b57) * type\u6307\u5b9a\u5957\u63a5\u5b57\u7684\u901a\u4fe1\u7c7b\u578b\uff0cSOCK_STREAM(\u6709\u5e8f\uff0c\u53ef\u9760\uff0c\u9762\u5411\u8fde\u63a5\u7684\u53cc\u5411\u5b57\u8282\u6d41)\u548cSOCK_DGRAM(\u6570\u636e\u62a5\u670d\u52a1) * protocol\u6307\u5b9a\u4f7f\u7528\u7684\u534f\u8bae\uff0c\u4e00\u822c\u7531\u5957\u63a5\u5b57\u7c7b\u578b\u548c\u5957\u63a5\u5b57\u57df\u6765\u51b3\u5b9a\uff0c\u4e00\u822c\u9ed8\u8ba40 * *******************************/ httpd = socket ( PF_INET , SOCK_STREAM , 0 ); if ( httpd == - 1 ) error_die ( \"socket\" ); memset ( & name , 0 , sizeof ( name )); /* \u7ed3\u6784\u4f53\u6e05\u7a7a\u7f6e\u96f6 */ name . sin_family = AF_INET ; name . sin_port = htons ( * port ); /* host to network, short \u77ed\u6574\u6570\u4ece\u4e3b\u673a\u5b57\u8282\u5e8f\u5230\u7f51\u7edc\u5b57\u8282\u5e8f\u8f6c\u6362 */ /******************************** * INADDR_ANY\u8f6c\u6362\u8fc7\u6765\u5c31\u662f0.0.0.0\uff0c\u6cdb\u6307\u672c\u673a\u7684\u610f\u601d\uff0c\u4e5f\u5c31\u662f\u8868\u793a\u672c\u673a\u7684\u6240\u6709IP * \u56e0\u4e3a\u6709\u4e9b\u673a\u5b50\u4e0d\u6b62\u4e00\u5757\u7f51\u5361\uff0c\u591a\u7f51\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u5c31\u8868\u793a\u6240\u6709\u7f51\u5361ip\u5730\u5740\u7684\u610f\u601d\u3002 * * \u6bd4\u5982\u4e00\u53f0\u7535\u8111\u67093\u5757\u7f51\u5361\uff0c\u5206\u522b\u8fde\u63a5\u4e09\u4e2a\u7f51\u7edc\uff0c\u90a3\u4e48\u8fd9\u53f0\u7535\u8111\u5c31\u67093\u4e2aip\u5730\u5740\u4e86\uff0c\u5982\u679c\u67d0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u76d1\u542c\u67d0\u4e2a\u7aef\u53e3\uff0c\u90a3\u4ed6\u8981\u76d1\u542c\u54ea\u4e2a\u7f51\u5361\u5730\u5740\u7684\u7aef\u53e3\u5462\uff1f * * \u5982\u679c\u7ed1\u5b9a\u67d0\u4e2a\u5177\u4f53\u7684ip\u5730\u5740\uff0c\u4f60\u53ea\u80fd\u76d1\u542c\u4f60\u6240\u8bbe\u7f6e\u7684ip\u5730\u5740\u6240\u5728\u7684\u7f51\u5361\u7684\u7aef\u53e3\uff0c\u5176\u5b83\u4e24\u5757\u7f51\u5361\u65e0\u6cd5\u76d1\u542c\u7aef\u53e3\uff0c * \u5982\u679c\u6211\u9700\u8981\u4e09\u4e2a\u7f51\u5361\u90fd\u76d1\u542c\uff0c\u90a3\u5c31\u9700\u8981\u7ed1\u5b9a3\u4e2aip\uff0c\u4e5f\u5c31\u7b49\u4e8e\u9700\u8981\u7ba1\u74063\u4e2a\u5957\u63a5\u5b57\u8fdb\u884c\u6570\u636e\u4ea4\u6362\uff0c\u8fd9\u6837\u5c82\u4e0d\u662f\u5f88\u7e41\u7410\uff1f * * \u6240\u4ee5\u51fa\u73b0INADDR_ANY\uff0c\u4f60\u53ea\u9700\u7ed1\u5b9aINADDR_ANY\uff0c\u7ba1\u7406\u4e00\u4e2a\u5957\u63a5\u5b57\u5c31\u884c\uff0c\u4e0d\u7ba1\u6570\u636e\u662f\u4ece\u54ea\u4e2a\u7f51\u5361\u8fc7\u6765\u7684\uff0c\u53ea\u8981\u662f\u7ed1\u5b9a\u7684\u7aef\u53e3\u53f7\u8fc7\u6765\u7684\u6570\u636e\uff0c\u90fd\u53ef\u4ee5\u63a5\u6536\u5230\u3002 * ******************************/ name . sin_addr . s_addr = htonl ( INADDR_ANY ); /* host to network, long */ /****************************************** * \u5957\u63a5\u5b57\u9009\u9879\uff1f\uff1f\uff1f\uff1fSO_REUSEADDR\uff1f\uff1f\uff1f\uff1f\u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\uff0c\u53ef\u5199blog * int setsockopt(int socket, int level, int option_name, * const void *option_value, size_t option_len); * \u5982\u679c\u5728\u5957\u63a5\u5b57\u7ea7\u522b\u8bbe\u7f6e\u9009\u9879\uff0clevel\u53c2\u6570\u8bbe\u7f6e\u4e3aSOL_SOCKET * option_name\u53c2\u6570\u6307\u5b9a\u8981\u8bbe\u7f6e\u7684\u9009\u9879\uff0cSO_REUSEADDR:\u9632\u6b62\u670d\u52a1\u5668\u5728\u53d1\u751f\u610f\u5916\u65f6\uff0c\u7aef\u53e3\u672a\u88ab\u91ca\u653e\uff0c\u53ef\u4ee5\u91cd\u65b0\u4f7f\u7528 * option_value\u53c2\u6570\u7684\u957f\u5ea6\u4e3aoption_len\u5b57\u8282\uff0c\u7528\u4e8e\u8bbe\u5b9a\u9009\u9879\u7684\u65b0\u503c\uff0c\u5b83\u88ab\u4f20\u9012\u7ed9\u5e95\u5c42\u534f\u8bae\u7684\u5904\u7406\u51fd\u6570\uff0c\u5e76\u4e14\u4e0d\u80fd\u88ab\u4fee\u6539 * \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 * ****************************************/ if (( setsockopt ( httpd , SOL_SOCKET , SO_REUSEADDR , & on , sizeof ( on ))) < 0 ) { error_die ( \"setsockopt failed\" ); } /****************************************** * \u547d\u540d\u5957\u63a5\u5b57\uff0cAF_UNIX\u5957\u63a5\u5b57\u4f1a\u5173\u8054\u5230\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u8def\u5f84\u540d\uff0cAF_INET\u5957\u63a5\u5b57\u5173\u8054\u5230\u4e00\u4e2aIP\u7aef\u53e3\u53f7 * int bind(int socket, const struct sockaddr *address, size_t address_len); * \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 * ***************************************/ if ( bind ( httpd , ( struct sockaddr * ) & name , sizeof ( name )) < 0 ) error_die ( \"bind\" ); if ( * port == 0 ) /* if dynamically allocating a port \u5982\u679c\u52a8\u6001\u5206\u914d\u7aef\u53e3\u53f7*/ { socklen_t namelen = sizeof ( name ); /***************************************** * ?????????\u4e0d\u660e\u767d\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f * int PASCAL FAR getsockname( SOCKET s, struct sockaddr FAR* name, int FAR* namelen); * s\uff1a\u6807\u8bc6\u4e00\u4e2a\u5df2\u6346\u7ed1\u5957\u63a5\u53e3\u7684\u63cf\u8ff0\u5b57\u3002 * name\uff1a\u63a5\u6536\u5957\u63a5\u53e3\u7684\u5730\u5740\uff08\u540d\u5b57\uff09\u3002 * namelen\uff1a\u540d\u5b57\u7f13\u51b2\u533a\u957f\u5ea6\u3002 * ***************************************/ if ( getsockname ( httpd , ( struct sockaddr * ) & name , & namelen ) == - 1 ) error_die ( \"getsockname\" ); * port = ntohs ( name . sin_port ); } /**************************************** * \u5957\u63a5\u5b57\u961f\u5217 * *************************************/ if ( listen ( httpd , 5 ) < 0 ) error_die ( \"listen\" ); return ( httpd ); } /**********************************************************************/ /* Inform the client that the requested web method has not been implemented. * Parameter: the client socket */ /**********************************************************************/ void unimplemented ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 501 Method Not Implemented \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<HTML><HEAD><TITLE>Method Not Implemented \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</TITLE></HEAD> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<BODY><P>HTTP request method not supported. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</BODY></HTML> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ int main ( void ) { int server_sock = - 1 ; u_short port = 4000 ; //unsigned short\u7c7b\u578b int client_sock = - 1 ; /**************************** * struct sockaddr_in{ * short int sin_family; //AF_INET * unsigned short int sin_port; //Port_number * struct in_addr sin_addr; //Internet address * }; * struct in_addr{ * unsigned long int s_addr; * }; * **************************/ struct sockaddr_in client_name ; /**************************** * \u731c\u6d4btypedef int socklen_t * /usr/include/arpa/inet.h * #ifndef __socklen_t_defined * typedef __socklen_t socklen_t; * # define __socklen_t_defined * #endif * **************************/ socklen_t client_name_len = sizeof ( client_name ); pthread_t newthread ; /*************** * startup: \u521d\u59cb\u5316 httpd \u670d\u52a1 * \u5305\u62ec\u5efa\u7acb\u5957\u63a5\u5b57\uff0c\u7ed1\u5b9a\u7aef\u53e3\uff0c\u8fdb\u884c\u76d1\u542c\u7b49\u3002 * *************/ server_sock = startup ( & port ); printf ( \"httpd running on port %d \\n \" , port ); while ( 1 ) { /***************************************** * int accept(int socket, struct sockaddr *address, size_t *address_len); * \u5f53\u6709\u8fde\u63a5\u65f6\uff0caccept\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u53d1\u9001\u9519\u8bef\u65f6\uff0c\u8fd4\u56de-1\u3002 * ***************************************/ client_sock = accept ( server_sock , ( struct sockaddr * ) & client_name , & client_name_len ); if ( client_sock == - 1 ) error_die ( \"accept\" ); /* accept_request(&client_sock); */ if ( pthread_create ( & newthread , NULL , ( void * ) accept_request , ( void * )( intptr_t ) client_sock ) != 0 ) perror ( \"pthread_create\" ); } close ( server_sock ); return ( 0 ); }","title":"TinyHttpd"},{"location":"source/tinyhttpd/#tinyhttpd","text":"Tinyhttpd \u662fJ. David Blackstone\u57281999\u5e74\u5199\u7684\u4e00\u4e2a\u4e0d\u5230 500 \u884c\u7684\u8d85\u8f7b\u91cf\u578b Http Server\uff0c\u7528\u6765\u5b66\u4e60\u975e\u5e38\u4e0d\u9519\uff0c\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u771f\u6b63\u7406\u89e3\u670d\u52a1\u5668\u7a0b\u5e8f\u7684\u672c\u8d28\u3002\u5b98\u7f51: http://tinyhttpd.sourceforge.net","title":"TinyHttpd\u6e90\u7801"},{"location":"source/tinyhttpd/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 /* J. David's webserver */ /* This is a simple webserver. * Created November 1999 by J. David Blackstone. * CSE 4344 (Network concepts), Prof. Zeigler * University of Texas at Arlington */ /* This program compiles for Sparc Solaris 2.6. * To compile for Linux: * 1) Comment out the #include <pthread.h> line. * 2) Comment out the line that defines the variable newthread. * 3) Comment out the two lines that run pthread_create(). * 4) Uncomment the line that runs accept_request(). * 5) Remove -lsocket from the Makefile. */ #include <stdio.h> #include <sys/socket.h> #include <sys/types.h> #include <netinet/in.h> #include <arpa/inet.h> #include <unistd.h> #include <ctype.h> #include <strings.h> #include <string.h> #include <sys/stat.h> #include <pthread.h> #include <sys/wait.h> #include <stdlib.h> #include <stdint.h> /***************************** * \u68c0\u67e5\u53c2\u6570c\u662f\u5426\u4e3a\u7a7a\u683c\u5b57\u7b26 * \u4e5f\u5c31\u662f\u5224\u65ad\u662f\u5426\u4e3a\u7a7a\u683c('')\u3001\u5b9a\u4f4d\u5b57\u7b26('\\t')\u3001CR('\\r')\u3001\u6362\u884c('\\n')\u3001\u5782\u76f4\u5b9a\u4f4d\u5b57\u7b26('\\v')\u3001\u6216\u7ffb\u9875('\\f')\u7684\u60c5\u51b5\u3002 * \u53c2\u6570\u4e3a\u7a7a\u767d\u5b57\u7b26\u8fd4\u56de\u975e0\uff0c\u5426\u5219\u8fd4\u56de0\u3002 * ***************************/ #define ISspace(x) isspace((int)(x)) #define SERVER_STRING \"Server: jdbhttpd/0.1.0\\r\\n\" /* \u5b9a\u4e49server\u540d\u79f0 */ #define STDIN 0 #define STDOUT 1 #define STDERR 2 void accept_request ( void * ); void bad_request ( int ); void cat ( int , FILE * ); void cannot_execute ( int ); void error_die ( const char * ); void execute_cgi ( int , const char * , const char * , const char * ); int get_line ( int , char * , int ); void headers ( int , const char * ); void not_found ( int ); void serve_file ( int , const char * ); int startup ( u_short * ); void unimplemented ( int ); // Http\u8bf7\u6c42\uff0c\u540e\u7eed\u4e3b\u8981\u662f\u5904\u7406\u8fd9\u4e2a\u5934 // GET / HTTP/1.1 // Host: 192.168.0.23:47310 // Connection: keep-alive // Upgrade-Insecure-Requests: 1 // User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 // Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*; q = 0.8 // Accept - Encoding: gzip, deflate, sdch // Accept - Language : zh - CN, zh; q = 0.8 // Cookie: __guid = 179317988.1576506943281708800.1510107225903.8862; monitor_count = 5 // POST / color1.cgi HTTP / 1.1 // Host: 192.168.0.23 : 47310 // Connection : keep - alive // Content - Length : 10 // Cache - Control : max - age = 0 // Origin : http ://192.168.0.23:40786 // Upgrade - Insecure - Requests : 1 // User - Agent : Mozilla / 5.0 (Windows NT 6.1; WOW64) AppleWebKit / 537.36 (KHTML, like Gecko) Chrome / 55.0.2883.87 Safari / 537.36 // Content - Type : application / x - www - form - urlencoded // Accept : text / html, application / xhtml + xml, application / xml; q = 0.9, image / webp, */*;q=0.8 // Referer: http://192.168.0.23:47310/ // Accept-Encoding: gzip, deflate // Accept-Language: zh-CN,zh;q=0.8 // Cookie: __guid=179317988.1576506943281708800.1510107225903.8862; monitor_count=281 // Form Data // color=gray /********************************************************************** * A request has caused a call to accept() on the server port to return. * Process the request appropriately. * Parameters: the socket connected to the client(\u8fde\u63a5\u5230\u5ba2\u6237\u7aef\u7684\u5957\u63a5\u5b57) ***********************************************************************/ void accept_request ( void * arg ) { int client = ( intptr_t ) arg ; /* intptr_t\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u59cb\u7ec8\u4e0e\u5730\u5740\u4f4d\u6570\u76f8\u540c */ char buf [ 1024 ]; size_t numchars ; char method [ 255 ]; char url [ 255 ]; char path [ 512 ]; size_t i , j ; struct stat st ; /* \u6587\u4ef6\u7ed3\u6784\u4f53\uff0c\u7528\u4e8e\u83b7\u53d6\u6587\u4ef6shux */ int cgi = 0 ; /* becomes true if server decides this is a CGI program */ char * query_string = NULL ; /**************************** * \u63a5\u6536\u6570\u636e\u653e\u5165buff\u7f13\u51b2\u533a * \u8fd4\u56de\u5b57\u8282\u6570 * **************************/ numchars = get_line ( client , buf , sizeof ( buf )); i = 0 ; j = 0 ; /************************************ * \u4e3e\u4f8b:\"GET / HTTP/1.1\\n\" * \u63d0\u53d6\u5b57\u7b26\u4e32GET * ISspace\u53c2\u6570\u4e3a\u7a7a\u767d\u5b57\u7b26\u8fd4\u56de\u975e0\uff0c\u5426\u5219\u8fd4\u56de0\u3002 * **********************************/ while ( ! ISspace ( buf [ i ]) && ( i < sizeof ( method ) - 1 )) { method [ i ] = buf [ i ]; i ++ ; } j = i ; method [ i ] = '\\0' ; printf ( \"LINE[%d] \\t function[%s] \\t method=[%s] \\n \" , __LINE__ , __FUNCTION__ , method ); /************************************ * \u51fd\u6570\u8bf4\u660e\uff1astrcasecmp()\u7528\u6765\u6bd4\u8f83\u53c2\u6570s1 \u548cs2 \u5b57\u7b26\u4e32\uff0c\u6bd4\u8f83\u65f6\u4f1a\u81ea\u52a8\u5ffd\u7565\u5927\u5c0f\u5199\u7684\u5dee\u5f02\u3002 * \u8fd4\u56de\u503c\uff1a\u82e5\u53c2\u6570s1 \u548cs2 \u5b57\u7b26\u4e32\u76f8\u540c\u5219\u8fd4\u56de0\u3002 * s1 \u957f\u5ea6\u5927\u4e8es2 \u957f\u5ea6\u5219\u8fd4\u56de\u5927\u4e8e0 \u7684\u503c\uff0c * s1 \u957f\u5ea6\u82e5\u5c0f\u4e8es2 \u957f\u5ea6\u5219\u8fd4\u56de\u5c0f\u4e8e0 \u7684\u503c\u3002 * *********************************/ if ( strcasecmp ( method , \"GET\" ) && strcasecmp ( method , \"POST\" )) { unimplemented ( client ); /* \u5982\u679c\u63a5\u6536\u5230\u7684\u6570\u636e\u4e2d\u65e2\u6709GET\u65b9\u6cd5\u4e0ePOST\u65b9\u6cd5\uff0c\u5219\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u8be5web\u65b9\u6cd5\u5c1a\u672a\u5b9e\u73b0 */ return ; } if ( strcasecmp ( method , \"POST\" ) == 0 ) cgi = 1 ; /* cgi\u4e3a\u6807\u5fd7\u4f4d\uff0c\u7f6e1\u8bf4\u660e\u5f00\u542fcgi\u89e3\u6790 */ i = 0 ; while ( ISspace ( buf [ j ]) && ( j < numchars )) /* \u5982\u679c\u4e3a\u7a7a\u767d\u5b57\u7b26\u5219\u8df3\u8fc7 */ j ++ ; /********************************* * //\u5f97\u5230 \"/\" * \u6ce8\u610f\uff1a\u5982\u679c\u4f60\u7684http\u7684\u7f51\u5740\u4e3ahttp://x.x.x.x:8888/index.html * \u90a3\u4e48\u4f60\u5f97\u5230\u7684\u7b2c\u4e00\u6761http\u4fe1\u606f\u4e3aGET /index.html HTTP/1.1\uff0c\u90a3\u4e48 * \u89e3\u6790\u5f97\u5230\u7684\u5c31\u662f/index.html **********************************/ while ( ! ISspace ( buf [ j ]) && ( i < sizeof ( url ) - 1 ) && ( j < numchars )) { url [ i ] = buf [ j ]; i ++ ; j ++ ; } url [ i ] = '\\0' ; if ( strcasecmp ( method , \"GET\" ) == 0 ) { query_string = url ; while (( * query_string != '?' ) && ( * query_string != '\\0' )) /* \u5982\u679c\u662fGET\u8bf7\u6c42\uff0curl\u53ef\u80fd\u4f1a\u5e26\u6709?,\u6709\u67e5\u8be2\u53c2\u6570 */ query_string ++ ; if ( * query_string == '?' ) { cgi = 1 ; * query_string = '\\0' ; /* \u5c06\u89e3\u6790\u53c2\u6570\u622a\u53d6\u4e0b\u6765 */ query_string ++ ; } } sprintf ( path , \"htdocs%s\" , url ); /* url\u4e2d\u7684\u8def\u5f84\u683c\u5f0f\u5316\u5230path */ if ( path [ strlen ( path ) - 1 ] == '/' ) /* \u5982\u679cpath\u53ea\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u9ed8\u8ba4\u8bbe\u7f6e\u4e3a\u9996\u9875index.html */ strcat ( path , \"index.html\" ); /************************************** * \u51fd\u6570\u5b9a\u4e49: int stat(const char *file_name, struct stat *buf); * \u51fd\u6570\u8bf4\u660e: \u901a\u8fc7\u6587\u4ef6\u540dfilename\u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5e76\u4fdd\u5b58\u5728buf\u6240\u6307\u7684\u7ed3\u6784\u4f53stat\u4e2d * \u8fd4\u56de\u503c: \u6267\u884c\u6210\u529f\u5219\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1\uff0c\u9519\u8bef\u4ee3\u7801\u5b58\u4e8eerrno\uff08\u9700\u8981include <errno.h>\uff09 * ***********************************/ if ( stat ( path , & st ) == - 1 ) { /* \u5047\u5982\u8bbf\u95ee\u7684\u7f51\u9875\u4e0d\u5b58\u5728\uff0c\u5219\u4e0d\u65ad\u7684\u8bfb\u53d6\u5269\u4e0b\u7684\u8bf7\u6c42\u5934\u4fe1\u606f\uff0c\u5e76\u4e22\u5f03\u5373\u53ef */ while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); not_found ( client ); /* \u6700\u540e\u8fd4\u56de\u7f51\u9875\u4e0d\u5b58\u5728 */ } else { /*************************************** * st_mode\u662f\u7528\u7279\u5f81\u4f4d\u6765\u8868\u793a\u6587\u4ef6\u7c7b\u578b\u7684 * S_IFMT 0170000 \u6587\u4ef6\u7c7b\u578b\u7684\u4f4d\u906e\u7f69 * \u5982\u679c\u8def\u5f84\u662f\u4e2a\u76ee\u5f55\uff0c\u90a3\u5c31\u5c06\u4e3b\u9875\u8fdb\u884c\u663e\u793a ***************************************/ if (( st . st_mode & S_IFMT ) == S_IFDIR ) /* \u76ee\u5f55 */ strcat ( path , \"/index.html\" ); /* \u5982\u679c\u4f60\u7684\u6587\u4ef6\u9ed8\u8ba4\u662f\u6709\u6267\u884c\u6743\u9650\u7684\uff0c\u81ea\u52a8\u89e3\u6790\u6210cgi\u7a0b\u5e8f\uff0c\u5982\u679c\u6709\u6267\u884c\u6743\u9650\u4f46\u662f\u4e0d\u80fd\u6267\u884c\uff0c\u4f1a\u63a5\u53d7\u5230\u62a5\u9519\u4fe1\u53f7 */ if (( st . st_mode & S_IXUSR ) || /* S_IXUSR:\u6587\u4ef6\u6240\u6709\u8005\u5177\u53ef\u6267\u884c\u6743\u9650 */ ( st . st_mode & S_IXGRP ) || /* S_IXGRP:\u7528\u6237\u7ec4\u5177\u53ef\u6267\u884c\u6743\u9650 */ ( st . st_mode & S_IXOTH ) ) /* S_IXOTH:\u5176\u4ed6\u7528\u6237\u5177\u53ef\u8bfb\u53d6\u6743\u9650 */ cgi = 1 ; if ( ! cgi ) serve_file ( client , path ); /* \u8bfb\u53d6\u9759\u6001\u6587\u4ef6\u8fd4\u56de\u7ed9\u8bf7\u6c42\u7684http\u5ba2\u6237\u7aef */ else execute_cgi ( client , path , method , query_string ); /* \u6267\u884ccgi\u52a8\u6001\u89e3\u6790 */ } close ( client ); /* \u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5173\u95edsocket */ } /**********************************************************************/ /* Inform the client that a request it has made has a problem. * Parameters: client socket */ /**********************************************************************/ void bad_request ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 400 BAD REQUEST \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"Content-type: text/html \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"<P>Your browser sent a bad request, \" ); send ( client , buf , sizeof ( buf ), 0 ); sprintf ( buf , \"such as a POST without a Content-Length. \\r\\n \" ); send ( client , buf , sizeof ( buf ), 0 ); } /**********************************************************************/ /* Put the entire contents of a file out on a socket. This function * is named after the UNIX \"cat\" command, because it might have been * easier just to do something like pipe, fork, and exec(\"cat\"). * Parameters: the client socket descriptor * FILE pointer for the file to cat */ /**********************************************************************/ void cat ( int client , FILE * resource ) { char buf [ 1024 ]; fgets ( buf , sizeof ( buf ), resource ); while ( ! feof ( resource )) /* \u5faa\u73af\u8bfb\u53d6 */ { send ( client , buf , strlen ( buf ), 0 ); fgets ( buf , sizeof ( buf ), resource ); } } /**********************************************************************/ /* Inform the client that a CGI script could not be executed. * Parameter: the client socket descriptor. */ /**********************************************************************/ void cannot_execute ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 500 Internal Server Error \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<P>Error prohibited CGI execution. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Print out an error message with perror() (for system errors; based * on value of errno, which indicates system call errors) and exit the * program indicating an error. */ /**********************************************************************/ void error_die ( const char * sc ) { perror ( sc ); exit ( 1 ); } /**********************************************************************/ /* Execute a CGI script. Will need to set environment variables as * appropriate. (\u6267\u884ccgi\u52a8\u6001\u89e3\u6790) * Parameters: client socket descriptor * path to the CGI script */ /**********************************************************************/ void execute_cgi ( int client , const char * path , const char * method , const char * query_string ) { char buf [ 1024 ]; int cgi_output [ 2 ]; /* \u8bfb\u5199\u7ba1\u9053\u7684\u58f0\u660e */ int cgi_input [ 2 ]; pid_t pid ; int status ; int i ; char c ; int numchars = 1 ; int content_length = - 1 ; buf [ 0 ] = 'A' ; buf [ 1 ] = '\\0' ; if ( strcasecmp ( method , \"GET\" ) == 0 ) /* \u5982\u679c\u662fGET\u8bf7\u6c42,\u8bfb\u53d6\u5e76\u4e14\u4e22\u5f03\u5934\u4fe1\u606f */ while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); else if ( strcasecmp ( method , \"POST\" ) == 0 ) /*POST*/ { numchars = get_line ( client , buf , sizeof ( buf )); while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* \u5faa\u73af\u8bfb\u53d6\u5934\u4fe1\u606f\u627e\u5230Content-Length\u5b57\u6bb5\u7684\u503c */ { buf [ 15 ] = '\\0' ; /* \"Content-Length: 15\" */ if ( strcasecmp ( buf , \"Content-Length:\" ) == 0 ) content_length = atoi ( & ( buf [ 16 ])); numchars = get_line ( client , buf , sizeof ( buf )); } if ( content_length == - 1 ) { bad_request ( client ); /* \u9519\u8bef\u8bf7\u6c42 */ return ; } } else /*HEAD or other*/ { } /**************************************** * #include<unistd.h> * int pipe(int filedes[2]); * \u8fd4\u56de\u503c\uff1a\u6210\u529f\uff0c\u8fd4\u56de0\uff0c\u5426\u5219\u8fd4\u56de-1\u3002 * \u53c2\u6570\u6570\u7ec4\u5305\u542bpipe\u4f7f\u7528\u7684\u4e24\u4e2a\u6587\u4ef6\u7684\u63cf\u8ff0\u7b26\u3002fd[0]:\u8bfb\u7ba1\u9053\uff0cfd[1]:\u5199\u7ba1\u9053\u3002 * \u5fc5\u987b\u5728fork()\u4e2d\u8c03\u7528pipe()\uff0c\u5426\u5219\u5b50\u8fdb\u7a0b\u4e0d\u4f1a\u7ee7\u627f\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 * \u4e24\u4e2a\u8fdb\u7a0b\u4e0d\u5171\u4eab\u7956\u5148\u8fdb\u7a0b\uff0c\u5c31\u4e0d\u80fd\u4f7f\u7528pipe\u3002\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528\u547d\u540d\u7ba1\u9053\u3002 * pipe(cgi_output)\u6267\u884c\u6210\u529f\u540e\uff0ccgi_output[0]:\u8bfb\u901a\u9053 cgi_output[1]:\u5199\u901a\u9053 * **************************************/ if ( pipe ( cgi_output ) < 0 ) { cannot_execute ( client ); return ; } if ( pipe ( cgi_input ) < 0 ) { cannot_execute ( client ); return ; } if ( ( pid = fork ()) < 0 ) { cannot_execute ( client ); return ; } sprintf ( buf , \"HTTP/1.0 200 OK \\r\\n \" ); /* \u8fd4\u56de\u6b63\u786e\u54cd\u5e94\u7801200 */ send ( client , buf , strlen ( buf ), 0 ); if ( pid == 0 ) /* child: CGI script */ { char meth_env [ 255 ]; char query_env [ 255 ]; char length_env [ 255 ]; dup2 ( cgi_output [ 1 ], STDOUT ); /* 1\u4ee3\u8868\u7740stdout\uff0c0\u4ee3\u8868\u7740stdin\uff0c\u5c06\u7cfb\u7edf\u6807\u51c6\u8f93\u51fa\u91cd\u5b9a\u5411\u4e3acgi_output[1] */ dup2 ( cgi_input [ 0 ], STDIN ); /* \u5c06\u7cfb\u7edf\u6807\u51c6\u8f93\u5165\u91cd\u5b9a\u5411\u4e3acgi_input[0]\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u5173\u952e\uff0ccgi\u7a0b\u5e8f\u4e2d\u7528\u7684\u662f\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8fdb\u884c\u4ea4\u4e92 */ close ( cgi_output [ 0 ]); /* \u5173\u95ed\u4e86cgi_output\u4e2d\u7684\u8bfb\u901a\u9053 */ close ( cgi_input [ 1 ]); /* \u5173\u95ed\u4e86cgi_input\u4e2d\u7684\u5199\u901a\u9053 */ sprintf ( meth_env , \"REQUEST_METHOD=%s\" , method ); putenv ( meth_env ); if ( strcasecmp ( method , \"GET\" ) == 0 ) { sprintf ( query_env , \"QUERY_STRING=%s\" , query_string ); putenv ( query_env ); } else { /* POST */ sprintf ( length_env , \"CONTENT_LENGTH=%d\" , content_length ); putenv ( length_env ); } /************************************************** * #include<unistd.h> * int execl(const char * path,const char * arg,....); * execl()\u7528\u6765\u6267\u884c\u53c2\u6570path\u5b57\u7b26\u4e32\u6240\u4ee3\u8868\u7684\u6587\u4ef6\u8def\u5f84\uff0c * \u63a5\u4e0b\u6765\u7684\u53c2\u6570\u4ee3\u8868\u6267\u884c\u8be5\u6587\u4ef6\u65f6\u4f20\u9012\u8fc7\u53bb\u7684argv(0)\u3001argv[1]\u2026\u2026\uff0c\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u7528\u7a7a\u6307\u9488(NULL)\u4f5c\u7ed3\u675f\u3002 * \u5982\u679c\u6267\u884c\u6210\u529f\u5219\u51fd\u6570\u4e0d\u4f1a\u8fd4\u56de\uff0c\u6267\u884c\u5931\u8d25\u5219\u76f4\u63a5\u8fd4\u56de-1\uff0c\u5931\u8d25\u539f\u56e0\u5b58\u4e8eerrno\u4e2d\u3002 * ***********************************************/ execl ( path , NULL ); exit ( 0 ); } else { /* parent */ close ( cgi_output [ 1 ]); /* \u5173\u95ed\u4e86cgi_output\u4e2d\u7684\u5199\u901a\u9053\uff0c\u6ce8\u610f\u8fd9\u662f\u7236\u8fdb\u7a0b\u4e2dcgi_output\u53d8\u91cf\u548c\u5b50\u8fdb\u7a0b\u8981\u533a\u5206\u5f00 */ close ( cgi_input [ 0 ]); /* \u5173\u95ed\u4e86cgi_input\u4e2d\u7684\u8bfb\u901a\u9053 */ if ( strcasecmp ( method , \"POST\" ) == 0 ) for ( i = 0 ; i < content_length ; i ++ ) { recv ( client , & c , 1 , 0 ); write ( cgi_input [ 1 ], & c , 1 ); } while ( read ( cgi_output [ 0 ], & c , 1 ) > 0 ) send ( client , & c , 1 , 0 ); close ( cgi_output [ 0 ]); close ( cgi_input [ 1 ]); /*************************************** * pid_t waitpid(pid_t pid, int * status, int options); * waitpid()\u4f1a\u6682\u65f6\u505c\u6b62\u76ee\u524d\u8fdb\u7a0b\u7684\u6267\u884c, \u76f4\u5230\u6709\u4fe1\u53f7\u6765\u5230\u6216\u5b50\u8fdb\u7a0b\u7ed3\u675f. * \u5982\u679c\u5728\u8c03\u7528wait()\u65f6\u5b50\u8fdb\u7a0b\u5df2\u7ecf\u7ed3\u675f, \u5219wait()\u4f1a\u7acb\u5373\u8fd4\u56de\u5b50\u8fdb\u7a0b\u7ed3\u675f\u72b6\u6001\u503c. \u5b50\u8fdb\u7a0b\u7684\u7ed3\u675f\u72b6\u6001\u503c\u4f1a\u7531\u53c2\u6570status * \u8fd4\u56de,\u800c\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u8bc6\u522b\u7801\u4e5f\u4f1a\u4e00\u5feb\u8fd4\u56de. * \u5982\u679c\u4e0d\u5728\u610f\u7ed3\u675f\u72b6\u6001\u503c, \u5219\u53c2\u6570status \u53ef\u4ee5\u8bbe\u6210NULL. \u53c2\u6570pid \u4e3a\u6b32\u7b49\u5f85\u7684\u5b50\u8fdb\u7a0b\u8bc6\u522b\u7801, \u5176\u4ed6\u6570\u503c\u610f\u4e49\u5982\u4e0b\uff1a * 1\u3001pid<-1 \u7b49\u5f85\u8fdb\u7a0b\u7ec4\u8bc6\u522b\u7801\u4e3apid \u7edd\u5bf9\u503c\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b. * 2\u3001pid=-1 \u7b49\u5f85\u4efb\u4f55\u5b50\u8fdb\u7a0b, \u76f8\u5f53\u4e8ewait(). * 3\u3001pid=0 \u7b49\u5f85\u8fdb\u7a0b\u7ec4\u8bc6\u522b\u7801\u4e0e\u76ee\u524d\u8fdb\u7a0b\u76f8\u540c\u7684\u4efb\u4f55\u5b50\u8fdb\u7a0b. * 4\u3001pid>0 \u7b49\u5f85\u4efb\u4f55\u5b50\u8fdb\u7a0b\u8bc6\u522b\u7801\u4e3apid \u7684\u5b50\u8fdb\u7a0b. * ************************************/ waitpid ( pid , & status , 0 ); } } /**********************************************************************/ /* Get a line from a socket, whether the line ends in a newline, * carriage return, or a CRLF combination. Terminates the string read * with a null character. If no newline indicator is found before the * end of the buffer, the string is terminated with a null. If any of * the above three line terminators is read, the last character of the * string will be a linefeed and the string will be terminated with a * null character. * Parameters: the socket descriptor * the buffer to save the data in * the size of the buffer * Returns: the number of bytes stored (excluding null) */ /**********************************************************************/ int get_line ( int sock , char * buf , int size ) { int i = 0 ; char c = '\\0' ; int n ; while (( i < size - 1 ) && ( c != '\\n' )) { n = recv ( sock , & c , 1 , 0 ); /* DEBUG printf(\"%02X\\n\", c); */ if ( n > 0 ) { if ( c == '\\r' ) { n = recv ( sock , & c , 1 , MSG_PEEK ); /* DEBUG printf(\"%02X\\n\", c); */ if (( n > 0 ) && ( c == '\\n' )) recv ( sock , & c , 1 , 0 ); else c = '\\n' ; } buf [ i ] = c ; i ++ ; } else c = '\\n' ; } buf [ i ] = '\\0' ; return ( i ); } /**********************************************************************/ /* Return the informational HTTP headers about a file. */ /* Parameters: the socket to print the headers on * the name of the file */ /**********************************************************************/ void headers ( int client , const char * filename ) { char buf [ 1024 ]; ( void ) filename ; /* could use filename to determine file type */ strcpy ( buf , \"HTTP/1.0 200 OK \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); strcpy ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); strcpy ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Give a client a 404 not found status message. */ /**********************************************************************/ void not_found ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 404 NOT FOUND \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<HTML><TITLE>Not Found</TITLE> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<BODY><P>The server could not fulfill \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"your request because the resource specified \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"is unavailable or nonexistent. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</BODY></HTML> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ /* Send a regular file to the client. Use headers, and report * errors to client if they occur. * Parameters: a pointer to a file structure produced from the socket * file descriptor * the name of the file to serve */ /**********************************************************************/ void serve_file ( int client , const char * filename ) { FILE * resource = NULL ; int numchars = 1 ; char buf [ 1024 ]; buf [ 0 ] = 'A' ; buf [ 1 ] = '\\0' ; while (( numchars > 0 ) && strcmp ( \" \\n \" , buf )) /* read & discard headers */ numchars = get_line ( client , buf , sizeof ( buf )); resource = fopen ( filename , \"r\" ); if ( resource == NULL ) not_found ( client ); else { headers ( client , filename ); cat ( client , resource ); } fclose ( resource ); } /**********************************************************************/ /* This function starts the process of listening for web connections * on a specified port. If the port is 0, then dynamically allocate a * port and modify the original port variable to reflect the actual * port. * Parameters: pointer to variable containing the port to connect on * Returns: the socket * \u6b64\u51fd\u6570\u542f\u52a8\u5728\u6307\u5b9a\u7aef\u53e3\u4e0a\u4fa6\u542cWeb\u8fde\u63a5\u7684\u8fc7\u7a0b\u3002 * \u5982\u679c\u7aef\u53e3\u4e3a0\uff0c\u5219\u52a8\u6001\u5206\u914d\u7aef\u53e3\u5e76\u4fee\u6539\u539f\u59cb\u7aef\u53e3\u53d8\u91cf\u4ee5\u53cd\u6620\u5b9e\u9645\u7aef\u53e3\u3002 * \u53c2\u6570\uff1a\u6307\u5411\u5305\u542b\u8fde\u63a5\u7aef\u53e3\u7684\u53d8\u91cf\u7684\u6307\u9488 * \u8fd4\u56de\uff1a\u5957\u63a5\u5b57 * */ /**********************************************************************/ int startup ( u_short * port ) { int httpd = 0 ; int on = 1 ; struct sockaddr_in name ; /********************************** * socket\u7cfb\u7edf\u8c03\u7528\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57 * \u8fd4\u56de\uff1a\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u8be5\u63cf\u8ff0\u7b26\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u8be5\u5957\u63a5\u5b57 * int socket(int domain, int type, int protocol); * domain\u6307\u5b9a\u534f\u8bae\u65cf\uff0c\u6700\u5e38\u7528\u7684\u662fAF_UNIX(unix\u548clinux\u6587\u4ef6\u7cfb\u7edf\u5b9e\u73b0\u7684\u672c\u5730\u5957\u63a5\u5b57)\u548cAF_INET(UNIX\u7f51\u7edc\u5957\u63a5\u5b57) * type\u6307\u5b9a\u5957\u63a5\u5b57\u7684\u901a\u4fe1\u7c7b\u578b\uff0cSOCK_STREAM(\u6709\u5e8f\uff0c\u53ef\u9760\uff0c\u9762\u5411\u8fde\u63a5\u7684\u53cc\u5411\u5b57\u8282\u6d41)\u548cSOCK_DGRAM(\u6570\u636e\u62a5\u670d\u52a1) * protocol\u6307\u5b9a\u4f7f\u7528\u7684\u534f\u8bae\uff0c\u4e00\u822c\u7531\u5957\u63a5\u5b57\u7c7b\u578b\u548c\u5957\u63a5\u5b57\u57df\u6765\u51b3\u5b9a\uff0c\u4e00\u822c\u9ed8\u8ba40 * *******************************/ httpd = socket ( PF_INET , SOCK_STREAM , 0 ); if ( httpd == - 1 ) error_die ( \"socket\" ); memset ( & name , 0 , sizeof ( name )); /* \u7ed3\u6784\u4f53\u6e05\u7a7a\u7f6e\u96f6 */ name . sin_family = AF_INET ; name . sin_port = htons ( * port ); /* host to network, short \u77ed\u6574\u6570\u4ece\u4e3b\u673a\u5b57\u8282\u5e8f\u5230\u7f51\u7edc\u5b57\u8282\u5e8f\u8f6c\u6362 */ /******************************** * INADDR_ANY\u8f6c\u6362\u8fc7\u6765\u5c31\u662f0.0.0.0\uff0c\u6cdb\u6307\u672c\u673a\u7684\u610f\u601d\uff0c\u4e5f\u5c31\u662f\u8868\u793a\u672c\u673a\u7684\u6240\u6709IP * \u56e0\u4e3a\u6709\u4e9b\u673a\u5b50\u4e0d\u6b62\u4e00\u5757\u7f51\u5361\uff0c\u591a\u7f51\u5361\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u5c31\u8868\u793a\u6240\u6709\u7f51\u5361ip\u5730\u5740\u7684\u610f\u601d\u3002 * * \u6bd4\u5982\u4e00\u53f0\u7535\u8111\u67093\u5757\u7f51\u5361\uff0c\u5206\u522b\u8fde\u63a5\u4e09\u4e2a\u7f51\u7edc\uff0c\u90a3\u4e48\u8fd9\u53f0\u7535\u8111\u5c31\u67093\u4e2aip\u5730\u5740\u4e86\uff0c\u5982\u679c\u67d0\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9700\u8981\u76d1\u542c\u67d0\u4e2a\u7aef\u53e3\uff0c\u90a3\u4ed6\u8981\u76d1\u542c\u54ea\u4e2a\u7f51\u5361\u5730\u5740\u7684\u7aef\u53e3\u5462\uff1f * * \u5982\u679c\u7ed1\u5b9a\u67d0\u4e2a\u5177\u4f53\u7684ip\u5730\u5740\uff0c\u4f60\u53ea\u80fd\u76d1\u542c\u4f60\u6240\u8bbe\u7f6e\u7684ip\u5730\u5740\u6240\u5728\u7684\u7f51\u5361\u7684\u7aef\u53e3\uff0c\u5176\u5b83\u4e24\u5757\u7f51\u5361\u65e0\u6cd5\u76d1\u542c\u7aef\u53e3\uff0c * \u5982\u679c\u6211\u9700\u8981\u4e09\u4e2a\u7f51\u5361\u90fd\u76d1\u542c\uff0c\u90a3\u5c31\u9700\u8981\u7ed1\u5b9a3\u4e2aip\uff0c\u4e5f\u5c31\u7b49\u4e8e\u9700\u8981\u7ba1\u74063\u4e2a\u5957\u63a5\u5b57\u8fdb\u884c\u6570\u636e\u4ea4\u6362\uff0c\u8fd9\u6837\u5c82\u4e0d\u662f\u5f88\u7e41\u7410\uff1f * * \u6240\u4ee5\u51fa\u73b0INADDR_ANY\uff0c\u4f60\u53ea\u9700\u7ed1\u5b9aINADDR_ANY\uff0c\u7ba1\u7406\u4e00\u4e2a\u5957\u63a5\u5b57\u5c31\u884c\uff0c\u4e0d\u7ba1\u6570\u636e\u662f\u4ece\u54ea\u4e2a\u7f51\u5361\u8fc7\u6765\u7684\uff0c\u53ea\u8981\u662f\u7ed1\u5b9a\u7684\u7aef\u53e3\u53f7\u8fc7\u6765\u7684\u6570\u636e\uff0c\u90fd\u53ef\u4ee5\u63a5\u6536\u5230\u3002 * ******************************/ name . sin_addr . s_addr = htonl ( INADDR_ANY ); /* host to network, long */ /****************************************** * \u5957\u63a5\u5b57\u9009\u9879\uff1f\uff1f\uff1f\uff1fSO_REUSEADDR\uff1f\uff1f\uff1f\uff1f\u9700\u8981\u66f4\u591a\u7684\u7814\u7a76\uff0c\u53ef\u5199blog * int setsockopt(int socket, int level, int option_name, * const void *option_value, size_t option_len); * \u5982\u679c\u5728\u5957\u63a5\u5b57\u7ea7\u522b\u8bbe\u7f6e\u9009\u9879\uff0clevel\u53c2\u6570\u8bbe\u7f6e\u4e3aSOL_SOCKET * option_name\u53c2\u6570\u6307\u5b9a\u8981\u8bbe\u7f6e\u7684\u9009\u9879\uff0cSO_REUSEADDR:\u9632\u6b62\u670d\u52a1\u5668\u5728\u53d1\u751f\u610f\u5916\u65f6\uff0c\u7aef\u53e3\u672a\u88ab\u91ca\u653e\uff0c\u53ef\u4ee5\u91cd\u65b0\u4f7f\u7528 * option_value\u53c2\u6570\u7684\u957f\u5ea6\u4e3aoption_len\u5b57\u8282\uff0c\u7528\u4e8e\u8bbe\u5b9a\u9009\u9879\u7684\u65b0\u503c\uff0c\u5b83\u88ab\u4f20\u9012\u7ed9\u5e95\u5c42\u534f\u8bae\u7684\u5904\u7406\u51fd\u6570\uff0c\u5e76\u4e14\u4e0d\u80fd\u88ab\u4fee\u6539 * \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 * ****************************************/ if (( setsockopt ( httpd , SOL_SOCKET , SO_REUSEADDR , & on , sizeof ( on ))) < 0 ) { error_die ( \"setsockopt failed\" ); } /****************************************** * \u547d\u540d\u5957\u63a5\u5b57\uff0cAF_UNIX\u5957\u63a5\u5b57\u4f1a\u5173\u8054\u5230\u4e00\u4e2a\u6587\u4ef6\u7cfb\u7edf\u7684\u8def\u5f84\u540d\uff0cAF_INET\u5957\u63a5\u5b57\u5173\u8054\u5230\u4e00\u4e2aIP\u7aef\u53e3\u53f7 * int bind(int socket, const struct sockaddr *address, size_t address_len); * \u6210\u529f\u8fd4\u56de0\uff0c\u5931\u8d25\u8fd4\u56de-1 * ***************************************/ if ( bind ( httpd , ( struct sockaddr * ) & name , sizeof ( name )) < 0 ) error_die ( \"bind\" ); if ( * port == 0 ) /* if dynamically allocating a port \u5982\u679c\u52a8\u6001\u5206\u914d\u7aef\u53e3\u53f7*/ { socklen_t namelen = sizeof ( name ); /***************************************** * ?????????\u4e0d\u660e\u767d\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f\uff1f * int PASCAL FAR getsockname( SOCKET s, struct sockaddr FAR* name, int FAR* namelen); * s\uff1a\u6807\u8bc6\u4e00\u4e2a\u5df2\u6346\u7ed1\u5957\u63a5\u53e3\u7684\u63cf\u8ff0\u5b57\u3002 * name\uff1a\u63a5\u6536\u5957\u63a5\u53e3\u7684\u5730\u5740\uff08\u540d\u5b57\uff09\u3002 * namelen\uff1a\u540d\u5b57\u7f13\u51b2\u533a\u957f\u5ea6\u3002 * ***************************************/ if ( getsockname ( httpd , ( struct sockaddr * ) & name , & namelen ) == - 1 ) error_die ( \"getsockname\" ); * port = ntohs ( name . sin_port ); } /**************************************** * \u5957\u63a5\u5b57\u961f\u5217 * *************************************/ if ( listen ( httpd , 5 ) < 0 ) error_die ( \"listen\" ); return ( httpd ); } /**********************************************************************/ /* Inform the client that the requested web method has not been implemented. * Parameter: the client socket */ /**********************************************************************/ void unimplemented ( int client ) { char buf [ 1024 ]; sprintf ( buf , \"HTTP/1.0 501 Method Not Implemented \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , SERVER_STRING ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"Content-Type: text/html \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \" \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<HTML><HEAD><TITLE>Method Not Implemented \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</TITLE></HEAD> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"<BODY><P>HTTP request method not supported. \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); sprintf ( buf , \"</BODY></HTML> \\r\\n \" ); send ( client , buf , strlen ( buf ), 0 ); } /**********************************************************************/ int main ( void ) { int server_sock = - 1 ; u_short port = 4000 ; //unsigned short\u7c7b\u578b int client_sock = - 1 ; /**************************** * struct sockaddr_in{ * short int sin_family; //AF_INET * unsigned short int sin_port; //Port_number * struct in_addr sin_addr; //Internet address * }; * struct in_addr{ * unsigned long int s_addr; * }; * **************************/ struct sockaddr_in client_name ; /**************************** * \u731c\u6d4btypedef int socklen_t * /usr/include/arpa/inet.h * #ifndef __socklen_t_defined * typedef __socklen_t socklen_t; * # define __socklen_t_defined * #endif * **************************/ socklen_t client_name_len = sizeof ( client_name ); pthread_t newthread ; /*************** * startup: \u521d\u59cb\u5316 httpd \u670d\u52a1 * \u5305\u62ec\u5efa\u7acb\u5957\u63a5\u5b57\uff0c\u7ed1\u5b9a\u7aef\u53e3\uff0c\u8fdb\u884c\u76d1\u542c\u7b49\u3002 * *************/ server_sock = startup ( & port ); printf ( \"httpd running on port %d \\n \" , port ); while ( 1 ) { /***************************************** * int accept(int socket, struct sockaddr *address, size_t *address_len); * \u5f53\u6709\u8fde\u63a5\u65f6\uff0caccept\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5957\u63a5\u5b57\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002\u53d1\u9001\u9519\u8bef\u65f6\uff0c\u8fd4\u56de-1\u3002 * ***************************************/ client_sock = accept ( server_sock , ( struct sockaddr * ) & client_name , & client_name_len ); if ( client_sock == - 1 ) error_die ( \"accept\" ); /* accept_request(&client_sock); */ if ( pthread_create ( & newthread , NULL , ( void * ) accept_request , ( void * )( intptr_t ) client_sock ) != 0 ) perror ( \"pthread_create\" ); } close ( server_sock ); return ( 0 ); }","title":"\u6e90\u7801&amp;\u6ce8\u91ca"},{"location":"tools/Economics/","text":"\u4f0a\u8428\u514b\u00b7\u725b\u987f \u00b6 \u575a\u6301\u4ee5\u8d27\u5e01\u5355\u4f4d\u4e3a\u8d35\u91d1\u5c5e\u5e01\u7684\u6807\u6ce8\u5355\u4f4d,\u7531\u653f\u5e9c\u51fa\u9762\uff0c\u5bf9\u8d27\u5e01\u5e01\u503c\u4e0e\u9ec4\u91d1\u91cd\u91cf\u4e4b\u95f4\u7684\u5151\u6362\u5173\u7cfb\u4f5c\u51fa\u6b63\u5f0f\u627f\u8bfa\u3002 \u4e8c\u6218\u4e4b\u540e\uff0c\u7f8e\u56fd\u6210\u957f\u4e3a\u65b0\u7684\u5168\u7403\u9738\u4e3b,1944\u5e74\uff0c\u5728\u7f8e\u56fd\u65b0\u7f55\u5e03\u4ec0\u5c14\u5dde\u5e03\u96f7\u987f\u68ee\u6797\u53ec\u5f00\u8054\u5408\u56fd\u56fd\u9645\u91d1\u878d\u4f1a\u8bae\uff0c\u52301946\u5e74\uff0c\u56fd\u9645\u8d27\u5e01\u57fa\u91d1\u7ec4\u7ec7\u548c\u56fd\u9645\u590d\u5174\u5f00\u53d1\u94f6\u884c\u5728\u534e\u76db\u987f\u6b63\u5f0f\u5f00\u59cb\u8425\u4e1a\uff0c\u8fd9\u5728\u4e8b\u5b9e\u4e0a\u5ba3\u544a\u4e86\u201c\u5e03\u96f7\u987f\u68ee\u6797\u4f53\u7cfb\u201d\u7684\u6b63\u5f0f\u786e\u7acb\u3002\u5b83\u4eec\u7684\u7ae0\u7a0b\u89c4\u5b9a\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u7684\u8d27\u5e01\u5e01\u503c\u90fd\u5fc5\u987b\u4f7f\u7528\u9ec4\u91d1\u6216\u4e0e\u9ec4\u91d1\u7b49\u4ef7\u7684\u7f8e\u5143\u6765\u8868\u793a\uff0c\u5e76\u4e14\u672a\u7ecf\u6279\u51c6\u4e0d\u5f97\u4fee\u6539\u3002\u8fd9\u5c31\u5728\u4e8b\u5b9e\u4e0a\u786e\u7acb\u4e86\u7f8e\u5143=\u9ec4\u91d1\u7684\u4fe1\u7528\u5173\u7cfb\u30021947\u5e74\uff0c\u5728\u5e03\u96f7\u987f\u68ee\u6797\u4f53\u7cfb\u7684\u57fa\u7840\u4e0a\uff0c\u7f8e\u6b27\u5404\u4e3b\u8981\u56fd\u5bb6\u8fbe\u6210\u300a\u5173\u7a0e\u603b\u534f\u5b9a\u300b\uff0c\u786e\u5b9a\u6210\u5458\u56fd\u4e4b\u95f4\u653e\u5f03\u8d38\u6613\u58c1\u5792\uff0c\u4ee5\u7f8e\u5143\u4e3a\u5a92\u4ecb\u8fdb\u884c\u4ea4\u6613\u30021948\u5e74\uff0c\u7f8e\u56fd\u542f\u52a8\u201c\u9a6c\u6b47\u5c14\u8ba1\u5212\u201d\uff0c\u76f4\u63a5\u5411\u6b27\u6d32\u5404\u56fd\u6295\u8d44\uff0c\u590d\u5efa\u5176\u88ab\u6253\u6210\u5e9f\u589f\u7684\u5de5\u4e1a\u4f53\u7cfb\uff0c\u632f\u5174\u6b27\u6d32\u5404\u56fd\u7ecf\u6d4e\u3002 \u5f53\u65f6\u7684\u4e2d\u534e\u6c11\u56fd\u66fe\u7ecf\u662f\u56fd\u9645\u8d27\u5e01\u57fa\u91d1\u7ec4\u7ec7\u3001\u4e16\u754c\u94f6\u884c\u548c\u5173\u7a0e\u603b\u534f\u5b9a\u7684\u521b\u59cb\u56fd\uff0c\u53ef\u60dc\u7684\u662f\uff0c\u65b0\u4e2d\u56fd\u5efa\u56fd\u4e4b\u540e\u5411\u82cf\u8054\u9760\u62e2\uff0c\u5e76\u7acb\u523b\u5c31\u9000\u51fa\u4e86\u8fd9\u4e09\u5927\u7ec4\u7ec7\u3002\u6b64\u540e\uff0c\u52301980\u5e74\u4e2d\u56fd\u624d\u91cd\u65b0\u52a0\u5165\u56fd\u9645\u8d27\u5e01\u57fa\u91d1\u7ec4\u7ec7\u548c\u4e16\u754c\u94f6\u884c\uff0c\u52302001\u5e74\u624d\u91cd\u65b0\u52a0\u5165\u5173\u7a0e\u603b\u534f\u5b9a\u3002\u4e3a\u4e86\u6062\u590d\u8fd9\u4e09\u4e2a\u7ec4\u7ec7\u7684\u5e2d\u4f4d\uff0c\u52a0\u5165\u5230\u65b0\u7684\u7ecf\u6d4e\u79e9\u5e8f\u4e4b\u4e2d\uff0c\u65b0\u4e2d\u56fd\u7ecf\u53d7\u4e86\u91cd\u91cd\u8003\u9a8c\u548c\u78e8\u96be\uff0c\u4e0d\u8fc7\u8fd9\u90fd\u662f\u540e\u8bdd\u3002 \u8d27\u5e01\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u653f\u5e9c\u53d1\u884c\u7684\u4fe1\u7528\u503a\uff01 \u4ee5\u503a\u4e3a\u951a\u7684\u8d27\u5e01\u4fe1\u7528\u8bbe\u5b9a\uff0c\u4e43\u662f\u4eba\u7c7b\u793e\u4f1a\u81f3\u4eca\u4e3a\u6b62\uff0c\u6700\u57fa\u7840\u7684\u91d1\u878d\u8bbe\u5b9a\u3002 \u5404\u56fd\u592e\u884c\u4e3b\u8981\u662f\u901a\u8fc7\u4e09\u79cd\u5f62\u5f0f\u53d1\u884c\u57fa\u7840\u8d27\u5e01\uff1a \u7b2c\u4e00\uff0c\u5411\u5546\u4e1a\u94f6\u884c\u63d0\u4f9b\u501f\u6b3e\uff0c \u7b2c\u4e8c\uff0c\u4ee5\u4eba\u6c11\u5e01\u5151\u6362\u5404\u7ecf\u6d4e\u4e3b\u4f53\u6323\u56de\u6765\u7684\u5916\u6c47\uff0c \u7b2c\u4e09\uff0c\u5411\u653f\u5e9c\u6216\u5404\u56fd\u5b57\u53f7\u5355\u4f4d\u63d0\u4f9b\u501f\u6b3e\u3002 \u592e\u884c\u603b\u8d44\u4ea7\uff0c\u4e0e\u57fa\u7840\u8d27\u5e01\u53d1\u884c\u91cf\uff0c\u662f\u57fa\u672c\u7b49\u540c\u7684\u3002\u5bf9\u7f8e\u56fd\u8fd9\u6837\u7684\u56fd\u9645\u8d27\u5e01\u53d1\u884c\u56fd\u6765\u8bf4\uff0c\u7b2c\u4e09\u79cd\u65b9\u5f0f\u662f\u6700\u4e3b\u8981\u7684\u8d27\u5e01\u53d1\u884c\u65b9\u5f0f\uff0c\u4e2d\u56fd\u8fd9\u6837\u7684\u56fd\u5bb6\uff0c\u5219\u4e3b\u8981\u662f\u901a\u8fc7\u524d\u4e24\u79cd\u65b9\u5f0f\u53d1\u884c\u57fa\u7840\u8d27\u5e01\uff0c \u4e2d\u56fd\u653f\u5e9c\u548c\u4e2d\u56fd\u592e\u884c\uff0c\u5546\u4e1a\u94f6\u884c(\u4e2d\u519c\u5de5\u5efa\u4ea4,\u8fd9\u4e94\u5927\u884c\u7684\u4fe1\u7528\uff0c\u90fd\u662f\u653f\u5e9c\u4fe1\u7528\u3001\u56fd\u5bb6\u4fe1\u7528)\u6574\u4e2a1980\u5e74\u4ee3\uff0c\u6211\u5927\u4e2d\u56fd\u90fd\u662f\u4f9d\u9760\u81ea\u5df1\u7684\u653f\u5e9c\u4fe1\u7528\u5728\u53d1\u884c\u8d27\u5e01\u3002\u4e3b\u6743\u8d27\u5e01\uff0c\u4e0d\u4f9d\u8d56\u7f8e\u5143\u52a0\u6301\u5c31\u80fd\u72ec\u7acb\u83b7\u5f97\u4fe1\u7528\u7684\u8d27\u5e01\u30021986\u5e74\u7f8e\u5143\u5151\u4eba\u6c11\u5e01\u7684\u4e2d\u56fd\u5b98\u65b9\u6c47\u7387\u662f3.45\uff0c\u4f46\u662f\u9ed1\u5e02\u6c47\u7387\u4e00\u76f4\u90fd\u57288\u523010\u4e4b\u95f4\u6d6e\u52a8\u30021980\u5e74\u4ee3\u7684\u6539\u9769\u5f00\u653e\u4e4b\u8def\uff0c\u5176\u5b9e\u8d70\u5f97\u6781\u4e3a\u8270\u96be\u3002\u6211\u5927\u4e2d\u56fd\u8981\u575a\u6301\u4e3b\u6743\u8d27\u5e01\u7684\u9053\u8def\uff0c\u5b88\u4f4f3.45\u7684\u6c47\u7387\uff0c\u4ee3\u4ef7\u5c31\u662f\u7ecf\u6d4e\u6839\u672c\u53d1\u5c55\u4e0d\u8d77\u6765\u30021994\u5e74\u4eba\u6c11\u5e01\u6c47\u7387\u56e0\u6b64\u8df3\u8d2c\u5230\u4e868.62\u3002 \u8fd9\u610f\u5473\u7740\u523090\u5e74\u4ee3\u672b\u671f\u7684\u65f6\u5019\uff0c\u4eba\u6c11\u5e01\u4fe1\u7528\uff0c\u5df2\u7ecf\u662f\u7531\u7f8e\u5143\u548c\u4e2d\u56fd\u7684\u56fd\u5bb6\u4fe1\u7528\u5171\u540c\u652f\u6491\u7684\u4e86\uff0c\u4e24\u8fb9\u57fa\u672c\u4e0a\u5e73\u5206\u79cb\u8272\u3002 \u7136\u800c\u8fd9\u4e2a\u65f6\u5019\u4e2d\u56fd\u7ecf\u6d4e\u906d\u9047\u5230\u4e00\u6b21\u771f\u6b63\u7684\u503a\u52a1\u5371\u673a\u3002\u5728\u653e\u5f00\u4eba\u6c11\u5e01\u6c47\u7387\uff0c\u771f\u6b63\u6253\u5f00\u56fd\u95e8\u8fce\u8fdb\u5916\u8d44\uff0c\u5e76\u968f\u4e4b\u771f\u6b63\u6269\u5927\u5916\u8d38\u89c4\u6a21\u4e4b\u540e\uff0c\u56fd\u4eba\u60ca\u8bb6\u7684\u53d1\u73b0\uff0c\u539f\u6765\u9664\u4e86\u56fd\u4f01\u751f\u4ea7\u7684\u50bb\u5927\u9ed1\u7c97\u7684\u4ea7\u54c1\u4e4b\u5916\uff0c\u4e16\u754c\u4e0a\u7adf\u7136\u8fd8\u6709\u90a3\u4e48\u591a\u7cbe\u7f8e\u8010\u7528\u7684\u5546\u54c1\uff0c\u4e8e\u662f\u7eb7\u7eb7\u5f03\u56fd\u8d27\u4e0d\u7528\u3002\u56fd\u4f01\u957f\u671f\u79ef\u7d2f\u7684\u6280\u672f\u843d\u540e\u6548\u7387\u4f4e\u4e0b\u7684\u95ee\u9898\u572890\u5e74\u4ee3\u4e2d\u540e\u671f\u9010\u6b65\u7206\u53d1\u4e86\u51fa\u6765\uff0c\u5e76\u56e0\u6b64\u4e22\u5931\u4e86\u5e02\u573a\u3002\u9ebb\u70e6\u5728\u4e8e\uff0c\u56fd\u4f01\u8eab\u4e0a\u7edf\u7edf\u80cc\u8d1f\u7740\u6c89\u91cd\u7684\u94f6\u884c\u503a\u52a1\uff0c\u73b0\u5728\u56fd\u4f01\u7684\u4ea7\u54c1\u5356\u4e0d\u51fa\u53bb\uff0c\u73b0\u91d1\u6d41\u7eb7\u7eb7\u65ad\u88c2\uff0c\u5f53\u7136\u5c31\u662f\u8fd8\u4e0d\u8d77\u503a\u3002\u8fd9\u7b97\u662f\u4e2d\u56fd\u5386\u53f2\u4e0a\u7b2c\u4e00\u6b21\u771f\u6b63\u7684\u503a\u52a1\u5371\u673a\u3002\u4e2d\u56fd\u653f\u5e9c\u8feb\u4e8e\u65e0\u5948\uff0c\u53ea\u80fd\u901a\u8fc7\u592e\u884c\u4e0d\u505c\u7684\u76f4\u63a5\u5411\u5404\u56fd\u6709\u4f01\u4e1a\u8f93\u8840\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u51ed\u7a7a\u5370\u94b1\u3002 2001\u5e74\u5e95\u6211\u5927\u4e2d\u56fd\u52a0\u5165\u4e16\u8d38\uff0c\u7b97\u662f\u5f7b\u5e95\u6253\u5f00\u56fd\u95e8\uff0c\u5e76\u5b8c\u5168\u653e\u5f03\u4e86\u4e3b\u6743\u8d27\u5e01\u5730\u4f4d\u3002\u6211\u4eec\u4e5f\u4e0d\u518d\u575a\u6301\u56fd\u4f01\u7684\u9886\u5bfc\u5730\u4f4d\uff0c\u9664\u4e86\u91d1\u878d\u3001\u77ff\u4ea7\u3001\u901a\u8baf\u548c\u8fd0\u8f93\u9886\u57df\u5916\uff0c\u5176\u5b83\u7ade\u4e89\u6027\u9886\u57df\u7684\u56fd\u4f01\u57fa\u672c\u4e0a\u90fd\u88ab\u5356\u6389\u4e86\u3002\u56fd\u4f01\u5458\u5de5\u7edf\u7edf\u4e0b\u5c97\uff0c\u8ba9\u4ed6\u4eec\u53bb\u5916\u4f01\u548c\u6c11\u4f01\u5bfb\u627e\u751f\u8def\u3002\u751a\u81f3\u6211\u4eec\u4e5f\u4e0d\u518d\u575a\u6301\u5546\u4e1a\u94f6\u884c\u5fc5\u987b100%\u56fd\u6709\u7684\u653f\u7b56\uff0c\u4e94\u5927\u884c\u7eb7\u7eb7\u9009\u62e9\u5728\u56fd\u5916\u4e0a\u5e02\uff0c\u6211\u5927\u4e2d\u56fd\u653f\u5e9c\u9010\u6b65\u653e\u5f03\u4e86\u4e0e\u5546\u4e1a\u94f6\u884c\u76f4\u63a5\u6346\u7ed1\u7684\u56fa\u6709\u7406\u5ff5\u3002 \u5916\u8d44\u7684\u6d8c\u5165\u89e3\u6551\u4e86\u4e2d\u56fd\uff0c\u8d44\u91d1\u94fe\u6fd2\u4e34\u5d29\u584c\u7684\u592e\u884c\u83b7\u5f97\u4e86\u5e9e\u5927\u7684\u5916\u6c47\u8f93\u5165\uff0c\u5c31\u6b64\u53d8\u5f97\u8d22\u5927\u6c14\u7c97\u3002\u52302013\u5e74\u8fbe\u52306.19\u3002 \u8d27\u5e01\u4e58\u6570:\u5404\u7ecf\u6d4e\u4e3b\u4f53\u5c06\u5916\u6c47\u5151\u6362\u4e3a\u4eba\u6c11\u5e01\u4e4b\u540e\uff0c\u603b\u662f\u4f1a\u5b58\u5728\u5546\u4e1a\u94f6\u884c\u3002\u5546\u4e1a\u94f6\u884c\u672c\u8eab\u4e5f\u80fd\u5f97\u5230\u592e\u884c\u7684\u501f\u6b3e\u3002\u8fd9\u4e24\u7b14\u94b1\uff0c\u5c31\u6784\u6210\u4e86\u5546\u4e1a\u94f6\u884c\u7684\u539f\u59cb\u5b58\u6b3e\uff0c\u4e5f\u5c31\u662f\u57fa\u7840\u8d27\u5e01\u3002\u5546\u4e1a\u94f6\u884c\u4f1a\u5c06\u8fd9\u4e9b\u94b1\u62ff\u51fa\u53bb\u653e\u8d37\u3002\u6bcf10\u5757\u94b1\u7684\u5b58\u6b3e\uff0c\u5546\u4e1a\u94f6\u884c\u4f1a\u7559\u4e0b\u81f3\u5c112\u57575\u4f5c\u4e3a\u51c6\u5907\u91d1\uff0c\u8d37\u51fa\u53bb7\u57575\u6bdb\u94b1\u3002\u83b7\u5f97\u8d37\u6b3e\u7684\u7ecf\u8425\u8005\uff0c\u4e8b\u5b9e\u4e0a\u53c8\u4f1a\u5c06\u8fd9\u7b14\u8d37\u6b3e\u5b58\u56de\u94f6\u884c\uff0c\u4e8e\u662f\u5546\u4e1a\u94f6\u884c\u53c8\u62ff\u7740\u8fd97\u57575\u4e2d\u76845\u5757\u94b1\u51fa\u53bb\u653e\u8d37\u3002\u5982\u6b64\u53cd\u590d\u5faa\u73af\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u5b58\u6b3e\u89c4\u6a21\u88ab\u653e\u5927\u4e86\u3002\u4ee5\u8fd9\u4e2a\u88ab\u653e\u5927\u4e4b\u540e\u7684\u8d44\u91d1\u603b\u89c4\u6a21\uff0c\u9664\u4ee5\u592e\u884c\u603b\u8d44\u4ea7\uff08\u5373\u57fa\u7840\u8d27\u5e01\u91cf\uff09\uff0c\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u8d27\u5e01\u4e58\u6570\u3002 \u5f53\u65f6\u7f8e\u56fd\u7684\u91d1\u878d\u673a\u6784\u5927\u8086\u501f\u94b1\u7ed9\u7a77\u4eba\u4e70\u623f\uff0c\u751a\u81f3\u8fde\u9996\u4ed8\u7684\u6982\u5ff5\u90fd\u6ca1\u6709\uff0c\u5168\u90e8\u8d2d\u623f\u6b3e\u90fd\u662f\u501f\u7684\u3002\u52302008\u5e74\u7684\u65f6\u5019\uff0c\u7a77\u4eba\u7ec8\u4e8e\u666e\u904d\u8fd8\u4e0d\u8d77\u94b1\u4e86\u3002\u4e8e\u662f\u503a\u52a1\u70b8\u5f39\u7206\u53d1\uff0c\u6574\u6761\u501f\u8d37\u94fe\u4e0a\u7684\u91d1\u878d\u673a\u6784\u4e00\u4e2a\u63a5\u4e00\u4e2a\u7684\u5012\u95ed\u3002\u7f8e\u56fd\u6574\u4e2a\u91d1\u878d\u7cfb\u7edf\u90fd\u5728\u56de\u6536\u8d44\u91d1\uff0c\u4ee5\u786e\u4fdd\u751f\u5b58\u3002\u7f8e\u8054\u50a8\u63a8\u51fa\u4e86\u5927\u89c4\u6a21\u7684QE\u8ba1\u5212\uff0c\u4e5f\u5c31\u662f\u5927\u89c4\u6a21\u5370\u94b1\uff0c\u5411\u91d1\u878d\u7cfb\u7edf\u8865\u5145\u6d41\u52a8\u6027\uff0c\u4f46\u4f9d\u7136\u4e0d\u591f\u5e94\u4ed8\u707e\u96be\u3002\u5728\u8fd9\u4e2a\u65f6\u523b\uff0c\u6211\u5927\u4e2d\u56fd\u9762\u4e34\u7740\u7ec8\u6781\u62f7\u95ee\uff1a\u5982\u679c\u7f8e\u5143\u5c31\u6b64\u5927\u89c4\u6a21\u56de\u6d41\u600e\u4e48\u529e\uff1f\u4eba\u6c11\u5e01\u5c82\u4e0d\u662f\u5c31\u4e27\u5931\u4fe1\u7528\u652f\u6491\u4e86\u5417\uff1f\u6211\u56fd\u5bf9\u6b64\u4f5c\u51fa\u7684\u56de\u7b54\u662f\uff1a\u81ea\u5df1\u5370\u3002\u56db\u4e07\u4ebf\u501f\u6b3e\u6295\u8d44\u8ba1\u5212\u6a2a\u7a7a\u51fa\u4e16\uff0c\u592e\u884c\u5f00\u59cb\u63d0\u9ad8\u5411\u5546\u4e1a\u94f6\u884c\u501f\u6b3e\u7684\u89c4\u6a21\u3002\u4f53\u73b0\u5728\u6570\u636e\u4e0a\uff0c2009\u5e74\u592e\u884c\u5411\u5546\u4e1a\u94f6\u884c\u501f\u6b3e\u5360\u592e\u884c\u603b\u8d44\u4ea7\u7684\u6bd4\u503c\u8fbe\u5230\u6700\u4f4e\u503c3.1%\u4e4b\u540e\uff0c\u5c31\u5f00\u59cb\u8fdb\u5165\u4e0a\u5347\u901a\u9053\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4ece2009\u5e74\u5f00\u59cb\uff0c\u6211\u56fd\u7684\u8d27\u5e01\u4e58\u6570\u5f00\u59cb\u91cd\u65b0\u4e0a\u5347\uff0c\u52302013\u5e74\u4e0a\u5347\u52303.49\uff0c\u8fd9\u4e2a\u6570\u636e\u4e8b\u5b9e\u4e0e2001\u5e74\u7b2c\u4e00\u6b21\u503a\u52a1\u5371\u673a\u65f63.72\u7684\u8d27\u5e01\u4e58\u6570\u5df2\u7ecf\u7b97\u662f\u975e\u5e38\u63a5\u8fd1\u4e86\u3002\u7136\u800c\u6b64\u540e\u6211\u56fd\u5e76\u6ca1\u6709\u6536\u655b\uff0c\u8d27\u5e01\u4e58\u6570\u6301\u7eed\u4e0a\u5347\uff0c2015\u5e74\u8fbe\u52304.38\uff0c2016\u5e74\u5df2\u7ecf\u8fbe\u5230\u4e864.51\u3002\u8fdb\u51652017\u5e74\u4e4b\u540e\uff0c\u8d27\u5e01\u4e58\u6570\u5c31\u8fdb\u5165\u4e86\u7ea0\u7ed3\u72b6\u6001\u30023\u6708\u4efd\u5fae\u5f31\u4e0a\u5347\u52304.74\uff0c\u6b64\u540e\u5f00\u59cb\u53cd\u590d\u7684\u7ea0\u7ed3\u4e0b\u884c\uff0c\u52308\u6708\u4efd\u53c8\u52c9\u5f3a\u6062\u590d\u52304.74\u3002\u3002\u7f8e\u56fd\u4e0d\u518d\u613f\u610f\u5411\u5168\u4e16\u754c\u63d0\u4f9b\u8d27\u5e01\u4fe1\u7528\uff0c\u8fd9\u4e8b\u5df2\u7ecf\u7b97\u662f\u677f\u4e0a\u9489\u9489\uff0c\u4e0d\u4f1a\u518d\u6709\u4ec0\u4e48\u53d8\u6570\u3002\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u50cf\u7f8e\u56fd\u8fd9\u6837\u53ef\u4ee5\u5411\u5168\u4e16\u754c\u53d1\u884c\u7eb8\u5e01\uff0c\u5e76\u4ee5\u5176\u8d27\u5e01\u4fe1\u7528\u652f\u6491\u8d77\u5168\u7403\u5916\u8d38\u7684\u56fd\u5bb6\uff0c\u8d27\u5e01\u4e58\u6570\u4e5f\u4e0d\u8fc7\u662f\u957f\u5e74\u4fdd\u6301\u57283\u5de6\u53f3\uff0c\u800c\u6211\u5927\u4e2d\u56fd\uff0c\u81ea2013\u5e74\u4e4b\u540e\uff0c\u8d27\u5e01\u4e58\u6570\u5c31\u575a\u5b9a\u7684\u8d85\u8fc7\u4e863\uff0c\u76ee\u524d\u57284.6\u5de6\u53f3\u6d6e\u52a8\u3002\u6211\u56fd\u8fd9\u79cd\u8d85\u9ad8\u7684\u8d27\u5e01\u4e58\u6570\uff0c\u8fd9\u79cd\u5df2\u7ecf\u8fbe\u5230\u6781\u9650\u7684\u8d27\u5e01\u6760\u6746\uff0c\u5c31\u662f\u6211\u4eec\u73b0\u5728\u9762\u4e34\u7684\u4e00\u5207\u95ee\u9898\u7684\u6839\u6e90\u3002 \u592e\u884c\u5411\u5546\u4e1a\u94f6\u884c\u63d0\u4f9b\u4e86\u592a\u591a\u7684\u8d44\u91d1\uff0c\u4f9b\u5546\u4e1a\u94f6\u884c\u501f\u7ed9\u5730\u65b9\u653f\u5e9c\uff0c\u8ba9\u4ed6\u4eec\u53bb\u5174\u5efa\u5404\u79cd\u6beb\u65e0\u73b0\u91d1\u56de\u62a5\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u6309\u7167\u5f53\u65f6\u666e\u904d\u7684\u8bf4\u6cd5\uff0c\u5730\u65b9\u503a\u5728\u90a3\u4e00\u5e74\u5c31\u8d85\u8fc7\u4e8620\u4e07\u4ebf\u4eba\u6c11\u5e01\u3002\u597d\u5427\uff0c\u5173\u4e8e\u5730\u65b9\u503a\u603b\u989d\uff0c\u4e8b\u5b9e\u4e0a\u6211\u56fd\u4ece\u6765\u90fd\u6ca1\u6709\u771f\u6b63\u5168\u9762\u7684\u7edf\u8ba1\u3002\u603b\u4e4b\u5f53\u65f6\u8fd9\u4e2a20\u4e07\u4ebf\u5730\u65b9\u503a\u7684\u8bf4\u6cd5\u4e00\u51fa\u6765\uff0c\u6211\u5927\u4e2d\u56fd\u4ece\u4e0a\u5230\u4e0b\u5f00\u59cb\u7d27\u5f20\uff0c\u5f00\u59cb\u4e86\u5bf9\u56db\u4e07\u4ebf\u501f\u503a\u6295\u8d44\u8ba1\u5212\u7684\u5168\u9762\u53cd\u601d\u3002\u4e8e\u662f\u4ece2013\u5e74\u521d\u5f00\u59cb\uff0c\u6211\u56fd\u5f00\u59cb\u7d27\u7f29\u94f6\u6839\uff0c\u592e\u884c\u5f00\u59cb\u51cf\u5c11\u5411\u5546\u4e1a\u94f6\u884c\u7684\u501f\u6b3e\uff0c\u5e76\u901a\u8fc7\u4e00\u7cfb\u5217\u7a97\u53e3\u6307\u5bfc\uff0c\u5c1d\u8bd5\u6253\u538b\u94f6\u884c\u7684\u8d37\u6b3e\u51b2\u52a8\uff0c\u5e76\u591a\u6b21\u4ee5\u884c\u653f\u547d\u4ee4\u7684\u65b9\u5f0f\u538b\u5236\u5730\u65b9\u503a\u52a1\u6269\u5f20\u7684\u51b2\u52a8\u3002\u52302013\u5e74\u5e95\uff0c\u592e\u884c\u5bf9\u5546\u4e1a\u94f6\u884c\u7684\u501f\u6b3e\u5360\u603b\u8d44\u4ea7\u7684\u6bd4\u503c\u4e0b\u964d\u5230\u4e864.1%\u3002\u7136\u800c\uff0c\u8fd9\u4e00\u6b21\u6839\u672c\u8c08\u4e0d\u4e0a\u4e25\u5389\u7684\u91d1\u878d\u8c03\u6574\uff0c\u5374\u5f15\u53d1\u4e86\u975e\u5e38\u4e25\u91cd\u7684\u540e\u679c\uff1a2013\u5e74\u4e2d\uff0c\u94b1\u8352\u7206\u53d1\u4e86\u3002 \u8981\u77e5\u9053\u5f53\u65f6\u94f6\u884c\u4e3b\u8981\u7684\u501f\u6b3e\u5bf9\u8c61\uff0c\u5176\u5b9e\u5c31\u662f\u653f\u5e9c\u7684\u5404\u79cd\u5e73\u53f0\u516c\u53f8\uff0c\u4e3b\u8981\u7684\u8d44\u91d1\u53bb\u5411\uff0c\u90fd\u662f\u4e00\u4e9b\u5e02\u653f\u9053\u8def\u554a\u56ed\u6797\u5e7f\u573a\u554a\u4e4b\u7c7b\u7684\u57fa\u5efa\u5de5\u7a0b\uff0c\u6839\u672c\u65e0\u6cd5\u4ea7\u751f\u73b0\u91d1\u56de\u62a5\u3002\u5546\u4e1a\u94f6\u884c\u8981\u7ef4\u6301\u73b0\u91d1\u6d41\uff0c\u5c31\u5fc5\u987b\u4f9d\u8d56\u592e\u884c\u4e0d\u505c\u7684\u501f\u94b1\u8f93\u8840\u3002\u73b0\u5728\u592e\u884c\u7a81\u7136\u505c\u6b62\u8f93\u8840\uff0c\u4e8e\u662f\u201cDUANG\u201d\u7684\u4e00\u58f0\uff0c\u5546\u4e1a\u94f6\u884c\u7684\u73b0\u91d1\u6d41\u65ad\u88c2\u4e86\u3002 \u94b1\u5230\u5e95\u5230\u54ea\u91cc\u53bb\u4e86\uff1f\u5f88\u7b80\u5355\uff0c\u88ab\u5404\u7c7b\u653f\u5e9c\u503a\u548c\u56fd\u4f01\u503a\u501f\u53bb\u4e86\uff0c\u6c89\u6dc0\u5230\u4e86\u4e0d\u80fd\u521b\u9020\u73b0\u91d1\u56de\u62a5\u7684\u5e02\u653f\u5de5\u7a0b\u3001\u57fa\u7840\u5efa\u8bbe\u91cc\u53bb\u4e86\u3002 2014\u5e74\uff0c\u592e\u884c\u5bf9\u5546\u4e1a\u94f6\u884c\u501f\u6b3e\u5360\u592e\u884c\u603b\u8d44\u4ea7\u7684\u6bd4\u503c\u5df2\u7ecf\u4e0a\u5347\u52307.4%\uff0c\u52302015\u5e74\u7ee7\u7eed\u4e0a\u5347\u52308.4%\u3002\u5c31\u5546\u4e1a\u94f6\u884c\u8fd9\u79cd\u4e00\u505c\u6b62\u4f9b\u6c34\u5c31\u4f1a\u968f\u65f6\u66b4\u6bd9\u7684\u72b6\u6001\uff0c\u5f53\u7136\u662f\u975e\u5e38\u5371\u9669\u7684\uff0c\u7b80\u76f4\u4ee4\u4eba\u65e0\u6cd5\u76f4\u89c6\u3002\u6211\u5927\u4e2d\u56fd\u5f53\u7136\u4e0d\u4f1a\u5750\u4ee5\u5f85\u6bd9\u3002\u8981\u628a\u94f6\u884c\u4ece\u503a\u52a1\u9677\u9631\u91cc\u89e3\u8131\u51fa\u6765\uff0c\u5c31\u5fc5\u987b\u8ba9\u4f01\u4e1a\u627e\u5230\u65b0\u7684\u878d\u8d44\u6e20\u9053\u3002 \u4f20\u7edf\u7684\u94f6\u884c\u8d37\u6b3e\u8def\u5f84\uff0c\u4e43\u81f3\u4e8e\u503a\u5238\u5e02\u573a\u90fd\u4e0d\u662f\u597d\u529e\u6cd5\uff0c\u51b7\u773c\u770b\u8fc7\u53bb\uff0c\u6700\u5408\u9002\u7684\u8fd8\u662f\u80a1\u5e02\u3002\u5982\u679c\u628a\u80a1\u5e02\u7ed9\u62c9\u8d77\u6765\uff0c\u4e00\u53e3\u6c14\u8ba9\u5b83\u6da8\u4e2a\u51e0\u5343\u70b9\uff0c\u4ee5\u540e\u4f01\u4e1a\u4eec\u90fd\u80fd\u901a\u8fc7\u80a1\u7968\u53d1\u884c\u878d\u8d44\uff0c\u751a\u81f3\u8bf4\u4e0d\u5b9a\u8fd8\u80fd\u9760\u5356\u80a1\u7968\u8fd8\u6e05\u94f6\u884c\u7684\u503a\u52a1\u3002 \u4e8e\u662f\u4ece2014\u5e74\u5e95\u5f00\u59cb\uff0c\u4e00\u573a\u80a1\u5e02\u7684\u56fd\u5bb6\u725b\u5e02\u88ab\u5f3a\u884c\u5439\u4e86\u8d77\u6765\u3002\u94f6\u884c\u4e0d\u8ba1\u6210\u672c\u7684\u501f\u94b1\u7ed9\u5238\u5546\uff0c\u8ba9\u5238\u5546\u62ff\u53bb\u501f\u7ed9\u80a1\u6c11\uff0c\u8ba9\u4ed6\u4eec\u878d\u8d44\u7092\u80a1\u3002\u65e0\u6570\u8d44\u91d1\u8ddf\u98ce\u800c\u81f3\uff0c\u62fc\u547d\u7684\u5728\u80a1\u5e02\u52a0\u6760\u6746\u3002\u4e8b\u540e\u6211\u4eec\u6839\u672c\u65e0\u4ece\u7edf\u8ba1\u5728\u8fd9\u4e2a\u75af\u72c2\u7684\u56fd\u5bb6\u725b\u5e02\u8fc7\u7a0b\u4e2d\uff0c\u5230\u5e95\u541e\u566c\u4e86\u591a\u5c11\u8d44\u91d1\u3002\u80a1\u707e\u4e4b\u540e\uff0c\u4e2d\u56fd\u6574\u4f53\u9677\u5165\u503a\u52a1\u9677\u9631\u7684\u73b0\u72b6\u5df2\u7ecf\u65e0\u4ece\u63a9\u9970\u3002\u5916\u8d44\u8ddf\u6211\u4eec\u5171\u60a3\u96be\uff0c\u4e8e\u662f\u5916\u8d44\u5f00\u59cb\u64a4\u79bb\uff0c\u6c47\u7387\u5931\u5b88\u3002 \u52302015\u5e74\u5e95\uff0c\u6211\u5927\u4e2d\u56fd\u7ec8\u4e8e\u51b3\u5b9a\uff0c\u8981\u8d4c\u4e00\u628a\u56fd\u8fd0\u4e86\u3002\u6211\u4eec\u7ec8\u4e8e\u62ff\u51fa\u4e86\u5927\u6740\u5668\uff1a\u623f\u5730\u4ea7\u3002\u7136\u800c\uff0c\u4f9d\u9760\u5c45\u6c11\u6700\u540e\u7684\u68fa\u6750\u672c\uff0c\u771f\u7684\u53ef\u4ee5\u652f\u6491\u8d77\u8fd9\u4e2a\u56fd\u5bb6\u7684\u7ecf\u6d4e\u5417\uff1f \u662f\u4ece2008\u5e74\u5f00\u59cb\uff0c\u81ea\u6b64\u4e4b\u540e\uff0c\u4e2d\u56fd\u5c31\u8d70\u4e0a\u4e86\u4ee5\u503a\u52a1\u81a8\u80c0\u63a8\u52a8\u7ecf\u6d4e\u53d1\u5c55\u7684\u4e0d\u5f52\u8def\u3002 \u5c45\u6c11\u8d37\u6b3e\u5360\u603b\u8d37\u6b3e\u7684\u6bd4\u503c\u5c31\u4e0d\u65ad\u4e0a\u5347\uff0c\u4ece2008\u5e74\u768417.8%\uff0c\u4e00\u76f4\u4e0a\u5347\u5230\u4eca\u5e748\u6708\u4efd\u768431.5%\uff0c\u589e\u52a0\u4e8613.7\u4e2a\u767e\u5206\u70b9\uff1b\u800c\u4f01\u4e1a\u8d37\u6b3e\u5360\u603b\u8d37\u6b3e\u7684\u6bd4\u503c\u5219\u4e0d\u65ad\u4e0b\u964d\uff0c\u4ece2008\u5e74\u768482.2%\u4e00\u76f4\u4e0b\u964d\u5230\u4eca\u5e748\u6708\u4efd\u768465.2%\uff0c\u4e0b\u964d\u4e8617\u4e2a\u767e\u5206\u70b9\u3002\u7531\u6b64\u53ef\u89c1\uff0c08\u5e74\u4e4b\u540e\uff0c\u6211\u5927\u4e2d\u56fd\u6700\u4e3b\u8981\u7684\u501f\u6b3e\u4eba\uff0c\u5c31\u662f\u5c45\u6c11\uff01","title":"\u4f0a\u8428\u514b\u00b7\u725b\u987f"},{"location":"tools/Economics/#_1","text":"\u575a\u6301\u4ee5\u8d27\u5e01\u5355\u4f4d\u4e3a\u8d35\u91d1\u5c5e\u5e01\u7684\u6807\u6ce8\u5355\u4f4d,\u7531\u653f\u5e9c\u51fa\u9762\uff0c\u5bf9\u8d27\u5e01\u5e01\u503c\u4e0e\u9ec4\u91d1\u91cd\u91cf\u4e4b\u95f4\u7684\u5151\u6362\u5173\u7cfb\u4f5c\u51fa\u6b63\u5f0f\u627f\u8bfa\u3002 \u4e8c\u6218\u4e4b\u540e\uff0c\u7f8e\u56fd\u6210\u957f\u4e3a\u65b0\u7684\u5168\u7403\u9738\u4e3b,1944\u5e74\uff0c\u5728\u7f8e\u56fd\u65b0\u7f55\u5e03\u4ec0\u5c14\u5dde\u5e03\u96f7\u987f\u68ee\u6797\u53ec\u5f00\u8054\u5408\u56fd\u56fd\u9645\u91d1\u878d\u4f1a\u8bae\uff0c\u52301946\u5e74\uff0c\u56fd\u9645\u8d27\u5e01\u57fa\u91d1\u7ec4\u7ec7\u548c\u56fd\u9645\u590d\u5174\u5f00\u53d1\u94f6\u884c\u5728\u534e\u76db\u987f\u6b63\u5f0f\u5f00\u59cb\u8425\u4e1a\uff0c\u8fd9\u5728\u4e8b\u5b9e\u4e0a\u5ba3\u544a\u4e86\u201c\u5e03\u96f7\u987f\u68ee\u6797\u4f53\u7cfb\u201d\u7684\u6b63\u5f0f\u786e\u7acb\u3002\u5b83\u4eec\u7684\u7ae0\u7a0b\u89c4\u5b9a\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u7684\u8d27\u5e01\u5e01\u503c\u90fd\u5fc5\u987b\u4f7f\u7528\u9ec4\u91d1\u6216\u4e0e\u9ec4\u91d1\u7b49\u4ef7\u7684\u7f8e\u5143\u6765\u8868\u793a\uff0c\u5e76\u4e14\u672a\u7ecf\u6279\u51c6\u4e0d\u5f97\u4fee\u6539\u3002\u8fd9\u5c31\u5728\u4e8b\u5b9e\u4e0a\u786e\u7acb\u4e86\u7f8e\u5143=\u9ec4\u91d1\u7684\u4fe1\u7528\u5173\u7cfb\u30021947\u5e74\uff0c\u5728\u5e03\u96f7\u987f\u68ee\u6797\u4f53\u7cfb\u7684\u57fa\u7840\u4e0a\uff0c\u7f8e\u6b27\u5404\u4e3b\u8981\u56fd\u5bb6\u8fbe\u6210\u300a\u5173\u7a0e\u603b\u534f\u5b9a\u300b\uff0c\u786e\u5b9a\u6210\u5458\u56fd\u4e4b\u95f4\u653e\u5f03\u8d38\u6613\u58c1\u5792\uff0c\u4ee5\u7f8e\u5143\u4e3a\u5a92\u4ecb\u8fdb\u884c\u4ea4\u6613\u30021948\u5e74\uff0c\u7f8e\u56fd\u542f\u52a8\u201c\u9a6c\u6b47\u5c14\u8ba1\u5212\u201d\uff0c\u76f4\u63a5\u5411\u6b27\u6d32\u5404\u56fd\u6295\u8d44\uff0c\u590d\u5efa\u5176\u88ab\u6253\u6210\u5e9f\u589f\u7684\u5de5\u4e1a\u4f53\u7cfb\uff0c\u632f\u5174\u6b27\u6d32\u5404\u56fd\u7ecf\u6d4e\u3002 \u5f53\u65f6\u7684\u4e2d\u534e\u6c11\u56fd\u66fe\u7ecf\u662f\u56fd\u9645\u8d27\u5e01\u57fa\u91d1\u7ec4\u7ec7\u3001\u4e16\u754c\u94f6\u884c\u548c\u5173\u7a0e\u603b\u534f\u5b9a\u7684\u521b\u59cb\u56fd\uff0c\u53ef\u60dc\u7684\u662f\uff0c\u65b0\u4e2d\u56fd\u5efa\u56fd\u4e4b\u540e\u5411\u82cf\u8054\u9760\u62e2\uff0c\u5e76\u7acb\u523b\u5c31\u9000\u51fa\u4e86\u8fd9\u4e09\u5927\u7ec4\u7ec7\u3002\u6b64\u540e\uff0c\u52301980\u5e74\u4e2d\u56fd\u624d\u91cd\u65b0\u52a0\u5165\u56fd\u9645\u8d27\u5e01\u57fa\u91d1\u7ec4\u7ec7\u548c\u4e16\u754c\u94f6\u884c\uff0c\u52302001\u5e74\u624d\u91cd\u65b0\u52a0\u5165\u5173\u7a0e\u603b\u534f\u5b9a\u3002\u4e3a\u4e86\u6062\u590d\u8fd9\u4e09\u4e2a\u7ec4\u7ec7\u7684\u5e2d\u4f4d\uff0c\u52a0\u5165\u5230\u65b0\u7684\u7ecf\u6d4e\u79e9\u5e8f\u4e4b\u4e2d\uff0c\u65b0\u4e2d\u56fd\u7ecf\u53d7\u4e86\u91cd\u91cd\u8003\u9a8c\u548c\u78e8\u96be\uff0c\u4e0d\u8fc7\u8fd9\u90fd\u662f\u540e\u8bdd\u3002 \u8d27\u5e01\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u653f\u5e9c\u53d1\u884c\u7684\u4fe1\u7528\u503a\uff01 \u4ee5\u503a\u4e3a\u951a\u7684\u8d27\u5e01\u4fe1\u7528\u8bbe\u5b9a\uff0c\u4e43\u662f\u4eba\u7c7b\u793e\u4f1a\u81f3\u4eca\u4e3a\u6b62\uff0c\u6700\u57fa\u7840\u7684\u91d1\u878d\u8bbe\u5b9a\u3002 \u5404\u56fd\u592e\u884c\u4e3b\u8981\u662f\u901a\u8fc7\u4e09\u79cd\u5f62\u5f0f\u53d1\u884c\u57fa\u7840\u8d27\u5e01\uff1a \u7b2c\u4e00\uff0c\u5411\u5546\u4e1a\u94f6\u884c\u63d0\u4f9b\u501f\u6b3e\uff0c \u7b2c\u4e8c\uff0c\u4ee5\u4eba\u6c11\u5e01\u5151\u6362\u5404\u7ecf\u6d4e\u4e3b\u4f53\u6323\u56de\u6765\u7684\u5916\u6c47\uff0c \u7b2c\u4e09\uff0c\u5411\u653f\u5e9c\u6216\u5404\u56fd\u5b57\u53f7\u5355\u4f4d\u63d0\u4f9b\u501f\u6b3e\u3002 \u592e\u884c\u603b\u8d44\u4ea7\uff0c\u4e0e\u57fa\u7840\u8d27\u5e01\u53d1\u884c\u91cf\uff0c\u662f\u57fa\u672c\u7b49\u540c\u7684\u3002\u5bf9\u7f8e\u56fd\u8fd9\u6837\u7684\u56fd\u9645\u8d27\u5e01\u53d1\u884c\u56fd\u6765\u8bf4\uff0c\u7b2c\u4e09\u79cd\u65b9\u5f0f\u662f\u6700\u4e3b\u8981\u7684\u8d27\u5e01\u53d1\u884c\u65b9\u5f0f\uff0c\u4e2d\u56fd\u8fd9\u6837\u7684\u56fd\u5bb6\uff0c\u5219\u4e3b\u8981\u662f\u901a\u8fc7\u524d\u4e24\u79cd\u65b9\u5f0f\u53d1\u884c\u57fa\u7840\u8d27\u5e01\uff0c \u4e2d\u56fd\u653f\u5e9c\u548c\u4e2d\u56fd\u592e\u884c\uff0c\u5546\u4e1a\u94f6\u884c(\u4e2d\u519c\u5de5\u5efa\u4ea4,\u8fd9\u4e94\u5927\u884c\u7684\u4fe1\u7528\uff0c\u90fd\u662f\u653f\u5e9c\u4fe1\u7528\u3001\u56fd\u5bb6\u4fe1\u7528)\u6574\u4e2a1980\u5e74\u4ee3\uff0c\u6211\u5927\u4e2d\u56fd\u90fd\u662f\u4f9d\u9760\u81ea\u5df1\u7684\u653f\u5e9c\u4fe1\u7528\u5728\u53d1\u884c\u8d27\u5e01\u3002\u4e3b\u6743\u8d27\u5e01\uff0c\u4e0d\u4f9d\u8d56\u7f8e\u5143\u52a0\u6301\u5c31\u80fd\u72ec\u7acb\u83b7\u5f97\u4fe1\u7528\u7684\u8d27\u5e01\u30021986\u5e74\u7f8e\u5143\u5151\u4eba\u6c11\u5e01\u7684\u4e2d\u56fd\u5b98\u65b9\u6c47\u7387\u662f3.45\uff0c\u4f46\u662f\u9ed1\u5e02\u6c47\u7387\u4e00\u76f4\u90fd\u57288\u523010\u4e4b\u95f4\u6d6e\u52a8\u30021980\u5e74\u4ee3\u7684\u6539\u9769\u5f00\u653e\u4e4b\u8def\uff0c\u5176\u5b9e\u8d70\u5f97\u6781\u4e3a\u8270\u96be\u3002\u6211\u5927\u4e2d\u56fd\u8981\u575a\u6301\u4e3b\u6743\u8d27\u5e01\u7684\u9053\u8def\uff0c\u5b88\u4f4f3.45\u7684\u6c47\u7387\uff0c\u4ee3\u4ef7\u5c31\u662f\u7ecf\u6d4e\u6839\u672c\u53d1\u5c55\u4e0d\u8d77\u6765\u30021994\u5e74\u4eba\u6c11\u5e01\u6c47\u7387\u56e0\u6b64\u8df3\u8d2c\u5230\u4e868.62\u3002 \u8fd9\u610f\u5473\u7740\u523090\u5e74\u4ee3\u672b\u671f\u7684\u65f6\u5019\uff0c\u4eba\u6c11\u5e01\u4fe1\u7528\uff0c\u5df2\u7ecf\u662f\u7531\u7f8e\u5143\u548c\u4e2d\u56fd\u7684\u56fd\u5bb6\u4fe1\u7528\u5171\u540c\u652f\u6491\u7684\u4e86\uff0c\u4e24\u8fb9\u57fa\u672c\u4e0a\u5e73\u5206\u79cb\u8272\u3002 \u7136\u800c\u8fd9\u4e2a\u65f6\u5019\u4e2d\u56fd\u7ecf\u6d4e\u906d\u9047\u5230\u4e00\u6b21\u771f\u6b63\u7684\u503a\u52a1\u5371\u673a\u3002\u5728\u653e\u5f00\u4eba\u6c11\u5e01\u6c47\u7387\uff0c\u771f\u6b63\u6253\u5f00\u56fd\u95e8\u8fce\u8fdb\u5916\u8d44\uff0c\u5e76\u968f\u4e4b\u771f\u6b63\u6269\u5927\u5916\u8d38\u89c4\u6a21\u4e4b\u540e\uff0c\u56fd\u4eba\u60ca\u8bb6\u7684\u53d1\u73b0\uff0c\u539f\u6765\u9664\u4e86\u56fd\u4f01\u751f\u4ea7\u7684\u50bb\u5927\u9ed1\u7c97\u7684\u4ea7\u54c1\u4e4b\u5916\uff0c\u4e16\u754c\u4e0a\u7adf\u7136\u8fd8\u6709\u90a3\u4e48\u591a\u7cbe\u7f8e\u8010\u7528\u7684\u5546\u54c1\uff0c\u4e8e\u662f\u7eb7\u7eb7\u5f03\u56fd\u8d27\u4e0d\u7528\u3002\u56fd\u4f01\u957f\u671f\u79ef\u7d2f\u7684\u6280\u672f\u843d\u540e\u6548\u7387\u4f4e\u4e0b\u7684\u95ee\u9898\u572890\u5e74\u4ee3\u4e2d\u540e\u671f\u9010\u6b65\u7206\u53d1\u4e86\u51fa\u6765\uff0c\u5e76\u56e0\u6b64\u4e22\u5931\u4e86\u5e02\u573a\u3002\u9ebb\u70e6\u5728\u4e8e\uff0c\u56fd\u4f01\u8eab\u4e0a\u7edf\u7edf\u80cc\u8d1f\u7740\u6c89\u91cd\u7684\u94f6\u884c\u503a\u52a1\uff0c\u73b0\u5728\u56fd\u4f01\u7684\u4ea7\u54c1\u5356\u4e0d\u51fa\u53bb\uff0c\u73b0\u91d1\u6d41\u7eb7\u7eb7\u65ad\u88c2\uff0c\u5f53\u7136\u5c31\u662f\u8fd8\u4e0d\u8d77\u503a\u3002\u8fd9\u7b97\u662f\u4e2d\u56fd\u5386\u53f2\u4e0a\u7b2c\u4e00\u6b21\u771f\u6b63\u7684\u503a\u52a1\u5371\u673a\u3002\u4e2d\u56fd\u653f\u5e9c\u8feb\u4e8e\u65e0\u5948\uff0c\u53ea\u80fd\u901a\u8fc7\u592e\u884c\u4e0d\u505c\u7684\u76f4\u63a5\u5411\u5404\u56fd\u6709\u4f01\u4e1a\u8f93\u8840\uff0c\u4e5f\u5c31\u662f\u76f4\u63a5\u51ed\u7a7a\u5370\u94b1\u3002 2001\u5e74\u5e95\u6211\u5927\u4e2d\u56fd\u52a0\u5165\u4e16\u8d38\uff0c\u7b97\u662f\u5f7b\u5e95\u6253\u5f00\u56fd\u95e8\uff0c\u5e76\u5b8c\u5168\u653e\u5f03\u4e86\u4e3b\u6743\u8d27\u5e01\u5730\u4f4d\u3002\u6211\u4eec\u4e5f\u4e0d\u518d\u575a\u6301\u56fd\u4f01\u7684\u9886\u5bfc\u5730\u4f4d\uff0c\u9664\u4e86\u91d1\u878d\u3001\u77ff\u4ea7\u3001\u901a\u8baf\u548c\u8fd0\u8f93\u9886\u57df\u5916\uff0c\u5176\u5b83\u7ade\u4e89\u6027\u9886\u57df\u7684\u56fd\u4f01\u57fa\u672c\u4e0a\u90fd\u88ab\u5356\u6389\u4e86\u3002\u56fd\u4f01\u5458\u5de5\u7edf\u7edf\u4e0b\u5c97\uff0c\u8ba9\u4ed6\u4eec\u53bb\u5916\u4f01\u548c\u6c11\u4f01\u5bfb\u627e\u751f\u8def\u3002\u751a\u81f3\u6211\u4eec\u4e5f\u4e0d\u518d\u575a\u6301\u5546\u4e1a\u94f6\u884c\u5fc5\u987b100%\u56fd\u6709\u7684\u653f\u7b56\uff0c\u4e94\u5927\u884c\u7eb7\u7eb7\u9009\u62e9\u5728\u56fd\u5916\u4e0a\u5e02\uff0c\u6211\u5927\u4e2d\u56fd\u653f\u5e9c\u9010\u6b65\u653e\u5f03\u4e86\u4e0e\u5546\u4e1a\u94f6\u884c\u76f4\u63a5\u6346\u7ed1\u7684\u56fa\u6709\u7406\u5ff5\u3002 \u5916\u8d44\u7684\u6d8c\u5165\u89e3\u6551\u4e86\u4e2d\u56fd\uff0c\u8d44\u91d1\u94fe\u6fd2\u4e34\u5d29\u584c\u7684\u592e\u884c\u83b7\u5f97\u4e86\u5e9e\u5927\u7684\u5916\u6c47\u8f93\u5165\uff0c\u5c31\u6b64\u53d8\u5f97\u8d22\u5927\u6c14\u7c97\u3002\u52302013\u5e74\u8fbe\u52306.19\u3002 \u8d27\u5e01\u4e58\u6570:\u5404\u7ecf\u6d4e\u4e3b\u4f53\u5c06\u5916\u6c47\u5151\u6362\u4e3a\u4eba\u6c11\u5e01\u4e4b\u540e\uff0c\u603b\u662f\u4f1a\u5b58\u5728\u5546\u4e1a\u94f6\u884c\u3002\u5546\u4e1a\u94f6\u884c\u672c\u8eab\u4e5f\u80fd\u5f97\u5230\u592e\u884c\u7684\u501f\u6b3e\u3002\u8fd9\u4e24\u7b14\u94b1\uff0c\u5c31\u6784\u6210\u4e86\u5546\u4e1a\u94f6\u884c\u7684\u539f\u59cb\u5b58\u6b3e\uff0c\u4e5f\u5c31\u662f\u57fa\u7840\u8d27\u5e01\u3002\u5546\u4e1a\u94f6\u884c\u4f1a\u5c06\u8fd9\u4e9b\u94b1\u62ff\u51fa\u53bb\u653e\u8d37\u3002\u6bcf10\u5757\u94b1\u7684\u5b58\u6b3e\uff0c\u5546\u4e1a\u94f6\u884c\u4f1a\u7559\u4e0b\u81f3\u5c112\u57575\u4f5c\u4e3a\u51c6\u5907\u91d1\uff0c\u8d37\u51fa\u53bb7\u57575\u6bdb\u94b1\u3002\u83b7\u5f97\u8d37\u6b3e\u7684\u7ecf\u8425\u8005\uff0c\u4e8b\u5b9e\u4e0a\u53c8\u4f1a\u5c06\u8fd9\u7b14\u8d37\u6b3e\u5b58\u56de\u94f6\u884c\uff0c\u4e8e\u662f\u5546\u4e1a\u94f6\u884c\u53c8\u62ff\u7740\u8fd97\u57575\u4e2d\u76845\u5757\u94b1\u51fa\u53bb\u653e\u8d37\u3002\u5982\u6b64\u53cd\u590d\u5faa\u73af\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u5b58\u6b3e\u89c4\u6a21\u88ab\u653e\u5927\u4e86\u3002\u4ee5\u8fd9\u4e2a\u88ab\u653e\u5927\u4e4b\u540e\u7684\u8d44\u91d1\u603b\u89c4\u6a21\uff0c\u9664\u4ee5\u592e\u884c\u603b\u8d44\u4ea7\uff08\u5373\u57fa\u7840\u8d27\u5e01\u91cf\uff09\uff0c\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u5c31\u662f\u8d27\u5e01\u4e58\u6570\u3002 \u5f53\u65f6\u7f8e\u56fd\u7684\u91d1\u878d\u673a\u6784\u5927\u8086\u501f\u94b1\u7ed9\u7a77\u4eba\u4e70\u623f\uff0c\u751a\u81f3\u8fde\u9996\u4ed8\u7684\u6982\u5ff5\u90fd\u6ca1\u6709\uff0c\u5168\u90e8\u8d2d\u623f\u6b3e\u90fd\u662f\u501f\u7684\u3002\u52302008\u5e74\u7684\u65f6\u5019\uff0c\u7a77\u4eba\u7ec8\u4e8e\u666e\u904d\u8fd8\u4e0d\u8d77\u94b1\u4e86\u3002\u4e8e\u662f\u503a\u52a1\u70b8\u5f39\u7206\u53d1\uff0c\u6574\u6761\u501f\u8d37\u94fe\u4e0a\u7684\u91d1\u878d\u673a\u6784\u4e00\u4e2a\u63a5\u4e00\u4e2a\u7684\u5012\u95ed\u3002\u7f8e\u56fd\u6574\u4e2a\u91d1\u878d\u7cfb\u7edf\u90fd\u5728\u56de\u6536\u8d44\u91d1\uff0c\u4ee5\u786e\u4fdd\u751f\u5b58\u3002\u7f8e\u8054\u50a8\u63a8\u51fa\u4e86\u5927\u89c4\u6a21\u7684QE\u8ba1\u5212\uff0c\u4e5f\u5c31\u662f\u5927\u89c4\u6a21\u5370\u94b1\uff0c\u5411\u91d1\u878d\u7cfb\u7edf\u8865\u5145\u6d41\u52a8\u6027\uff0c\u4f46\u4f9d\u7136\u4e0d\u591f\u5e94\u4ed8\u707e\u96be\u3002\u5728\u8fd9\u4e2a\u65f6\u523b\uff0c\u6211\u5927\u4e2d\u56fd\u9762\u4e34\u7740\u7ec8\u6781\u62f7\u95ee\uff1a\u5982\u679c\u7f8e\u5143\u5c31\u6b64\u5927\u89c4\u6a21\u56de\u6d41\u600e\u4e48\u529e\uff1f\u4eba\u6c11\u5e01\u5c82\u4e0d\u662f\u5c31\u4e27\u5931\u4fe1\u7528\u652f\u6491\u4e86\u5417\uff1f\u6211\u56fd\u5bf9\u6b64\u4f5c\u51fa\u7684\u56de\u7b54\u662f\uff1a\u81ea\u5df1\u5370\u3002\u56db\u4e07\u4ebf\u501f\u6b3e\u6295\u8d44\u8ba1\u5212\u6a2a\u7a7a\u51fa\u4e16\uff0c\u592e\u884c\u5f00\u59cb\u63d0\u9ad8\u5411\u5546\u4e1a\u94f6\u884c\u501f\u6b3e\u7684\u89c4\u6a21\u3002\u4f53\u73b0\u5728\u6570\u636e\u4e0a\uff0c2009\u5e74\u592e\u884c\u5411\u5546\u4e1a\u94f6\u884c\u501f\u6b3e\u5360\u592e\u884c\u603b\u8d44\u4ea7\u7684\u6bd4\u503c\u8fbe\u5230\u6700\u4f4e\u503c3.1%\u4e4b\u540e\uff0c\u5c31\u5f00\u59cb\u8fdb\u5165\u4e0a\u5347\u901a\u9053\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u4ece2009\u5e74\u5f00\u59cb\uff0c\u6211\u56fd\u7684\u8d27\u5e01\u4e58\u6570\u5f00\u59cb\u91cd\u65b0\u4e0a\u5347\uff0c\u52302013\u5e74\u4e0a\u5347\u52303.49\uff0c\u8fd9\u4e2a\u6570\u636e\u4e8b\u5b9e\u4e0e2001\u5e74\u7b2c\u4e00\u6b21\u503a\u52a1\u5371\u673a\u65f63.72\u7684\u8d27\u5e01\u4e58\u6570\u5df2\u7ecf\u7b97\u662f\u975e\u5e38\u63a5\u8fd1\u4e86\u3002\u7136\u800c\u6b64\u540e\u6211\u56fd\u5e76\u6ca1\u6709\u6536\u655b\uff0c\u8d27\u5e01\u4e58\u6570\u6301\u7eed\u4e0a\u5347\uff0c2015\u5e74\u8fbe\u52304.38\uff0c2016\u5e74\u5df2\u7ecf\u8fbe\u5230\u4e864.51\u3002\u8fdb\u51652017\u5e74\u4e4b\u540e\uff0c\u8d27\u5e01\u4e58\u6570\u5c31\u8fdb\u5165\u4e86\u7ea0\u7ed3\u72b6\u6001\u30023\u6708\u4efd\u5fae\u5f31\u4e0a\u5347\u52304.74\uff0c\u6b64\u540e\u5f00\u59cb\u53cd\u590d\u7684\u7ea0\u7ed3\u4e0b\u884c\uff0c\u52308\u6708\u4efd\u53c8\u52c9\u5f3a\u6062\u590d\u52304.74\u3002\u3002\u7f8e\u56fd\u4e0d\u518d\u613f\u610f\u5411\u5168\u4e16\u754c\u63d0\u4f9b\u8d27\u5e01\u4fe1\u7528\uff0c\u8fd9\u4e8b\u5df2\u7ecf\u7b97\u662f\u677f\u4e0a\u9489\u9489\uff0c\u4e0d\u4f1a\u518d\u6709\u4ec0\u4e48\u53d8\u6570\u3002\u4e0d\u7ba1\u600e\u4e48\u6837\uff0c\u50cf\u7f8e\u56fd\u8fd9\u6837\u53ef\u4ee5\u5411\u5168\u4e16\u754c\u53d1\u884c\u7eb8\u5e01\uff0c\u5e76\u4ee5\u5176\u8d27\u5e01\u4fe1\u7528\u652f\u6491\u8d77\u5168\u7403\u5916\u8d38\u7684\u56fd\u5bb6\uff0c\u8d27\u5e01\u4e58\u6570\u4e5f\u4e0d\u8fc7\u662f\u957f\u5e74\u4fdd\u6301\u57283\u5de6\u53f3\uff0c\u800c\u6211\u5927\u4e2d\u56fd\uff0c\u81ea2013\u5e74\u4e4b\u540e\uff0c\u8d27\u5e01\u4e58\u6570\u5c31\u575a\u5b9a\u7684\u8d85\u8fc7\u4e863\uff0c\u76ee\u524d\u57284.6\u5de6\u53f3\u6d6e\u52a8\u3002\u6211\u56fd\u8fd9\u79cd\u8d85\u9ad8\u7684\u8d27\u5e01\u4e58\u6570\uff0c\u8fd9\u79cd\u5df2\u7ecf\u8fbe\u5230\u6781\u9650\u7684\u8d27\u5e01\u6760\u6746\uff0c\u5c31\u662f\u6211\u4eec\u73b0\u5728\u9762\u4e34\u7684\u4e00\u5207\u95ee\u9898\u7684\u6839\u6e90\u3002 \u592e\u884c\u5411\u5546\u4e1a\u94f6\u884c\u63d0\u4f9b\u4e86\u592a\u591a\u7684\u8d44\u91d1\uff0c\u4f9b\u5546\u4e1a\u94f6\u884c\u501f\u7ed9\u5730\u65b9\u653f\u5e9c\uff0c\u8ba9\u4ed6\u4eec\u53bb\u5174\u5efa\u5404\u79cd\u6beb\u65e0\u73b0\u91d1\u56de\u62a5\u7684\u57fa\u7840\u8bbe\u65bd\uff0c\u6309\u7167\u5f53\u65f6\u666e\u904d\u7684\u8bf4\u6cd5\uff0c\u5730\u65b9\u503a\u5728\u90a3\u4e00\u5e74\u5c31\u8d85\u8fc7\u4e8620\u4e07\u4ebf\u4eba\u6c11\u5e01\u3002\u597d\u5427\uff0c\u5173\u4e8e\u5730\u65b9\u503a\u603b\u989d\uff0c\u4e8b\u5b9e\u4e0a\u6211\u56fd\u4ece\u6765\u90fd\u6ca1\u6709\u771f\u6b63\u5168\u9762\u7684\u7edf\u8ba1\u3002\u603b\u4e4b\u5f53\u65f6\u8fd9\u4e2a20\u4e07\u4ebf\u5730\u65b9\u503a\u7684\u8bf4\u6cd5\u4e00\u51fa\u6765\uff0c\u6211\u5927\u4e2d\u56fd\u4ece\u4e0a\u5230\u4e0b\u5f00\u59cb\u7d27\u5f20\uff0c\u5f00\u59cb\u4e86\u5bf9\u56db\u4e07\u4ebf\u501f\u503a\u6295\u8d44\u8ba1\u5212\u7684\u5168\u9762\u53cd\u601d\u3002\u4e8e\u662f\u4ece2013\u5e74\u521d\u5f00\u59cb\uff0c\u6211\u56fd\u5f00\u59cb\u7d27\u7f29\u94f6\u6839\uff0c\u592e\u884c\u5f00\u59cb\u51cf\u5c11\u5411\u5546\u4e1a\u94f6\u884c\u7684\u501f\u6b3e\uff0c\u5e76\u901a\u8fc7\u4e00\u7cfb\u5217\u7a97\u53e3\u6307\u5bfc\uff0c\u5c1d\u8bd5\u6253\u538b\u94f6\u884c\u7684\u8d37\u6b3e\u51b2\u52a8\uff0c\u5e76\u591a\u6b21\u4ee5\u884c\u653f\u547d\u4ee4\u7684\u65b9\u5f0f\u538b\u5236\u5730\u65b9\u503a\u52a1\u6269\u5f20\u7684\u51b2\u52a8\u3002\u52302013\u5e74\u5e95\uff0c\u592e\u884c\u5bf9\u5546\u4e1a\u94f6\u884c\u7684\u501f\u6b3e\u5360\u603b\u8d44\u4ea7\u7684\u6bd4\u503c\u4e0b\u964d\u5230\u4e864.1%\u3002\u7136\u800c\uff0c\u8fd9\u4e00\u6b21\u6839\u672c\u8c08\u4e0d\u4e0a\u4e25\u5389\u7684\u91d1\u878d\u8c03\u6574\uff0c\u5374\u5f15\u53d1\u4e86\u975e\u5e38\u4e25\u91cd\u7684\u540e\u679c\uff1a2013\u5e74\u4e2d\uff0c\u94b1\u8352\u7206\u53d1\u4e86\u3002 \u8981\u77e5\u9053\u5f53\u65f6\u94f6\u884c\u4e3b\u8981\u7684\u501f\u6b3e\u5bf9\u8c61\uff0c\u5176\u5b9e\u5c31\u662f\u653f\u5e9c\u7684\u5404\u79cd\u5e73\u53f0\u516c\u53f8\uff0c\u4e3b\u8981\u7684\u8d44\u91d1\u53bb\u5411\uff0c\u90fd\u662f\u4e00\u4e9b\u5e02\u653f\u9053\u8def\u554a\u56ed\u6797\u5e7f\u573a\u554a\u4e4b\u7c7b\u7684\u57fa\u5efa\u5de5\u7a0b\uff0c\u6839\u672c\u65e0\u6cd5\u4ea7\u751f\u73b0\u91d1\u56de\u62a5\u3002\u5546\u4e1a\u94f6\u884c\u8981\u7ef4\u6301\u73b0\u91d1\u6d41\uff0c\u5c31\u5fc5\u987b\u4f9d\u8d56\u592e\u884c\u4e0d\u505c\u7684\u501f\u94b1\u8f93\u8840\u3002\u73b0\u5728\u592e\u884c\u7a81\u7136\u505c\u6b62\u8f93\u8840\uff0c\u4e8e\u662f\u201cDUANG\u201d\u7684\u4e00\u58f0\uff0c\u5546\u4e1a\u94f6\u884c\u7684\u73b0\u91d1\u6d41\u65ad\u88c2\u4e86\u3002 \u94b1\u5230\u5e95\u5230\u54ea\u91cc\u53bb\u4e86\uff1f\u5f88\u7b80\u5355\uff0c\u88ab\u5404\u7c7b\u653f\u5e9c\u503a\u548c\u56fd\u4f01\u503a\u501f\u53bb\u4e86\uff0c\u6c89\u6dc0\u5230\u4e86\u4e0d\u80fd\u521b\u9020\u73b0\u91d1\u56de\u62a5\u7684\u5e02\u653f\u5de5\u7a0b\u3001\u57fa\u7840\u5efa\u8bbe\u91cc\u53bb\u4e86\u3002 2014\u5e74\uff0c\u592e\u884c\u5bf9\u5546\u4e1a\u94f6\u884c\u501f\u6b3e\u5360\u592e\u884c\u603b\u8d44\u4ea7\u7684\u6bd4\u503c\u5df2\u7ecf\u4e0a\u5347\u52307.4%\uff0c\u52302015\u5e74\u7ee7\u7eed\u4e0a\u5347\u52308.4%\u3002\u5c31\u5546\u4e1a\u94f6\u884c\u8fd9\u79cd\u4e00\u505c\u6b62\u4f9b\u6c34\u5c31\u4f1a\u968f\u65f6\u66b4\u6bd9\u7684\u72b6\u6001\uff0c\u5f53\u7136\u662f\u975e\u5e38\u5371\u9669\u7684\uff0c\u7b80\u76f4\u4ee4\u4eba\u65e0\u6cd5\u76f4\u89c6\u3002\u6211\u5927\u4e2d\u56fd\u5f53\u7136\u4e0d\u4f1a\u5750\u4ee5\u5f85\u6bd9\u3002\u8981\u628a\u94f6\u884c\u4ece\u503a\u52a1\u9677\u9631\u91cc\u89e3\u8131\u51fa\u6765\uff0c\u5c31\u5fc5\u987b\u8ba9\u4f01\u4e1a\u627e\u5230\u65b0\u7684\u878d\u8d44\u6e20\u9053\u3002 \u4f20\u7edf\u7684\u94f6\u884c\u8d37\u6b3e\u8def\u5f84\uff0c\u4e43\u81f3\u4e8e\u503a\u5238\u5e02\u573a\u90fd\u4e0d\u662f\u597d\u529e\u6cd5\uff0c\u51b7\u773c\u770b\u8fc7\u53bb\uff0c\u6700\u5408\u9002\u7684\u8fd8\u662f\u80a1\u5e02\u3002\u5982\u679c\u628a\u80a1\u5e02\u7ed9\u62c9\u8d77\u6765\uff0c\u4e00\u53e3\u6c14\u8ba9\u5b83\u6da8\u4e2a\u51e0\u5343\u70b9\uff0c\u4ee5\u540e\u4f01\u4e1a\u4eec\u90fd\u80fd\u901a\u8fc7\u80a1\u7968\u53d1\u884c\u878d\u8d44\uff0c\u751a\u81f3\u8bf4\u4e0d\u5b9a\u8fd8\u80fd\u9760\u5356\u80a1\u7968\u8fd8\u6e05\u94f6\u884c\u7684\u503a\u52a1\u3002 \u4e8e\u662f\u4ece2014\u5e74\u5e95\u5f00\u59cb\uff0c\u4e00\u573a\u80a1\u5e02\u7684\u56fd\u5bb6\u725b\u5e02\u88ab\u5f3a\u884c\u5439\u4e86\u8d77\u6765\u3002\u94f6\u884c\u4e0d\u8ba1\u6210\u672c\u7684\u501f\u94b1\u7ed9\u5238\u5546\uff0c\u8ba9\u5238\u5546\u62ff\u53bb\u501f\u7ed9\u80a1\u6c11\uff0c\u8ba9\u4ed6\u4eec\u878d\u8d44\u7092\u80a1\u3002\u65e0\u6570\u8d44\u91d1\u8ddf\u98ce\u800c\u81f3\uff0c\u62fc\u547d\u7684\u5728\u80a1\u5e02\u52a0\u6760\u6746\u3002\u4e8b\u540e\u6211\u4eec\u6839\u672c\u65e0\u4ece\u7edf\u8ba1\u5728\u8fd9\u4e2a\u75af\u72c2\u7684\u56fd\u5bb6\u725b\u5e02\u8fc7\u7a0b\u4e2d\uff0c\u5230\u5e95\u541e\u566c\u4e86\u591a\u5c11\u8d44\u91d1\u3002\u80a1\u707e\u4e4b\u540e\uff0c\u4e2d\u56fd\u6574\u4f53\u9677\u5165\u503a\u52a1\u9677\u9631\u7684\u73b0\u72b6\u5df2\u7ecf\u65e0\u4ece\u63a9\u9970\u3002\u5916\u8d44\u8ddf\u6211\u4eec\u5171\u60a3\u96be\uff0c\u4e8e\u662f\u5916\u8d44\u5f00\u59cb\u64a4\u79bb\uff0c\u6c47\u7387\u5931\u5b88\u3002 \u52302015\u5e74\u5e95\uff0c\u6211\u5927\u4e2d\u56fd\u7ec8\u4e8e\u51b3\u5b9a\uff0c\u8981\u8d4c\u4e00\u628a\u56fd\u8fd0\u4e86\u3002\u6211\u4eec\u7ec8\u4e8e\u62ff\u51fa\u4e86\u5927\u6740\u5668\uff1a\u623f\u5730\u4ea7\u3002\u7136\u800c\uff0c\u4f9d\u9760\u5c45\u6c11\u6700\u540e\u7684\u68fa\u6750\u672c\uff0c\u771f\u7684\u53ef\u4ee5\u652f\u6491\u8d77\u8fd9\u4e2a\u56fd\u5bb6\u7684\u7ecf\u6d4e\u5417\uff1f \u662f\u4ece2008\u5e74\u5f00\u59cb\uff0c\u81ea\u6b64\u4e4b\u540e\uff0c\u4e2d\u56fd\u5c31\u8d70\u4e0a\u4e86\u4ee5\u503a\u52a1\u81a8\u80c0\u63a8\u52a8\u7ecf\u6d4e\u53d1\u5c55\u7684\u4e0d\u5f52\u8def\u3002 \u5c45\u6c11\u8d37\u6b3e\u5360\u603b\u8d37\u6b3e\u7684\u6bd4\u503c\u5c31\u4e0d\u65ad\u4e0a\u5347\uff0c\u4ece2008\u5e74\u768417.8%\uff0c\u4e00\u76f4\u4e0a\u5347\u5230\u4eca\u5e748\u6708\u4efd\u768431.5%\uff0c\u589e\u52a0\u4e8613.7\u4e2a\u767e\u5206\u70b9\uff1b\u800c\u4f01\u4e1a\u8d37\u6b3e\u5360\u603b\u8d37\u6b3e\u7684\u6bd4\u503c\u5219\u4e0d\u65ad\u4e0b\u964d\uff0c\u4ece2008\u5e74\u768482.2%\u4e00\u76f4\u4e0b\u964d\u5230\u4eca\u5e748\u6708\u4efd\u768465.2%\uff0c\u4e0b\u964d\u4e8617\u4e2a\u767e\u5206\u70b9\u3002\u7531\u6b64\u53ef\u89c1\uff0c08\u5e74\u4e4b\u540e\uff0c\u6211\u5927\u4e2d\u56fd\u6700\u4e3b\u8981\u7684\u501f\u6b3e\u4eba\uff0c\u5c31\u662f\u5c45\u6c11\uff01","title":"\u4f0a\u8428\u514b\u00b7\u725b\u987f"},{"location":"tools/Note/","text":"\u5907\u5fd8\u5f55\ud83d\udcd5 \u00b6 1 2 3 4 5 \u670d\u52a1\u5668 \u57df\u540d CDN ctl-6100 \u6570\u4f4d\u677f \u6570\u5b57\u8349\u7a3f\u5c0f\u9ed1\u677f \u8ba1\u5212 \u00b6 1 2 3 4 5 6 C\u73b0\u4ee3\u7f16\u7a0b C++\u5e76\u53d1\u7f16\u7a0b Linux\u591a\u7ebf\u7a0b\u670d\u52a1\u7aef\u7f16\u7a0b C++\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 photoshop\u7ed8\u753b Go\u8bed\u8a00 switch\u6e38\u620f\u5217\u8868 \u00b6 \u60f3\u4e70\u7684\u6e38\u620f(\u7b49\u6253\u6298) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u4ee5\u6492 \u516b\u8352\u65c5\u4eba \u57ce\u5821\u6bc1\u706d\u8005 \u52c7\u6562\u7684\u5fc3 \u5144\u5f1f\uff1a\u53cc\u5b50\u4f20\u8bf4 \u9965\u8352 \u795e\u754c.\u539f\u7f6a2 \u55b5\u54aa\u6597\u6076\u9f99 \u84b8\u6c7d\u4e16\u754c.\u6316\u6398 \u4e8c\u4e4b\u56fd \u9a6c\u91cc\u5965\u5236\u4f5c \u9a6c\u91cc\u5965u \u5143\u6c14\u9a91\u58eb \u6697\u9ed1\u6218\u795e2","title":"\u8ba1\u5212"},{"location":"tools/Note/#_1","text":"1 2 3 4 5 \u670d\u52a1\u5668 \u57df\u540d CDN ctl-6100 \u6570\u4f4d\u677f \u6570\u5b57\u8349\u7a3f\u5c0f\u9ed1\u677f","title":"\u5907\u5fd8\u5f55\ud83d\udcd5"},{"location":"tools/Note/#_2","text":"1 2 3 4 5 6 C\u73b0\u4ee3\u7f16\u7a0b C++\u5e76\u53d1\u7f16\u7a0b Linux\u591a\u7ebf\u7a0b\u670d\u52a1\u7aef\u7f16\u7a0b C++\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 photoshop\u7ed8\u753b Go\u8bed\u8a00","title":"\u8ba1\u5212"},{"location":"tools/Note/#switch","text":"","title":"switch\u6e38\u620f\u5217\u8868"},{"location":"tools/Note/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u4ee5\u6492 \u516b\u8352\u65c5\u4eba \u57ce\u5821\u6bc1\u706d\u8005 \u52c7\u6562\u7684\u5fc3 \u5144\u5f1f\uff1a\u53cc\u5b50\u4f20\u8bf4 \u9965\u8352 \u795e\u754c.\u539f\u7f6a2 \u55b5\u54aa\u6597\u6076\u9f99 \u84b8\u6c7d\u4e16\u754c.\u6316\u6398 \u4e8c\u4e4b\u56fd \u9a6c\u91cc\u5965\u5236\u4f5c \u9a6c\u91cc\u5965u \u5143\u6c14\u9a91\u58eb \u6697\u9ed1\u6218\u795e2","title":"\u60f3\u4e70\u7684\u6e38\u620f(\u7b49\u6253\u6298)"},{"location":"tools/book/","text":"C\u8bed\u8a00 \u00b6 \u300aC\u548c\u6307\u9488\u300b \u300aC\u73b0\u4ee3\u7f16\u7a0b\u300b C++ \u00b6 \u300aLinux\u591a\u7ebf\u7a0b\u670d\u52a1\u7aef\u7f16\u7a0b-\u4f7f\u7528muduo C++\u7f51\u7edc\u5e93\u300b \u300aC++\u5e76\u53d1\u7f16\u7a0b\u300b \u7b97\u6cd5 \u00b6 \u300aC++\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u300b \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5-C\u8bed\u8a00\u7248\u300b Linux \u00b6 \u300aUnix\u73af\u5883\u9ad8\u7ea7\u7f16\u7a0b\u300b \u300aUnix\u7f51\u7edc\u7f16\u7a0b\u5377\u4e00\u300b \u300aUnix\u7f51\u7edc\u7f16\u7a0b\u5377\u4e8c\u300b \u300a\u540e\u53f0\u5f00\u53d1\u6838\u5fc3\u6280\u672f\u4e0e\u5e94\u7528\u5b9e\u8df5\u300b \u300aLinux\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u7f16\u7a0b\u300b \u300aRedis\u6df1\u5ea6\u5386\u9669\u300b \u300a\u6df1\u5165\u7406\u89e3Nginx\u300b unity \u00b6 \u300aUnity Shader\u5165\u95e8\u7cbe\u8981\u300b","title":"\u4e66\u7c4d\ud83d\udcda\u63a8\u8350"},{"location":"tools/book/#c","text":"\u300aC\u548c\u6307\u9488\u300b \u300aC\u73b0\u4ee3\u7f16\u7a0b\u300b","title":"C\u8bed\u8a00"},{"location":"tools/book/#c_1","text":"\u300aLinux\u591a\u7ebf\u7a0b\u670d\u52a1\u7aef\u7f16\u7a0b-\u4f7f\u7528muduo C++\u7f51\u7edc\u5e93\u300b \u300aC++\u5e76\u53d1\u7f16\u7a0b\u300b","title":"C++"},{"location":"tools/book/#_1","text":"\u300aC++\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u300b \u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5-C\u8bed\u8a00\u7248\u300b","title":"\u7b97\u6cd5"},{"location":"tools/book/#linux","text":"\u300aUnix\u73af\u5883\u9ad8\u7ea7\u7f16\u7a0b\u300b \u300aUnix\u7f51\u7edc\u7f16\u7a0b\u5377\u4e00\u300b \u300aUnix\u7f51\u7edc\u7f16\u7a0b\u5377\u4e8c\u300b \u300a\u540e\u53f0\u5f00\u53d1\u6838\u5fc3\u6280\u672f\u4e0e\u5e94\u7528\u5b9e\u8df5\u300b \u300aLinux\u9ad8\u6027\u80fd\u670d\u52a1\u5668\u7f16\u7a0b\u300b \u300aRedis\u6df1\u5ea6\u5386\u9669\u300b \u300a\u6df1\u5165\u7406\u89e3Nginx\u300b","title":"Linux"},{"location":"tools/book/#unity","text":"\u300aUnity Shader\u5165\u95e8\u7cbe\u8981\u300b","title":"unity"},{"location":"tools/gdb/","text":"GDB\u662f\u4e00\u4e2a\u7531GNU\u5f00\u6e90\u7ec4\u7ec7\u53d1\u5e03\u7684\u3001UNIX/LINUX\u64cd\u4f5c\u7cfb\u7edf\u4e0b\u7684\u3001\u57fa\u4e8e\u547d\u4ee4\u884c\u7684\u3001\u529f\u80fd\u5f3a\u5927\u7684\u7a0b\u5e8f\u8c03\u8bd5\u5de5\u5177\u3002 \u5bf9\u4e8e\u4e00\u540dLinux\u4e0b\u5de5\u4f5c\u7684c/c++\u7a0b\u5e8f\u5458\uff0cgdb\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u5de5\u5177\u3002 \u751f\u6210\u8c03\u5f0f\u4fe1\u606f \u00b6 1 2 3 4 5 gcc -g hello.c -o hello \u542f\u52a8gdb\u7684\u65b9\u6cd5 $gdb <program> $gdb <program> <core dump file> $gdb <program> <PID> \u7a0b\u5e8f\u8fd0\u884c\u4e0a\u4e0b\u6587 \u00b6 \u7a0b\u5e8f\u8fd0\u884c\u53c2\u6570 \u00b6 1 2 3 4 set args \u53ef\u6307\u5b9a\u8fd0\u884c\u65f6\u53c2\u6570\u3002\uff08\u5982\uff1aset args 10 20 30 40 50 \uff09 show args \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8bbe\u7f6e\u597d\u7684\u8fd0\u884c\u53c2\u6570\u3002 \u4e0d\u6307\u5b9a\u8fd0\u884c\u53c2\u6570 run (r) \u6307\u5b9a\u8fd0\u884c\u53c2\u6570r 10 20 30 40 50 \u663e\u793a\u6e90\u4ee3\u7801 \u00b6 1 2 3 4 5 6 list list \"\u6587\u4ef6\u540d.\u540e\u7f00\u540d\":\u884c\u53f7(\u663e\u793a\u522b\u7684\u6587\u4ef6) show listsize set listsize count search text:\u8be5\u547d\u4ee4\u53ef\u663e\u793a\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u5305\u542btext\u4e32\u7684\u4e0b\u4e00\u884c\u3002 Reverse-search text:\u8be5\u547d\u4ee4\u53ef\u4ee5\u663e\u793a\u5305\u542btext \u7684\u524d\u4e00\u884c\u3002 \u8bbe\u7f6e\u65ad\u70b9 \u00b6 \u7b80\u5355\u65ad\u70b9 \u00b6 1 2 3 break \u8bbe\u7f6e\u65ad\u70b9\uff0c\u53ef\u4ee5\u7b80\u5199\u4e3ab b 10\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5728\u6e90\u7a0b\u5e8f\u7b2c10\u884c b func\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5728func\u51fd\u6570\u5165\u53e3\u5904 \u6761\u4ef6\u65ad\u70b9 \u00b6 1 2 3 4 5 6 7 8 9 10 \u8bbe\u7f6e\u4e00\u4e2a\u6761\u4ef6\u65ad\u70b9 b test.c:8 if intValue == 5 condition \u4e0ebreak if\u7c7b\u4f3c\uff0c\u53ea\u662fcondition\u53ea\u80fd\u7528\u5728\u5df2\u5b58\u5728\u7684\u65ad\u70b9\u4e0a \u4fee\u6539\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6\u4e3aexpression condition bnum expression \u6e05\u695a\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6 condition bnum ignore \u5ffd\u7565\u505c\u6b62\u6761\u4ef6\u51e0\u6b21 \u8868\u793a\u5ffd\u7565\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6count\u6b21 Ignore bnum count \u591a\u6587\u4ef6\u8bbe\u7f6e\u65ad\u70b9 \u00b6 1 2 3 4 \u5728\u6e90\u6587\u4ef6filename\u7684linenum\u884c\u5904\u505c\u4f4f break filename:linenum \u5728\u6e90\u6587\u4ef6filename\u7684function\u51fd\u6570\u7684\u5165\u53e3\u5904\u505c\u4f4f break filename:function \u6216function(type,type) \u67e5\u8be2\u65ad\u70b9 \u00b6 1 info b \u89c2\u5bdf\u70b9 \u00b6 1 2 3 4 watch \u4e3a\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09expr\u8bbe\u7f6e\u4e00\u4e2a\u89c2\u5bdf\u70b9\u3002\u5f53\u8868\u8fbe\u5f0f\u503c\u6709\u53d8\u5316\u65f6\uff0c\u9a6c\u4e0a\u505c\u4f4f\u7a0b\u5e8f\u3002 rwatch\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09expr\u88ab\u8bfb\u65f6\uff0c\u505c\u4f4f\u7a0b\u5e8f\u3002 awatch \u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09\u7684\u503c\u88ab\u8bfb\u6216\u88ab\u5199\u65f6\uff0c\u505c\u4f4f\u7a0b\u5e8f\u3002 info watchpoints\u5217\u51fa\u5f53\u524d\u6240\u8bbe\u7f6e\u4e86\u7684\u6240\u6709\u89c2\u5bdf\u70b9\u3002 \u7ef4\u62a4\u65ad\u70b9 \u00b6 1 2 3 4 5 delete \u65ad\u70b9\u53f7n\uff1a\u5220\u9664\u7b2cn\u4e2a\u65ad\u70b9 disable \u65ad\u70b9\u53f7n\uff1a\u6682\u505c\u7b2cn\u4e2a\u65ad\u70b9 enable \u65ad\u70b9\u53f7n\uff1a\u5f00\u542f\u7b2cn\u4e2a\u65ad\u70b9 clear \u884c\u53f7n\uff1a\u6e05\u9664\u7b2cn\u884c\u7684\u65ad\u70b9 delete breakpoints\uff1a\u6e05\u9664\u6240\u6709\u65ad\u70b9 \u8c03\u8bd5\u4ee3\u7801 \u00b6 \u8fd0\u884c\u7a0b\u5e8f \u00b6 1 2 3 4 5 6 7 8 run \u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u7b80\u5199\u4e3ar next \u5355\u6b65\u8ddf\u8e2a\uff0c\u51fd\u6570\u8c03\u7528\u5f53\u4f5c\u4e00\u6761\u7b80\u5355\u8bed\u53e5\u6267\u884c\uff0c\u53ef\u7b80\u5199\u4e3an step \u5355\u6b65\u8ddf\u8e2a\uff0c\u51fd\u6570\u8c03\u8fdb\u5165\u88ab\u8c03\u7528\u51fd\u6570\u4f53\u5185\uff0c\u53ef\u7b80\u5199\u4e3as finish \u9000\u51fa\u51fd\u6570 until \u5728\u4e00\u4e2a\u5faa\u73af\u4f53\u5185\u5355\u6b65\u8ddf\u8e2a\u65f6\uff0c\u8fd9\u4e2a\u547d\u4ee4\u53ef\u4ee5\u8fd0\u884c\u7a0b\u5e8f\u76f4\u5230\u9000\u51fa\u5faa\u73af\u4f53,\u53ef\u7b80\u5199\u4e3au\u3002 continue \u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u7b80\u5199\u4e3ac info program \u6765\u67e5\u770b\u7a0b\u5e8f\u7684\u662f\u5426\u5728\u8fd0\u884c\uff0c\u8fdb\u7a0b\u53f7\uff0c\u88ab\u6682\u505c\u7684\u539f\u56e0\u3002 quit\uff1a\u7b80\u8bb0\u4e3a q \uff0c\u9000\u51fagdb \u6253\u5370\u8868\u8fbe\u5f0f \u00b6 1 2 3 print \u6253\u5370\u53d8\u91cf\u3001\u5b57\u7b26\u4e32\u3001\u8868\u8fbe\u5f0f\u7b49\u7684\u503c\uff0c\u53ef\u7b80\u5199\u4e3ap p count \u6253\u5370count\u7684\u503c print h@10 \u6570\u7ec4\u9996\u5730\u5740@\u6570\u7ec4\u957f\u5ea6 \u67e5\u770b\u8fd0\u884c\u4fe1\u606f \u00b6 1 2 3 4 whatis \u547d\u4ee4\u53ef\u4ee5\u663e\u793a\u67d0\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b where/bt \uff1a\u5f53\u524d\u8fd0\u884c\u7684\u5806\u6808\u5217\u8868\uff1b frame info program\uff1a \u6765\u67e5\u770b\u7a0b\u5e8f\u7684\u662f\u5426\u5728\u8fd0\u884c\uff0c\u8fdb\u7a0b\u53f7\uff0c\u88ab\u6682\u505c\u7684\u539f\u56e0\u3002 \u4fe1\u53f7 \u00b6 1 signal signal \u7a97\u53e3 \u00b6 1 2 3 4 5 6 7 8 Ctrl+x+a (focus)fs next\u5728src\u548ccmd\u4e4b\u95f4\u5207\u6362\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528fs src\u5207\u6362\u5230src\uff0c\u548cfs cmd\u5207\u6362\u5230cmd layout\uff1a\u7528\u4e8e\u5206\u5272\u7a97\u53e3\uff0c\u53ef\u4ee5\u4e00\u8fb9\u67e5\u770b\u4ee3\u7801\uff0c\u4e00\u8fb9\u6d4b\u8bd5\uff1a layout src\uff1a\u663e\u793a\u6e90\u4ee3\u7801\u7a97\u53e3 layout asm\uff1a\u663e\u793a\u53cd\u6c47\u7f16\u7a97\u53e3 layout regs\uff1a\u663e\u793a\u6e90\u4ee3\u7801/\u53cd\u6c47\u7f16\u548cCPU\u5bc4\u5b58\u5668\u7a97\u53e3 layout split\uff1a\u663e\u793a\u6e90\u4ee3\u7801\u548c\u53cd\u6c47\u7f16\u7a97\u53e3 Ctrl + L\uff1a\u5237\u65b0\u7a97\u53e3","title":"GDB\u8c03\u8bd5\u7684\u57fa\u672c\u4f7f\u7528"},{"location":"tools/gdb/#_1","text":"1 2 3 4 5 gcc -g hello.c -o hello \u542f\u52a8gdb\u7684\u65b9\u6cd5 $gdb <program> $gdb <program> <core dump file> $gdb <program> <PID>","title":"\u751f\u6210\u8c03\u5f0f\u4fe1\u606f"},{"location":"tools/gdb/#_2","text":"","title":"\u7a0b\u5e8f\u8fd0\u884c\u4e0a\u4e0b\u6587"},{"location":"tools/gdb/#_3","text":"1 2 3 4 set args \u53ef\u6307\u5b9a\u8fd0\u884c\u65f6\u53c2\u6570\u3002\uff08\u5982\uff1aset args 10 20 30 40 50 \uff09 show args \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8bbe\u7f6e\u597d\u7684\u8fd0\u884c\u53c2\u6570\u3002 \u4e0d\u6307\u5b9a\u8fd0\u884c\u53c2\u6570 run (r) \u6307\u5b9a\u8fd0\u884c\u53c2\u6570r 10 20 30 40 50","title":"\u7a0b\u5e8f\u8fd0\u884c\u53c2\u6570"},{"location":"tools/gdb/#_4","text":"1 2 3 4 5 6 list list \"\u6587\u4ef6\u540d.\u540e\u7f00\u540d\":\u884c\u53f7(\u663e\u793a\u522b\u7684\u6587\u4ef6) show listsize set listsize count search text:\u8be5\u547d\u4ee4\u53ef\u663e\u793a\u5728\u5f53\u524d\u6587\u4ef6\u4e2d\u5305\u542btext\u4e32\u7684\u4e0b\u4e00\u884c\u3002 Reverse-search text:\u8be5\u547d\u4ee4\u53ef\u4ee5\u663e\u793a\u5305\u542btext \u7684\u524d\u4e00\u884c\u3002","title":"\u663e\u793a\u6e90\u4ee3\u7801"},{"location":"tools/gdb/#_5","text":"","title":"\u8bbe\u7f6e\u65ad\u70b9"},{"location":"tools/gdb/#_6","text":"1 2 3 break \u8bbe\u7f6e\u65ad\u70b9\uff0c\u53ef\u4ee5\u7b80\u5199\u4e3ab b 10\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5728\u6e90\u7a0b\u5e8f\u7b2c10\u884c b func\u8bbe\u7f6e\u65ad\u70b9\uff0c\u5728func\u51fd\u6570\u5165\u53e3\u5904","title":"\u7b80\u5355\u65ad\u70b9"},{"location":"tools/gdb/#_7","text":"1 2 3 4 5 6 7 8 9 10 \u8bbe\u7f6e\u4e00\u4e2a\u6761\u4ef6\u65ad\u70b9 b test.c:8 if intValue == 5 condition \u4e0ebreak if\u7c7b\u4f3c\uff0c\u53ea\u662fcondition\u53ea\u80fd\u7528\u5728\u5df2\u5b58\u5728\u7684\u65ad\u70b9\u4e0a \u4fee\u6539\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6\u4e3aexpression condition bnum expression \u6e05\u695a\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6 condition bnum ignore \u5ffd\u7565\u505c\u6b62\u6761\u4ef6\u51e0\u6b21 \u8868\u793a\u5ffd\u7565\u65ad\u70b9\u53f7\u4e3abnum\u7684\u505c\u6b62\u6761\u4ef6count\u6b21 Ignore bnum count","title":"\u6761\u4ef6\u65ad\u70b9"},{"location":"tools/gdb/#_8","text":"1 2 3 4 \u5728\u6e90\u6587\u4ef6filename\u7684linenum\u884c\u5904\u505c\u4f4f break filename:linenum \u5728\u6e90\u6587\u4ef6filename\u7684function\u51fd\u6570\u7684\u5165\u53e3\u5904\u505c\u4f4f break filename:function \u6216function(type,type)","title":"\u591a\u6587\u4ef6\u8bbe\u7f6e\u65ad\u70b9"},{"location":"tools/gdb/#_9","text":"1 info b","title":"\u67e5\u8be2\u65ad\u70b9"},{"location":"tools/gdb/#_10","text":"1 2 3 4 watch \u4e3a\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09expr\u8bbe\u7f6e\u4e00\u4e2a\u89c2\u5bdf\u70b9\u3002\u5f53\u8868\u8fbe\u5f0f\u503c\u6709\u53d8\u5316\u65f6\uff0c\u9a6c\u4e0a\u505c\u4f4f\u7a0b\u5e8f\u3002 rwatch\u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09expr\u88ab\u8bfb\u65f6\uff0c\u505c\u4f4f\u7a0b\u5e8f\u3002 awatch \u8868\u8fbe\u5f0f\uff08\u53d8\u91cf\uff09\u7684\u503c\u88ab\u8bfb\u6216\u88ab\u5199\u65f6\uff0c\u505c\u4f4f\u7a0b\u5e8f\u3002 info watchpoints\u5217\u51fa\u5f53\u524d\u6240\u8bbe\u7f6e\u4e86\u7684\u6240\u6709\u89c2\u5bdf\u70b9\u3002","title":"\u89c2\u5bdf\u70b9"},{"location":"tools/gdb/#_11","text":"1 2 3 4 5 delete \u65ad\u70b9\u53f7n\uff1a\u5220\u9664\u7b2cn\u4e2a\u65ad\u70b9 disable \u65ad\u70b9\u53f7n\uff1a\u6682\u505c\u7b2cn\u4e2a\u65ad\u70b9 enable \u65ad\u70b9\u53f7n\uff1a\u5f00\u542f\u7b2cn\u4e2a\u65ad\u70b9 clear \u884c\u53f7n\uff1a\u6e05\u9664\u7b2cn\u884c\u7684\u65ad\u70b9 delete breakpoints\uff1a\u6e05\u9664\u6240\u6709\u65ad\u70b9","title":"\u7ef4\u62a4\u65ad\u70b9"},{"location":"tools/gdb/#_12","text":"","title":"\u8c03\u8bd5\u4ee3\u7801"},{"location":"tools/gdb/#_13","text":"1 2 3 4 5 6 7 8 run \u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u7b80\u5199\u4e3ar next \u5355\u6b65\u8ddf\u8e2a\uff0c\u51fd\u6570\u8c03\u7528\u5f53\u4f5c\u4e00\u6761\u7b80\u5355\u8bed\u53e5\u6267\u884c\uff0c\u53ef\u7b80\u5199\u4e3an step \u5355\u6b65\u8ddf\u8e2a\uff0c\u51fd\u6570\u8c03\u8fdb\u5165\u88ab\u8c03\u7528\u51fd\u6570\u4f53\u5185\uff0c\u53ef\u7b80\u5199\u4e3as finish \u9000\u51fa\u51fd\u6570 until \u5728\u4e00\u4e2a\u5faa\u73af\u4f53\u5185\u5355\u6b65\u8ddf\u8e2a\u65f6\uff0c\u8fd9\u4e2a\u547d\u4ee4\u53ef\u4ee5\u8fd0\u884c\u7a0b\u5e8f\u76f4\u5230\u9000\u51fa\u5faa\u73af\u4f53,\u53ef\u7b80\u5199\u4e3au\u3002 continue \u7ee7\u7eed\u8fd0\u884c\u7a0b\u5e8f\uff0c\u53ef\u7b80\u5199\u4e3ac info program \u6765\u67e5\u770b\u7a0b\u5e8f\u7684\u662f\u5426\u5728\u8fd0\u884c\uff0c\u8fdb\u7a0b\u53f7\uff0c\u88ab\u6682\u505c\u7684\u539f\u56e0\u3002 quit\uff1a\u7b80\u8bb0\u4e3a q \uff0c\u9000\u51fagdb","title":"\u8fd0\u884c\u7a0b\u5e8f"},{"location":"tools/gdb/#_14","text":"1 2 3 print \u6253\u5370\u53d8\u91cf\u3001\u5b57\u7b26\u4e32\u3001\u8868\u8fbe\u5f0f\u7b49\u7684\u503c\uff0c\u53ef\u7b80\u5199\u4e3ap p count \u6253\u5370count\u7684\u503c print h@10 \u6570\u7ec4\u9996\u5730\u5740@\u6570\u7ec4\u957f\u5ea6","title":"\u6253\u5370\u8868\u8fbe\u5f0f"},{"location":"tools/gdb/#_15","text":"1 2 3 4 whatis \u547d\u4ee4\u53ef\u4ee5\u663e\u793a\u67d0\u4e2a\u53d8\u91cf\u7684\u7c7b\u578b where/bt \uff1a\u5f53\u524d\u8fd0\u884c\u7684\u5806\u6808\u5217\u8868\uff1b frame info program\uff1a \u6765\u67e5\u770b\u7a0b\u5e8f\u7684\u662f\u5426\u5728\u8fd0\u884c\uff0c\u8fdb\u7a0b\u53f7\uff0c\u88ab\u6682\u505c\u7684\u539f\u56e0\u3002","title":"\u67e5\u770b\u8fd0\u884c\u4fe1\u606f"},{"location":"tools/gdb/#_16","text":"1 signal signal","title":"\u4fe1\u53f7"},{"location":"tools/gdb/#_17","text":"1 2 3 4 5 6 7 8 Ctrl+x+a (focus)fs next\u5728src\u548ccmd\u4e4b\u95f4\u5207\u6362\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528fs src\u5207\u6362\u5230src\uff0c\u548cfs cmd\u5207\u6362\u5230cmd layout\uff1a\u7528\u4e8e\u5206\u5272\u7a97\u53e3\uff0c\u53ef\u4ee5\u4e00\u8fb9\u67e5\u770b\u4ee3\u7801\uff0c\u4e00\u8fb9\u6d4b\u8bd5\uff1a layout src\uff1a\u663e\u793a\u6e90\u4ee3\u7801\u7a97\u53e3 layout asm\uff1a\u663e\u793a\u53cd\u6c47\u7f16\u7a97\u53e3 layout regs\uff1a\u663e\u793a\u6e90\u4ee3\u7801/\u53cd\u6c47\u7f16\u548cCPU\u5bc4\u5b58\u5668\u7a97\u53e3 layout split\uff1a\u663e\u793a\u6e90\u4ee3\u7801\u548c\u53cd\u6c47\u7f16\u7a97\u53e3 Ctrl + L\uff1a\u5237\u65b0\u7a97\u53e3","title":"\u7a97\u53e3"},{"location":"tools/mkdocs/","text":"Note \u66f4\u591a\u8be6\u7ec6\u77e5\u8bc6\u6765\u81ea: cyent(markdown) \u5b89\u88c5 \u00b6 1 pip install mkdocs mkdocs - material \u521d\u59cb\u5316 \u00b6 1 mkdocs new project \u672c\u5730\u670d\u52a1\u542f\u52a8 \u00b6 1 2 #\u5728project\u76ee\u5f55\u4e0b\u6267\u884c mkdocs server \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/ \u67e5\u770b\u6548\u679c\u3002 \u53d1\u5e03\u81f3GitHub Pages \u00b6 github\u4e0a\u65b0\u5efa\u9879\u76ee\uff0cclone\u81f3\u672c\u5730\uff0c\u5c06mkdocs\u66f4\u76ee\u5f55(project)\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u79fb\u52a8\u5230git clone\u7684\u672c\u5730\u76ee\u5f55\u91cc 1 mkdocs gh-deploy \u53d1\u5e03\u81f3HTTP Server \u00b6 1 mkdocs build \u5c06site\u76ee\u5f55\u4e0b\u6240\u6709\u4e1c\u897f\u540c\u6b65\u81f3http server\u91cc\u3002","title":"\u57fa\u4e8emkdocs\u7684blog\u642d\u5efa"},{"location":"tools/mkdocs/#_1","text":"1 pip install mkdocs mkdocs - material","title":"\u5b89\u88c5"},{"location":"tools/mkdocs/#_2","text":"1 mkdocs new project","title":"\u521d\u59cb\u5316"},{"location":"tools/mkdocs/#_3","text":"1 2 #\u5728project\u76ee\u5f55\u4e0b\u6267\u884c mkdocs server \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00 http://127.0.0.1:8000/ \u67e5\u770b\u6548\u679c\u3002","title":"\u672c\u5730\u670d\u52a1\u542f\u52a8"},{"location":"tools/mkdocs/#github-pages","text":"github\u4e0a\u65b0\u5efa\u9879\u76ee\uff0cclone\u81f3\u672c\u5730\uff0c\u5c06mkdocs\u66f4\u76ee\u5f55(project)\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u79fb\u52a8\u5230git clone\u7684\u672c\u5730\u76ee\u5f55\u91cc 1 mkdocs gh-deploy","title":"\u53d1\u5e03\u81f3GitHub Pages"},{"location":"tools/mkdocs/#http-server","text":"1 mkdocs build \u5c06site\u76ee\u5f55\u4e0b\u6240\u6709\u4e1c\u897f\u540c\u6b65\u81f3http server\u91cc\u3002","title":"\u53d1\u5e03\u81f3HTTP Server"},{"location":"tools/tmux/","text":"tmux\u57fa\u672c\u6280\u5de7 \u00b6 \u4f1a\u8bddsession \u00b6 \u521b\u5efa\u4e00\u4e2atmux\u7684\u4f1a\u8bdd \u00b6 1 2 tmux tmux new -s name \u9000\u51fatmux\u4f1a\u8bdd \u00b6 1 2 3 4 5 #\u540e\u53f0\u8fd0\u884c tmux attach ctrl+b d #\u9000\u51fa\u4e0d\u540e\u53f0\u8fd0\u884c exit \u5217\u51fa\u6240\u6709\u7684tmux\u4f1a\u8bdd \u00b6 1 2 tmux ls tmux list-sessions \u88c5\u8f7d\u4e00\u4e2a\u4f1a\u8bdd \u00b6 1 2 tmux attach tmux attach -t name \u9500\u6bc1\u4e00\u4e2a\u4f1a\u8bdd \u00b6 1 tmux kill-session -t name \u7a97\u53e3windows \u00b6 \u521b\u5efa\u4e00\u4e2a\u65b0\u7a97\u53e3 \u00b6 1 crtl+b c \u7a97\u53e3\u95f4\u5207\u6362 \u00b6 1 2 3 ctrl+b n(next\u7684\u610f\u601d) ctrl+b p(previous) ctrl+b 0/1/2... \u5173\u95ed\u7a97\u53e3 \u00b6 1 2 exit ctrl+b & \u9762\u677fpane \u00b6 \uff08\u5747\u5728\u6309\u4e0bctrl+b\u4e4b\u540e\u677e\u5f00\uff0c\u7136\u540e\u6309\u4e0b\u76f8\u5e94\u7684\u6309\u952e\uff09 \u00b6 1 2 3 4 5 6 7 8 ? \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 \" \u7eb5\u5411\u5206\u5272\u7a97\u53e3\uff08\u4e0a\u4e0b\u4e8c\u5206\uff09 % \u6a2a\u5411\u5206\u5272\u7a97\u53e3(\u5de6\u53f3\u4e8c\u5206) o \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 \u4e0a\u4e0b\u65b9\u5411\u952e \u4e0a\u4e00\u4e2a\u53ca\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 crtl+b X(\u5927\u5199) exit crtl+b :\u547d\u4ee4\u6a21\u5f0f","title":"tmux\u57fa\u672c\u6280\u5de7"},{"location":"tools/tmux/#tmux","text":"","title":"tmux\u57fa\u672c\u6280\u5de7"},{"location":"tools/tmux/#session","text":"","title":"\u4f1a\u8bddsession"},{"location":"tools/tmux/#tmux_1","text":"1 2 tmux tmux new -s name","title":"\u521b\u5efa\u4e00\u4e2atmux\u7684\u4f1a\u8bdd"},{"location":"tools/tmux/#tmux_2","text":"1 2 3 4 5 #\u540e\u53f0\u8fd0\u884c tmux attach ctrl+b d #\u9000\u51fa\u4e0d\u540e\u53f0\u8fd0\u884c exit","title":"\u9000\u51fatmux\u4f1a\u8bdd"},{"location":"tools/tmux/#tmux_3","text":"1 2 tmux ls tmux list-sessions","title":"\u5217\u51fa\u6240\u6709\u7684tmux\u4f1a\u8bdd"},{"location":"tools/tmux/#_1","text":"1 2 tmux attach tmux attach -t name","title":"\u88c5\u8f7d\u4e00\u4e2a\u4f1a\u8bdd"},{"location":"tools/tmux/#_2","text":"1 tmux kill-session -t name","title":"\u9500\u6bc1\u4e00\u4e2a\u4f1a\u8bdd"},{"location":"tools/tmux/#windows","text":"","title":"\u7a97\u53e3windows"},{"location":"tools/tmux/#_3","text":"1 crtl+b c","title":"\u521b\u5efa\u4e00\u4e2a\u65b0\u7a97\u53e3"},{"location":"tools/tmux/#_4","text":"1 2 3 ctrl+b n(next\u7684\u610f\u601d) ctrl+b p(previous) ctrl+b 0/1/2...","title":"\u7a97\u53e3\u95f4\u5207\u6362"},{"location":"tools/tmux/#_5","text":"1 2 exit ctrl+b &","title":"\u5173\u95ed\u7a97\u53e3"},{"location":"tools/tmux/#pane","text":"","title":"\u9762\u677fpane"},{"location":"tools/tmux/#ctrlb","text":"1 2 3 4 5 6 7 8 ? \u663e\u793a\u5feb\u6377\u952e\u5e2e\u52a9 \" \u7eb5\u5411\u5206\u5272\u7a97\u53e3\uff08\u4e0a\u4e0b\u4e8c\u5206\uff09 % \u6a2a\u5411\u5206\u5272\u7a97\u53e3(\u5de6\u53f3\u4e8c\u5206) o \u8df3\u8f6c\u5230\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 \u4e0a\u4e0b\u65b9\u5411\u952e \u4e0a\u4e00\u4e2a\u53ca\u4e0b\u4e00\u4e2a\u5206\u5272\u7a97\u53e3 crtl+b X(\u5927\u5199) exit crtl+b :\u547d\u4ee4\u6a21\u5f0f","title":"\uff08\u5747\u5728\u6309\u4e0bctrl+b\u4e4b\u540e\u677e\u5f00\uff0c\u7136\u540e\u6309\u4e0b\u76f8\u5e94\u7684\u6309\u952e\uff09"},{"location":"tools/vim/","text":"\u6211\u7684VIM\u914d\u7f6e \u00b6 \u914d\u7f6e\u6587\u4ef6\u94fe\u63a5\uff1a https://github.com/opfanswyx/Atticus_Vim \u4f7f\u7528\u65b9\u6cd5\u6b65\u9aa4\uff1a \u5c06\u4e0b\u8f7d\u6587\u4ef6\u5939\u91cc\u7684.vimrc\u66ff\u4ee3~/.vimrc(\u5982\u679c\u5b58\u5728\u66ff\u6362\uff0c\u4e0d\u5b58\u5728\u76f4\u63a5\u653e\u8fdb\u53bb) \u5206\u522b\u89e3\u538btaglist\u548cwinmanager\u90fd\u4f1a\u5f97\u5230doc\u548cplugin\u4e24\u4e2a\u6587\u4ef6\u5939 \u5207\u6362\u5230~\u76ee\u5f55\u4e0b\u67e5\u770b\u662f\u5426\u5b58\u5728.vim\u6587\u4ef6\u5939\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fdb\u5165\u76ee\u5f55\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa.vim(mkdir .vim and cd .vim) \u8fdb\u5165.vim\u76ee\u5f55\u521b\u5efadoc\u4e0eplugin\u76ee\u5f55 \u62f7\u8d1d\u89e3\u538b\u7684doc\u4e0epiugin\u91cc\u7684\u6587\u4ef6\u5230\u5bf9\u5e94\u7684~/.vim/\u4e0b\u7684doc\u4e0eplugin\u76ee\u5f55\u91cc \u5e38\u7528\u6280\u5de7 \u00b6 i\u63d2\u5165\uff0c\u5728\u5149\u6807\u524d\u63d2\u5165 x\u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u5b57\u7b26 dd\u5220\u9664\u5e76\u4fdd\u6301\u526a\u8d34\u677f\uff0c2dd\u5220\u96642\u884c p\u9ecf\u8d34 3p hjkl\u5de6\u4e0b\u53f3\u4e0a \u6570\u5b570\u5230\u884c\u5934 ^\u5230\u672c\u884c\u7b2c\u4e00\u4e2a\u4e0d\u662fblank(\u7a7a\u683c\uff0ctab\uff0c\u6362\u884c\uff0c\u56de\u8f66)\u5b57\u7b26 $\u5230\u672c\u884c\u884c\u5c3e g_\u672c\u884c\u6700\u540e\u4e00\u4e2a\u4e0d\u662fblank\u5b57\u7b26\u4f4d\u7f6e /pattern \u641c\u7d22\u51fa\u5b57\u7b26\u591a\u4e2a\u5339\u914d\uff0c\u6309n\u5230\u4e0b\u4e00\u4e2a yy\u62f7\u8d1d\u5f53\u524d\u884c\uff0c\u76f8\u5f53\u4e8eddp u\u64a4\u9500 \u53cd\u64a4\u9500 .\u91cd\u590d\u4e0a\u4e00\u6b21\u547d\u4ee4 3.\u91cd\u590d\u4e09\u6b21 NG\u5230\u7b2cN\u884c \uff1aN\u5982\uff1a137 gg\u5230\u7b2c\u4e00\u884c G\u5230\u6700\u540e\u4e00\u884c \u5757\u64cd\u4f5c hjkl =\u81ea\u52a8\u7f29\u8fdb<>\u5de6\u53f3\u7f29\u8fdb \u81ea\u52a8\u8865\u5168 VIM\u5927\u5192\u9669 \u00b6 \u4e0b\u9762\u8fd9\u4e2a\u6e38\u620f\u662f\u4e00\u4e2a\u4f7f\u7528VIM\u70ed\u952e\u73a9\u7684\u6e38\u620f\u3002\u53ef\u4ee5\u5728\u73a9\u6e38\u620f\u7684\u8fc7\u7a0b\u4e2d\u719f\u6089Vim\u7684\u70ed\u952e\u3002 \u70b9\u51fb\u94fe\u63a5\u5f00\u59cb\u6e38\u620f\uff1a https://vim-adventures.com/","title":"VIM\u5e38\u7528\u6280\u5de7"},{"location":"tools/vim/#vim","text":"\u914d\u7f6e\u6587\u4ef6\u94fe\u63a5\uff1a https://github.com/opfanswyx/Atticus_Vim \u4f7f\u7528\u65b9\u6cd5\u6b65\u9aa4\uff1a \u5c06\u4e0b\u8f7d\u6587\u4ef6\u5939\u91cc\u7684.vimrc\u66ff\u4ee3~/.vimrc(\u5982\u679c\u5b58\u5728\u66ff\u6362\uff0c\u4e0d\u5b58\u5728\u76f4\u63a5\u653e\u8fdb\u53bb) \u5206\u522b\u89e3\u538btaglist\u548cwinmanager\u90fd\u4f1a\u5f97\u5230doc\u548cplugin\u4e24\u4e2a\u6587\u4ef6\u5939 \u5207\u6362\u5230~\u76ee\u5f55\u4e0b\u67e5\u770b\u662f\u5426\u5b58\u5728.vim\u6587\u4ef6\u5939\uff0c\u5982\u679c\u5b58\u5728\u5219\u8fdb\u5165\u76ee\u5f55\uff0c\u4e0d\u5b58\u5728\u5219\u521b\u5efa.vim(mkdir .vim and cd .vim) \u8fdb\u5165.vim\u76ee\u5f55\u521b\u5efadoc\u4e0eplugin\u76ee\u5f55 \u62f7\u8d1d\u89e3\u538b\u7684doc\u4e0epiugin\u91cc\u7684\u6587\u4ef6\u5230\u5bf9\u5e94\u7684~/.vim/\u4e0b\u7684doc\u4e0eplugin\u76ee\u5f55\u91cc","title":"\u6211\u7684VIM\u914d\u7f6e"},{"location":"tools/vim/#_1","text":"i\u63d2\u5165\uff0c\u5728\u5149\u6807\u524d\u63d2\u5165 x\u5220\u9664\u5f53\u524d\u5149\u6807\u6240\u5728\u7684\u5b57\u7b26 dd\u5220\u9664\u5e76\u4fdd\u6301\u526a\u8d34\u677f\uff0c2dd\u5220\u96642\u884c p\u9ecf\u8d34 3p hjkl\u5de6\u4e0b\u53f3\u4e0a \u6570\u5b570\u5230\u884c\u5934 ^\u5230\u672c\u884c\u7b2c\u4e00\u4e2a\u4e0d\u662fblank(\u7a7a\u683c\uff0ctab\uff0c\u6362\u884c\uff0c\u56de\u8f66)\u5b57\u7b26 $\u5230\u672c\u884c\u884c\u5c3e g_\u672c\u884c\u6700\u540e\u4e00\u4e2a\u4e0d\u662fblank\u5b57\u7b26\u4f4d\u7f6e /pattern \u641c\u7d22\u51fa\u5b57\u7b26\u591a\u4e2a\u5339\u914d\uff0c\u6309n\u5230\u4e0b\u4e00\u4e2a yy\u62f7\u8d1d\u5f53\u524d\u884c\uff0c\u76f8\u5f53\u4e8eddp u\u64a4\u9500 \u53cd\u64a4\u9500 .\u91cd\u590d\u4e0a\u4e00\u6b21\u547d\u4ee4 3.\u91cd\u590d\u4e09\u6b21 NG\u5230\u7b2cN\u884c \uff1aN\u5982\uff1a137 gg\u5230\u7b2c\u4e00\u884c G\u5230\u6700\u540e\u4e00\u884c \u5757\u64cd\u4f5c hjkl =\u81ea\u52a8\u7f29\u8fdb<>\u5de6\u53f3\u7f29\u8fdb \u81ea\u52a8\u8865\u5168","title":"\u5e38\u7528\u6280\u5de7"},{"location":"tools/vim/#vim_1","text":"\u4e0b\u9762\u8fd9\u4e2a\u6e38\u620f\u662f\u4e00\u4e2a\u4f7f\u7528VIM\u70ed\u952e\u73a9\u7684\u6e38\u620f\u3002\u53ef\u4ee5\u5728\u73a9\u6e38\u620f\u7684\u8fc7\u7a0b\u4e2d\u719f\u6089Vim\u7684\u70ed\u952e\u3002 \u70b9\u51fb\u94fe\u63a5\u5f00\u59cb\u6e38\u620f\uff1a https://vim-adventures.com/","title":"VIM\u5927\u5192\u9669"},{"location":"unity/List/","text":"\u672c\u6a21\u5757\u89c4\u5212 \u00b6 \u56fe\u5f62\u5b66 \u00b6 unity\u5f15\u64ce \u00b6","title":"\u89c4\u5212"},{"location":"unity/List/#_1","text":"","title":"\u672c\u6a21\u5757\u89c4\u5212"},{"location":"unity/List/#_2","text":"","title":"\u56fe\u5f62\u5b66"},{"location":"unity/List/#unity","text":"","title":"unity\u5f15\u64ce"},{"location":"unity/unity_base/","text":"unity\u57fa\u7840 \u00b6 unity\u5de5\u7a0b\u7ed3\u6784 \u00b6 Assets \u5305\u542b\u6240\u6709\u7684\u5de5\u7a0b\u6587\u4ef6\uff0c\u662f\u4e3b\u8981\u5de5\u4f5c\u7684\u5730\u65b9 Library \u5de5\u7a0b\u7684\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u53ef\u5220\u9664\u81ea\u52a8\u91cd\u5efa ProjectSettings \u5de5\u7a0b\u7684\u914d\u7f6e\u6587\u4ef6 unity\u7a97\u53e3 \u00b6 Hierarchy\u5c42\u7ea7 Project\u5de5\u7a0b Inspector\u67e5\u770b Scene\u573a\u666f/Game\u6e38\u620f Unity\u811a\u672c\u57fa\u7840 \u00b6 1. Game Object\u6700\u57fa\u7840\u7684\u6e38\u620f\u5355\u4f4d\uff0c\u4e00\u4e2a\u6700\u57fa\u672c\u7684Game Object\u4ec5\u5305\u542b\u4e00\u4e2aTransform\u7ec4\u4ef6\uff0c\u7528\u4e8e\u5bf9\u5176\u8fdb\u884c\u4f4d\u79fb\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u3002 2. MonoBehavior\u662f\u6240\u6709Unity\u811a\u672c\u7684\u57fa\u7c7b\u3002 \u811a\u672c\u5e8f\u5217\u5316 \u00b6 \u8bb2\u811a\u672c\u6307\u5b9a\u7ed9\u573a\u666f\u4e2d\u7684\u6e38\u620f\u4f53\uff0c\u5c31\u53ef\u5728\u5bf9\u5e94\u6e38\u620f\u4f53\u7684Inspector\u7a97\u53e3\u4e2d\u914d\u7f6e\u811a\u672c\u5b9e\u4f8b\u7684public\u6210\u5458\u53d8\u91cf\u521d\u59cb\u503c\u3002 \u9ed8\u8ba4\u53ea\u6709\u7ee7\u627f\u81eaMonoBehaviour\u7684\u811a\u672c\u624d\u80fd\u5e8f\u5217\u5316\u3002\u5982\u679c\u4e00\u4e2a\u666e\u901ac#\u7c7b\u9700\u8981\u5e8f\u5217\u5316\u9700\u8981\u6dfb\u52a0'[System.Serializable]'\u5c5e\u6027\u3002 unity\u53ea\u80fd\u5e8f\u5217\u5316public\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e14\u4e0d\u80fd\u5e8f\u5217\u5316\u5c5e\u6027\u3002 \u7ec4\u4ef6\u5f0f\u7f16\u7a0b \u00b6 \u7ec4\u4ef6\u7684\u83b7\u53d6 1 2 3 4 5 Rigidbody rigid = this . gameObject . GetComponent < Rigidbody >(); if ( rigid == null ) { rigid = this . gameObject . AddComponent < Rigidbody >(); } Unity\u6d88\u606f\u673a\u5236\u5728\u7ec4\u4ef6\u95f4\u901a\u4fe1 SendMessage\u51fd\u6570(\u6548\u7387\u6bd4\u8f83\u4f4e) 1 2 3 4 5 6 7 8 9 10 11 12 //TestScript.cs public class TestScript : MonoBehaviour { void Start (){ this . gameObject . SendMessage ( \"DoSomething\" ); } } //DoSomethingScript.cs public class DoSomethingScript : MonoBeHaviour { public void DoSomething (){ Debug . Log ( \"DoSomething\" ); } } \u7ee7\u627f\u548c\u7ec4\u5408 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //TestScript.cs public class TestScript : MonoBehaviour { void Start (){ this . gameObject . GetComponent < DoSomethingBase >(). DoSomething (); } } //DoSomethingBase.cs public class DoSomethingBase : MonoBehaviour { public abstract void DoSomething (); } //DoSomethingScript.cs public class DoSomethingScript : DoSomethingBase { public override void DoSomething (){ Debug . Log ( \"DoSomething\" ); } } \u534f\u7a0b\u7f16\u7a0b \u534f\u7a0b\u51fd\u6570\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57IEnumerator\u5b9a\u4e49\uff0c\u5e76\u4e00\u5b9a\u8981\u4f7f\u7528\u5173\u952e\u5b57yield\u8fd4\u56de\u3002\u534f\u7a0b\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u9700\u8981\u4f7f\u7528\u51fd\u6570StartCoroutine\u5c06\u534f\u7a0b\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System.Collections ; using UnityEngine ; public class CoroTest : MonoBehaviour { void start (){ Coroutine coro = StartCoroutine ( DoSomethingDelay ( 1.5f )); StartCoroutine ( RunLoop ()); } } IEnumerator DoSomethingDelay ( float sec ){ yield return new WaitForSeconds ( sec ); Debug . log ( \"xxx\" ); yield return new WaitForSeconds ( sec ); StartCoroutine ( DoSomethingDelay ( 1.5f )); } IEnumeraator RunLoop (){ while ( ture ){ Debug . log ( \"xxx\" ); yield return 0 ; } } \u9884\u7f6e\u6587\u4ef6Prefab\u548c\u8d44\u6e90\u7ba1\u7406 \u00b6 \u5f53\u5728\u573a\u666f\u4e2d\u5b8c\u6210\u5bf9Game Object\u7684\u914d\u7f6e\u540e\uff0c\u5c06\u5176\u62d6\u52a8\u5230Object\u7a97\u53e3\u4e2d\u5373\u521b\u5efa\u4e86Prefab\u3002 1. \u5220\u9664\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u4e0d\u4f1a\u5f71\u54cd\u5230Project\u7a97\u53e3\u4e2d\u7684Prefab\u3002 2. \u5982\u679c\u4fee\u6539\u4e86\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\uff0c\u9009\u62e9Inspector\u7a97\u53e3\u53f3\u4e0a\u89d2\u7684Prefab->apple,Project\u7a97\u53e3\u4e2d\u4fdd\u5b58\u7684prefab\u5219\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u8be5\u4fee\u6539\u7684\u7ed3\u679c\u3002 3. \u5982\u679c\u4fee\u6539\u4e86\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\uff0c\u9009\u62e9Inspector\u7a97\u53e3\u53f3\u4e0a\u89d2\u7684Prefab->Revert,\u5219\u4f1a\u8fd4\u56de\u5230Prefab\u7684\u8bbe\u7f6e\u4e2d\u3002 4. \u5982\u679c\u4fee\u6539\u4e86Prefab\u7684\u67d0\u9879\u8bbe\u7f6e\uff0c\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u53c8\u6ca1\u6709\u4fee\u6539\u8fc7\u8be5\u9879\u8bbe\u7f6e\uff0c\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u5219\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u4e0ePrefab\u76f8\u540c\u7684\u8bbe\u7f6e\u3002 \u8bfb\u53d6\u8d44\u6e90\u548c\u5b9e\u4f8b\u5316 \u00b6 1 GameObject go = new GameObject(\"Game Object Name\"); \u4f7f\u7528new\u7684\u65b9\u5f0f\u975e\u5e38\u76f4\u63a5\uff0c\u4f46\u5728unity\u4e2d\u53ea\u5141\u8bb8\u5bf9\u4e00\u4e2a\u7a7a\u7684Game Object\u4f7f\u7528\u5173\u952e\u5b57new\u8fdb\u884c\u521b\u5efa\u3002 1 2 3 4 5 6 public GameObject prefab; public GameObject instance; void start(){ instance = Instantiate(prefab); Destroy(instance,0.1f); } \u5728unity\u4e2d\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528c#\u6807\u51c6\u5e93\u4e2d\u7684IO\u51fd\u6570\u8bfb\u53d6unity\u6240\u9700\u7684\u8d44\u6e90\uff0c\u800c\u662f\u5fc5\u987b\u5c06\u8d44\u6e90\u653e\u5165\u540d\u4e3aResources\u7684\u6587\u4ef6\u5939\u4e2d\uff0cunity\u8fd0\u884c\u6709\u591a\u4e2aResource\u6587\u4ef6\u5939\u4e14\u53ef\u4ee5\u5b58\u653e\u5728\u5de5\u7a0b\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 void start(){ GameObject prefab = Resource.Load<GameObject>(\"Player\"); instance = Instantiate(prefab); GameObject go =Resources.Load<GameObject>(\"Prefab\u540d\u79f0\"); Texture texture = Resources.Load<Texture>(\"\u8d34\u56fe\u540d\u79f0\"); } \u65f6\u95f4\u548c\u52a8\u753b \u00b6 \u4efb\u4f55\u548c\u52a8\u753b\u6548\u679c\u76f8\u5173\u7684\u53c2\u6570\uff0c\u6bd4\u5982\u79fb\u52a8\u901f\u5ea6\uff0c\u65cb\u8f6c\u901f\u5ea6\u7b49\uff0c\u5728\u4f7f\u7528\u524d\u90fd\u9700\u8981\u4e0eTime.deltaTime\u76f8\u4e58\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u4e0d\u540c\u5e27\u6570\u4e0b\u53d6\u5f97\u76f8\u5bf9\u4e00\u81f4\u7684\u52a8\u753b\u6548\u679c\u3002 Unity2D\u7cfb\u7edf\u7b80\u4ecb \u00b6 WEB\u670d\u52a1\u5668/tcp/udp \u00b6 IOS/Android\u79fb\u690d \u00b6 UGUI \u00b6 \u5149\u7167\u6e32\u67d3\u7269\u7406\u6750\u8d28\u7b49 \u00b6 \u884c\u4e3a\u6811AI \u00b6 Shader\u7279\u6548 \u00b6 Lua \u00b6 C \u00b6 \u4e00\u4e9b\u6e38\u620f\u7c7b\u578b\u5b9e\u4f8b \u00b6","title":"Unity\u57fa\u7840"},{"location":"unity/unity_base/#unity","text":"","title":"unity\u57fa\u7840"},{"location":"unity/unity_base/#unity_1","text":"Assets \u5305\u542b\u6240\u6709\u7684\u5de5\u7a0b\u6587\u4ef6\uff0c\u662f\u4e3b\u8981\u5de5\u4f5c\u7684\u5730\u65b9 Library \u5de5\u7a0b\u7684\u6570\u636e\u5e93\u6587\u4ef6\uff0c\u53ef\u5220\u9664\u81ea\u52a8\u91cd\u5efa ProjectSettings \u5de5\u7a0b\u7684\u914d\u7f6e\u6587\u4ef6","title":"unity\u5de5\u7a0b\u7ed3\u6784"},{"location":"unity/unity_base/#unity_2","text":"Hierarchy\u5c42\u7ea7 Project\u5de5\u7a0b Inspector\u67e5\u770b Scene\u573a\u666f/Game\u6e38\u620f","title":"unity\u7a97\u53e3"},{"location":"unity/unity_base/#unity_3","text":"1. Game Object\u6700\u57fa\u7840\u7684\u6e38\u620f\u5355\u4f4d\uff0c\u4e00\u4e2a\u6700\u57fa\u672c\u7684Game Object\u4ec5\u5305\u542b\u4e00\u4e2aTransform\u7ec4\u4ef6\uff0c\u7528\u4e8e\u5bf9\u5176\u8fdb\u884c\u4f4d\u79fb\uff0c\u65cb\u8f6c\u548c\u7f29\u653e\u3002 2. MonoBehavior\u662f\u6240\u6709Unity\u811a\u672c\u7684\u57fa\u7c7b\u3002","title":"Unity\u811a\u672c\u57fa\u7840"},{"location":"unity/unity_base/#_1","text":"\u8bb2\u811a\u672c\u6307\u5b9a\u7ed9\u573a\u666f\u4e2d\u7684\u6e38\u620f\u4f53\uff0c\u5c31\u53ef\u5728\u5bf9\u5e94\u6e38\u620f\u4f53\u7684Inspector\u7a97\u53e3\u4e2d\u914d\u7f6e\u811a\u672c\u5b9e\u4f8b\u7684public\u6210\u5458\u53d8\u91cf\u521d\u59cb\u503c\u3002 \u9ed8\u8ba4\u53ea\u6709\u7ee7\u627f\u81eaMonoBehaviour\u7684\u811a\u672c\u624d\u80fd\u5e8f\u5217\u5316\u3002\u5982\u679c\u4e00\u4e2a\u666e\u901ac#\u7c7b\u9700\u8981\u5e8f\u5217\u5316\u9700\u8981\u6dfb\u52a0'[System.Serializable]'\u5c5e\u6027\u3002 unity\u53ea\u80fd\u5e8f\u5217\u5316public\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u4e14\u4e0d\u80fd\u5e8f\u5217\u5316\u5c5e\u6027\u3002","title":"\u811a\u672c\u5e8f\u5217\u5316"},{"location":"unity/unity_base/#_2","text":"\u7ec4\u4ef6\u7684\u83b7\u53d6 1 2 3 4 5 Rigidbody rigid = this . gameObject . GetComponent < Rigidbody >(); if ( rigid == null ) { rigid = this . gameObject . AddComponent < Rigidbody >(); } Unity\u6d88\u606f\u673a\u5236\u5728\u7ec4\u4ef6\u95f4\u901a\u4fe1 SendMessage\u51fd\u6570(\u6548\u7387\u6bd4\u8f83\u4f4e) 1 2 3 4 5 6 7 8 9 10 11 12 //TestScript.cs public class TestScript : MonoBehaviour { void Start (){ this . gameObject . SendMessage ( \"DoSomething\" ); } } //DoSomethingScript.cs public class DoSomethingScript : MonoBeHaviour { public void DoSomething (){ Debug . Log ( \"DoSomething\" ); } } \u7ee7\u627f\u548c\u7ec4\u5408 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 //TestScript.cs public class TestScript : MonoBehaviour { void Start (){ this . gameObject . GetComponent < DoSomethingBase >(). DoSomething (); } } //DoSomethingBase.cs public class DoSomethingBase : MonoBehaviour { public abstract void DoSomething (); } //DoSomethingScript.cs public class DoSomethingScript : DoSomethingBase { public override void DoSomething (){ Debug . Log ( \"DoSomething\" ); } } \u534f\u7a0b\u7f16\u7a0b \u534f\u7a0b\u51fd\u6570\u9700\u8981\u4f7f\u7528\u5173\u952e\u5b57IEnumerator\u5b9a\u4e49\uff0c\u5e76\u4e00\u5b9a\u8981\u4f7f\u7528\u5173\u952e\u5b57yield\u8fd4\u56de\u3002\u534f\u7a0b\u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff0c\u9700\u8981\u4f7f\u7528\u51fd\u6570StartCoroutine\u5c06\u534f\u7a0b\u51fd\u6570\u4f5c\u4e3a\u53c2\u6570\u4f20\u5165\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System.Collections ; using UnityEngine ; public class CoroTest : MonoBehaviour { void start (){ Coroutine coro = StartCoroutine ( DoSomethingDelay ( 1.5f )); StartCoroutine ( RunLoop ()); } } IEnumerator DoSomethingDelay ( float sec ){ yield return new WaitForSeconds ( sec ); Debug . log ( \"xxx\" ); yield return new WaitForSeconds ( sec ); StartCoroutine ( DoSomethingDelay ( 1.5f )); } IEnumeraator RunLoop (){ while ( ture ){ Debug . log ( \"xxx\" ); yield return 0 ; } }","title":"\u7ec4\u4ef6\u5f0f\u7f16\u7a0b"},{"location":"unity/unity_base/#prefab","text":"\u5f53\u5728\u573a\u666f\u4e2d\u5b8c\u6210\u5bf9Game Object\u7684\u914d\u7f6e\u540e\uff0c\u5c06\u5176\u62d6\u52a8\u5230Object\u7a97\u53e3\u4e2d\u5373\u521b\u5efa\u4e86Prefab\u3002 1. \u5220\u9664\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u4e0d\u4f1a\u5f71\u54cd\u5230Project\u7a97\u53e3\u4e2d\u7684Prefab\u3002 2. \u5982\u679c\u4fee\u6539\u4e86\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\uff0c\u9009\u62e9Inspector\u7a97\u53e3\u53f3\u4e0a\u89d2\u7684Prefab->apple,Project\u7a97\u53e3\u4e2d\u4fdd\u5b58\u7684prefab\u5219\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u8be5\u4fee\u6539\u7684\u7ed3\u679c\u3002 3. \u5982\u679c\u4fee\u6539\u4e86\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\uff0c\u9009\u62e9Inspector\u7a97\u53e3\u53f3\u4e0a\u89d2\u7684Prefab->Revert,\u5219\u4f1a\u8fd4\u56de\u5230Prefab\u7684\u8bbe\u7f6e\u4e2d\u3002 4. \u5982\u679c\u4fee\u6539\u4e86Prefab\u7684\u67d0\u9879\u8bbe\u7f6e\uff0c\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u53c8\u6ca1\u6709\u4fee\u6539\u8fc7\u8be5\u9879\u8bbe\u7f6e\uff0c\u573a\u666f\u4e2d\u7684\u5b9e\u4f8b\u5219\u4f1a\u81ea\u52a8\u540c\u6b65\u5230\u4e0ePrefab\u76f8\u540c\u7684\u8bbe\u7f6e\u3002","title":"\u9884\u7f6e\u6587\u4ef6Prefab\u548c\u8d44\u6e90\u7ba1\u7406"},{"location":"unity/unity_base/#_3","text":"1 GameObject go = new GameObject(\"Game Object Name\"); \u4f7f\u7528new\u7684\u65b9\u5f0f\u975e\u5e38\u76f4\u63a5\uff0c\u4f46\u5728unity\u4e2d\u53ea\u5141\u8bb8\u5bf9\u4e00\u4e2a\u7a7a\u7684Game Object\u4f7f\u7528\u5173\u952e\u5b57new\u8fdb\u884c\u521b\u5efa\u3002 1 2 3 4 5 6 public GameObject prefab; public GameObject instance; void start(){ instance = Instantiate(prefab); Destroy(instance,0.1f); } \u5728unity\u4e2d\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528c#\u6807\u51c6\u5e93\u4e2d\u7684IO\u51fd\u6570\u8bfb\u53d6unity\u6240\u9700\u7684\u8d44\u6e90\uff0c\u800c\u662f\u5fc5\u987b\u5c06\u8d44\u6e90\u653e\u5165\u540d\u4e3aResources\u7684\u6587\u4ef6\u5939\u4e2d\uff0cunity\u8fd0\u884c\u6709\u591a\u4e2aResource\u6587\u4ef6\u5939\u4e14\u53ef\u4ee5\u5b58\u653e\u5728\u5de5\u7a0b\u4e2d\u7684\u4e0d\u540c\u4f4d\u7f6e\u3002 1 2 3 4 5 6 7 void start(){ GameObject prefab = Resource.Load<GameObject>(\"Player\"); instance = Instantiate(prefab); GameObject go =Resources.Load<GameObject>(\"Prefab\u540d\u79f0\"); Texture texture = Resources.Load<Texture>(\"\u8d34\u56fe\u540d\u79f0\"); }","title":"\u8bfb\u53d6\u8d44\u6e90\u548c\u5b9e\u4f8b\u5316"},{"location":"unity/unity_base/#_4","text":"\u4efb\u4f55\u548c\u52a8\u753b\u6548\u679c\u76f8\u5173\u7684\u53c2\u6570\uff0c\u6bd4\u5982\u79fb\u52a8\u901f\u5ea6\uff0c\u65cb\u8f6c\u901f\u5ea6\u7b49\uff0c\u5728\u4f7f\u7528\u524d\u90fd\u9700\u8981\u4e0eTime.deltaTime\u76f8\u4e58\uff0c\u624d\u80fd\u4fdd\u8bc1\u5728\u4e0d\u540c\u5e27\u6570\u4e0b\u53d6\u5f97\u76f8\u5bf9\u4e00\u81f4\u7684\u52a8\u753b\u6548\u679c\u3002","title":"\u65f6\u95f4\u548c\u52a8\u753b"},{"location":"unity/unity_base/#unity2d","text":"","title":"Unity2D\u7cfb\u7edf\u7b80\u4ecb"},{"location":"unity/unity_base/#webtcpudp","text":"","title":"WEB\u670d\u52a1\u5668/tcp/udp"},{"location":"unity/unity_base/#iosandroid","text":"","title":"IOS/Android\u79fb\u690d"},{"location":"unity/unity_base/#ugui","text":"","title":"UGUI"},{"location":"unity/unity_base/#_5","text":"","title":"\u5149\u7167\u6e32\u67d3\u7269\u7406\u6750\u8d28\u7b49"},{"location":"unity/unity_base/#ai","text":"","title":"\u884c\u4e3a\u6811AI"},{"location":"unity/unity_base/#shader","text":"","title":"Shader\u7279\u6548"},{"location":"unity/unity_base/#lua","text":"","title":"Lua"},{"location":"unity/unity_base/#c","text":"","title":"C"},{"location":"unity/unity_base/#_6","text":"","title":"\u4e00\u4e9b\u6e38\u620f\u7c7b\u578b\u5b9e\u4f8b"},{"location":"unity/unity_shader/","text":"\u7a0b\u5e8f\u5458\u7684\u4e09\u5927\u6d6a\u6f2b \u00b6 \u7f16\u8bd1\u539f\u7406\uff0c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u56fe\u5f62\u5b66->\u5916\u8c8c\u534f\u4f1a \u6e32\u67d3\u6d41\u6c34\u7ebf \u00b6 \u6982\u5ff5\u6d41\u6c34\u7ebf\uff1a\u5e94\u7528\u9636\u6bb5\uff0c\u51e0\u4f55\u9636\u6bb5\uff0c\u5149\u6805\u5316\u9636\u6bb5 \u6570\u5b66 \u00b6 \u77e2\u91cf->\u6709\u5927\u5c0f(\u6a21)\u548c\u65b9\u5411\u7684\u6709\u5411\u7ebf\u6bb5\uff0c\u76f8\u5bf9\u91cf \u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u53ef\u4ee5\u8868\u793a\u6210 \u4e00\u4e2a\u4ece\u539f\u70b9\u51fa\u53d1\u7684\u77e2\u91cf\u3002 \u5355\u4f4d\u77e2\u91cf->\u6a21\u4e3a\u4e00\u7684\u77e2\u91cf","title":"Shader"},{"location":"unity/unity_shader/#_1","text":"\u7f16\u8bd1\u539f\u7406\uff0c\u64cd\u4f5c\u7cfb\u7edf\uff0c\u56fe\u5f62\u5b66->\u5916\u8c8c\u534f\u4f1a","title":"\u7a0b\u5e8f\u5458\u7684\u4e09\u5927\u6d6a\u6f2b"},{"location":"unity/unity_shader/#_2","text":"\u6982\u5ff5\u6d41\u6c34\u7ebf\uff1a\u5e94\u7528\u9636\u6bb5\uff0c\u51e0\u4f55\u9636\u6bb5\uff0c\u5149\u6805\u5316\u9636\u6bb5","title":"\u6e32\u67d3\u6d41\u6c34\u7ebf"},{"location":"unity/unity_shader/#_3","text":"\u77e2\u91cf->\u6709\u5927\u5c0f(\u6a21)\u548c\u65b9\u5411\u7684\u6709\u5411\u7ebf\u6bb5\uff0c\u76f8\u5bf9\u91cf \u4efb\u4f55\u4e00\u4e2a\u70b9\u90fd\u53ef\u4ee5\u8868\u793a\u6210 \u4e00\u4e2a\u4ece\u539f\u70b9\u51fa\u53d1\u7684\u77e2\u91cf\u3002 \u5355\u4f4d\u77e2\u91cf->\u6a21\u4e3a\u4e00\u7684\u77e2\u91cf","title":"\u6570\u5b66"}]}